{
    "classes": [
        {
            "name": "java.util.WeakHashMap",
            "interfaces": [
                "java.util.Map"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "Hash table based implementation of the <tt>Map</tt> interface, with\n <em>weak keys</em>.\n An entry in a <tt>WeakHashMap</tt> will automatically be removed when\n its key is no longer in ordinary use.  More precisely, the presence of a\n mapping for a given key will not prevent the key from being discarded by the\n garbage collector, that is, made finalizable, finalized, and then reclaimed.\n When a key has been discarded its entry is effectively removed from the map,\n so this class behaves somewhat differently from other <tt>Map</tt>\n implementations.\n\n <p> Both null values and the null key are supported. This class has\n performance characteristics similar to those of the <tt>HashMap</tt>\n class, and has the same efficiency parameters of <em>initial capacity</em>\n and <em>load factor</em>.\n\n <p> Like most collection classes, this class is not synchronized.\n A synchronized <tt>WeakHashMap</tt> may be constructed using the\n {@link Collections#synchronizedMap Collections.synchronizedMap}\n method.\n\n <p> This class is intended primarily for use with key objects whose\n <tt>equals</tt> methods test for object identity using the\n <tt>==</tt> operator.  Once such a key is discarded it can never be\n recreated, so it is impossible to do a lookup of that key in a\n <tt>WeakHashMap</tt> at some later time and be surprised that its entry\n has been removed.  This class will work perfectly well with key objects\n whose <tt>equals</tt> methods are not based upon object identity, such\n as <tt>String</tt> instances.  With such recreatable key objects,\n however, the automatic removal of <tt>WeakHashMap</tt> entries whose\n keys have been discarded may prove to be confusing.\n\n <p> The behavior of the <tt>WeakHashMap</tt> class depends in part upon\n the actions of the garbage collector, so several familiar (though not\n required) <tt>Map</tt> invariants do not hold for this class.  Because\n the garbage collector may discard keys at any time, a\n <tt>WeakHashMap</tt> may behave as though an unknown thread is silently\n removing entries.  In particular, even if you synchronize on a\n <tt>WeakHashMap</tt> instance and invoke none of its mutator methods, it\n is possible for the <tt>size</tt> method to return smaller values over\n time, for the <tt>isEmpty</tt> method to return <tt>false</tt> and\n then <tt>true</tt>, for the <tt>containsKey</tt> method to return\n <tt>true</tt> and later <tt>false</tt> for a given key, for the\n <tt>get</tt> method to return a value for a given key but later return\n <tt>null</tt>, for the <tt>put</tt> method to return\n <tt>null</tt> and the <tt>remove</tt> method to return\n <tt>false</tt> for a key that previously appeared to be in the map, and\n for successive examinations of the key set, the value collection, and\n the entry set to yield successively smaller numbers of elements.\n\n <p> Each key object in a <tt>WeakHashMap</tt> is stored indirectly as\n the referent of a weak reference.  Therefore a key will automatically be\n removed only after the weak references to it, both inside and outside of the\n map, have been cleared by the garbage collector.\n\n <p> <strong>Implementation note:</strong> The value objects in a\n <tt>WeakHashMap</tt> are held by ordinary strong references.  Thus care\n should be taken to ensure that value objects do not strongly refer to their\n own keys, either directly or indirectly, since that will prevent the keys\n from being discarded.  Note that a value object may refer indirectly to its\n key via the <tt>WeakHashMap</tt> itself; that is, a value object may\n strongly refer to some other key object whose associated value object, in\n turn, strongly refers to the key of the first value object.  If the values\n in the map do not rely on the map holding strong references to them, one way\n to deal with this is to wrap values themselves within\n <tt>WeakReferences</tt> before\n inserting, as in: <tt>m.put(key, new WeakReference(value))</tt>,\n and then unwrapping upon each <tt>get</tt>.\n\n <p>The iterators returned by the <tt>iterator</tt> method of the collections\n returned by all of this class's \"collection view methods\" are\n <i>fail-fast</i>: if the map is structurally modified at any time after the\n iterator is created, in any way except through the iterator's own\n <tt>remove</tt> method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.HashMap",
                "java.lang.ref.WeakReference"
            ],
            "constructors": [
                {
                    "name": "WeakHashMap",
                    "comment_text": "Constructs a new, empty <tt>WeakHashMap</tt> with the given initial\n capacity and the given load factor.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "The initial capacity of the <tt>WeakHashMap</tt>",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "The load factor of the <tt>WeakHashMap</tt>",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "WeakHashMap",
                    "comment_text": "Constructs a new, empty <tt>WeakHashMap</tt> with the given initial\n capacity and the default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "The initial capacity of the <tt>WeakHashMap</tt>",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "WeakHashMap",
                    "comment_text": "Constructs a new, empty <tt>WeakHashMap</tt> with the default initial\n capacity (16) and load factor (0.75).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "WeakHashMap",
                    "comment_text": "Constructs a new <tt>WeakHashMap</tt> with the same mappings as the\n specified map.  The <tt>WeakHashMap</tt> is created with the default\n load factor (0.75) and an initial capacity sufficient to hold the\n mappings in the specified map.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map whose mappings are to be placed in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this map contains no key-value mappings.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns <tt>true</tt> if this map contains a mapping for the\n specified key.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "The key whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for this key, the old\n value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated.",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for any\n of the keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "mappings to be stored in this map.",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for a key from this weak hash map if it is present.\n More formally, if this map contains a mapping from key <tt>k</tt> to\n value <tt>v</tt> such that <code>(key==null ?  k==null :\n key.equals(k))</code>, that mapping is removed.  (The map can contain\n at most one such mapping.)\n\n <p>Returns the value to which this map previously associated the key,\n or <tt>null</tt> if the map contained no mapping for the key.  A\n return value of <tt>null</tt> does not <i>necessarily</i> indicate\n that the map contained no mapping for the key; it's also possible\n that the map explicitly mapped the key to <tt>null</tt>.\n\n <p>The map will not contain a mapping for the specified key once the\n call returns.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose mapping is to be removed from the map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.\n The map will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>\n operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own <tt>remove</tt> operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation, or through the\n <tt>setValue</tt> operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and\n <tt>clear</tt> operations.  It does not support the\n <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Vector",
            "interfaces": [
                "java.util.List",
                "java.util.RandomAccess",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractList",
            "comment_text": "The {@code Vector} class implements a growable array of\n objects. Like an array, it contains components that can be\n accessed using an integer index. However, the size of a\n {@code Vector} can grow or shrink as needed to accommodate\n adding and removing items after the {@code Vector} has been created.\n\n <p>Each vector tries to optimize storage management by maintaining a\n {@code capacity} and a {@code capacityIncrement}. The\n {@code capacity} is always at least as large as the vector\n size; it is usually larger because as components are added to the\n vector, the vector's storage increases in chunks the size of\n {@code capacityIncrement}. An application can increase the\n capacity of a vector before inserting a large number of\n components; this reduces the amount of incremental reallocation.\n\n <p><a name=\"fail-fast\"/>\n The iterators returned by this class's {@link #iterator() iterator} and\n {@link #listIterator(int) listIterator} methods are <em>fail-fast</em>:\n if the vector is structurally modified at any time after the iterator is\n created, in any way except through the iterator's own\n {@link ListIterator#remove() remove} or\n {@link ListIterator#add(Object) add} methods, the iterator will throw a\n {@link ConcurrentModificationException}.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.  The {@link Enumeration Enumerations} returned by\n the {@link #elements() elements} method are <em>not</em> fail-fast.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>As of the Java 2 platform v1.2, this class was retrofitted to\n implement the {@link List} interface, making it a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.  Unlike the new collection\n implementations, {@code Vector} is synchronized.  If a thread-safe\n implementation is not needed, it is recommended to use {@link\n ArrayList} in place of {@code Vector}.",
            "since": "JDK1.0",
            "see": [
                "java.util.Collection",
                "java.util.LinkedList"
            ],
            "constructors": [
                {
                    "name": "Vector",
                    "comment_text": "Constructs an empty vector with the specified initial capacity and\n capacity increment.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the vector",
                            "type": "int"
                        },
                        {
                            "name": "capacityIncrement",
                            "comment_text": "the amount by which the capacity is\n                              increased when the vector overflows",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Vector",
                    "comment_text": "Constructs an empty vector with the specified initial capacity and\n with its capacity increment equal to zero.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the vector",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Vector",
                    "comment_text": "Constructs an empty vector so that its internal data array\n has size {@code 10} and its standard capacity increment is\n zero.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Vector",
                    "comment_text": "Constructs a vector containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed into this\n       vector",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "elementData",
                    "comment_text": "The array buffer into which the components of the vector are\n stored. The capacity of the vector is the length of this array buffer,\n and is at least large enough to contain all the vector's elements.\n\n <p>Any array elements following the last element in the Vector are null.",
                    "type": "java.lang.Object"
                },
                {
                    "name": "elementCount",
                    "comment_text": "The number of valid components in this {@code Vector} object.\n Components {@code elementData[0]} through\n {@code elementData[elementCount-1]} are the actual items.",
                    "type": "int"
                },
                {
                    "name": "capacityIncrement",
                    "comment_text": "The amount by which the capacity of the vector is automatically\n incremented when its size becomes greater than its capacity.  If\n the capacity increment is less than or equal to zero, the capacity\n of the vector is doubled each time it needs to grow.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "copyInto",
                    "comment_text": "Copies the components of this vector into the specified array.\n The item at index {@code k} in this vector is copied into\n component {@code k} of {@code anArray}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "anArray",
                            "comment_text": "the array into which the components get copied",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "trimToSize",
                    "comment_text": "Trims the capacity of this vector to be the vector's current\n size. If the capacity of this vector is larger than its current\n size, then the capacity is changed to equal the size by replacing\n its internal data array, kept in the field {@code elementData},\n with a smaller one. An application can use this operation to\n minimize the storage of a vector.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ensureCapacity",
                    "comment_text": "Increases the capacity of this vector, if necessary, to ensure\n that it can hold at least the number of components specified by\n the minimum capacity argument.\n\n <p>If the current capacity of this vector is less than\n {@code minCapacity}, then its capacity is increased by replacing its\n internal data array, kept in the field {@code elementData}, with a\n larger one.  The size of the new data array will be the old size plus\n {@code capacityIncrement}, unless the value of\n {@code capacityIncrement} is less than or equal to zero, in which case\n the new capacity will be twice the old capacity; but if this new size\n is still smaller than {@code minCapacity}, then the new capacity will\n be {@code minCapacity}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "minCapacity",
                            "comment_text": "the desired minimum capacity",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSize",
                    "comment_text": "Sets the size of this vector. If the new size is greater than the\n current size, new {@code null} items are added to the end of\n the vector. If the new size is less than the current size, all\n components at index {@code newSize} and greater are discarded.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newSize",
                            "comment_text": "the new size of this vector",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "capacity",
                    "comment_text": "Returns the current capacity of this vector.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of components in this vector.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Tests if this vector has no components.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "elements",
                    "comment_text": "Returns an enumeration of the components of this vector. The\n returned {@code Enumeration} object will generate all items in\n this vector. The first item generated is the item at index {@code 0},\n then the item at index {@code 1}, and so on.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this vector contains the specified element.\n More formally, returns {@code true} if and only if this vector\n contains at least one element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this vector is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "Returns the index of the first occurrence of the specified element\n in this vector, or -1 if this vector does not contain the element.\n More formally, returns the lowest index {@code i} such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "Returns the index of the first occurrence of the specified element in\n this vector, searching forwards from {@code index}, or returns -1 if\n the element is not found.\n More formally, returns the lowest index {@code i} such that\n <tt>(i&nbsp;&gt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "index",
                            "comment_text": "index to start searching from",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "Returns the index of the last occurrence of the specified element\n in this vector, or -1 if this vector does not contain the element.\n More formally, returns the highest index {@code i} such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "Returns the index of the last occurrence of the specified element in\n this vector, searching backwards from {@code index}, or returns -1 if\n the element is not found.\n More formally, returns the highest index {@code i} such that\n <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "index",
                            "comment_text": "index to start searching backwards from",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "elementAt",
                    "comment_text": "Returns the component at the specified index.\n\n <p>This method is identical in functionality to the {@link #get(int)}\n method (which is part of the {@link List} interface).",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "an index into this vector",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstElement",
                    "comment_text": "Returns the first component (the item at index {@code 0}) of\n this vector.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastElement",
                    "comment_text": "Returns the last component of the vector.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setElementAt",
                    "comment_text": "Sets the component at the specified {@code index} of this\n vector to be the specified object. The previous component at that\n position is discarded.\n\n <p>The index must be a value greater than or equal to {@code 0}\n and less than the current size of the vector.\n\n <p>This method is identical in functionality to the\n {@link #set(int, Object) set(int, E)}\n method (which is part of the {@link List} interface). Note that the\n {@code set} method reverses the order of the parameters, to more closely\n match array usage.  Note also that the {@code set} method returns the\n old value that was stored at the specified position.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "what the component is to be set to",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "index",
                            "comment_text": "the specified index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeElementAt",
                    "comment_text": "Deletes the component at the specified index. Each component in\n this vector with an index greater or equal to the specified\n {@code index} is shifted downward to have an index one\n smaller than the value it had previously. The size of this vector\n is decreased by {@code 1}.\n\n <p>The index must be a value greater than or equal to {@code 0}\n and less than the current size of the vector.\n\n <p>This method is identical in functionality to the {@link #remove(int)}\n method (which is part of the {@link List} interface).  Note that the\n {@code remove} method returns the old value that was stored at the\n specified position.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "the index of the object to remove",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "insertElementAt",
                    "comment_text": "Inserts the specified object as a component in this vector at the\n specified {@code index}. Each component in this vector with\n an index greater or equal to the specified {@code index} is\n shifted upward to have an index one greater than the value it had\n previously.\n\n <p>The index must be a value greater than or equal to {@code 0}\n and less than or equal to the current size of the vector. (If the\n index is equal to the current size of the vector, the new element\n is appended to the Vector.)\n\n <p>This method is identical in functionality to the\n {@link #add(int, Object) add(int, E)}\n method (which is part of the {@link List} interface).  Note that the\n {@code add} method reverses the order of the parameters, to more closely\n match array usage.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the component to insert",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "index",
                            "comment_text": "where to insert the new component",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addElement",
                    "comment_text": "Adds the specified component to the end of this vector,\n increasing its size by one. The capacity of this vector is\n increased if its size becomes greater than its capacity.\n\n <p>This method is identical in functionality to the\n {@link #add(Object) add(E)}\n method (which is part of the {@link List} interface).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the component to be added",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeElement",
                    "comment_text": "Removes the first (lowest-indexed) occurrence of the argument\n from this vector. If the object is found in this vector, each\n component in the vector with an index greater or equal to the\n object's index is shifted downward to have an index one smaller\n than the value it had previously.\n\n <p>This method is identical in functionality to the\n {@link #remove(Object)} method (which is part of the\n {@link List} interface).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the component to be removed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAllElements",
                    "comment_text": "Removes all components from this vector and sets its size to zero.\n\n <p>This method is identical in functionality to the {@link #clear}\n method (which is part of the {@link List} interface).",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a clone of this vector. The copy will contain a\n reference to a clone of the internal data array, not a reference\n to the original internal data array of this {@code Vector} object.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this Vector\n in the correct order.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this Vector in the\n correct order; the runtime type of the returned array is that of the\n specified array.  If the Vector fits in the specified array, it is\n returned therein.  Otherwise, a new array is allocated with the runtime\n type of the specified array and the size of this Vector.\n\n <p>If the Vector fits in the specified array with room to spare\n (i.e., the array has more elements than the Vector),\n the element in the array immediately following the end of the\n Vector is set to null.  (This is useful in determining the length\n of the Vector <em>only</em> if the caller knows that the Vector\n does not contain any null elements.)",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the Vector are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the element at the specified position in this Vector.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to return",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the element at the specified position in this Vector with the\n specified element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to replace",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be stored at the specified position",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Appends the specified element to the end of this Vector.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be appended to this Vector",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element in this Vector\n If the Vector does not contain the element, it is unchanged.  More\n formally, removes the element with the lowest index i such that\n {@code (o==null ? get(i)==null : o.equals(get(i)))} (if such\n an element exists).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this Vector, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the specified position in this Vector.\n Shifts the element currently at that position (if any) and any\n subsequent elements to the right (adds one to their indices).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which the specified element is to be inserted",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be inserted",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the element at the specified position in this Vector.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the Vector.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "the index of the element to be removed",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this Vector.  The Vector will\n be empty after this call returns (unless it throws an exception).",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns true if this Vector contains all of the elements in the\n specified Collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "a collection whose elements will be tested for containment\n          in this Vector",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified Collection to the end of\n this Vector, in the order that they are returned by the specified\n Collection's Iterator.  The behavior of this operation is undefined if\n the specified Collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified Collection is this Vector, and this Vector is nonempty.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "elements to be inserted into this Vector",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this Vector all of its elements that are contained in the\n specified Collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "a collection of elements to be removed from the Vector",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this Vector that are contained in the\n specified Collection.  In other words, removes from this Vector all\n of its elements that are not contained in the specified Collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "a collection of elements to be retained in this Vector\n          (all other elements are removed)",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Inserts all of the elements in the specified Collection into this\n Vector at the specified position.  Shifts the element currently at\n that position (if any) and any subsequent elements to the right\n (increases their indices).  The new elements will appear in the Vector\n in the order that they are returned by the specified Collection's\n iterator.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which to insert the first element from the\n              specified collection",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "elements to be inserted into this Vector",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified Object with this Vector for equality.  Returns\n true if and only if the specified Object is also a List, both Lists\n have the same size, and all corresponding pairs of elements in the two\n Lists are <em>equal</em>.  (Two elements {@code e1} and\n {@code e2} are <em>equal</em> if {@code (e1==null ? e2==null :\n e1.equals(e2))}.)  In other words, two Lists are defined to be\n equal if they contain the same elements in the same order.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the Object to be compared for equality with this Vector",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this Vector.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this Vector, containing\n the String representation of each element.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subList",
                    "comment_text": "Returns a view of the portion of this List between fromIndex,\n inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are\n equal, the returned List is empty.)  The returned List is backed by this\n List, so changes in the returned List are reflected in this List, and\n vice-versa.  The returned List supports all of the optional List\n operations supported by this List.\n\n <p>This method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a List can be used as a range operation by operating on a subList view\n instead of a whole List.  For example, the following idiom\n removes a range of elements from a List:\n <pre>\n      list.subList(from, to).clear();\n </pre>\n Similar idioms may be constructed for indexOf and lastIndexOf,\n and all of the algorithms in the Collections class can be applied to\n a subList.\n\n <p>The semantics of the List returned by this method become undefined if\n the backing list (i.e., this List) is <i>structurally modified</i> in\n any way other than via the returned List.  (Structural modifications are\n those that change the size of the List, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "low endpoint (inclusive) of the subList",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "high endpoint (exclusive) of the subList",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeRange",
                    "comment_text": "Removes from this list all of the elements whose index is between\n {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n Shifts any succeeding elements to the left (reduces their index).\n This call shortens the list by {@code (toIndex - fromIndex)} elements.\n (If {@code toIndex==fromIndex}, this operation has no effect.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to {@link ListIterator#next next}.\n An initial call to {@link ListIterator#previous previous} would\n return the element with the specified index minus one.\n\n <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence).\n\n <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this list in proper sequence.\n\n <p>The returned iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.UnknownFormatFlagsException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when an unknown flag is given.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "UnknownFormatFlagsException",
                    "comment_text": "Constructs an instance of this class with the specified flags.",
                    "parameters": [
                        {
                            "name": "f",
                            "comment_text": "The set of format flags which contain an unknown flag",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFlags",
                    "comment_text": "Returns the set of flags which contains an unknown flag.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.UnknownFormatConversionException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when an unknown conversion is given.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to\n any method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "UnknownFormatConversionException",
                    "comment_text": "Constructs an instance of this class with the unknown conversion.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "Unknown conversion",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getConversion",
                    "comment_text": "Returns the unknown conversion.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.UUID",
            "interfaces": [
                "java.io.Serializable",
                "java.lang.Comparable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A class that represents an immutable universally unique identifier (UUID).\n A UUID represents a 128-bit value.\n\n <p> There exist different variants of these global identifiers.  The methods\n of this class are for manipulating the Leach-Salz variant, although the\n constructors allow the creation of any variant of UUID (described below).\n\n <p> The layout of a variant 2 (Leach-Salz) UUID is as follows:\n\n The most significant long consists of the following unsigned fields:\n <pre>\n 0xFFFFFFFF00000000 time_low\n 0x00000000FFFF0000 time_mid\n 0x000000000000F000 version\n 0x0000000000000FFF time_hi\n </pre>\n The least significant long consists of the following unsigned fields:\n <pre>\n 0xC000000000000000 variant\n 0x3FFF000000000000 clock_seq\n 0x0000FFFFFFFFFFFF node\n </pre>\n\n <p> The variant field contains a value which identifies the layout of the\n {@code UUID}.  The bit layout described above is valid only for a {@code\n UUID} with a variant value of 2, which indicates the Leach-Salz variant.\n\n <p> The version field holds a value that describes the type of this {@code\n UUID}.  There are four different basic types of UUIDs: time-based, DCE\n security, name-based, and randomly generated UUIDs.  These types have a\n version value of 1, 2, 3 and 4, respectively.\n\n <p> For more information including algorithms used to create {@code UUID}s,\n see <a href=\"http://www.ietf.org/rfc/rfc4122.txt\"> <i>RFC&nbsp;4122: A\n Universally Unique IDentifier (UUID) URN Namespace</i></a>, section 4.2\n &quot;Algorithms for Creating a Time-Based UUID&quot;.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "UUID",
                    "comment_text": "Constructs a new {@code UUID} using the specified data.  {@code\n mostSigBits} is used for the most significant 64 bits of the {@code\n UUID} and {@code leastSigBits} becomes the least significant 64 bits of\n the {@code UUID}.",
                    "parameters": [
                        {
                            "name": "mostSigBits",
                            "comment_text": "The most significant bits of the {@code UUID}",
                            "type": "long"
                        },
                        {
                            "name": "leastSigBits",
                            "comment_text": "The least significant bits of the {@code UUID}",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "randomUUID",
                    "comment_text": "Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n\n The {@code UUID} is generated using a cryptographically strong pseudo\n random number generator.",
                    "return_type": "java.util.UUID",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nameUUIDFromBytes",
                    "comment_text": "Static factory to retrieve a type 3 (name based) {@code UUID} based on\n the specified byte array.",
                    "return_type": "java.util.UUID",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "A byte array to be used to construct a {@code UUID}",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fromString",
                    "comment_text": "Creates a {@code UUID} from the string standard representation as\n described in the {@link #toString} method.",
                    "return_type": "java.util.UUID",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "A string that specifies a {@code UUID}",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLeastSignificantBits",
                    "comment_text": "Returns the least significant 64 bits of this UUID's 128 bit value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMostSignificantBits",
                    "comment_text": "Returns the most significant 64 bits of this UUID's 128 bit value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "version",
                    "comment_text": "The version number associated with this {@code UUID}.  The version\n number describes how this {@code UUID} was generated.\n\n The version number has the following meaning:\n <p><ul>\n <li>1    Time-based UUID\n <li>2    DCE security UUID\n <li>3    Name-based UUID\n <li>4    Randomly generated UUID\n </ul>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "variant",
                    "comment_text": "The variant number associated with this {@code UUID}.  The variant\n number describes the layout of the {@code UUID}.\n\n The variant number has the following meaning:\n <p><ul>\n <li>0    Reserved for NCS backward compatibility\n <li>2    <a href=\"http://www.ietf.org/rfc/rfc4122.txt\">IETF&nbsp;RFC&nbsp;4122</a>\n (Leach-Salz), used by this class\n <li>6    Reserved, Microsoft Corporation backward compatibility\n <li>7    Reserved for future definition\n </ul>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "timestamp",
                    "comment_text": "The timestamp value associated with this UUID.\n\n <p> The 60 bit timestamp value is constructed from the time_low,\n time_mid, and time_hi fields of this {@code UUID}.  The resulting\n timestamp is measured in 100-nanosecond units since midnight,\n October 15, 1582 UTC.\n\n <p> The timestamp value is only meaningful in a time-based UUID, which\n has version type 1.  If this {@code UUID} is not a time-based UUID then\n this method throws UnsupportedOperationException.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clockSequence",
                    "comment_text": "The clock sequence value associated with this UUID.\n\n <p> The 14 bit clock sequence value is constructed from the clock\n sequence field of this UUID.  The clock sequence field is used to\n guarantee temporal uniqueness in a time-based UUID.\n\n <p> The {@code clockSequence} value is only meaningful in a time-based\n UUID, which has version type 1.  If this UUID is not a time-based UUID\n then this method throws UnsupportedOperationException.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "node",
                    "comment_text": "The node value associated with this UUID.\n\n <p> The 48 bit node value is constructed from the node field of this\n UUID.  This field is intended to hold the IEEE 802 address of the machine\n that generated this UUID to guarantee spatial uniqueness.\n\n <p> The node value is only meaningful in a time-based UUID, which has\n version type 1.  If this UUID is not a time-based UUID then this method\n throws UnsupportedOperationException.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a {@code String} object representing this {@code UUID}.\n\n <p> The UUID string representation is as described by this BNF:\n <blockquote><pre>\n {@code\n UUID                   = <time_low> \"-\" <time_mid> \"-\"\n                          <time_high_and_version> \"-\"\n                          <variant_and_sequence> \"-\"\n                          <node>\n time_low               = 4*<hexOctet>\n time_mid               = 2*<hexOctet>\n time_high_and_version  = 2*<hexOctet>\n variant_and_sequence   = 2*<hexOctet>\n node                   = 6*<hexOctet>\n hexOctet               = <hexDigit><hexDigit>\n hexDigit               =\n       \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n       | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n       | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n }</pre></blockquote>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code for this {@code UUID}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares this object to the specified object.  The result is {@code\n true} if and only if the argument is not {@code null}, is a {@code UUID}\n object, has the same variant, and contains the same value, bit for bit,\n as this {@code UUID}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "The object to be compared",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareTo",
                    "comment_text": "Compares this UUID with the specified UUID.\n\n <p> The first of two UUIDs is greater than the second if the most\n significant field in which the UUIDs differ is greater for the first\n UUID.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "val",
                            "comment_text": "{@code UUID} to which this {@code UUID} is to be compared",
                            "type": "java.util.UUID"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.TreeSet",
            "interfaces": [
                "java.util.NavigableSet",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractSet",
            "comment_text": "A {@link NavigableSet} implementation based on a {@link TreeMap}.\n The elements are ordered using their {@linkplain Comparable natural\n ordering}, or by a {@link Comparator} provided at set creation\n time, depending on which constructor is used.\n\n <p>This implementation provides guaranteed log(n) time cost for the basic\n operations ({@code add}, {@code remove} and {@code contains}).\n\n <p>Note that the ordering maintained by a set (whether or not an explicit\n comparator is provided) must be <i>consistent with equals</i> if it is to\n correctly implement the {@code Set} interface.  (See {@code Comparable}\n or {@code Comparator} for a precise definition of <i>consistent with\n equals</i>.)  This is so because the {@code Set} interface is defined in\n terms of the {@code equals} operation, but a {@code TreeSet} instance\n performs all element comparisons using its {@code compareTo} (or\n {@code compare}) method, so two elements that are deemed equal by this method\n are, from the standpoint of the set, equal.  The behavior of a set\n <i>is</i> well-defined even if its ordering is inconsistent with equals; it\n just fails to obey the general contract of the {@code Set} interface.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a tree set concurrently, and at least one\n of the threads modifies the set, it <i>must</i> be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the set.\n If no such object exists, the set should be \"wrapped\" using the\n {@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set: <pre>\n   SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));</pre>\n\n <p>The iterators returned by this class's {@code iterator} method are\n <i>fail-fast</i>: if the set is modified at any time after the iterator is\n created, in any way except through the iterator's own {@code remove}\n method, the iterator will throw a {@link ConcurrentModificationException}.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.Set",
                "java.util.HashSet",
                "java.lang.Comparable",
                "java.util.Comparator",
                "java.util.TreeMap"
            ],
            "constructors": [
                {
                    "name": "TreeSet",
                    "comment_text": "Constructs a new, empty tree set, sorted according to the\n natural ordering of its elements.  All elements inserted into\n the set must implement the {@link Comparable} interface.\n Furthermore, all such elements must be <i>mutually\n comparable</i>: {@code e1.compareTo(e2)} must not throw a\n {@code ClassCastException} for any elements {@code e1} and\n {@code e2} in the set.  If the user attempts to add an element\n to the set that violates this constraint (for example, the user\n attempts to add a string element to a set whose elements are\n integers), the {@code add} call will throw a\n {@code ClassCastException}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TreeSet",
                    "comment_text": "Constructs a new, empty tree set, sorted according to the specified\n comparator.  All elements inserted into the set must be <i>mutually\n comparable</i> by the specified comparator: {@code comparator.compare(e1,\n e2)} must not throw a {@code ClassCastException} for any elements\n {@code e1} and {@code e2} in the set.  If the user attempts to add\n an element to the set that violates this constraint, the\n {@code add} call will throw a {@code ClassCastException}.",
                    "parameters": [
                        {
                            "name": "comparator",
                            "comment_text": "the comparator that will be used to order this set.\n        If {@code null}, the {@linkplain Comparable natural\n        ordering} of the elements will be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TreeSet",
                    "comment_text": "Constructs a new tree set containing the elements in the specified\n collection, sorted according to the <i>natural ordering</i> of its\n elements.  All elements inserted into the set must implement the\n {@link Comparable} interface.  Furthermore, all such elements must be\n <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a\n {@code ClassCastException} for any elements {@code e1} and\n {@code e2} in the set.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection whose elements will comprise the new set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TreeSet",
                    "comment_text": "Constructs a new tree set containing the same elements and\n using the same ordering as the specified sorted set.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "sorted set whose elements will comprise the new set",
                            "type": "java.util.SortedSet"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this set in ascending order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "Returns an iterator over the elements in this set in descending order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this set (its cardinality).",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns {@code true} if this set contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this set contains the specified element.\n More formally, returns {@code true} if and only if this set\n contains an element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element {@code e} to this set if\n the set contains no element {@code e2} such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be added to this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the specified element from this set if it is present.\n More formally, removes an element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,\n if this set contains such an element.  Returns {@code true} if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be removed from this set, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this set.\n The set will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Adds all of the elements in the specified collection to this set.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "comparator",
                    "comment_text": "",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "first",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "last",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lower",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floor",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceiling",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higher",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this {@code TreeSet} instance. (The elements\n themselves are not cloned.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.TreeMap",
            "interfaces": [
                "java.util.NavigableMap",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "A Red-Black tree based {@link NavigableMap} implementation.\n The map is sorted according to the {@linkplain Comparable natural\n ordering} of its keys, or by a {@link Comparator} provided at map\n creation time, depending on which constructor is used.\n\n <p>This implementation provides guaranteed log(n) time cost for the\n {@code containsKey}, {@code get}, {@code put} and {@code remove}\n operations.  Algorithms are adaptations of those in Cormen, Leiserson, and\n Rivest's <em>Introduction to Algorithms</em>.\n\n <p>Note that the ordering maintained by a tree map, like any sorted map, and\n whether or not an explicit comparator is provided, must be <em>consistent\n with {@code equals}</em> if this sorted map is to correctly implement the\n {@code Map} interface.  (See {@code Comparable} or {@code Comparator} for a\n precise definition of <em>consistent with equals</em>.)  This is so because\n the {@code Map} interface is defined in terms of the {@code equals}\n operation, but a sorted map performs all key comparisons using its {@code\n compareTo} (or {@code compare}) method, so two keys that are deemed equal by\n this method are, from the standpoint of the sorted map, equal.  The behavior\n of a sorted map <em>is</em> well-defined even if its ordering is\n inconsistent with {@code equals}; it just fails to obey the general contract\n of the {@code Map} interface.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a map concurrently, and at least one of the\n threads modifies the map structurally, it <em>must</em> be synchronized\n externally.  (A structural modification is any operation that adds or\n deletes one or more mappings; merely changing the value associated\n with an existing key is not a structural modification.)  This is\n typically accomplished by synchronizing on some object that naturally\n encapsulates the map.\n If no such object exists, the map should be \"wrapped\" using the\n {@link Collections#synchronizedSortedMap Collections.synchronizedSortedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map: <pre>\n   SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));</pre>\n\n <p>The iterators returned by the {@code iterator} method of the collections\n returned by all of this class's \"collection view methods\" are\n <em>fail-fast</em>: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n {@code remove} method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   <em>the fail-fast behavior of iterators\n should be used only to detect bugs.</em>\n\n <p>All {@code Map.Entry} pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do <strong>not</strong> support the {@code Entry.setValue}\n method. (Note however that it is possible to change mappings in the\n associated map using {@code put}.)\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Map",
                "java.util.HashMap",
                "java.util.Hashtable",
                "java.lang.Comparable",
                "java.util.Comparator",
                "java.util.Collection"
            ],
            "constructors": [
                {
                    "name": "TreeMap",
                    "comment_text": "Constructs a new, empty tree map, using the natural ordering of its\n keys.  All keys inserted into the map must implement the {@link\n Comparable} interface.  Furthermore, all such keys must be\n <em>mutually comparable</em>: {@code k1.compareTo(k2)} must not throw\n a {@code ClassCastException} for any keys {@code k1} and\n {@code k2} in the map.  If the user attempts to put a key into the\n map that violates this constraint (for example, the user attempts to\n put a string key into a map whose keys are integers), the\n {@code put(Object key, Object value)} call will throw a\n {@code ClassCastException}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TreeMap",
                    "comment_text": "Constructs a new, empty tree map, ordered according to the given\n comparator.  All keys inserted into the map must be <em>mutually\n comparable</em> by the given comparator: {@code comparator.compare(k1,\n k2)} must not throw a {@code ClassCastException} for any keys\n {@code k1} and {@code k2} in the map.  If the user attempts to put\n a key into the map that violates this constraint, the {@code put(Object\n key, Object value)} call will throw a\n {@code ClassCastException}.",
                    "parameters": [
                        {
                            "name": "comparator",
                            "comment_text": "the comparator that will be used to order this map.\n        If {@code null}, the {@linkplain Comparable natural\n        ordering} of the keys will be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TreeMap",
                    "comment_text": "Constructs a new tree map containing the same mappings as the given\n map, ordered according to the <em>natural ordering</em> of its keys.\n All keys inserted into the new map must implement the {@link\n Comparable} interface.  Furthermore, all such keys must be\n <em>mutually comparable</em>: {@code k1.compareTo(k2)} must not throw\n a {@code ClassCastException} for any keys {@code k1} and\n {@code k2} in the map.  This method runs in n*log(n) time.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map whose mappings are to be placed in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TreeMap",
                    "comment_text": "Constructs a new tree map containing the same mappings and\n using the same ordering as the specified sorted map.  This\n method runs in linear time.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the sorted map whose mappings are to be placed in this map,\n         and whose comparator is to be used to sort this map",
                            "type": "java.util.SortedMap"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns {@code true} if this map contains a mapping for the specified\n key.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns {@code true} if this map maps one or more keys to the\n specified value.  More formally, returns {@code true} if and only if\n this map contains at least one mapping to a value {@code v} such\n that {@code (value==null ? v==null : value.equals(v))}.  This\n operation will probably require time linear in the map size for\n most implementations.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key} compares\n equal to {@code k} according to the map's ordering, then this\n method returns {@code v}; otherwise it returns {@code null}.\n (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <em>necessarily</em>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "comparator",
                    "comment_text": "",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this map.\n These mappings replace any mappings that this map had for any\n of the keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "map",
                            "comment_text": "mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for this key from this TreeMap if present.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key for which mapping should be removed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.\n The map will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this {@code TreeMap} instance. (The keys and\n values themselves are not cloned.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirstEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLastEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lowerEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lowerKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floorEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floorKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceilingEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceilingKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higherEntry",
                    "comment_text": "",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higherKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own {@code remove} operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "navigableKeySet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingKeySet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection's iterator returns the values in ascending order\n of the corresponding keys.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own {@code remove} operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Collection.remove}, {@code removeAll},\n {@code retainAll} and {@code clear} operations.  It does not\n support the {@code add} or {@code addAll} operations.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set's iterator returns the entries in ascending key order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own {@code remove} operation, or through the\n {@code setValue} operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Set.remove}, {@code removeAll}, {@code retainAll} and\n {@code clear} operations.  It does not support the\n {@code add} or {@code addAll} operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingMap",
                    "comment_text": "",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.TooManyListenersException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "<p>\n The <code> TooManyListenersException </code> Exception is used as part of\n the Java Event model to annotate and implement a unicast special case of\n a multicast Event Source.\n </p>\n <p>\n The presence of a \"throws TooManyListenersException\" clause on any given\n concrete implementation of the normally multicast \"void addXyzEventListener\"\n event listener registration pattern is used to annotate that interface as\n implementing a unicast Listener special case, that is, that one and only\n one Listener may be registered on the particular event listener source\n concurrently.\n </p>",
            "since": "JDK1.1",
            "see": [
                "java.util.EventObject",
                "java.util.EventListener"
            ],
            "constructors": [
                {
                    "name": "TooManyListenersException",
                    "comment_text": "Constructs a TooManyListenersException with no detail message.\n A detail message is a String that describes this particular exception.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TooManyListenersException",
                    "comment_text": "Constructs a TooManyListenersException with the specified detail message.\n A detail message is a String that describes this particular exception.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.TimerTask",
            "interfaces": [
                "java.lang.Runnable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A task that can be scheduled for one-time or repeated execution by a Timer.",
            "since": "1.3",
            "see": [
                "java.util.Timer"
            ],
            "constructors": [
                {
                    "name": "TimerTask",
                    "comment_text": "Creates a new timer task.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "run",
                    "comment_text": "The action to be performed by this timer task.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "cancel",
                    "comment_text": "Cancels this timer task.  If the task has been scheduled for one-time\n execution and has not yet run, or has not yet been scheduled, it will\n never run.  If the task has been scheduled for repeated execution, it\n will never run again.  (If the task is running when this call occurs,\n the task will run to completion, but will never run again.)\n\n <p>Note that calling this method from within the <tt>run</tt> method of\n a repeating timer task absolutely guarantees that the timer task will\n not run again.\n\n <p>This method may be called repeatedly; the second and subsequent\n calls have no effect.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduledExecutionTime",
                    "comment_text": "Returns the <i>scheduled</i> execution time of the most recent\n <i>actual</i> execution of this task.  (If this method is invoked\n while task execution is in progress, the return value is the scheduled\n execution time of the ongoing task execution.)\n\n <p>This method is typically invoked from within a task's run method, to\n determine whether the current execution of the task is sufficiently\n timely to warrant performing the scheduled activity:\n <pre>\n   public void run() {\n       if (System.currentTimeMillis() - scheduledExecutionTime() >=\n           MAX_TARDINESS)\n               return;  // Too late; skip this execution.\n       // Perform the task\n   }\n </pre>\n This method is typically <i>not</i> used in conjunction with\n <i>fixed-delay execution</i> repeating tasks, as their scheduled\n execution times are allowed to drift over time, and so are not terribly\n significant.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Timer",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A facility for threads to schedule tasks for future execution in a\n background thread.  Tasks may be scheduled for one-time execution, or for\n repeated execution at regular intervals.\n\n <p>Corresponding to each <tt>Timer</tt> object is a single background\n thread that is used to execute all of the timer's tasks, sequentially.\n Timer tasks should complete quickly.  If a timer task takes excessive time\n to complete, it \"hogs\" the timer's task execution thread.  This can, in\n turn, delay the execution of subsequent tasks, which may \"bunch up\" and\n execute in rapid succession when (and if) the offending task finally\n completes.\n\n <p>After the last live reference to a <tt>Timer</tt> object goes away\n <i>and</i> all outstanding tasks have completed execution, the timer's task\n execution thread terminates gracefully (and becomes subject to garbage\n collection).  However, this can take arbitrarily long to occur.  By\n default, the task execution thread does not run as a <i>daemon thread</i>,\n so it is capable of keeping an application from terminating.  If a caller\n wants to terminate a timer's task execution thread rapidly, the caller\n should invoke the timer's <tt>cancel</tt> method.\n\n <p>If the timer's task execution thread terminates unexpectedly, for\n example, because its <tt>stop</tt> method is invoked, any further\n attempt to schedule a task on the timer will result in an\n <tt>IllegalStateException</tt>, as if the timer's <tt>cancel</tt>\n method had been invoked.\n\n <p>This class is thread-safe: multiple threads can share a single\n <tt>Timer</tt> object without the need for external synchronization.\n\n <p>This class does <i>not</i> offer real-time guarantees: it schedules\n tasks using the <tt>Object.wait(long)</tt> method.\n\n <p>Java 5.0 introduced the {@code java.util.concurrent} package and\n one of the concurrency utilities therein is the {@link\n java.util.concurrent.ScheduledThreadPoolExecutor\n ScheduledThreadPoolExecutor} which is a thread pool for repeatedly\n executing tasks at a given rate or delay.  It is effectively a more\n versatile replacement for the {@code Timer}/{@code TimerTask}\n combination, as it allows multiple service threads, accepts various\n time units, and doesn't require subclassing {@code TimerTask} (just\n implement {@code Runnable}).  Configuring {@code\n ScheduledThreadPoolExecutor} with one thread makes it equivalent to\n {@code Timer}.\n\n <p>Implementation note: This class scales to large numbers of concurrently\n scheduled tasks (thousands should present no problem).  Internally,\n it uses a binary heap to represent its task queue, so the cost to schedule\n a task is O(log n), where n is the number of concurrently scheduled tasks.\n\n <p>Implementation note: All constructors start a timer thread.",
            "since": "1.3",
            "see": [
                "java.util.TimerTask",
                "java.lang.Object"
            ],
            "constructors": [
                {
                    "name": "Timer",
                    "comment_text": "Creates a new timer.  The associated thread does <i>not</i>\n {@linkplain Thread#setDaemon run as a daemon}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Timer",
                    "comment_text": "Creates a new timer whose associated thread may be specified to\n {@linkplain Thread#setDaemon run as a daemon}.\n A daemon thread is called for if the timer will be used to\n schedule repeating \"maintenance activities\", which must be\n performed as long as the application is running, but should not\n prolong the lifetime of the application.",
                    "parameters": [
                        {
                            "name": "isDaemon",
                            "comment_text": "true if the associated thread should run as a daemon.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Timer",
                    "comment_text": "Creates a new timer whose associated thread has the specified name.\n The associated thread does <i>not</i>\n {@linkplain Thread#setDaemon run as a daemon}.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the associated thread",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Timer",
                    "comment_text": "Creates a new timer whose associated thread has the specified name,\n and may be specified to\n {@linkplain Thread#setDaemon run as a daemon}.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the associated thread",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "isDaemon",
                            "comment_text": "true if the associated thread should run as a daemon",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "schedule",
                    "comment_text": "Schedules the specified task for execution after the specified delay.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "task to be scheduled.",
                            "type": "java.util.TimerTask"
                        },
                        {
                            "name": "delay",
                            "comment_text": "delay in milliseconds before task is to be executed.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "schedule",
                    "comment_text": "Schedules the specified task for execution at the specified time.  If\n the time is in the past, the task is scheduled for immediate execution.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "task to be scheduled.",
                            "type": "java.util.TimerTask"
                        },
                        {
                            "name": "time",
                            "comment_text": "time at which task is to be executed.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "schedule",
                    "comment_text": "Schedules the specified task for repeated <i>fixed-delay execution</i>,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals separated by the specified period.\n\n <p>In fixed-delay execution, each execution is scheduled relative to\n the actual execution time of the previous execution.  If an execution\n is delayed for any reason (such as garbage collection or other\n background activity), subsequent executions will be delayed as well.\n In the long run, the frequency of execution will generally be slightly\n lower than the reciprocal of the specified period (assuming the system\n clock underlying <tt>Object.wait(long)</tt> is accurate).\n\n <p>Fixed-delay execution is appropriate for recurring activities\n that require \"smoothness.\"  In other words, it is appropriate for\n activities where it is more important to keep the frequency accurate\n in the short run than in the long run.  This includes most animation\n tasks, such as blinking a cursor at regular intervals.  It also includes\n tasks wherein regular activity is performed in response to human\n input, such as automatically repeating a character as long as a key\n is held down.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "task to be scheduled.",
                            "type": "java.util.TimerTask"
                        },
                        {
                            "name": "delay",
                            "comment_text": "delay in milliseconds before task is to be executed.",
                            "type": "long"
                        },
                        {
                            "name": "period",
                            "comment_text": "time in milliseconds between successive task executions.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "schedule",
                    "comment_text": "Schedules the specified task for repeated <i>fixed-delay execution</i>,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n <p>In fixed-delay execution, each execution is scheduled relative to\n the actual execution time of the previous execution.  If an execution\n is delayed for any reason (such as garbage collection or other\n background activity), subsequent executions will be delayed as well.\n In the long run, the frequency of execution will generally be slightly\n lower than the reciprocal of the specified period (assuming the system\n clock underlying <tt>Object.wait(long)</tt> is accurate).  As a\n consequence of the above, if the scheduled first time is in the past,\n it is scheduled for immediate execution.\n\n <p>Fixed-delay execution is appropriate for recurring activities\n that require \"smoothness.\"  In other words, it is appropriate for\n activities where it is more important to keep the frequency accurate\n in the short run than in the long run.  This includes most animation\n tasks, such as blinking a cursor at regular intervals.  It also includes\n tasks wherein regular activity is performed in response to human\n input, such as automatically repeating a character as long as a key\n is held down.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "task to be scheduled.",
                            "type": "java.util.TimerTask"
                        },
                        {
                            "name": "firstTime",
                            "comment_text": "First time at which task is to be executed.",
                            "type": "java.util.Date"
                        },
                        {
                            "name": "period",
                            "comment_text": "time in milliseconds between successive task executions.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduleAtFixedRate",
                    "comment_text": "Schedules the specified task for repeated <i>fixed-rate execution</i>,\n beginning after the specified delay.  Subsequent executions take place\n at approximately regular intervals, separated by the specified period.\n\n <p>In fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n \"catch up.\"  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying <tt>Object.wait(long)</tt> is accurate).\n\n <p>Fixed-rate execution is appropriate for recurring activities that\n are sensitive to <i>absolute</i> time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "task to be scheduled.",
                            "type": "java.util.TimerTask"
                        },
                        {
                            "name": "delay",
                            "comment_text": "delay in milliseconds before task is to be executed.",
                            "type": "long"
                        },
                        {
                            "name": "period",
                            "comment_text": "time in milliseconds between successive task executions.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduleAtFixedRate",
                    "comment_text": "Schedules the specified task for repeated <i>fixed-rate execution</i>,\n beginning at the specified time. Subsequent executions take place at\n approximately regular intervals, separated by the specified period.\n\n <p>In fixed-rate execution, each execution is scheduled relative to the\n scheduled execution time of the initial execution.  If an execution is\n delayed for any reason (such as garbage collection or other background\n activity), two or more executions will occur in rapid succession to\n \"catch up.\"  In the long run, the frequency of execution will be\n exactly the reciprocal of the specified period (assuming the system\n clock underlying <tt>Object.wait(long)</tt> is accurate).  As a\n consequence of the above, if the scheduled first time is in the past,\n then any \"missed\" executions will be scheduled for immediate \"catch up\"\n execution.\n\n <p>Fixed-rate execution is appropriate for recurring activities that\n are sensitive to <i>absolute</i> time, such as ringing a chime every\n hour on the hour, or running scheduled maintenance every day at a\n particular time.  It is also appropriate for recurring activities\n where the total time to perform a fixed number of executions is\n important, such as a countdown timer that ticks once every second for\n ten seconds.  Finally, fixed-rate execution is appropriate for\n scheduling multiple repeating timer tasks that must remain synchronized\n with respect to one another.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "task to be scheduled.",
                            "type": "java.util.TimerTask"
                        },
                        {
                            "name": "firstTime",
                            "comment_text": "First time at which task is to be executed.",
                            "type": "java.util.Date"
                        },
                        {
                            "name": "period",
                            "comment_text": "time in milliseconds between successive task executions.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "cancel",
                    "comment_text": "Terminates this timer, discarding any currently scheduled tasks.\n Does not interfere with a currently executing task (if it exists).\n Once a timer has been terminated, its execution thread terminates\n gracefully, and no more tasks may be scheduled on it.\n\n <p>Note that calling this method from within the run method of a\n timer task that was invoked by this timer absolutely guarantees that\n the ongoing task execution is the last task execution that will ever\n be performed by this timer.\n\n <p>This method may be called repeatedly; the second and subsequent\n calls have no effect.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "purge",
                    "comment_text": "Removes all cancelled tasks from this timer's task queue.  <i>Calling\n this method has no effect on the behavior of the timer</i>, but\n eliminates the references to the cancelled tasks from the queue.\n If there are no external references to these tasks, they become\n eligible for garbage collection.\n\n <p>Most programs will have no need to call this method.\n It is designed for use by the rare application that cancels a large\n number of tasks.  Calling this method trades time for space: the\n runtime of the method may be proportional to n + c log n, where n\n is the number of tasks in the queue and c is the number of cancelled\n tasks.\n\n <p>Note that it is permissible to call this method from within a\n a task scheduled on this timer.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.TimeZone",
            "interfaces": [
                "java.io.Serializable",
                "java.lang.Cloneable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "<code>TimeZone</code> represents a time zone offset, and also figures out daylight\n savings.\n\n <p>\n Typically, you get a <code>TimeZone</code> using <code>getDefault</code>\n which creates a <code>TimeZone</code> based on the time zone where the program\n is running. For example, for a program running in Japan, <code>getDefault</code>\n creates a <code>TimeZone</code> object based on Japanese Standard Time.\n\n <p>\n You can also get a <code>TimeZone</code> using <code>getTimeZone</code>\n along with a time zone ID. For instance, the time zone ID for the\n U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a\n U.S. Pacific Time <code>TimeZone</code> object with:\n <blockquote><pre>\n TimeZone tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n </pre></blockquote>\n You can use the <code>getAvailableIDs</code> method to iterate through\n all the supported time zone IDs. You can then choose a\n supported ID to get a <code>TimeZone</code>.\n If the time zone you want is not represented by one of the\n supported IDs, then a custom time zone ID can be specified to\n produce a TimeZone. The syntax of a custom time zone ID is:\n\n <blockquote><pre>\n <a name=\"CustomID\"><i>CustomID:</i></a>\n         <code>GMT</code> <i>Sign</i> <i>Hours</i> <code>:</code> <i>Minutes</i>\n         <code>GMT</code> <i>Sign</i> <i>Hours</i> <i>Minutes</i>\n         <code>GMT</code> <i>Sign</i> <i>Hours</i>\n <i>Sign:</i> one of\n         <code>+ -</code>\n <i>Hours:</i>\n         <i>Digit</i>\n         <i>Digit</i> <i>Digit</i>\n <i>Minutes:</i>\n         <i>Digit</i> <i>Digit</i>\n <i>Digit:</i> one of\n         <code>0 1 2 3 4 5 6 7 8 9</code>\n </pre></blockquote>\n\n <i>Hours</i> must be between 0 to 23 and <i>Minutes</i> must be\n between 00 to 59.  For example, \"GMT+10\" and \"GMT+0010\" mean ten\n hours and ten minutes ahead of GMT, respectively.\n <p>\n The format is locale independent and digits must be taken from the\n Basic Latin block of the Unicode standard. No daylight saving time\n transition schedule can be specified with a custom time zone ID. If\n the specified string doesn't match the syntax, <code>\"GMT\"</code>\n is used.\n <p>\n When creating a <code>TimeZone</code>, the specified custom time\n zone ID is normalized in the following syntax:\n <blockquote><pre>\n <a name=\"NormalizedCustomID\"><i>NormalizedCustomID:</i></a>\n         <code>GMT</code> <i>Sign</i> <i>TwoDigitHours</i> <code>:</code> <i>Minutes</i>\n <i>Sign:</i> one of\n         <code>+ -</code>\n <i>TwoDigitHours:</i>\n         <i>Digit</i> <i>Digit</i>\n <i>Minutes:</i>\n         <i>Digit</i> <i>Digit</i>\n <i>Digit:</i> one of\n         <code>0 1 2 3 4 5 6 7 8 9</code>\n </pre></blockquote>\n For example, TimeZone.getTimeZone(\"GMT-8\").getID() returns \"GMT-08:00\".\n\n <h4>Three-letter time zone IDs</h4>\n\n For compatibility with JDK 1.1.x, some other three-letter time zone IDs\n (such as \"PST\", \"CTT\", \"AST\") are also supported. However, <strong>their\n use is deprecated</strong> because the same abbreviation is often used\n for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard\n Time\" and \"China Standard Time\"), and the Java platform can then only\n recognize one of them.",
            "since": "JDK1.1",
            "see": [
                "java.util.Calendar",
                "java.util.GregorianCalendar",
                "java.util.SimpleTimeZone"
            ],
            "constructors": [
                {
                    "name": "TimeZone",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "SHORT",
                    "comment_text": "A style specifier for <code>getDisplayName()</code> indicating\n a short name, such as \"PST.\"",
                    "type": "int"
                },
                {
                    "name": "LONG",
                    "comment_text": "A style specifier for <code>getDisplayName()</code> indicating\n a long name, such as \"Pacific Standard Time.\"",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "getOffset",
                    "comment_text": "Gets the time zone offset, for current date, modified in case of\n daylight savings. This is the offset to add to UTC to get local time.\n <p>\n This method returns a historically correct offset if an\n underlying <code>TimeZone</code> implementation subclass\n supports historical Daylight Saving Time schedule and GMT\n offset changes.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "era",
                            "comment_text": "the era of the given date.",
                            "type": "int"
                        },
                        {
                            "name": "year",
                            "comment_text": "the year in the given date.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the month in the given date.\n Month is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "day",
                            "comment_text": "the day-in-month of the given date.",
                            "type": "int"
                        },
                        {
                            "name": "dayOfWeek",
                            "comment_text": "the day-of-week of the given date.",
                            "type": "int"
                        },
                        {
                            "name": "milliseconds",
                            "comment_text": "the milliseconds in day in <em>standard</em>\n local time.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getOffset",
                    "comment_text": "Returns the offset of this time zone from UTC at the specified\n date. If Daylight Saving Time is in effect at the specified\n date, the offset value is adjusted with the amount of daylight\n saving.\n <p>\n This method returns a historically correct offset value if an\n underlying TimeZone implementation subclass supports historical\n Daylight Saving Time schedule and GMT offset changes.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the date represented in milliseconds since January 1, 1970 00:00:00 GMT",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRawOffset",
                    "comment_text": "Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.\n <p>\n If an underlying <code>TimeZone</code> implementation subclass\n supports historical GMT offset changes, the specified GMT\n offset is set as the latest GMT offset and the difference from\n the known latest GMT offset value is used to adjust all\n historical GMT offset values.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "offsetMillis",
                            "comment_text": "the given base time zone offset to GMT.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRawOffset",
                    "comment_text": "Returns the amount of time in milliseconds to add to UTC to get\n standard time in this time zone. Because this value is not\n affected by daylight saving time, it is called <I>raw\n offset</I>.\n <p>\n If an underlying <code>TimeZone</code> implementation subclass\n supports historical GMT offset changes, the method returns the\n raw offset value of the current date. In Honolulu, for example,\n its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and\n this method always returns -36000000 milliseconds (i.e., -10\n hours).",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getID",
                    "comment_text": "Gets the ID of this time zone.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setID",
                    "comment_text": "Sets the time zone ID. This does not change any other data in\n the time zone object.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ID",
                            "comment_text": "the new time zone ID.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a long standard time name of this {@code TimeZone} suitable for\n presentation to the user in the default locale.\n\n <p>This method is equivalent to:\n <pre><blockquote>\n getDisplayName(false, {@link #LONG},\n                Locale.getDefault({@link Locale.Category#DISPLAY}))\n </blockquote></pre>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a long standard time name of this {@code TimeZone} suitable for\n presentation to the user in the specified {@code locale}.\n\n <p>This method is equivalent to:\n <pre><blockquote>\n getDisplayName(false, {@link #LONG}, locale)\n </blockquote></pre>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "locale",
                            "comment_text": "the locale in which to supply the display name.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a name in the specified {@code style} of this {@code TimeZone}\n suitable for presentation to the user in the default locale. If the\n specified {@code daylight} is {@code true}, a Daylight Saving Time name\n is returned (even if this {@code TimeZone} doesn't observe Daylight Saving\n Time). Otherwise, a Standard Time name is returned.\n\n <p>This method is equivalent to:\n <pre><blockquote>\n getDisplayName(daylight, style,\n                Locale.getDefault({@link Locale.Category#DISPLAY}))\n </blockquote></pre>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "daylight",
                            "comment_text": "{@code true} specifying a Daylight Saving Time name, or\n                 {@code false} specifying a Standard Time name",
                            "type": "boolean"
                        },
                        {
                            "name": "style",
                            "comment_text": "either {@link #LONG} or {@link #SHORT}",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a name in the specified {@code style} of this {@code TimeZone}\n suitable for presentation to the user in the specified {@code\n locale}. If the specified {@code daylight} is {@code true}, a Daylight\n Saving Time name is returned (even if this {@code TimeZone} doesn't\n observe Daylight Saving Time). Otherwise, a Standard Time name is\n returned.\n\n <p>When looking up a time zone name, the {@linkplain\n ResourceBundle.Control#getCandidateLocales(String,Locale) default\n <code>Locale</code> search path of <code>ResourceBundle</code>} derived\n from the specified {@code locale} is used. (No {@linkplain\n ResourceBundle.Control#getFallbackLocale(String,Locale) fallback\n <code>Locale</code>} search is performed.) If a time zone name in any\n {@code Locale} of the search path, including {@link Locale#ROOT}, is\n found, the name is returned. Otherwise, a string in the\n <a href=\"#NormalizedCustomID\">normalized custom ID format</a> is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "daylight",
                            "comment_text": "{@code true} specifying a Daylight Saving Time name, or\n                 {@code false} specifying a Standard Time name",
                            "type": "boolean"
                        },
                        {
                            "name": "style",
                            "comment_text": "either {@link #LONG} or {@link #SHORT}",
                            "type": "int"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale in which to supply the display name.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDSTSavings",
                    "comment_text": "Returns the amount of time to be added to local standard time\n to get local wall clock time.\n\n <p>The default implementation returns 3600000 milliseconds\n (i.e., one hour) if a call to {@link #useDaylightTime()}\n returns {@code true}. Otherwise, 0 (zero) is returned.\n\n <p>If an underlying {@code TimeZone} implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method returns the amount of saving time of the\n last known Daylight Saving Time rule that can be a future\n prediction.\n\n <p>If the amount of saving time at any given time stamp is\n required, construct a {@link Calendar} with this {@code\n TimeZone} and the time stamp, and call {@link Calendar#get(int)\n Calendar.get}{@code (}{@link Calendar#DST_OFFSET}{@code )}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useDaylightTime",
                    "comment_text": "Queries if this {@code TimeZone} uses Daylight Saving Time.\n\n <p>If an underlying {@code TimeZone} implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method refers to the last known Daylight Saving Time\n rule that can be a future prediction and may not be the same as\n the current rule. Consider calling {@link #observesDaylightTime()}\n if the current rule should also be taken into account.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "observesDaylightTime",
                    "comment_text": "Returns {@code true} if this {@code TimeZone} is currently in\n Daylight Saving Time, or if a transition from Standard Time to\n Daylight Saving Time occurs at any future time.\n\n <p>The default implementation returns {@code true} if\n {@code useDaylightTime()} or {@code inDaylightTime(new Date())}\n returns {@code true}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "inDaylightTime",
                    "comment_text": "Queries if the given {@code date} is in Daylight Saving Time in\n this time zone.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the given Date.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTimeZone",
                    "comment_text": "Gets the <code>TimeZone</code> for the given ID.",
                    "return_type": "java.util.TimeZone",
                    "parameters": [
                        {
                            "name": "ID",
                            "comment_text": "the ID for a <code>TimeZone</code>, either an abbreviation\n such as \"PST\", a full name such as \"America/Los_Angeles\", or a custom\n ID such as \"GMT-8:00\". Note that the support of abbreviations is\n for JDK 1.1.x compatibility only and full names should be used.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAvailableIDs",
                    "comment_text": "Gets the available IDs according to the given time zone offset in milliseconds.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "rawOffset",
                            "comment_text": "the given time zone GMT offset in milliseconds.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAvailableIDs",
                    "comment_text": "Gets all the available IDs supported.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDefault",
                    "comment_text": "Gets the default <code>TimeZone</code> for this host.\n The source of the default <code>TimeZone</code>\n may vary with implementation.",
                    "return_type": "java.util.TimeZone",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDefault",
                    "comment_text": "Sets the <code>TimeZone</code> that is\n returned by the <code>getDefault</code> method.  If <code>zone</code>\n is null, reset the default to the value it had originally when the\n VM first started.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "the new default time zone",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasSameRules",
                    "comment_text": "Returns true if this zone has the same rule and offset as another zone.\n That is, if this zone differs only in ID, if at all.  Returns false\n if the other zone is null.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "other",
                            "comment_text": "the <code>TimeZone</code> object to be compared with",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Creates a copy of this <code>TimeZone</code>.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.StringTokenizer",
            "interfaces": [
                "java.util.Enumeration"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The string tokenizer class allows an application to break a\n string into tokens. The tokenization method is much simpler than\n the one used by the <code>StreamTokenizer</code> class. The\n <code>StringTokenizer</code> methods do not distinguish among\n identifiers, numbers, and quoted strings, nor do they recognize\n and skip comments.\n <p>\n The set of delimiters (the characters that separate tokens) may\n be specified either at creation time or on a per-token basis.\n <p>\n An instance of <code>StringTokenizer</code> behaves in one of two\n ways, depending on whether it was created with the\n <code>returnDelims</code> flag having the value <code>true</code>\n or <code>false</code>:\n <ul>\n <li>If the flag is <code>false</code>, delimiter characters serve to\n     separate tokens. A token is a maximal sequence of consecutive\n     characters that are not delimiters.\n <li>If the flag is <code>true</code>, delimiter characters are themselves\n     considered to be tokens. A token is thus either one delimiter\n     character, or a maximal sequence of consecutive characters that are\n     not delimiters.\n </ul><p>\n A <tt>StringTokenizer</tt> object internally maintains a current\n position within the string to be tokenized. Some operations advance this\n current position past the characters processed.<p>\n A token is returned by taking a substring of the string that was used to\n create the <tt>StringTokenizer</tt> object.\n <p>\n The following is one example of the use of the tokenizer. The code:\n <blockquote><pre>\n     StringTokenizer st = new StringTokenizer(\"this is a test\");\n     while (st.hasMoreTokens()) {\n         System.out.println(st.nextToken());\n     }\n </pre></blockquote>\n <p>\n prints the following output:\n <blockquote><pre>\n     this\n     is\n     a\n     test\n </pre></blockquote>\n\n <p>\n <tt>StringTokenizer</tt> is a legacy class that is retained for\n compatibility reasons although its use is discouraged in new code. It is\n recommended that anyone seeking this functionality use the <tt>split</tt>\n method of <tt>String</tt> or the java.util.regex package instead.\n <p>\n The following example illustrates how the <tt>String.split</tt>\n method can be used to break up a string into its basic tokens:\n <blockquote><pre>\n     String[] result = \"this is a test\".split(\"\\\\s\");\n     for (int x=0; x&lt;result.length; x++)\n         System.out.println(result[x]);\n </pre></blockquote>\n <p>\n prints the following output:\n <blockquote><pre>\n     this\n     is\n     a\n     test\n </pre></blockquote>",
            "since": "JDK1.0",
            "see": [
                "java.io.StreamTokenizer"
            ],
            "constructors": [
                {
                    "name": "StringTokenizer",
                    "comment_text": "Constructs a string tokenizer for the specified string. All\n characters in the <code>delim</code> argument are the delimiters\n for separating tokens.\n <p>\n If the <code>returnDelims</code> flag is <code>true</code>, then\n the delimiter characters are also returned as tokens. Each\n delimiter is returned as a string of length one. If the flag is\n <code>false</code>, the delimiter characters are skipped and only\n serve as separators between tokens.\n <p>\n Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting <tt>StringTokenizer</tt> may result in a\n <tt>NullPointerException</tt>.",
                    "parameters": [
                        {
                            "name": "str",
                            "comment_text": "a string to be parsed.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "delim",
                            "comment_text": "the delimiters.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "returnDelims",
                            "comment_text": "flag indicating whether to return the delimiters\n                         as tokens.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "StringTokenizer",
                    "comment_text": "Constructs a string tokenizer for the specified string. The\n characters in the <code>delim</code> argument are the delimiters\n for separating tokens. Delimiter characters themselves will not\n be treated as tokens.\n <p>\n Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does\n not throw an exception. However, trying to invoke other methods on the\n resulting <tt>StringTokenizer</tt> may result in a\n <tt>NullPointerException</tt>.",
                    "parameters": [
                        {
                            "name": "str",
                            "comment_text": "a string to be parsed.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "delim",
                            "comment_text": "the delimiters.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "StringTokenizer",
                    "comment_text": "Constructs a string tokenizer for the specified string. The\n tokenizer uses the default delimiter set, which is\n <code>\"&nbsp;&#92;t&#92;n&#92;r&#92;f\"</code>: the space character,\n the tab character, the newline character, the carriage-return character,\n and the form-feed character. Delimiter characters themselves will\n not be treated as tokens.",
                    "parameters": [
                        {
                            "name": "str",
                            "comment_text": "a string to be parsed.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "hasMoreTokens",
                    "comment_text": "Tests if there are more tokens available from this tokenizer's string.\n If this method returns <tt>true</tt>, then a subsequent call to\n <tt>nextToken</tt> with no argument will successfully return a token.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextToken",
                    "comment_text": "Returns the next token from this string tokenizer.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextToken",
                    "comment_text": "Returns the next token in this string tokenizer's string. First,\n the set of characters considered to be delimiters by this\n <tt>StringTokenizer</tt> object is changed to be the characters in\n the string <tt>delim</tt>. Then the next token in the string\n after the current position is returned. The current position is\n advanced beyond the recognized token.  The new delimiter set\n remains the default after this call.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "delim",
                            "comment_text": "the new delimiters.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasMoreElements",
                    "comment_text": "Returns the same value as the <code>hasMoreTokens</code>\n method. It exists so that this class can implement the\n <code>Enumeration</code> interface.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextElement",
                    "comment_text": "Returns the same value as the <code>nextToken</code> method,\n except that its declared return value is <code>Object</code> rather than\n <code>String</code>. It exists so that this class can implement the\n <code>Enumeration</code> interface.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "countTokens",
                    "comment_text": "Calculates the number of times that this tokenizer's\n <code>nextToken</code> method can be called before it generates an\n exception. The current position is not advanced.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Stack",
            "interfaces": [

            ],
            "superclass": "java.util.Vector",
            "comment_text": "The <code>Stack</code> class represents a last-in-first-out\n (LIFO) stack of objects. It extends class <tt>Vector</tt> with five\n operations that allow a vector to be treated as a stack. The usual\n <tt>push</tt> and <tt>pop</tt> operations are provided, as well as a\n method to <tt>peek</tt> at the top item on the stack, a method to test\n for whether the stack is <tt>empty</tt>, and a method to <tt>search</tt>\n the stack for an item and discover how far it is from the top.\n <p>\n When a stack is first created, it contains no items.\n\n <p>A more complete and consistent set of LIFO stack operations is\n provided by the {@link Deque} interface and its implementations, which\n should be used in preference to this class.  For example:\n <pre>   {@code\n   Deque<Integer> stack = new ArrayDeque<Integer>();}</pre>",
            "since": "JDK1.0",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Stack",
                    "comment_text": "Creates an empty Stack.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "push",
                    "comment_text": "Pushes an item onto the top of this stack. This has exactly\n the same effect as:\n <blockquote><pre>\n addElement(item)</pre></blockquote>",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "item",
                            "comment_text": "the item to be pushed onto this stack.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pop",
                    "comment_text": "Removes the object at the top of this stack and returns that\n object as the value of this function.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Looks at the object at the top of this stack without removing it\n from the stack.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "empty",
                    "comment_text": "Tests if this stack is empty.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "search",
                    "comment_text": "Returns the 1-based position where an object is on this stack.\n If the object <tt>o</tt> occurs as an item in this stack, this\n method returns the distance from the top of the stack of the\n occurrence nearest the top of the stack; the topmost item on the\n stack is considered to be at distance <tt>1</tt>. The <tt>equals</tt>\n method is used to compare <tt>o</tt> to the\n items in this stack.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the desired object.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.SortedSet",
            "interfaces": [
                "java.util.Set"
            ],
            "superclass": "",
            "comment_text": "A {@link Set} that further provides a <i>total ordering</i> on its elements.\n The elements are ordered using their {@linkplain Comparable natural\n ordering}, or by a {@link Comparator} typically provided at sorted\n set creation time.  The set's iterator will traverse the set in\n ascending element order. Several additional operations are provided\n to take advantage of the ordering.  (This interface is the set\n analogue of {@link SortedMap}.)\n\n <p>All elements inserted into a sorted set must implement the <tt>Comparable</tt>\n interface (or be accepted by the specified comparator).  Furthermore, all\n such elements must be <i>mutually comparable</i>: <tt>e1.compareTo(e2)</tt>\n (or <tt>comparator.compare(e1, e2)</tt>) must not throw a\n <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in\n the sorted set.  Attempts to violate this restriction will cause the\n offending method or constructor invocation to throw a\n <tt>ClassCastException</tt>.\n\n <p>Note that the ordering maintained by a sorted set (whether or not an\n explicit comparator is provided) must be <i>consistent with equals</i> if\n the sorted set is to correctly implement the <tt>Set</tt> interface.  (See\n the <tt>Comparable</tt> interface or <tt>Comparator</tt> interface for a\n precise definition of <i>consistent with equals</i>.)  This is so because\n the <tt>Set</tt> interface is defined in terms of the <tt>equals</tt>\n operation, but a sorted set performs all element comparisons using its\n <tt>compareTo</tt> (or <tt>compare</tt>) method, so two elements that are\n deemed equal by this method are, from the standpoint of the sorted set,\n equal.  The behavior of a sorted set <i>is</i> well-defined even if its\n ordering is inconsistent with equals; it just fails to obey the general\n contract of the <tt>Set</tt> interface.\n\n <p>All general-purpose sorted set implementation classes should\n provide four \"standard\" constructors: 1) A void (no arguments)\n constructor, which creates an empty sorted set sorted according to\n the natural ordering of its elements.  2) A constructor with a\n single argument of type <tt>Comparator</tt>, which creates an empty\n sorted set sorted according to the specified comparator.  3) A\n constructor with a single argument of type <tt>Collection</tt>,\n which creates a new sorted set with the same elements as its\n argument, sorted according to the natural ordering of the elements.\n 4) A constructor with a single argument of type <tt>SortedSet</tt>,\n which creates a new sorted set with the same elements and the same\n ordering as the input sorted set.  There is no way to enforce this\n recommendation, as interfaces cannot contain constructors.\n\n <p>Note: several methods return subsets with restricted ranges.\n Such ranges are <i>half-open</i>, that is, they include their low\n endpoint but not their high endpoint (where applicable).\n If you need a <i>closed range</i> (which includes both endpoints), and\n the element type allows for calculation of the successor of a given\n value, merely request the subrange from <tt>lowEndpoint</tt> to\n <tt>successor(highEndpoint)</tt>.  For example, suppose that <tt>s</tt>\n is a sorted set of strings.  The following idiom obtains a view\n containing all of the strings in <tt>s</tt> from <tt>low</tt> to\n <tt>high</tt>, inclusive:<pre>\n   SortedSet&lt;String&gt; sub = s.subSet(low, high+\"\\0\");</pre>\n\n A similar technique can be used to generate an <i>open range</i> (which\n contains neither endpoint).  The following idiom obtains a view\n containing all of the Strings in <tt>s</tt> from <tt>low</tt> to\n <tt>high</tt>, exclusive:<pre>\n   SortedSet&lt;String&gt; sub = s.subSet(low+\"\\0\", high);</pre>\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Set",
                "java.util.TreeSet",
                "java.util.SortedMap",
                "java.util.Collection",
                "java.lang.Comparable",
                "java.util.Comparator",
                "java.lang.ClassCastException"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "comparator",
                    "comment_text": "Returns the comparator used to order the elements in this set,\n or <tt>null</tt> if this set uses the {@linkplain Comparable\n natural ordering} of its elements.",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "Returns a view of the portion of this set whose elements range\n from <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>,\n exclusive.  (If <tt>fromElement</tt> and <tt>toElement</tt> are\n equal, the returned set is empty.)  The returned set is backed\n by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n <p>The returned set will throw an <tt>IllegalArgumentException</tt>\n on an attempt to insert an element outside its range.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "low endpoint (inclusive) of the returned set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "high endpoint (exclusive) of the returned set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "Returns a view of the portion of this set whose elements are\n strictly less than <tt>toElement</tt>.  The returned set is\n backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n <p>The returned set will throw an <tt>IllegalArgumentException</tt>\n on an attempt to insert an element outside its range.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "high endpoint (exclusive) of the returned set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "Returns a view of the portion of this set whose elements are\n greater than or equal to <tt>fromElement</tt>.  The returned\n set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set\n supports all optional set operations that this set supports.\n\n <p>The returned set will throw an <tt>IllegalArgumentException</tt>\n on an attempt to insert an element outside its range.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "low endpoint (inclusive) of the returned set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "first",
                    "comment_text": "Returns the first (lowest) element currently in this set.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "last",
                    "comment_text": "Returns the last (highest) element currently in this set.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.SortedMap",
            "interfaces": [
                "java.util.Map"
            ],
            "superclass": "",
            "comment_text": "A {@link Map} that further provides a <em>total ordering</em> on its keys.\n The map is ordered according to the {@linkplain Comparable natural\n ordering} of its keys, or by a {@link Comparator} typically\n provided at sorted map creation time.  This order is reflected when\n iterating over the sorted map's collection views (returned by the\n {@code entrySet}, {@code keySet} and {@code values} methods).\n Several additional operations are provided to take advantage of the\n ordering.  (This interface is the map analogue of {@link SortedSet}.)\n\n <p>All keys inserted into a sorted map must implement the {@code Comparable}\n interface (or be accepted by the specified comparator).  Furthermore, all\n such keys must be <em>mutually comparable</em>: {@code k1.compareTo(k2)} (or\n {@code comparator.compare(k1, k2)}) must not throw a\n {@code ClassCastException} for any keys {@code k1} and {@code k2} in\n the sorted map.  Attempts to violate this restriction will cause the\n offending method or constructor invocation to throw a\n {@code ClassCastException}.\n\n <p>Note that the ordering maintained by a sorted map (whether or not an\n explicit comparator is provided) must be <em>consistent with equals</em> if\n the sorted map is to correctly implement the {@code Map} interface.  (See\n the {@code Comparable} interface or {@code Comparator} interface for a\n precise definition of <em>consistent with equals</em>.)  This is so because\n the {@code Map} interface is defined in terms of the {@code equals}\n operation, but a sorted map performs all key comparisons using its\n {@code compareTo} (or {@code compare}) method, so two keys that are\n deemed equal by this method are, from the standpoint of the sorted map,\n equal.  The behavior of a tree map <em>is</em> well-defined even if its\n ordering is inconsistent with equals; it just fails to obey the general\n contract of the {@code Map} interface.\n\n <p>All general-purpose sorted map implementation classes should provide four\n \"standard\" constructors. It is not possible to enforce this recommendation\n though as required constructors cannot be specified by interfaces. The\n expected \"standard\" constructors for all sorted map implementations are:\n <ol>\n   <li>A void (no arguments) constructor, which creates an empty sorted map\n   sorted according to the natural ordering of its keys.</li>\n   <li>A constructor with a single argument of type {@code Comparator}, which\n   creates an empty sorted map sorted according to the specified comparator.</li>\n   <li>A constructor with a single argument of type {@code Map}, which creates\n   a new map with the same key-value mappings as its argument, sorted\n   according to the keys' natural ordering.</li>\n   <li>A constructor with a single argument of type {@code SortedMap}, which\n   creates a new sorted map with the same key-value mappings and the same\n   ordering as the input sorted map.</li>\n </ol>\n\n <p><strong>Note</strong>: several methods return submaps with restricted key\n ranges. Such ranges are <em>half-open</em>, that is, they include their low\n endpoint but not their high endpoint (where applicable).  If you need a\n <em>closed range</em> (which includes both endpoints), and the key type\n allows for calculation of the successor of a given key, merely request\n the subrange from {@code lowEndpoint} to\n {@code successor(highEndpoint)}.  For example, suppose that {@code m}\n is a map whose keys are strings.  The following idiom obtains a view\n containing all of the key-value mappings in {@code m} whose keys are\n between {@code low} and {@code high}, inclusive:<pre>\n   SortedMap&lt;String, V&gt; sub = m.subMap(low, high+\"\\0\");</pre>\n\n A similar technique can be used to generate an <em>open range</em>\n (which contains neither endpoint).  The following idiom obtains a\n view containing all of the key-value mappings in {@code m} whose keys\n are between {@code low} and {@code high}, exclusive:<pre>\n   SortedMap&lt;String, V&gt; sub = m.subMap(low+\"\\0\", high);</pre>\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Map",
                "java.util.TreeMap",
                "java.util.SortedSet",
                "java.util.Comparator",
                "java.lang.Comparable",
                "java.util.Collection",
                "java.lang.ClassCastException"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "comparator",
                    "comment_text": "Returns the comparator used to order the keys in this map, or\n {@code null} if this map uses the {@linkplain Comparable\n natural ordering} of its keys.",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "Returns a view of the portion of this map whose keys range from\n {@code fromKey}, inclusive, to {@code toKey}, exclusive.  (If\n {@code fromKey} and {@code toKey} are equal, the returned map\n is empty.)  The returned map is backed by this map, so changes\n in the returned map are reflected in this map, and vice-versa.\n The returned map supports all optional map operations that this\n map supports.\n\n <p>The returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "low endpoint (inclusive) of the keys in the returned map",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "high endpoint (exclusive) of the keys in the returned map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "Returns a view of the portion of this map whose keys are\n strictly less than {@code toKey}.  The returned map is backed\n by this map, so changes in the returned map are reflected in\n this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n <p>The returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "high endpoint (exclusive) of the keys in the returned map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "Returns a view of the portion of this map whose keys are\n greater than or equal to {@code fromKey}.  The returned map is\n backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map\n supports all optional map operations that this map supports.\n\n <p>The returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "low endpoint (inclusive) of the keys in the returned map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstKey",
                    "comment_text": "Returns the first (lowest) key currently in this map.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastKey",
                    "comment_text": "Returns the last (highest) key currently in this map.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own {@code remove} operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection's iterator returns the values in ascending order\n of the corresponding keys.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own {@code remove} operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Collection.remove}, {@code removeAll},\n {@code retainAll} and {@code clear} operations.  It does not\n support the {@code add} or {@code addAll} operations.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set's iterator returns the entries in ascending key order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own {@code remove} operation, or through the\n {@code setValue} operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the {@code Iterator.remove},\n {@code Set.remove}, {@code removeAll}, {@code retainAll} and\n {@code clear} operations.  It does not support the\n {@code add} or {@code addAll} operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.SimpleTimeZone",
            "interfaces": [

            ],
            "superclass": "java.util.TimeZone",
            "comment_text": "<code>SimpleTimeZone</code> is a concrete subclass of <code>TimeZone</code>\n that represents a time zone for use with a Gregorian calendar.\n The class holds an offset from GMT, called <em>raw offset</em>, and start\n and end rules for a daylight saving time schedule.  Since it only holds\n single values for each, it cannot handle historical changes in the offset\n from GMT and the daylight saving schedule, except that the {@link\n #setStartYear setStartYear} method can specify the year when the daylight\n saving time schedule starts in effect.\n <p>\n To construct a <code>SimpleTimeZone</code> with a daylight saving time\n schedule, the schedule can be described with a set of rules,\n <em>start-rule</em> and <em>end-rule</em>. A day when daylight saving time\n starts or ends is specified by a combination of <em>month</em>,\n <em>day-of-month</em>, and <em>day-of-week</em> values. The <em>month</em>\n value is represented by a Calendar {@link Calendar#MONTH MONTH} field\n value, such as {@link Calendar#MARCH}. The <em>day-of-week</em> value is\n represented by a Calendar {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value,\n such as {@link Calendar#SUNDAY SUNDAY}. The meanings of value combinations\n are as follows.\n\n <ul>\n <li><b>Exact day of month</b><br>\n To specify an exact day of month, set the <em>month</em> and\n <em>day-of-month</em> to an exact value, and <em>day-of-week</em> to zero. For\n example, to specify March 1, set the <em>month</em> to {@link Calendar#MARCH\n MARCH}, <em>day-of-month</em> to 1, and <em>day-of-week</em> to 0.</li>\n\n <li><b>Day of week on or after day of month</b><br>\n To specify a day of week on or after an exact day of month, set the\n <em>month</em> to an exact month value, <em>day-of-month</em> to the day on\n or after which the rule is applied, and <em>day-of-week</em> to a negative {@link\n Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the\n second Sunday of April, set <em>month</em> to {@link Calendar#APRIL APRIL},\n <em>day-of-month</em> to 8, and <em>day-of-week</em> to <code>-</code>{@link\n Calendar#SUNDAY SUNDAY}.</li>\n\n <li><b>Day of week on or before day of month</b><br>\n To specify a day of the week on or before an exact day of the month, set\n <em>day-of-month</em> and <em>day-of-week</em> to a negative value. For\n example, to specify the last Wednesday on or before the 21st of March, set\n <em>month</em> to {@link Calendar#MARCH MARCH}, <em>day-of-month</em> is -21\n and <em>day-of-week</em> is <code>-</code>{@link Calendar#WEDNESDAY WEDNESDAY}. </li>\n\n <li><b>Last day-of-week of month</b><br>\n To specify, the last day-of-week of the month, set <em>day-of-week</em> to a\n {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and <em>day-of-month</em> to\n -1. For example, to specify the last Sunday of October, set <em>month</em>\n to {@link Calendar#OCTOBER OCTOBER}, <em>day-of-week</em> to {@link\n Calendar#SUNDAY SUNDAY} and <em>day-of-month</em> to -1.  </li>\n\n </ul>\n The time of the day at which daylight saving time starts or ends is\n specified by a millisecond value within the day. There are three kinds of\n <em>mode</em>s to specify the time: {@link #WALL_TIME}, {@link\n #STANDARD_TIME} and {@link #UTC_TIME}. For example, if daylight\n saving time ends\n at 2:00 am in the wall clock time, it can be specified by 7200000\n milliseconds in the {@link #WALL_TIME} mode. In this case, the wall clock time\n for an <em>end-rule</em> means the same thing as the daylight time.\n <p>\n The following are examples of parameters for constructing time zone objects.\n <pre><code>\n      // Base GMT offset: -8:00\n      // DST starts:      at 2:00am in standard time\n      //                  on the first Sunday in April\n      // DST ends:        at 2:00am in daylight time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(-28800000,\n                     \"America/Los_Angeles\",\n                     Calendar.APRIL, 1, -Calendar.SUNDAY,\n                     7200000,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     7200000,\n                     3600000)\n\n      // Base GMT offset: +1:00\n      // DST starts:      at 1:00am in UTC time\n      //                  on the last Sunday in March\n      // DST ends:        at 1:00am in UTC time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(3600000,\n                     \"Europe/Paris\",\n                     Calendar.MARCH, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     3600000)\n </code></pre>\n These parameter rules are also applicable to the set rule methods, such as\n <code>setStartRule</code>.",
            "since": "1.1",
            "see": [
                "java.util.Calendar",
                "java.util.GregorianCalendar",
                "java.util.TimeZone"
            ],
            "constructors": [
                {
                    "name": "SimpleTimeZone",
                    "comment_text": "Constructs a SimpleTimeZone with the given base time zone offset from GMT\n and time zone ID with no daylight saving time schedule.",
                    "parameters": [
                        {
                            "name": "rawOffset",
                            "comment_text": "The base time zone offset in milliseconds to GMT.",
                            "type": "int"
                        },
                        {
                            "name": "ID",
                            "comment_text": "The time zone name that is given to this instance.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "SimpleTimeZone",
                    "comment_text": "Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both <code>startTime</code> and <code>endTime</code> are specified to be\n represented in the wall clock time. The amount of daylight saving is\n assumed to be 3600000 milliseconds (i.e., one hour). This constructor is\n equivalent to:\n <pre><code>\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    3600000)\n </code></pre>",
                    "parameters": [
                        {
                            "name": "rawOffset",
                            "comment_text": "The given base time zone offset from GMT.",
                            "type": "int"
                        },
                        {
                            "name": "ID",
                            "comment_text": "The time zone ID which is given to this object.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "startMonth",
                            "comment_text": "The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0\n                        for January).",
                            "type": "int"
                        },
                        {
                            "name": "startDay",
                            "comment_text": "The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startDayOfWeek",
                            "comment_text": "The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startTime",
                            "comment_text": "The daylight saving time starting time in local wall clock\n                        time (in milliseconds within the day), which is local\n                        standard time in this case.",
                            "type": "int"
                        },
                        {
                            "name": "endMonth",
                            "comment_text": "The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).",
                            "type": "int"
                        },
                        {
                            "name": "endDay",
                            "comment_text": "The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endDayOfWeek",
                            "comment_text": "The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endTime",
                            "comment_text": "The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "SimpleTimeZone",
                    "comment_text": "Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n Both <code>startTime</code> and <code>endTime</code> are assumed to be\n represented in the wall clock time. This constructor is equivalent to:\n <pre><code>\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    dstSavings)\n </code></pre>",
                    "parameters": [
                        {
                            "name": "rawOffset",
                            "comment_text": "The given base time zone offset from GMT.",
                            "type": "int"
                        },
                        {
                            "name": "ID",
                            "comment_text": "The time zone ID which is given to this object.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "startMonth",
                            "comment_text": "The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).",
                            "type": "int"
                        },
                        {
                            "name": "startDay",
                            "comment_text": "The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startDayOfWeek",
                            "comment_text": "The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startTime",
                            "comment_text": "The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.",
                            "type": "int"
                        },
                        {
                            "name": "endMonth",
                            "comment_text": "The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).",
                            "type": "int"
                        },
                        {
                            "name": "endDay",
                            "comment_text": "The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endDayOfWeek",
                            "comment_text": "The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endTime",
                            "comment_text": "The daylight saving ending time in local wall clock time,\n                        which is local daylight time in this case.",
                            "type": "int"
                        },
                        {
                            "name": "dstSavings",
                            "comment_text": "The amount of time in milliseconds saved during\n                        daylight saving time.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "SimpleTimeZone",
                    "comment_text": "Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n This constructor takes the full set of the start and end rules\n parameters, including modes of <code>startTime</code> and\n <code>endTime</code>. The mode specifies either {@link #WALL_TIME wall\n time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC\n time}.",
                    "parameters": [
                        {
                            "name": "rawOffset",
                            "comment_text": "The given base time zone offset from GMT.",
                            "type": "int"
                        },
                        {
                            "name": "ID",
                            "comment_text": "The time zone ID which is given to this object.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "startMonth",
                            "comment_text": "The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).",
                            "type": "int"
                        },
                        {
                            "name": "startDay",
                            "comment_text": "The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startDayOfWeek",
                            "comment_text": "The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startTime",
                            "comment_text": "The daylight saving time starting time in the time mode\n                        specified by <code>startTimeMode</code>.",
                            "type": "int"
                        },
                        {
                            "name": "startTimeMode",
                            "comment_text": "The mode of the start time specified by startTime.",
                            "type": "int"
                        },
                        {
                            "name": "endMonth",
                            "comment_text": "The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).",
                            "type": "int"
                        },
                        {
                            "name": "endDay",
                            "comment_text": "The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endDayOfWeek",
                            "comment_text": "The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endTime",
                            "comment_text": "The daylight saving ending time in time time mode\n                        specified by <code>endTimeMode</code>.",
                            "type": "int"
                        },
                        {
                            "name": "endTimeMode",
                            "comment_text": "The mode of the end time specified by endTime",
                            "type": "int"
                        },
                        {
                            "name": "dstSavings",
                            "comment_text": "The amount of time in milliseconds saved during\n                        daylight saving time.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "WALL_TIME",
                    "comment_text": "Constant for a mode of start or end time specified as wall clock\n time.  Wall clock time is standard time for the onset rule, and\n daylight time for the end rule.",
                    "type": "int"
                },
                {
                    "name": "STANDARD_TIME",
                    "comment_text": "Constant for a mode of start or end time specified as standard time.",
                    "type": "int"
                },
                {
                    "name": "UTC_TIME",
                    "comment_text": "Constant for a mode of start or end time specified as UTC. European\n Union rules are specified as UTC time, for example.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "setStartYear",
                    "comment_text": "Sets the daylight saving time starting year.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "The daylight saving starting year.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setStartRule",
                    "comment_text": "Sets the daylight saving time start rule. For example, if daylight saving\n time starts on the first Sunday in April at 2 am in local wall clock\n time, you can set the start rule by calling:\n <pre><code>setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);</code></pre>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "startMonth",
                            "comment_text": "The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).",
                            "type": "int"
                        },
                        {
                            "name": "startDay",
                            "comment_text": "The day of the month on which the daylight saving time starts.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startDayOfWeek",
                            "comment_text": "The daylight saving time starting day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "startTime",
                            "comment_text": "The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setStartRule",
                    "comment_text": "Sets the daylight saving time start rule to a fixed date within a month.\n This method is equivalent to:\n <pre><code>setStartRule(startMonth, startDay, 0, startTime)</code></pre>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "startMonth",
                            "comment_text": "The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).",
                            "type": "int"
                        },
                        {
                            "name": "startDay",
                            "comment_text": "The day of the month on which the daylight saving time starts.",
                            "type": "int"
                        },
                        {
                            "name": "startTime",
                            "comment_text": "The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setStartRule",
                    "comment_text": "Sets the daylight saving time start rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "startMonth",
                            "comment_text": "The daylight saving time starting month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 0 for January).",
                            "type": "int"
                        },
                        {
                            "name": "startDay",
                            "comment_text": "The day of the month on which the daylight saving time starts.",
                            "type": "int"
                        },
                        {
                            "name": "startDayOfWeek",
                            "comment_text": "The daylight saving time starting day-of-week.",
                            "type": "int"
                        },
                        {
                            "name": "startTime",
                            "comment_text": "The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.",
                            "type": "int"
                        },
                        {
                            "name": "after",
                            "comment_text": "If true, this rule selects the first <code>dayOfWeek</code> on or\n                        <em>after</em> <code>dayOfMonth</code>.  If false, this rule\n                        selects the last <code>dayOfWeek</code> on or <em>before</em>\n                        <code>dayOfMonth</code>.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setEndRule",
                    "comment_text": "Sets the daylight saving time end rule. For example, if daylight saving time\n ends on the last Sunday in October at 2 am in wall clock time,\n you can set the end rule by calling:\n <code>setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);</code>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "endMonth",
                            "comment_text": "The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).",
                            "type": "int"
                        },
                        {
                            "name": "endDay",
                            "comment_text": "The day of the month on which the daylight saving time ends.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endDayOfWeek",
                            "comment_text": "The daylight saving time ending day-of-week.\n                        See the class description for the special cases of this parameter.",
                            "type": "int"
                        },
                        {
                            "name": "endTime",
                            "comment_text": "The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setEndRule",
                    "comment_text": "Sets the daylight saving time end rule to a fixed date within a month.\n This method is equivalent to:\n <pre><code>setEndRule(endMonth, endDay, 0, endTime)</code></pre>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "endMonth",
                            "comment_text": "The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).",
                            "type": "int"
                        },
                        {
                            "name": "endDay",
                            "comment_text": "The day of the month on which the daylight saving time ends.",
                            "type": "int"
                        },
                        {
                            "name": "endTime",
                            "comment_text": "The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setEndRule",
                    "comment_text": "Sets the daylight saving time end rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "endMonth",
                            "comment_text": "The daylight saving time ending month. Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. e.g., 9 for October).",
                            "type": "int"
                        },
                        {
                            "name": "endDay",
                            "comment_text": "The day of the month on which the daylight saving time ends.",
                            "type": "int"
                        },
                        {
                            "name": "endDayOfWeek",
                            "comment_text": "The daylight saving time ending day-of-week.",
                            "type": "int"
                        },
                        {
                            "name": "endTime",
                            "comment_text": "The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.",
                            "type": "int"
                        },
                        {
                            "name": "after",
                            "comment_text": "If true, this rule selects the first <code>endDayOfWeek</code> on\n                        or <em>after</em> <code>endDay</code>.  If false, this rule\n                        selects the last <code>endDayOfWeek</code> on or before\n                        <code>endDay</code> of the month.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getOffset",
                    "comment_text": "Returns the offset of this time zone from UTC at the given\n time. If daylight saving time is in effect at the given time,\n the offset value is adjusted with the amount of daylight\n saving.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the time at which the time zone offset is found",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getOffset",
                    "comment_text": "Returns the difference in milliseconds between local time and\n UTC, taking into account both the raw offset and the effect of\n daylight saving, for the specified date and time.  This method\n assumes that the start and end month are distinct.  It also\n uses a default {@link GregorianCalendar} object as its\n underlying calendar, such as for determining leap years.  Do\n not use the result of this method with a calendar other than a\n default <code>GregorianCalendar</code>.\n\n <p><em>Note:  In general, clients should use\n <code>Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)</code>\n instead of calling this method.</em>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "era",
                            "comment_text": "The era of the given date.",
                            "type": "int"
                        },
                        {
                            "name": "year",
                            "comment_text": "The year in the given date.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "The month in the given date. Month is 0-based. e.g.,\n                  0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "day",
                            "comment_text": "The day-in-month of the given date.",
                            "type": "int"
                        },
                        {
                            "name": "dayOfWeek",
                            "comment_text": "The day-of-week of the given date.",
                            "type": "int"
                        },
                        {
                            "name": "millis",
                            "comment_text": "The milliseconds in day in <em>standard</em> local time.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRawOffset",
                    "comment_text": "Gets the GMT offset for this time zone.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRawOffset",
                    "comment_text": "Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "offsetMillis",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDSTSavings",
                    "comment_text": "Sets the amount of time in milliseconds that the clock is advanced\n during daylight saving time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "millisSavedDuringDST",
                            "comment_text": "the number of milliseconds the time is\n advanced with respect to standard time when the daylight saving time rules\n are in effect. A positive number, typically one hour (3600000).",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDSTSavings",
                    "comment_text": "Returns the amount of time in milliseconds that the clock is\n advanced during daylight saving time.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useDaylightTime",
                    "comment_text": "Queries if this time zone uses daylight saving time.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "observesDaylightTime",
                    "comment_text": "Returns {@code true} if this {@code SimpleTimeZone} observes\n Daylight Saving Time. This method is equivalent to {@link\n #useDaylightTime()}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "inDaylightTime",
                    "comment_text": "Queries if the given date is in daylight saving time.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a clone of this <code>SimpleTimeZone</code> instance.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Generates the hash code for the SimpleDateFormat object.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the equality of two <code>SimpleTimeZone</code> objects.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "The <code>SimpleTimeZone</code> object to be compared with.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasSameRules",
                    "comment_text": "Returns <code>true</code> if this zone has the same rules and offset as another zone.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "other",
                            "comment_text": "the TimeZone object to be compared with",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this time zone.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Set",
            "interfaces": [
                "java.util.Collection"
            ],
            "superclass": "",
            "comment_text": "A collection that contains no duplicate elements.  More formally, sets\n contain no pair of elements <code>e1</code> and <code>e2</code> such that\n <code>e1.equals(e2)</code>, and at most one null element.  As implied by\n its name, this interface models the mathematical <i>set</i> abstraction.\n\n <p>The <tt>Set</tt> interface places additional stipulations, beyond those\n inherited from the <tt>Collection</tt> interface, on the contracts of all\n constructors and on the contracts of the <tt>add</tt>, <tt>equals</tt> and\n <tt>hashCode</tt> methods.  Declarations for other inherited methods are\n also included here for convenience.  (The specifications accompanying these\n declarations have been tailored to the <tt>Set</tt> interface, but they do\n not contain any additional stipulations.)\n\n <p>The additional stipulation on constructors is, not surprisingly,\n that all constructors must create a set that contains no duplicate elements\n (as defined above).\n\n <p>Note: Great care must be exercised if mutable objects are used as set\n elements.  The behavior of a set is not specified if the value of an object\n is changed in a manner that affects <tt>equals</tt> comparisons while the\n object is an element in the set.  A special case of this prohibition is\n that it is not permissible for a set to contain itself as an element.\n\n <p>Some set implementations have restrictions on the elements that\n they may contain.  For example, some implementations prohibit null elements,\n and some have restrictions on the types of their elements.  Attempting to\n add an ineligible element throws an unchecked exception, typically\n <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting\n to query the presence of an ineligible element may throw an exception,\n or it may simply return false; some implementations will exhibit the former\n behavior and some will exhibit the latter.  More generally, attempting an\n operation on an ineligible element whose completion would not result in\n the insertion of an ineligible element into the set may throw an\n exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.List",
                "java.util.SortedSet",
                "java.util.HashSet",
                "java.util.TreeSet",
                "java.util.AbstractSet",
                "java.util.Collections",
                "java.util.Collections"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this set (its cardinality).  If this\n set contains more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this set contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this set is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this set.  The elements are\n returned in no particular order (unless this set is an instance of some\n class that provides a guarantee).",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this set.\n If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the\n elements in the same order.\n\n <p>The returned array will be \"safe\" in that no references to it\n are maintained by this set.  (In other words, this method must\n allocate a new array even if this set is backed by an array).\n The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this set; the\n runtime type of the returned array is that of the specified array.\n If the set fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this set.\n\n <p>If this set fits in the specified array with room to spare\n (i.e., the array has more elements than this set), the element in\n the array immediately following the end of the set is set to\n <tt>null</tt>.  (This is useful in determining the length of this\n set <i>only</i> if the caller knows that this set does not contain\n any null elements.)\n\n <p>If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements\n in the same order.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a set known to contain only strings.\n The following code can be used to dump the set into a newly allocated\n array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of this set are to be\n        stored, if it is big enough; otherwise, a new array of the same\n        runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds the specified element to this set if it is not already present\n (optional operation).  More formally, adds the specified element\n <tt>e</tt> to this set if the set contains no element <tt>e2</tt>\n such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.  In combination with the\n restriction on constructors, this ensures that sets never contain\n duplicate elements.\n\n <p>The stipulation above does not imply that sets must accept all\n elements; sets may refuse to add any particular element, including\n <tt>null</tt>, and throw an exception, as described in the\n specification for {@link Collection#add Collection.add}.\n Individual set implementations should clearly document any\n restrictions on the elements that they may contain.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be added to this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the specified element from this set if it is present\n (optional operation).  More formally, removes an element <tt>e</tt>\n such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if\n this set contains such an element.  Returns <tt>true</tt> if this set\n contained the element (or equivalently, if this set changed as a\n result of the call).  (This set will not contain the element once the\n call returns.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be removed from this set, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns <tt>true</tt> if this set contains all of the elements of the\n specified collection.  If the specified collection is also a set, this\n method returns <tt>true</tt> if it is a <i>subset</i> of this set.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection to be checked for containment in this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Adds all of the elements in the specified collection to this set if\n they're not already present (optional operation).  If the specified\n collection is also a set, the <tt>addAll</tt> operation effectively\n modifies this set so that its value is the <i>union</i> of the two\n sets.  The behavior of this operation is undefined if the specified\n collection is modified while the operation is in progress.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this set that are contained in the\n specified collection (optional operation).  In other words, removes\n from this set all of its elements that are not contained in the\n specified collection.  If the specified collection is also a set, this\n operation effectively modifies this set so that its value is the\n <i>intersection</i> of the two sets.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be retained in this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this set all of its elements that are contained in the\n specified collection (optional operation).  If the specified\n collection is also a set, this operation effectively modifies this\n set so that its value is the <i>asymmetric set difference</i> of\n the two sets.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this set (optional operation).\n The set will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this set for equality.  Returns\n <tt>true</tt> if the specified object is also a set, the two sets\n have the same size, and every member of the specified set is\n contained in this set (or equivalently, every member of this set is\n contained in the specified set).  This definition ensures that the\n equals method works properly across different implementations of the\n set interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this set.  The hash code of a set is\n defined to be the sum of the hash codes of the elements in the set,\n where the hash code of a <tt>null</tt> element is defined to be zero.\n This ensures that <tt>s1.equals(s2)</tt> implies that\n <tt>s1.hashCode()==s2.hashCode()</tt> for any two sets <tt>s1</tt>\n and <tt>s2</tt>, as required by the general contract of\n {@link Object#hashCode}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ServiceLoader",
            "interfaces": [
                "java.lang.Iterable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A simple service-provider loading facility.\n\n <p> A <i>service</i> is a well-known set of interfaces and (usually\n abstract) classes.  A <i>service provider</i> is a specific implementation\n of a service.  The classes in a provider typically implement the interfaces\n and subclass the classes defined in the service itself.  Service providers\n can be installed in an implementation of the Java platform in the form of\n extensions, that is, jar files placed into any of the usual extension\n directories.  Providers can also be made available by adding them to the\n application's class path or by some other platform-specific means.\n\n <p> For the purpose of loading, a service is represented by a single type,\n that is, a single interface or abstract class.  (A concrete class can be\n used, but this is not recommended.)  A provider of a given service contains\n one or more concrete classes that extend this <i>service type</i> with data\n and code specific to the provider.  The <i>provider class</i> is typically\n not the entire provider itself but rather a proxy which contains enough\n information to decide whether the provider is able to satisfy a particular\n request together with code that can create the actual provider on demand.\n The details of provider classes tend to be highly service-specific; no\n single class or interface could possibly unify them, so no such type is\n defined here.  The only requirement enforced by this facility is that\n provider classes must have a zero-argument constructor so that they can be\n instantiated during loading.\n\n <p><a name=\"format\"> A service provider is identified by placing a\n <i>provider-configuration file</i> in the resource directory\n <tt>META-INF/services</tt>.  The file's name is the fully-qualified <a\n href=\"../lang/ClassLoader.html#name\">binary name</a> of the service's type.\n The file contains a list of fully-qualified binary names of concrete\n provider classes, one per line.  Space and tab characters surrounding each\n name, as well as blank lines, are ignored.  The comment character is\n <tt>'#'</tt> (<tt>'&#92;u0023'</tt>, <font size=\"-1\">NUMBER SIGN</font>); on\n each line all characters following the first comment character are ignored.\n The file must be encoded in UTF-8.\n\n <p> If a particular concrete provider class is named in more than one\n configuration file, or is named in the same configuration file more than\n once, then the duplicates are ignored.  The configuration file naming a\n particular provider need not be in the same jar file or other distribution\n unit as the provider itself.  The provider must be accessible from the same\n class loader that was initially queried to locate the configuration file;\n note that this is not necessarily the class loader from which the file was\n actually loaded.\n\n <p> Providers are located and instantiated lazily, that is, on demand.  A\n service loader maintains a cache of the providers that have been loaded so\n far.  Each invocation of the {@link #iterator iterator} method returns an\n iterator that first yields all of the elements of the cache, in\n instantiation order, and then lazily locates and instantiates any remaining\n providers, adding each one to the cache in turn.  The cache can be cleared\n via the {@link #reload reload} method.\n\n <p> Service loaders always execute in the security context of the caller.\n Trusted system code should typically invoke the methods in this class, and\n the methods of the iterators which they return, from within a privileged\n security context.\n\n <p> Instances of this class are not safe for use by multiple concurrent\n threads.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method in this class will cause a {@link NullPointerException} to be thrown.\n\n\n <p><span style=\"font-weight: bold; padding-right: 1em\">Example</span>\n Suppose we have a service type <tt>com.example.CodecSet</tt> which is\n intended to represent sets of encoder/decoder pairs for some protocol.  In\n this case it is an abstract class with two abstract methods:\n\n <blockquote><pre>\n public abstract Encoder getEncoder(String encodingName);\n public abstract Decoder getDecoder(String encodingName);</pre></blockquote>\n\n Each method returns an appropriate object or <tt>null</tt> if the provider\n does not support the given encoding.  Typical providers support more than\n one encoding.\n\n <p> If <tt>com.example.impl.StandardCodecs</tt> is an implementation of the\n <tt>CodecSet</tt> service then its jar file also contains a file named\n\n <blockquote><pre>\n META-INF/services/com.example.CodecSet</pre></blockquote>\n\n <p> This file contains the single line:\n\n <blockquote><pre>\n com.example.impl.StandardCodecs    # Standard codecs</pre></blockquote>\n\n <p> The <tt>CodecSet</tt> class creates and saves a single service instance\n at initialization:\n\n <blockquote><pre>\n private static ServiceLoader&lt;CodecSet&gt; codecSetLoader\n     = ServiceLoader.load(CodecSet.class);</pre></blockquote>\n\n <p> To locate an encoder for a given encoding name it defines a static\n factory method which iterates through the known and available providers,\n returning only when it has located a suitable encoder or has run out of\n providers.\n\n <blockquote><pre>\n public static Encoder getEncoder(String encodingName) {\n     for (CodecSet cp : codecSetLoader) {\n         Encoder enc = cp.getEncoder(encodingName);\n         if (enc != null)\n             return enc;\n     }\n     return null;\n }</pre></blockquote>\n\n <p> A <tt>getDecoder</tt> method is defined similarly.\n\n\n <p><span style=\"font-weight: bold; padding-right: 1em\">Usage Note</span> If\n the class path of a class loader that is used for provider loading includes\n remote network URLs then those URLs will be dereferenced in the process of\n searching for provider-configuration files.\n\n <p> This activity is normal, although it may cause puzzling entries to be\n created in web-server logs.  If a web server is not configured correctly,\n however, then this activity may cause the provider-loading algorithm to fail\n spuriously.\n\n <p> A web server should return an HTTP 404 (Not Found) response when a\n requested resource does not exist.  Sometimes, however, web servers are\n erroneously configured to return an HTTP 200 (OK) response along with a\n helpful HTML error page in such cases.  This will cause a {@link\n ServiceConfigurationError} to be thrown when this class attempts to parse\n the HTML page as a provider-configuration file.  The best solution to this\n problem is to fix the misconfigured web server to return the correct\n response code (HTTP 404) along with the HTML error page.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "reload",
                    "comment_text": "Clear this loader's provider cache so that all providers will be\n reloaded.\n\n <p> After invoking this method, subsequent invocations of the {@link\n #iterator() iterator} method will lazily look up and instantiate\n providers from scratch, just as is done by a newly-created loader.\n\n <p> This method is intended for use in situations in which new providers\n can be installed into a running Java virtual machine.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Lazily loads the available providers of this loader's service.\n\n <p> The iterator returned by this method first yields all of the\n elements of the provider cache, in instantiation order.  It then lazily\n loads and instantiates any remaining providers, adding each one to the\n cache in turn.\n\n <p> To achieve laziness the actual work of parsing the available\n provider-configuration files and instantiating providers must be done by\n the iterator itself.  Its {@link java.util.Iterator#hasNext hasNext} and\n {@link java.util.Iterator#next next} methods can therefore throw a\n {@link ServiceConfigurationError} if a provider-configuration file\n violates the specified format, or if it names a provider class that\n cannot be found and instantiated, or if the result of instantiating the\n class is not assignable to the service type, or if any other kind of\n exception or error is thrown as the next provider is located and\n instantiated.  To write robust code it is only necessary to catch {@link\n ServiceConfigurationError} when using a service iterator.\n\n <p> If such an error is thrown then subsequent invocations of the\n iterator will make a best effort to locate and instantiate the next\n available provider, but in general such recovery cannot be guaranteed.\n\n <blockquote style=\"font-size: smaller; line-height: 1.2\"><span\n style=\"padding-right: 1em; font-weight: bold\">Design Note</span>\n Throwing an error in these cases may seem extreme.  The rationale for\n this behavior is that a malformed provider-configuration file, like a\n malformed class file, indicates a serious problem with the way the Java\n virtual machine is configured or is being used.  As such it is\n preferable to throw an error rather than try to recover or, even worse,\n fail silently.</blockquote>\n\n <p> The iterator returned by this method does not support removal.\n Invoking its {@link java.util.Iterator#remove() remove} method will\n cause an {@link UnsupportedOperationException} to be thrown.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "load",
                    "comment_text": "Creates a new service loader for the given service type and class\n loader.",
                    "return_type": "java.util.ServiceLoader",
                    "parameters": [
                        {
                            "name": "service",
                            "comment_text": "The interface or abstract class representing the service",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "loader",
                            "comment_text": "The class loader to be used to load provider-configuration files\n         and provider classes, or <tt>null</tt> if the system class\n         loader (or, failing that, the bootstrap class loader) is to be\n         used",
                            "type": "java.lang.ClassLoader"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "load",
                    "comment_text": "Creates a new service loader for the given service type, using the\n current thread's {@linkplain java.lang.Thread#getContextClassLoader\n context class loader}.\n\n <p> An invocation of this convenience method of the form\n\n <blockquote><pre>\n ServiceLoader.load(<i>service</i>)</pre></blockquote>\n\n is equivalent to\n\n <blockquote><pre>\n ServiceLoader.load(<i>service</i>,\n                    Thread.currentThread().getContextClassLoader())</pre></blockquote>",
                    "return_type": "java.util.ServiceLoader",
                    "parameters": [
                        {
                            "name": "service",
                            "comment_text": "The interface or abstract class representing the service",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "loadInstalled",
                    "comment_text": "Creates a new service loader for the given service type, using the\n extension class loader.\n\n <p> This convenience method simply locates the extension class loader,\n call it <tt><i>extClassLoader</i></tt>, and then returns\n\n <blockquote><pre>\n ServiceLoader.load(<i>service</i>, <i>extClassLoader</i>)</pre></blockquote>\n\n <p> If the extension class loader cannot be found then the system class\n loader is used; if there is no system class loader then the bootstrap\n class loader is used.\n\n <p> This method is intended for use when only installed providers are\n desired.  The resulting service will only find and load providers that\n have been installed into the current Java virtual machine; providers on\n the application's class path will be ignored.",
                    "return_type": "java.util.ServiceLoader",
                    "parameters": [
                        {
                            "name": "service",
                            "comment_text": "The interface or abstract class representing the service",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string describing this service.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ServiceConfigurationError",
            "interfaces": [

            ],
            "superclass": "java.lang.Error",
            "comment_text": "Error thrown when something goes wrong while loading a service provider.\n\n <p> This error will be thrown in the following situations:\n\n <ul>\n\n   <li> The format of a provider-configuration file violates the <a\n   href=\"ServiceLoader.html#format\">specification</a>; </li>\n\n   <li> An {@link java.io.IOException IOException} occurs while reading a\n   provider-configuration file; </li>\n\n   <li> A concrete provider class named in a provider-configuration file\n   cannot be found; </li>\n\n   <li> A concrete provider class is not a subclass of the service class;\n   </li>\n\n   <li> A concrete provider class cannot be instantiated; or\n\n   <li> Some other kind of error occurs. </li>\n\n </ul>",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ServiceConfigurationError",
                    "comment_text": "Constructs a new instance with the specified message.",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The message, or <tt>null</tt> if there is no message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ServiceConfigurationError",
                    "comment_text": "Constructs a new instance with the specified message and cause.",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The message, or <tt>null</tt> if there is no message",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "cause",
                            "comment_text": "The cause, or <tt>null</tt> if the cause is nonexistent\n                or unknown",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.Scanner",
            "interfaces": [
                "java.util.Iterator",
                "java.io.Closeable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A simple text scanner which can parse primitive types and strings using\n regular expressions.\n\n <p>A <code>Scanner</code> breaks its input into tokens using a\n delimiter pattern, which by default matches whitespace. The resulting\n tokens may then be converted into values of different types using the\n various <tt>next</tt> methods.\n\n <p>For example, this code allows a user to read a number from\n <tt>System.in</tt>:\n <blockquote><pre>\n     Scanner sc = new Scanner(System.in);\n     int i = sc.nextInt();\n </pre></blockquote>\n\n <p>As another example, this code allows <code>long</code> types to be\n assigned from entries in a file <code>myNumbers</code>:\n <blockquote><pre>\n      Scanner sc = new Scanner(new File(\"myNumbers\"));\n      while (sc.hasNextLong()) {\n          long aLong = sc.nextLong();\n      }</pre></blockquote>\n\n <p>The scanner can also use delimiters other than whitespace. This\n example reads several items in from a string:\n<blockquote><pre>\n     String input = \"1 fish 2 fish red fish blue fish\";\n     Scanner s = new Scanner(input).useDelimiter(\"\\\\s*fish\\\\s*\");\n     System.out.println(s.nextInt());\n     System.out.println(s.nextInt());\n     System.out.println(s.next());\n     System.out.println(s.next());\n     s.close(); </pre></blockquote>\n <p>\n prints the following output:\n <blockquote><pre>\n     1\n     2\n     red\n     blue </pre></blockquote>\n\n <p>The same output can be generated with this code, which uses a regular\n expression to parse all four tokens at once:\n<blockquote><pre>\n     String input = \"1 fish 2 fish red fish blue fish\";\n     Scanner s = new Scanner(input);\n     s.findInLine(\"(\\\\d+) fish (\\\\d+) fish (\\\\w+) fish (\\\\w+)\");\n     MatchResult result = s.match();\n     for (int i=1; i<=result.groupCount(); i++)\n         System.out.println(result.group(i));\n     s.close(); </pre></blockquote>\n\n <p>The <a name=\"default-delimiter\">default whitespace delimiter</a> used\n by a scanner is as recognized by {@link java.lang.Character}.{@link\n java.lang.Character#isWhitespace(char) isWhitespace}. The {@link #reset}\n method will reset the value of the scanner's delimiter to the default\n whitespace delimiter regardless of whether it was previously changed.\n\n <p>A scanning operation may block waiting for input.\n\n <p>The {@link #next} and {@link #hasNext} methods and their\n primitive-type companion methods (such as {@link #nextInt} and\n {@link #hasNextInt}) first skip any input that matches the delimiter\n pattern, and then attempt to return the next token. Both <tt>hasNext</tt>\n and <tt>next</tt> methods may block waiting for further input.  Whether a\n <tt>hasNext</tt> method blocks has no connection to whether or not its\n associated <tt>next</tt> method will block.\n\n <p> The {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip}\n methods operate independently of the delimiter pattern. These methods will\n attempt to match the specified pattern with no regard to delimiters in the\n input and thus can be used in special circumstances where delimiters are\n not relevant. These methods may block waiting for more input.\n\n <p>When a scanner throws an {@link InputMismatchException}, the scanner\n will not pass the token that caused the exception, so that it may be\n retrieved or skipped via some other method.\n\n <p>Depending upon the type of delimiting pattern, empty tokens may be\n returned. For example, the pattern <tt>\"\\\\s+\"</tt> will return no empty\n tokens since it matches multiple instances of the delimiter. The delimiting\n pattern <tt>\"\\\\s\"</tt> could return empty tokens since it only passes one\n space at a time.\n\n <p> A scanner can read text from any object which implements the {@link\n java.lang.Readable} interface.  If an invocation of the underlying\n readable's {@link java.lang.Readable#read} method throws an {@link\n java.io.IOException} then the scanner assumes that the end of the input\n has been reached.  The most recent <tt>IOException</tt> thrown by the\n underlying readable can be retrieved via the {@link #ioException} method.\n\n <p>When a <code>Scanner</code> is closed, it will close its input source\n if the source implements the {@link java.io.Closeable} interface.\n\n <p>A <code>Scanner</code> is not safe for multithreaded use without\n external synchronization.\n\n <p>Unless otherwise mentioned, passing a <code>null</code> parameter into\n any method of a <code>Scanner</code> will cause a\n <code>NullPointerException</code> to be thrown.\n\n <p>A scanner will default to interpreting numbers as decimal unless a\n different radix has been set by using the {@link #useRadix} method. The\n {@link #reset} method will reset the value of the scanner's radix to\n <code>10</code> regardless of whether it was previously changed.\n\n <a name=\"localized-numbers\">\n <h4> Localized numbers </h4>\n\n <p> An instance of this class is capable of scanning numbers in the standard\n formats as well as in the formats of the scanner's locale. A scanner's\n <a name=\"initial-locale\">initial locale </a>is the value returned by the {@link\n java.util.Locale#getDefault} method; it may be changed via the {@link\n #useLocale} method. The {@link #reset} method will reset the value of the\n scanner's locale to the initial locale regardless of whether it was\n previously changed.\n\n <p>The localized formats are defined in terms of the following parameters,\n which for a particular locale are taken from that locale's {@link\n java.text.DecimalFormat DecimalFormat} object, <tt>df</tt>, and its and\n {@link java.text.DecimalFormatSymbols DecimalFormatSymbols} object,\n <tt>dfs</tt>.\n\n <blockquote><table>\n <tr><td valign=\"top\"><i>LocalGroupSeparator&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The character used to separate thousands groups,\n                      <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getGroupingSeparator\n                      getGroupingSeparator()}</td></tr>\n <tr><td valign=\"top\"><i>LocalDecimalSeparator&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The character used for the decimal point,\n                      <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getDecimalSeparator\n                      getDecimalSeparator()}</td></tr>\n <tr><td valign=\"top\"><i>LocalPositivePrefix&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The string that appears before a positive number (may\n                      be empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getPositivePrefix\n                      getPositivePrefix()}</td></tr>\n <tr><td valign=\"top\"><i>LocalPositiveSuffix&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The string that appears after a positive number (may be\n                      empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getPositiveSuffix\n                      getPositiveSuffix()}</td></tr>\n <tr><td valign=\"top\"><i>LocalNegativePrefix&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The string that appears before a negative number (may\n                      be empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getNegativePrefix\n                      getNegativePrefix()}</td></tr>\n <tr><td valign=\"top\"><i>LocalNegativeSuffix&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The string that appears after a negative number (may be\n                      empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link\n                      java.text.DecimalFormat#getNegativeSuffix\n                      getNegativeSuffix()}</td></tr>\n <tr><td valign=\"top\"><i>LocalNaN&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The string that represents not-a-number for\n                      floating-point values,\n                      <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getNaN\n                      getNaN()}</td></tr>\n <tr><td valign=\"top\"><i>LocalInfinity&nbsp;&nbsp;</i></td>\n     <td valign=\"top\">The string that represents infinity for floating-point\n                      values, <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link\n                      java.text.DecimalFormatSymbols#getInfinity\n                      getInfinity()}</td></tr>\n </table></blockquote>\n\n <a name=\"number-syntax\">\n <h4> Number syntax </h4>\n\n <p> The strings that can be parsed as numbers by an instance of this class\n are specified in terms of the following regular-expression grammar, where\n Rmax is the highest digit in the radix being used (for example, Rmax is 9\n in base 10).\n\n <p>\n <table cellspacing=0 cellpadding=0 align=center>\n\n   <tr><td valign=top align=right><i>NonASCIIDigit</i>&nbsp;&nbsp;::</td>\n       <td valign=top>= A non-ASCII character c for which\n            {@link java.lang.Character#isDigit Character.isDigit}<tt>(c)</tt>\n                        returns&nbsp;true</td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>Non0Digit</i>&nbsp;&nbsp;::</td>\n   <td><tt>= [1-</tt><i>Rmax</i><tt>] | </tt><i>NonASCIIDigit</i></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>Digit</i>&nbsp;&nbsp;::</td>\n   <td><tt>= [0-</tt><i>Rmax</i><tt>] | </tt><i>NonASCIIDigit</i></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td valign=top align=right><i>GroupedNumeral</i>&nbsp;&nbsp;::</td>\n       <td valign=top>\n         <table cellpadding=0 cellspacing=0>\n           <tr><td><tt>= (&nbsp;</tt></td>\n               <td><i>Non0Digit</i><tt>\n                   </tt><i>Digit</i><tt>?\n                   </tt><i>Digit</i><tt>?</tt></td></tr>\n           <tr><td></td>\n               <td><tt>(&nbsp;</tt><i>LocalGroupSeparator</i><tt>\n                         </tt><i>Digit</i><tt>\n                         </tt><i>Digit</i><tt>\n                         </tt><i>Digit</i><tt> )+ )</tt></td></tr>\n         </table></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>Numeral</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( ( </tt><i>Digit</i><tt>+ )\n               | </tt><i>GroupedNumeral</i><tt> )</tt></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td valign=top align=right>\n         <a name=\"Integer-regex\"><i>Integer</i>&nbsp;&nbsp;::</td>\n       <td valign=top><tt>= ( [-+]? ( </tt><i>Numeral</i><tt>\n                               ) )</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalPositivePrefix</i><tt> </tt><i>Numeral</i><tt>\n                      </tt><i>LocalPositiveSuffix</i></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalNegativePrefix</i><tt> </tt><i>Numeral</i><tt>\n                 </tt><i>LocalNegativeSuffix</i></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>DecimalNumeral</i>&nbsp;&nbsp;::</td>\n       <td><tt>= </tt><i>Numeral</i></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>Numeral</i><tt>\n                 </tt><i>LocalDecimalSeparator</i><tt>\n                 </tt><i>Digit</i><tt>*</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalDecimalSeparator</i><tt>\n                 </tt><i>Digit</i><tt>+</tt></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>Exponent</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( [eE] [+-]? </tt><i>Digit</i><tt>+ )</tt></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right>\n         <a name=\"Decimal-regex\"><i>Decimal</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( [-+]? </tt><i>DecimalNumeral</i><tt>\n                         </tt><i>Exponent</i><tt>? )</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalPositivePrefix</i><tt>\n                 </tt><i>DecimalNumeral</i><tt>\n                 </tt><i>LocalPositiveSuffix</i>\n                 </tt><i>Exponent</i><tt>?</td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalNegativePrefix</i><tt>\n                 </tt><i>DecimalNumeral</i><tt>\n                 </tt><i>LocalNegativeSuffix</i>\n                 </tt><i>Exponent</i><tt>?</td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>HexFloat</i>&nbsp;&nbsp;::</td>\n       <td><tt>= [-+]? 0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+\n                 ([pP][-+]?[0-9]+)?</tt></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>NonNumber</i>&nbsp;&nbsp;::</td>\n       <td valign=top><tt>= NaN\n                          | </tt><i>LocalNan</i><tt>\n                          | Infinity\n                          | </tt><i>LocalInfinity</i></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td align=right><i>SignedNonNumber</i>&nbsp;&nbsp;::</td>\n       <td><tt>= ( [-+]? </tt><i>NonNumber</i><tt> )</tt></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalPositivePrefix</i><tt>\n                 </tt><i>NonNumber</i><tt>\n                 </tt><i>LocalPositiveSuffix</i></td></tr>\n   <tr><td></td>\n       <td><tt>| </tt><i>LocalNegativePrefix</i><tt>\n                 </tt><i>NonNumber</i><tt>\n                 </tt><i>LocalNegativeSuffix</i></td></tr>\n\n   <tr><td>&nbsp;</td></tr>\n\n   <tr><td valign=top align=right>\n         <a name=\"Float-regex\"><i>Float</i>&nbsp;&nbsp;::</td>\n       <td valign=top><tt>= </tt><i>Decimal</i><tt></td></tr>\n       <tr><td></td>\n           <td><tt>| </tt><i>HexFloat</i><tt></td></tr>\n       <tr><td></td>\n           <td><tt>| </tt><i>SignedNonNumber</i><tt></td></tr>\n\n </table>\n </center>\n\n <p> Whitespace is not significant in the above regular expressions.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified source.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "A character source implementing the {@link Readable}\n         interface",
                            "type": "java.lang.Readable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified input stream. Bytes from the stream are converted\n into characters using the underlying platform's\n {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "An input stream to be scanned",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified input stream. Bytes from the stream are converted\n into characters using the specified charset.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "An input stream to be scanned",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "charsetName",
                            "comment_text": "The encoding type used to convert bytes from the\n        stream into characters to be scanned",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified file. Bytes from the file are converted into\n characters using the underlying platform's\n {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "A file to be scanned",
                            "type": "java.io.File"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "if source is not found"
                        }
                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified file. Bytes from the file are converted into\n characters using the specified charset.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "A file to be scanned",
                            "type": "java.io.File"
                        },
                        {
                            "name": "charsetName",
                            "comment_text": "The encoding type used to convert bytes from the file\n        into characters to be scanned",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "if source is not found"
                        }
                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified file. Bytes from the file are converted into\n characters using the underlying platform's\n {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "the path to the file to be scanned",
                            "type": "java.nio.file.Path"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs opening source"
                        }
                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified file. Bytes from the file are converted into\n characters using the specified charset.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "the path to the file to be scanned",
                            "type": "java.nio.file.Path"
                        },
                        {
                            "name": "charsetName",
                            "comment_text": "The encoding type used to convert bytes from the file\n          into characters to be scanned",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs opening source"
                        }
                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified string.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "A string to scan",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified channel. Bytes from the source are converted into\n characters using the underlying platform's\n {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "A channel to scan",
                            "type": "java.nio.channels.ReadableByteChannel"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Scanner",
                    "comment_text": "Constructs a new <code>Scanner</code> that produces values scanned\n from the specified channel. Bytes from the source are converted into\n characters using the specified charset.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "A channel to scan",
                            "type": "java.nio.channels.ReadableByteChannel"
                        },
                        {
                            "name": "charsetName",
                            "comment_text": "The encoding type used to convert bytes from the\n        channel into characters to be scanned",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "close",
                    "comment_text": "Closes this scanner.\n\n <p> If this scanner has not yet been closed then if its underlying\n {@linkplain java.lang.Readable readable} also implements the {@link\n java.io.Closeable} interface then the readable's <tt>close</tt> method\n will be invoked.  If this scanner is already closed then invoking this\n method will have no effect.\n\n <p>Attempting to perform search operations after a scanner has\n been closed will result in an {@link IllegalStateException}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ioException",
                    "comment_text": "Returns the <code>IOException</code> last thrown by this\n <code>Scanner</code>'s underlying <code>Readable</code>. This method\n returns <code>null</code> if no such exception exists.",
                    "return_type": "java.io.IOException",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "delimiter",
                    "comment_text": "Returns the <code>Pattern</code> this <code>Scanner</code> is currently\n using to match delimiters.",
                    "return_type": "java.util.regex.Pattern",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useDelimiter",
                    "comment_text": "Sets this scanner's delimiting pattern to the specified pattern.",
                    "return_type": "java.util.Scanner",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "A delimiting pattern",
                            "type": "java.util.regex.Pattern"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useDelimiter",
                    "comment_text": "Sets this scanner's delimiting pattern to a pattern constructed from\n the specified <code>String</code>.\n\n <p> An invocation of this method of the form\n <tt>useDelimiter(pattern)</tt> behaves in exactly the same way as the\n invocation <tt>useDelimiter(Pattern.compile(pattern))</tt>.\n\n <p> Invoking the {@link #reset} method will set the scanner's delimiter\n to the <a href= \"#default-delimiter\">default</a>.",
                    "return_type": "java.util.Scanner",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "A string specifying a delimiting pattern",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "locale",
                    "comment_text": "Returns this scanner's locale.\n\n <p>A scanner's locale affects many elements of its default\n primitive matching regular expressions; see\n <a href= \"#localized-numbers\">localized numbers</a> above.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useLocale",
                    "comment_text": "Sets this scanner's locale to the specified locale.\n\n <p>A scanner's locale affects many elements of its default\n primitive matching regular expressions; see\n <a href= \"#localized-numbers\">localized numbers</a> above.\n\n <p>Invoking the {@link #reset} method will set the scanner's locale to\n the <a href= \"#initial-locale\">initial locale</a>.",
                    "return_type": "java.util.Scanner",
                    "parameters": [
                        {
                            "name": "locale",
                            "comment_text": "A string specifying the locale to use",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "radix",
                    "comment_text": "Returns this scanner's default radix.\n\n <p>A scanner's radix affects elements of its default\n number matching regular expressions; see\n <a href= \"#localized-numbers\">localized numbers</a> above.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useRadix",
                    "comment_text": "Sets this scanner's default radix to the specified radix.\n\n <p>A scanner's radix affects elements of its default\n number matching regular expressions; see\n <a href= \"#localized-numbers\">localized numbers</a> above.\n\n <p>If the radix is less than <code>Character.MIN_RADIX</code>\n or greater than <code>Character.MAX_RADIX</code>, then an\n <code>IllegalArgumentException</code> is thrown.\n\n <p>Invoking the {@link #reset} method will set the scanner's radix to\n <code>10</code>.",
                    "return_type": "java.util.Scanner",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "The radix to use when scanning numbers",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "match",
                    "comment_text": "Returns the match result of the last scanning operation performed\n by this scanner. This method throws <code>IllegalStateException</code>\n if no match has been performed, or if the last match was\n not successful.\n\n <p>The various <code>next</code>methods of <code>Scanner</code>\n make a match result available if they complete without throwing an\n exception. For instance, after an invocation of the {@link #nextInt}\n method that returned an int, this method returns a\n <code>MatchResult</code> for the search of the\n <a href=\"#Integer-regex\"><i>Integer</i></a> regular expression\n defined above. Similarly the {@link #findInLine},\n {@link #findWithinHorizon}, and {@link #skip} methods will make a\n match available if they succeed.",
                    "return_type": "java.util.regex.MatchResult",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "<p>Returns the string representation of this <code>Scanner</code>. The\n string representation of a <code>Scanner</code> contains information\n that may be useful for debugging. The exact format is unspecified.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNext",
                    "comment_text": "Returns true if this scanner has another token in its input.\n This method may block while waiting for input to scan.\n The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "Finds and returns the next complete token from this scanner.\n A complete token is preceded and followed by input that matches\n the delimiter pattern. This method may block while waiting for input\n to scan, even if a previous invocation of {@link #hasNext} returned\n <code>true</code>.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "The remove operation is not supported by this implementation of\n <code>Iterator</code>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNext",
                    "comment_text": "Returns true if the next token matches the pattern constructed from the\n specified string. The scanner does not advance past any input.\n\n <p> An invocation of this method of the form <tt>hasNext(pattern)</tt>\n behaves in exactly the same way as the invocation\n <tt>hasNext(Pattern.compile(pattern))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "a string specifying the pattern to scan",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "Returns the next token if it matches the pattern constructed from the\n specified string.  If the match is successful, the scanner advances\n past the input that matched the pattern.\n\n <p> An invocation of this method of the form <tt>next(pattern)</tt>\n behaves in exactly the same way as the invocation\n <tt>next(Pattern.compile(pattern))</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "a string specifying the pattern to scan",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNext",
                    "comment_text": "Returns true if the next complete token matches the specified pattern.\n A complete token is prefixed and postfixed by input that matches\n the delimiter pattern. This method may block while waiting for input.\n The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the pattern to scan for",
                            "type": "java.util.regex.Pattern"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "Returns the next token if it matches the specified pattern. This\n method may block while waiting for input to scan, even if a previous\n invocation of {@link #hasNext(Pattern)} returned <code>true</code>.\n If the match is successful, the scanner advances past the input that\n matched the pattern.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the pattern to scan for",
                            "type": "java.util.regex.Pattern"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextLine",
                    "comment_text": "Returns true if there is another line in the input of this scanner.\n This method may block while waiting for input. The scanner does not\n advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextLine",
                    "comment_text": "Advances this scanner past the current line and returns the input\n that was skipped.\n\n This method returns the rest of the current line, excluding any line\n separator at the end. The position is set to the beginning of the next\n line.\n\n <p>Since this method continues to search through the input looking\n for a line separator, it may buffer all of the input searching for\n the line to skip if no line separators are present.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "findInLine",
                    "comment_text": "Attempts to find the next occurrence of a pattern constructed from the\n specified string, ignoring delimiters.\n\n <p>An invocation of this method of the form <tt>findInLine(pattern)</tt>\n behaves in exactly the same way as the invocation\n <tt>findInLine(Pattern.compile(pattern))</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "a string specifying the pattern to search for",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "findInLine",
                    "comment_text": "Attempts to find the next occurrence of the specified pattern ignoring\n delimiters. If the pattern is found before the next line separator, the\n scanner advances past the input that matched and returns the string that\n matched the pattern.\n If no such pattern is detected in the input up to the next line\n separator, then <code>null</code> is returned and the scanner's\n position is unchanged. This method may block waiting for input that\n matches the pattern.\n\n <p>Since this method continues to search through the input looking\n for the specified pattern, it may buffer all of the input searching for\n the desired token if no line separators are present.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the pattern to scan for",
                            "type": "java.util.regex.Pattern"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "findWithinHorizon",
                    "comment_text": "Attempts to find the next occurrence of a pattern constructed from the\n specified string, ignoring delimiters.\n\n <p>An invocation of this method of the form\n <tt>findWithinHorizon(pattern)</tt> behaves in exactly the same way as\n the invocation\n <tt>findWithinHorizon(Pattern.compile(pattern, horizon))</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "a string specifying the pattern to search for",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "horizon",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "findWithinHorizon",
                    "comment_text": "Attempts to find the next occurrence of the specified pattern.\n\n <p>This method searches through the input up to the specified\n search horizon, ignoring delimiters. If the pattern is found the\n scanner advances past the input that matched and returns the string\n that matched the pattern. If no such pattern is detected then the\n null is returned and the scanner's position remains unchanged. This\n method may block waiting for input that matches the pattern.\n\n <p>A scanner will never search more than <code>horizon</code> code\n points beyond its current position. Note that a match may be clipped\n by the horizon; that is, an arbitrary match result may have been\n different if the horizon had been larger. The scanner treats the\n horizon as a transparent, non-anchoring bound (see {@link\n Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}).\n\n <p>If horizon is <code>0</code>, then the horizon is ignored and\n this method continues to search through the input looking for the\n specified pattern without bound. In this case it may buffer all of\n the input searching for the pattern.\n\n <p>If horizon is negative, then an IllegalArgumentException is\n thrown.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the pattern to scan for",
                            "type": "java.util.regex.Pattern"
                        },
                        {
                            "name": "horizon",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "skip",
                    "comment_text": "Skips input that matches the specified pattern, ignoring delimiters.\n This method will skip input if an anchored match of the specified\n pattern succeeds.\n\n <p>If a match to the specified pattern is not found at the\n current position, then no input is skipped and a\n <tt>NoSuchElementException</tt> is thrown.\n\n <p>Since this method seeks to match the specified pattern starting at\n the scanner's current position, patterns that can match a lot of\n input (\".*\", for example) may cause the scanner to buffer a large\n amount of input.\n\n <p>Note that it is possible to skip something without risking a\n <code>NoSuchElementException</code> by using a pattern that can\n match nothing, e.g., <code>sc.skip(\"[ \\t]*\")</code>.",
                    "return_type": "java.util.Scanner",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "a string specifying the pattern to skip over",
                            "type": "java.util.regex.Pattern"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "skip",
                    "comment_text": "Skips input that matches a pattern constructed from the specified\n string.\n\n <p> An invocation of this method of the form <tt>skip(pattern)</tt>\n behaves in exactly the same way as the invocation\n <tt>skip(Pattern.compile(pattern))</tt>.",
                    "return_type": "java.util.Scanner",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "a string specifying the pattern to skip over",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextBoolean",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a boolean value using a case insensitive pattern\n created from the string \"true|false\".  The scanner does not\n advance past the input that matched.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextBoolean",
                    "comment_text": "Scans the next token of the input into a boolean value and returns\n that value. This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid boolean value.\n If the match is successful, the scanner advances past the input that\n matched.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextByte",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a byte value in the default radix using the\n {@link #nextByte} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextByte",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a byte value in the specified radix using the\n {@link #nextByte} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as a byte value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextByte",
                    "comment_text": "Scans the next token of the input as a <tt>byte</tt>.\n\n <p> An invocation of this method of the form\n <tt>nextByte()</tt> behaves in exactly the same way as the\n invocation <tt>nextByte(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.",
                    "return_type": "byte",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextByte",
                    "comment_text": "Scans the next token of the input as a <tt>byte</tt>.\n This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid byte value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n <p> If the next token matches the <a\n href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n above then the token is converted into a <tt>byte</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Byte#parseByte(String, int) Byte.parseByte} with the\n specified radix.",
                    "return_type": "byte",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as a byte value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextShort",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a short value in the default radix using the\n {@link #nextShort} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextShort",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a short value in the specified radix using the\n {@link #nextShort} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as a short value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextShort",
                    "comment_text": "Scans the next token of the input as a <tt>short</tt>.\n\n <p> An invocation of this method of the form\n <tt>nextShort()</tt> behaves in exactly the same way as the\n invocation <tt>nextShort(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.",
                    "return_type": "short",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextShort",
                    "comment_text": "Scans the next token of the input as a <tt>short</tt>.\n This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid short value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n <p> If the next token matches the <a\n href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n above then the token is converted into a <tt>short</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Short#parseShort(String, int) Short.parseShort} with the\n specified radix.",
                    "return_type": "short",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as a short value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextInt",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as an int value in the default radix using the\n {@link #nextInt} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextInt",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as an int value in the specified radix using the\n {@link #nextInt} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as an int value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextInt",
                    "comment_text": "Scans the next token of the input as an <tt>int</tt>.\n\n <p> An invocation of this method of the form\n <tt>nextInt()</tt> behaves in exactly the same way as the\n invocation <tt>nextInt(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextInt",
                    "comment_text": "Scans the next token of the input as an <tt>int</tt>.\n This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid int value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n <p> If the next token matches the <a\n href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n above then the token is converted into an <tt>int</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Integer#parseInt(String, int) Integer.parseInt} with the\n specified radix.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as an int value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextLong",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a long value in the default radix using the\n {@link #nextLong} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextLong",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a long value in the specified radix using the\n {@link #nextLong} method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as a long value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextLong",
                    "comment_text": "Scans the next token of the input as a <tt>long</tt>.\n\n <p> An invocation of this method of the form\n <tt>nextLong()</tt> behaves in exactly the same way as the\n invocation <tt>nextLong(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextLong",
                    "comment_text": "Scans the next token of the input as a <tt>long</tt>.\n This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid long value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n <p> If the next token matches the <a\n href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n above then the token is converted into a <tt>long</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Long#parseLong(String, int) Long.parseLong} with the\n specified radix.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as an int value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextFloat",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a float value using the {@link #nextFloat}\n method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextFloat",
                    "comment_text": "Scans the next token of the input as a <tt>float</tt>.\n This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid float value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n <p> If the next token matches the <a\n href=\"#Float-regex\"><i>Float</i></a> regular expression defined above\n then the token is converted into a <tt>float</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Float#parseFloat Float.parseFloat}. If the token matches\n the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"\n is passed to {@link Float#parseFloat(String) Float.parseFloat} as\n appropriate.",
                    "return_type": "float",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextDouble",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a double value using the {@link #nextDouble}\n method. The scanner does not advance past any input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextDouble",
                    "comment_text": "Scans the next token of the input as a <tt>double</tt>.\n This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid double value.\n If the translation is successful, the scanner advances past the input\n that matched.\n\n <p> If the next token matches the <a\n href=\"#Float-regex\"><i>Float</i></a> regular expression defined above\n then the token is converted into a <tt>double</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Double#parseDouble Double.parseDouble}. If the token matches\n the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"\n is passed to {@link Double#parseDouble(String) Double.parseDouble} as\n appropriate.",
                    "return_type": "double",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextBigInteger",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a <code>BigInteger</code> in the default radix using the\n {@link #nextBigInteger} method. The scanner does not advance past any\n input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextBigInteger",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a <code>BigInteger</code> in the specified radix using\n the {@link #nextBigInteger} method. The scanner does not advance past\n any input.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token as an integer",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextBigInteger",
                    "comment_text": "Scans the next token of the input as a {@link java.math.BigInteger\n BigInteger}.\n\n <p> An invocation of this method of the form\n <tt>nextBigInteger()</tt> behaves in exactly the same way as the\n invocation <tt>nextBigInteger(radix)</tt>, where <code>radix</code>\n is the default radix of this scanner.",
                    "return_type": "java.math.BigInteger",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextBigInteger",
                    "comment_text": "Scans the next token of the input as a {@link java.math.BigInteger\n BigInteger}.\n\n <p> If the next token matches the <a\n href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n above then the token is converted into a <tt>BigInteger</tt> value as if\n by removing all group separators, mapping non-ASCII digits into ASCII\n digits via the {@link Character#digit Character.digit}, and passing the\n resulting string to the {@link\n java.math.BigInteger#BigInteger(java.lang.String)\n BigInteger(String, int)} constructor with the specified radix.",
                    "return_type": "java.math.BigInteger",
                    "parameters": [
                        {
                            "name": "radix",
                            "comment_text": "the radix used to interpret the token",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasNextBigDecimal",
                    "comment_text": "Returns true if the next token in this scanner's input can be\n interpreted as a <code>BigDecimal</code> using the\n {@link #nextBigDecimal} method. The scanner does not advance past any\n input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextBigDecimal",
                    "comment_text": "Scans the next token of the input as a {@link java.math.BigDecimal\n BigDecimal}.\n\n <p> If the next token matches the <a\n href=\"#Decimal-regex\"><i>Decimal</i></a> regular expression defined\n above then the token is converted into a <tt>BigDecimal</tt> value as if\n by removing all group separators, mapping non-ASCII digits into ASCII\n digits via the {@link Character#digit Character.digit}, and passing the\n resulting string to the {@link\n java.math.BigDecimal#BigDecimal(java.lang.String) BigDecimal(String)}\n constructor.",
                    "return_type": "java.math.BigDecimal",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets this scanner.\n\n <p> Resetting a scanner discards all of its explicit state\n information which may have been changed by invocations of {@link\n #useDelimiter}, {@link #useLocale}, or {@link #useRadix}.\n\n <p> An invocation of this method of the form\n <tt>scanner.reset()</tt> behaves in exactly the same way as the\n invocation\n\n <blockquote><pre>\n   scanner.useDelimiter(\"\\\\p{javaWhitespace}+\")\n          .useLocale(Locale.getDefault())\n          .useRadix(10);\n </pre></blockquote>",
                    "return_type": "java.util.Scanner",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ResourceBundle",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "Resource bundles contain locale-specific objects.  When your program needs a\n locale-specific resource, a <code>String</code> for example, your program can\n load it from the resource bundle that is appropriate for the current user's\n locale. In this way, you can write program code that is largely independent\n of the user's locale isolating most, if not all, of the locale-specific\n information in resource bundles.\n\n <p>\n This allows you to write programs that can:\n <UL type=SQUARE>\n <LI> be easily localized, or translated, into different languages\n <LI> handle multiple locales at once\n <LI> be easily modified later to support even more locales\n </UL>\n\n <P>\n Resource bundles belong to families whose members share a common base\n name, but whose names also have additional components that identify\n their locales. For example, the base name of a family of resource\n bundles might be \"MyResources\". The family should have a default\n resource bundle which simply has the same name as its family -\n \"MyResources\" - and will be used as the bundle of last resort if a\n specific locale is not supported. The family can then provide as\n many locale-specific members as needed, for example a German one\n named \"MyResources_de\".\n\n <P>\n Each resource bundle in a family contains the same items, but the items have\n been translated for the locale represented by that resource bundle.\n For example, both \"MyResources\" and \"MyResources_de\" may have a\n <code>String</code> that's used on a button for canceling operations.\n In \"MyResources\" the <code>String</code> may contain \"Cancel\" and in\n \"MyResources_de\" it may contain \"Abbrechen\".\n\n <P>\n If there are different resources for different countries, you\n can make specializations: for example, \"MyResources_de_CH\" contains objects for\n the German language (de) in Switzerland (CH). If you want to only\n modify some of the resources\n in the specialization, you can do so.\n\n <P>\n When your program needs a locale-specific object, it loads\n the <code>ResourceBundle</code> class using the\n {@link #getBundle(java.lang.String, java.util.Locale) getBundle}\n method:\n <blockquote>\n <pre>\n ResourceBundle myResources =\n      ResourceBundle.getBundle(\"MyResources\", currentLocale);\n </pre>\n </blockquote>\n\n <P>\n Resource bundles contain key/value pairs. The keys uniquely\n identify a locale-specific object in the bundle. Here's an\n example of a <code>ListResourceBundle</code> that contains\n two key/value pairs:\n <blockquote>\n <pre>\n public class MyResources extends ListResourceBundle {\n     protected Object[][] getContents() {\n         return new Object[][] {\n             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., \"OK\")\n             {\"OkKey\", \"OK\"},\n             {\"CancelKey\", \"Cancel\"},\n             // END OF MATERIAL TO LOCALIZE\n        };\n     }\n }\n </pre>\n </blockquote>\n Keys are always <code>String</code>s.\n In this example, the keys are \"OkKey\" and \"CancelKey\".\n In the above example, the values\n are also <code>String</code>s--\"OK\" and \"Cancel\"--but\n they don't have to be. The values can be any type of object.\n\n <P>\n You retrieve an object from resource bundle using the appropriate\n getter method. Because \"OkKey\" and \"CancelKey\"\n are both strings, you would use <code>getString</code> to retrieve them:\n <blockquote>\n <pre>\n button1 = new Button(myResources.getString(\"OkKey\"));\n button2 = new Button(myResources.getString(\"CancelKey\"));\n </pre>\n </blockquote>\n The getter methods all require the key as an argument and return\n the object if found. If the object is not found, the getter method\n throws a <code>MissingResourceException</code>.\n\n <P>\n Besides <code>getString</code>, <code>ResourceBundle</code> also provides\n a method for getting string arrays, <code>getStringArray</code>,\n as well as a generic <code>getObject</code> method for any other\n type of object. When using <code>getObject</code>, you'll\n have to cast the result to the appropriate type. For example:\n <blockquote>\n <pre>\n int[] myIntegers = (int[]) myResources.getObject(\"intList\");\n </pre>\n </blockquote>\n\n <P>\n The Java Platform provides two subclasses of <code>ResourceBundle</code>,\n <code>ListResourceBundle</code> and <code>PropertyResourceBundle</code>,\n that provide a fairly simple way to create resources.\n As you saw briefly in a previous example, <code>ListResourceBundle</code>\n manages its resource as a list of key/value pairs.\n <code>PropertyResourceBundle</code> uses a properties file to manage\n its resources.\n\n <p>\n If <code>ListResourceBundle</code> or <code>PropertyResourceBundle</code>\n do not suit your needs, you can write your own <code>ResourceBundle</code>\n subclass.  Your subclasses must override two methods: <code>handleGetObject</code>\n and <code>getKeys()</code>.\n\n <h4>ResourceBundle.Control</h4>\n\n The {@link ResourceBundle.Control} class provides information necessary\n to perform the bundle loading process by the <code>getBundle</code>\n factory methods that take a <code>ResourceBundle.Control</code>\n instance. You can implement your own subclass in order to enable\n non-standard resource bundle formats, change the search strategy, or\n define caching parameters. Refer to the descriptions of the class and the\n {@link #getBundle(String, Locale, ClassLoader, Control) getBundle}\n factory method for details.\n\n <h4>Cache Management</h4>\n\n Resource bundle instances created by the <code>getBundle</code> factory\n methods are cached by default, and the factory methods return the same\n resource bundle instance multiple times if it has been\n cached. <code>getBundle</code> clients may clear the cache, manage the\n lifetime of cached resource bundle instances using time-to-live values,\n or specify not to cache resource bundle instances. Refer to the\n descriptions of the {@linkplain #getBundle(String, Locale, ClassLoader,\n Control) <code>getBundle</code> factory method}, {@link\n #clearCache(ClassLoader) clearCache}, {@link\n Control#getTimeToLive(String, Locale)\n ResourceBundle.Control.getTimeToLive}, and {@link\n Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle,\n long) ResourceBundle.Control.needsReload} for details.\n\n <h4>Example</h4>\n\n The following is a very simple example of a <code>ResourceBundle</code>\n subclass, <code>MyResources</code>, that manages two resources (for a larger number of\n resources you would probably use a <code>Map</code>).\n Notice that you don't need to supply a value if\n a \"parent-level\" <code>ResourceBundle</code> handles the same\n key with the same value (as for the okKey below).\n <blockquote>\n <pre>\n // default (English language, United States)\n public class MyResources extends ResourceBundle {\n     public Object handleGetObject(String key) {\n         if (key.equals(\"okKey\")) return \"Ok\";\n         if (key.equals(\"cancelKey\")) return \"Cancel\";\n         return null;\n     }\n\n     public Enumeration&lt;String&gt; getKeys() {\n         return Collections.enumeration(keySet());\n     }\n\n     // Overrides handleKeySet() so that the getKeys() implementation\n     // can rely on the keySet() value.\n     protected Set&lt;String&gt; handleKeySet() {\n         return new HashSet&lt;String&gt;(Arrays.asList(\"okKey\", \"cancelKey\"));\n     }\n }\n\n // German language\n public class MyResources_de extends MyResources {\n     public Object handleGetObject(String key) {\n         // don't need okKey, since parent level handles it.\n         if (key.equals(\"cancelKey\")) return \"Abbrechen\";\n         return null;\n     }\n\n     protected Set&lt;String&gt; handleKeySet() {\n         return new HashSet&lt;String&gt;(Arrays.asList(\"cancelKey\"));\n     }\n }\n </pre>\n </blockquote>\n You do not have to restrict yourself to using a single family of\n <code>ResourceBundle</code>s. For example, you could have a set of bundles for\n exception messages, <code>ExceptionResources</code>\n (<code>ExceptionResources_fr</code>, <code>ExceptionResources_de</code>, ...),\n and one for widgets, <code>WidgetResource</code> (<code>WidgetResources_fr</code>,\n <code>WidgetResources_de</code>, ...); breaking up the resources however you like.",
            "since": "JDK1.1",
            "see": [
                "java.util.ListResourceBundle",
                "java.util.PropertyResourceBundle",
                "java.util.MissingResourceException"
            ],
            "constructors": [
                {
                    "name": "ResourceBundle",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "parent",
                    "comment_text": "The parent bundle of this bundle.\n The parent bundle is searched by {@link #getObject getObject}\n when this bundle does not contain a particular resource.",
                    "type": "java.util.ResourceBundle"
                }
            ],
            "methods": [
                {
                    "name": "getString",
                    "comment_text": "Gets a string for the given key from this resource bundle or one of its parents.\n Calling this method is equivalent to calling\n <blockquote>\n <code>(String) {@link #getObject(java.lang.String) getObject}(key)</code>.\n </blockquote>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key for the desired string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getStringArray",
                    "comment_text": "Gets a string array for the given key from this resource bundle or one of its parents.\n Calling this method is equivalent to calling\n <blockquote>\n <code>(String[]) {@link #getObject(java.lang.String) getObject}(key)</code>.\n </blockquote>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key for the desired string array",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getObject",
                    "comment_text": "Gets an object for the given key from this resource bundle or one of its parents.\n This method first tries to obtain the object from this resource bundle using\n {@link #handleGetObject(java.lang.String) handleGetObject}.\n If not successful, and the parent resource bundle is not null,\n it calls the parent's <code>getObject</code> method.\n If still not successful, it throws a MissingResourceException.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key for the desired object",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLocale",
                    "comment_text": "Returns the locale of this resource bundle. This method can be used after a\n call to getBundle() to determine whether the resource bundle returned really\n corresponds to the requested locale or is a fallback.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setParent",
                    "comment_text": "Sets the parent bundle of this bundle.\n The parent bundle is searched by {@link #getObject getObject}\n when this bundle does not contain a particular resource.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "parent",
                            "comment_text": "this bundle's parent bundle.",
                            "type": "java.util.ResourceBundle"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBundle",
                    "comment_text": "Gets a resource bundle using the specified base name, the default locale,\n and the caller's class loader. Calling this method is equivalent to calling\n <blockquote>\n <code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>,\n </blockquote>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.\n See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified class name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBundle",
                    "comment_text": "Returns a resource bundle using the specified base name, the\n default locale and the specified control. Calling this method\n is equivalent to calling\n <pre>\n getBundle(baseName, Locale.getDefault(),\n           this.getClass().getClassLoader(), control),\n </pre>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.  See {@link\n #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n complete description of the resource bundle loading process with a\n <code>ResourceBundle.Control</code>.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified class\n        name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "control",
                            "comment_text": "the control which gives information for the resource bundle\n        loading process",
                            "type": "java.util.ResourceBundle.Control"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBundle",
                    "comment_text": "Gets a resource bundle using the specified base name and locale,\n and the caller's class loader. Calling this method is equivalent to calling\n <blockquote>\n <code>getBundle(baseName, locale, this.getClass().getClassLoader())</code>,\n </blockquote>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.\n See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for which a resource bundle is desired",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBundle",
                    "comment_text": "Returns a resource bundle using the specified base name, target\n locale and control, and the caller's class loader. Calling this\n method is equivalent to calling\n <pre>\n getBundle(baseName, targetLocale, this.getClass().getClassLoader(),\n           control),\n </pre>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.  See {@link\n #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n complete description of the resource bundle loading process with a\n <code>ResourceBundle.Control</code>.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified\n        class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "targetLocale",
                            "comment_text": "the locale for which a resource bundle is desired",
                            "type": "java.util.Locale"
                        },
                        {
                            "name": "control",
                            "comment_text": "the control which gives information for the resource\n        bundle loading process",
                            "type": "java.util.ResourceBundle.Control"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBundle",
                    "comment_text": "Gets a resource bundle using the specified base name, locale, and class\n loader.\n\n <p><a name=\"default_behavior\"/>This method behaves the same as calling\n {@link #getBundle(String, Locale, ClassLoader, Control)} passing a\n default instance of {@link Control}. The following describes this behavior.\n\n <p><code>getBundle</code> uses the base name, the specified locale, and\n the default locale (obtained from {@link java.util.Locale#getDefault()\n Locale.getDefault}) to generate a sequence of <a\n name=\"candidates\"><em>candidate bundle names</em></a>.  If the specified\n locale's language, script, country, and variant are all empty strings,\n then the base name is the only candidate bundle name.  Otherwise, a list\n of candidate locales is generated from the attribute values of the\n specified locale (language, script, country and variant) and appended to\n the base name.  Typically, this will look like the following:\n\n <pre>\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country\n     baseName + \"_\" + language + \"_\" + script\n     baseName + \"_\" + language + \"_\" + country + \"_\" + variant\n     baseName + \"_\" + language + \"_\" + country\n     baseName + \"_\" + language\n </pre>\n\n <p>Candidate bundle names where the final component is an empty string\n are omitted, along with the underscore.  For example, if country is an\n empty string, the second and the fifth candidate bundle names above\n would be omitted.  Also, if script is an empty string, the candidate names\n including script are omitted.  For example, a locale with language \"de\"\n and variant \"JAVA\" will produce candidate names with base name\n \"MyResource\" below.\n\n <pre>\n     MyResource_de__JAVA\n     MyResource_de\n </pre>\n\n In the case that the variant contains one or more underscores ('_'), a\n sequence of bundle names generated by truncating the last underscore and\n the part following it is inserted after a candidate bundle name with the\n original variant.  For example, for a locale with language \"en\", script\n \"Latn, country \"US\" and variant \"WINDOWS_VISTA\", and bundle base name\n \"MyResource\", the list of candidate bundle names below is generated:\n\n <pre>\n MyResource_en_Latn_US_WINDOWS_VISTA\n MyResource_en_Latn_US_WINDOWS\n MyResource_en_Latn_US\n MyResource_en_Latn\n MyResource_en_US_WINDOWS_VISTA\n MyResource_en_US_WINDOWS\n MyResource_en_US\n MyResource_en\n </pre>\n\n <blockquote><b>Note:</b> For some <code>Locale</code>s, the list of\n candidate bundle names contains extra names, or the order of bundle names\n is slightly modified.  See the description of the default implementation\n of {@link Control#getCandidateLocales(String, Locale)\n getCandidateLocales} for details.</blockquote>\n\n <p><code>getBundle</code> then iterates over the candidate bundle names\n to find the first one for which it can <em>instantiate</em> an actual\n resource bundle. It uses the default controls' {@link Control#getFormats\n getFormats} method, which generates two bundle names for each generated\n name, the first a class name and the second a properties file name. For\n each candidate bundle name, it attempts to create a resource bundle:\n\n <ul><li>First, it attempts to load a class using the generated class name.\n If such a class can be found and loaded using the specified class\n loader, is assignment compatible with ResourceBundle, is accessible from\n ResourceBundle, and can be instantiated, <code>getBundle</code> creates a\n new instance of this class and uses it as the <em>result resource\n bundle</em>.\n\n <li>Otherwise, <code>getBundle</code> attempts to locate a property\n resource file using the generated properties file name.  It generates a\n path name from the candidate bundle name by replacing all \".\" characters\n with \"/\" and appending the string \".properties\".  It attempts to find a\n \"resource\" with this name using {@link\n java.lang.ClassLoader#getResource(java.lang.String)\n ClassLoader.getResource}.  (Note that a \"resource\" in the sense of\n <code>getResource</code> has nothing to do with the contents of a\n resource bundle, it is just a container of data, such as a file.)  If it\n finds a \"resource\", it attempts to create a new {@link\n PropertyResourceBundle} instance from its contents.  If successful, this\n instance becomes the <em>result resource bundle</em>.  </ul>\n\n <p>This continues until a result resource bundle is instantiated or the\n list of candidate bundle names is exhausted.  If no matching resource\n bundle is found, the default control's {@link Control#getFallbackLocale\n getFallbackLocale} method is called, which returns the current default\n locale.  A new sequence of candidate locale names is generated using this\n locale and and searched again, as above.\n\n <p>If still no result bundle is found, the base name alone is looked up. If\n this still fails, a <code>MissingResourceException</code> is thrown.\n\n <p><a name=\"parent_chain\"/> Once a result resource bundle has been found,\n its <em>parent chain</em> is instantiated.  If the result bundle already\n has a parent (perhaps because it was returned from a cache) the chain is\n complete.\n\n <p>Otherwise, <code>getBundle</code> examines the remainder of the\n candidate locale list that was used during the pass that generated the\n result resource bundle.  (As before, candidate bundle names where the\n final component is an empty string are omitted.)  When it comes to the\n end of the candidate list, it tries the plain bundle name.  With each of the\n candidate bundle names it attempts to instantiate a resource bundle (first\n looking for a class and then a properties file, as described above).\n\n <p>Whenever it succeeds, it calls the previously instantiated resource\n bundle's {@link #setParent(java.util.ResourceBundle) setParent} method\n with the new resource bundle.  This continues until the list of names\n is exhausted or the current bundle already has a non-null parent.\n\n <p>Once the parent chain is complete, the bundle is returned.\n\n <p><b>Note:</b> <code>getBundle</code> caches instantiated resource\n bundles and might return the same resource bundle instance multiple times.\n\n <p><b>Note:</b>The <code>baseName</code> argument should be a fully\n qualified class name. However, for compatibility with earlier versions,\n Sun's Java SE Runtime Environments do not verify this, and so it is\n possible to access <code>PropertyResourceBundle</code>s by specifying a\n path name (using \"/\") instead of a fully qualified class name (using\n \".\").\n\n <p><a name=\"default_behavior_example\"/>\n <strong>Example:</strong>\n <p>\n The following class and property files are provided:\n <pre>\n     MyResources.class\n     MyResources.properties\n     MyResources_fr.properties\n     MyResources_fr_CH.class\n     MyResources_fr_CH.properties\n     MyResources_en.properties\n     MyResources_es_ES.class\n </pre>\n\n The contents of all files are valid (that is, public non-abstract\n subclasses of <code>ResourceBundle</code> for the \".class\" files,\n syntactically correct \".properties\" files).  The default locale is\n <code>Locale(\"en\", \"GB\")</code>.\n\n <p>Calling <code>getBundle</code> with the locale arguments below will\n instantiate resource bundles as follows:\n\n <table>\n <tr><td>Locale(\"fr\", \"CH\")</td><td>MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class</td></tr>\n <tr><td>Locale(\"fr\", \"FR\")</td><td>MyResources_fr.properties, parent MyResources.class</td></tr>\n <tr><td>Locale(\"de\", \"DE\")</td><td>MyResources_en.properties, parent MyResources.class</td></tr>\n <tr><td>Locale(\"en\", \"US\")</td><td>MyResources_en.properties, parent MyResources.class</td></tr>\n <tr><td>Locale(\"es\", \"ES\")</td><td>MyResources_es_ES.class, parent MyResources.class</td></tr>\n </table>\n\n <p>The file MyResources_fr_CH.properties is never used because it is\n hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties\n is also hidden by MyResources.class.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for which a resource bundle is desired",
                            "type": "java.util.Locale"
                        },
                        {
                            "name": "loader",
                            "comment_text": "the class loader from which to load the resource bundle",
                            "type": "java.lang.ClassLoader"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBundle",
                    "comment_text": "Returns a resource bundle using the specified base name, target\n locale, class loader and control. Unlike the {@linkplain\n #getBundle(String, Locale, ClassLoader) <code>getBundle</code>\n factory methods with no <code>control</code> argument}, the given\n <code>control</code> specifies how to locate and instantiate resource\n bundles. Conceptually, the bundle loading process with the given\n <code>control</code> is performed in the following steps.\n\n <p>\n <ol>\n <li>This factory method looks up the resource bundle in the cache for\n the specified <code>baseName</code>, <code>targetLocale</code> and\n <code>loader</code>.  If the requested resource bundle instance is\n found in the cache and the time-to-live periods of the instance and\n all of its parent instances have not expired, the instance is returned\n to the caller. Otherwise, this factory method proceeds with the\n loading process below.</li>\n\n <li>The {@link ResourceBundle.Control#getFormats(String)\n control.getFormats} method is called to get resource bundle formats\n to produce bundle or resource names. The strings\n <code>\"java.class\"</code> and <code>\"java.properties\"</code>\n designate class-based and {@linkplain PropertyResourceBundle\n property}-based resource bundles, respectively. Other strings\n starting with <code>\"java.\"</code> are reserved for future extensions\n and must not be used for application-defined formats. Other strings\n designate application-defined formats.</li>\n\n <li>The {@link ResourceBundle.Control#getCandidateLocales(String,\n Locale) control.getCandidateLocales} method is called with the target\n locale to get a list of <em>candidate <code>Locale</code>s</em> for\n which resource bundles are searched.</li>\n\n <li>The {@link ResourceBundle.Control#newBundle(String, Locale,\n String, ClassLoader, boolean) control.newBundle} method is called to\n instantiate a <code>ResourceBundle</code> for the base bundle name, a\n candidate locale, and a format. (Refer to the note on the cache\n lookup below.) This step is iterated over all combinations of the\n candidate locales and formats until the <code>newBundle</code> method\n returns a <code>ResourceBundle</code> instance or the iteration has\n used up all the combinations. For example, if the candidate locales\n are <code>Locale(\"de\", \"DE\")</code>, <code>Locale(\"de\")</code> and\n <code>Locale(\"\")</code> and the formats are <code>\"java.class\"</code>\n and <code>\"java.properties\"</code>, then the following is the\n sequence of locale-format combinations to be used to call\n <code>control.newBundle</code>.\n\n <table style=\"width: 50%; text-align: left; margin-left: 40px;\"\n  border=\"0\" cellpadding=\"2\" cellspacing=\"2\">\n <tbody><code>\n <tr>\n <td\n style=\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\">Locale<br>\n </td>\n <td\n style=\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\">format<br>\n </td>\n </tr>\n <tr>\n <td style=\"vertical-align: top; width: 50%;\">Locale(\"de\", \"DE\")<br>\n </td>\n <td style=\"vertical-align: top; width: 50%;\">java.class<br>\n </td>\n </tr>\n <tr>\n <td style=\"vertical-align: top; width: 50%;\">Locale(\"de\", \"DE\")</td>\n <td style=\"vertical-align: top; width: 50%;\">java.properties<br>\n </td>\n </tr>\n <tr>\n <td style=\"vertical-align: top; width: 50%;\">Locale(\"de\")</td>\n <td style=\"vertical-align: top; width: 50%;\">java.class</td>\n </tr>\n <tr>\n <td style=\"vertical-align: top; width: 50%;\">Locale(\"de\")</td>\n <td style=\"vertical-align: top; width: 50%;\">java.properties</td>\n </tr>\n <tr>\n <td style=\"vertical-align: top; width: 50%;\">Locale(\"\")<br>\n </td>\n <td style=\"vertical-align: top; width: 50%;\">java.class</td>\n </tr>\n <tr>\n <td style=\"vertical-align: top; width: 50%;\">Locale(\"\")</td>\n <td style=\"vertical-align: top; width: 50%;\">java.properties</td>\n </tr>\n </code></tbody>\n </table>\n </li>\n\n <li>If the previous step has found no resource bundle, proceed to\n Step 6. If a bundle has been found that is a base bundle (a bundle\n for <code>Locale(\"\")</code>), and the candidate locale list only contained\n <code>Locale(\"\")</code>, return the bundle to the caller. If a bundle\n has been found that is a base bundle, but the candidate locale list\n contained locales other than Locale(\"\"), put the bundle on hold and\n proceed to Step 6. If a bundle has been found that is not a base\n bundle, proceed to Step 7.</li>\n\n <li>The {@link ResourceBundle.Control#getFallbackLocale(String,\n Locale) control.getFallbackLocale} method is called to get a fallback\n locale (alternative to the current target locale) to try further\n finding a resource bundle. If the method returns a non-null locale,\n it becomes the next target locale and the loading process starts over\n from Step 3. Otherwise, if a base bundle was found and put on hold in\n a previous Step 5, it is returned to the caller now. Otherwise, a\n MissingResourceException is thrown.</li>\n\n <li>At this point, we have found a resource bundle that's not the\n base bundle. If this bundle set its parent during its instantiation,\n it is returned to the caller. Otherwise, its <a\n href=\"./ResourceBundle.html#parent_chain\">parent chain</a> is\n instantiated based on the list of candidate locales from which it was\n found. Finally, the bundle is returned to the caller.</li>\n </ol>\n\n <p>During the resource bundle loading process above, this factory\n method looks up the cache before calling the {@link\n Control#newBundle(String, Locale, String, ClassLoader, boolean)\n control.newBundle} method.  If the time-to-live period of the\n resource bundle found in the cache has expired, the factory method\n calls the {@link ResourceBundle.Control#needsReload(String, Locale,\n String, ClassLoader, ResourceBundle, long) control.needsReload}\n method to determine whether the resource bundle needs to be reloaded.\n If reloading is required, the factory method calls\n <code>control.newBundle</code> to reload the resource bundle.  If\n <code>control.newBundle</code> returns <code>null</code>, the factory\n method puts a dummy resource bundle in the cache as a mark of\n nonexistent resource bundles in order to avoid lookup overhead for\n subsequent requests. Such dummy resource bundles are under the same\n expiration control as specified by <code>control</code>.\n\n <p>All resource bundles loaded are cached by default. Refer to\n {@link Control#getTimeToLive(String,Locale)\n control.getTimeToLive} for details.\n\n <p>The following is an example of the bundle loading process with the\n default <code>ResourceBundle.Control</code> implementation.\n\n <p>Conditions:\n <ul>\n <li>Base bundle name: <code>foo.bar.Messages</code>\n <li>Requested <code>Locale</code>: {@link Locale#ITALY}</li>\n <li>Default <code>Locale</code>: {@link Locale#FRENCH}</li>\n <li>Available resource bundles:\n <code>foo/bar/Messages_fr.properties</code> and\n <code>foo/bar/Messages.properties</code></li>\n </ul>\n\n <p>First, <code>getBundle</code> tries loading a resource bundle in\n the following sequence.\n\n <ul>\n <li>class <code>foo.bar.Messages_it_IT</code>\n <li>file <code>foo/bar/Messages_it_IT.properties</code>\n <li>class <code>foo.bar.Messages_it</code></li>\n <li>file <code>foo/bar/Messages_it.properties</code></li>\n <li>class <code>foo.bar.Messages</code></li>\n <li>file <code>foo/bar/Messages.properties</code></li>\n </ul>\n\n <p>At this point, <code>getBundle</code> finds\n <code>foo/bar/Messages.properties</code>, which is put on hold\n because it's the base bundle.  <code>getBundle</code> calls {@link\n Control#getFallbackLocale(String, Locale)\n control.getFallbackLocale(\"foo.bar.Messages\", Locale.ITALY)} which\n returns <code>Locale.FRENCH</code>. Next, <code>getBundle</code>\n tries loading a bundle in the following sequence.\n\n <ul>\n <li>class <code>foo.bar.Messages_fr</code></li>\n <li>file <code>foo/bar/Messages_fr.properties</code></li>\n <li>class <code>foo.bar.Messages</code></li>\n <li>file <code>foo/bar/Messages.properties</code></li>\n </ul>\n\n <p><code>getBundle</code> finds\n <code>foo/bar/Messages_fr.properties</code> and creates a\n <code>ResourceBundle</code> instance. Then, <code>getBundle</code>\n sets up its parent chain from the list of the candiate locales.  Only\n <code>foo/bar/Messages.properties</code> is found in the list and\n <code>getBundle</code> creates a <code>ResourceBundle</code> instance\n that becomes the parent of the instance for\n <code>foo/bar/Messages_fr.properties</code>.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified\n        class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "targetLocale",
                            "comment_text": "the locale for which a resource bundle is desired",
                            "type": "java.util.Locale"
                        },
                        {
                            "name": "loader",
                            "comment_text": "the class loader from which to load the resource bundle",
                            "type": "java.lang.ClassLoader"
                        },
                        {
                            "name": "control",
                            "comment_text": "the control which gives information for the resource\n        bundle loading process",
                            "type": "java.util.ResourceBundle.Control"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clearCache",
                    "comment_text": "Removes all resource bundles from the cache that have been loaded\n using the caller's class loader.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clearCache",
                    "comment_text": "Removes all resource bundles from the cache that have been loaded\n using the given class loader.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "loader",
                            "comment_text": "the class loader",
                            "type": "java.lang.ClassLoader"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "handleGetObject",
                    "comment_text": "Gets an object for the given key from this resource bundle.\n Returns null if this resource bundle does not contain an\n object for the given key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key for the desired object",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getKeys",
                    "comment_text": "Returns an enumeration of the keys.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Determines whether the given <code>key</code> is contained in\n this <code>ResourceBundle</code> or its parent bundles.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the resource <code>key</code>",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a <code>Set</code> of all keys contained in this\n <code>ResourceBundle</code> and its parent bundles.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "handleKeySet",
                    "comment_text": "Returns a <code>Set</code> of the keys contained <em>only</em>\n in this <code>ResourceBundle</code>.\n\n <p>The default implementation returns a <code>Set</code> of the\n keys returned by the {@link #getKeys() getKeys} method except\n for the ones for which the {@link #handleGetObject(String)\n handleGetObject} method returns <code>null</code>. Once the\n <code>Set</code> has been created, the value is kept in this\n <code>ResourceBundle</code> in order to avoid producing the\n same <code>Set</code> in subsequent calls. Subclasses can\n override this method for faster handling.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ResourceBundle.Control",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "<code>ResourceBundle.Control</code> defines a set of callback methods\n that are invoked by the {@link ResourceBundle#getBundle(String,\n Locale, ClassLoader, Control) ResourceBundle.getBundle} factory\n methods during the bundle loading process. In other words, a\n <code>ResourceBundle.Control</code> collaborates with the factory\n methods for loading resource bundles. The default implementation of\n the callback methods provides the information necessary for the\n factory methods to perform the <a\n href=\"./ResourceBundle.html#default_behavior\">default behavior</a>.\n\n <p>In addition to the callback methods, the {@link\n #toBundleName(String, Locale) toBundleName} and {@link\n #toResourceName(String, String) toResourceName} methods are defined\n primarily for convenience in implementing the callback\n methods. However, the <code>toBundleName</code> method could be\n overridden to provide different conventions in the organization and\n packaging of localized resources.  The <code>toResourceName</code>\n method is <code>final</code> to avoid use of wrong resource and class\n name separators.\n\n <p>Two factory methods, {@link #getControl(List)} and {@link\n #getNoFallbackControl(List)}, provide\n <code>ResourceBundle.Control</code> instances that implement common\n variations of the default bundle loading process.\n\n <p>The formats returned by the {@link Control#getFormats(String)\n getFormats} method and candidate locales returned by the {@link\n ResourceBundle.Control#getCandidateLocales(String, Locale)\n getCandidateLocales} method must be consistent in all\n <code>ResourceBundle.getBundle</code> invocations for the same base\n bundle. Otherwise, the <code>ResourceBundle.getBundle</code> methods\n may return unintended bundles. For example, if only\n <code>\"java.class\"</code> is returned by the <code>getFormats</code>\n method for the first call to <code>ResourceBundle.getBundle</code>\n and only <code>\"java.properties\"</code> for the second call, then the\n second call will return the class-based one that has been cached\n during the first call.\n\n <p>A <code>ResourceBundle.Control</code> instance must be thread-safe\n if it's simultaneously used by multiple threads.\n <code>ResourceBundle.getBundle</code> does not synchronize to call\n the <code>ResourceBundle.Control</code> methods. The default\n implementations of the methods are thread-safe.\n\n <p>Applications can specify <code>ResourceBundle.Control</code>\n instances returned by the <code>getControl</code> factory methods or\n created from a subclass of <code>ResourceBundle.Control</code> to\n customize the bundle loading process. The following are examples of\n changing the default bundle loading process.\n\n <p><b>Example 1</b>\n\n <p>The following code lets <code>ResourceBundle.getBundle</code> look\n up only properties-based resources.\n\n <pre>\n import java.util.*;\n import static java.util.ResourceBundle.Control.*;\n ...\n ResourceBundle bundle =\n   ResourceBundle.getBundle(\"MyResources\", new Locale(\"fr\", \"CH\"),\n                            ResourceBundle.Control.getControl(FORMAT_PROPERTIES));\n </pre>\n\n Given the resource bundles in the <a\n href=\"./ResourceBundle.html#default_behavior_example\">example</a> in\n the <code>ResourceBundle.getBundle</code> description, this\n <code>ResourceBundle.getBundle</code> call loads\n <code>MyResources_fr_CH.properties</code> whose parent is\n <code>MyResources_fr.properties</code> whose parent is\n <code>MyResources.properties</code>. (<code>MyResources_fr_CH.properties</code>\n is not hidden, but <code>MyResources_fr_CH.class</code> is.)\n\n <p><b>Example 2</b>\n\n <p>The following is an example of loading XML-based bundles\n using {@link Properties#loadFromXML(java.io.InputStream)\n Properties.loadFromXML}.\n\n <pre>\n ResourceBundle rb = ResourceBundle.getBundle(\"Messages\",\n     new ResourceBundle.Control() {\n         public List&lt;String&gt; getFormats(String baseName) {\n             if (baseName == null)\n                 throw new NullPointerException();\n             return Arrays.asList(\"xml\");\n         }\n         public ResourceBundle newBundle(String baseName,\n                                         Locale locale,\n                                         String format,\n                                         ClassLoader loader,\n                                         boolean reload)\n                          throws IllegalAccessException,\n                                 InstantiationException,\n                                 IOException {\n             if (baseName == null || locale == null\n                   || format == null || loader == null)\n                 throw new NullPointerException();\n             ResourceBundle bundle = null;\n             if (format.equals(\"xml\")) {\n                 String bundleName = toBundleName(baseName, locale);\n                 String resourceName = toResourceName(bundleName, format);\n                 InputStream stream = null;\n                 if (reload) {\n                     URL url = loader.getResource(resourceName);\n                     if (url != null) {\n                         URLConnection connection = url.openConnection();\n                         if (connection != null) {\n                             // Disable caches to get fresh data for\n                             // reloading.\n                             connection.setUseCaches(false);\n                             stream = connection.getInputStream();\n                         }\n                     }\n                 } else {\n                     stream = loader.getResourceAsStream(resourceName);\n                 }\n                 if (stream != null) {\n                     BufferedInputStream bis = new BufferedInputStream(stream);\n                     bundle = new XMLResourceBundle(bis);\n                     bis.close();\n                 }\n             }\n             return bundle;\n         }\n     });\n\n ...\n\n private static class XMLResourceBundle extends ResourceBundle {\n     private Properties props;\n     XMLResourceBundle(InputStream stream) throws IOException {\n         props = new Properties();\n         props.loadFromXML(stream);\n     }\n     protected Object handleGetObject(String key) {\n         return props.getProperty(key);\n     }\n     public Enumeration&lt;String&gt; getKeys() {\n         ...\n     }\n }\n </pre>",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ResourceBundle.Control",
                    "comment_text": "Sole constructor. (For invocation by subclass constructors,\n typically implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "FORMAT_DEFAULT",
                    "comment_text": "The default format <code>List</code>, which contains the strings\n <code>\"java.class\"</code> and <code>\"java.properties\"</code>, in\n this order. This <code>List</code> is {@linkplain\n Collections#unmodifiableList(List) unmodifiable}.",
                    "type": "java.util.List"
                },
                {
                    "name": "FORMAT_CLASS",
                    "comment_text": "The class-only format <code>List</code> containing\n <code>\"java.class\"</code>. This <code>List</code> is {@linkplain\n Collections#unmodifiableList(List) unmodifiable}.",
                    "type": "java.util.List"
                },
                {
                    "name": "FORMAT_PROPERTIES",
                    "comment_text": "The properties-only format <code>List</code> containing\n <code>\"java.properties\"</code>. This <code>List</code> is\n {@linkplain Collections#unmodifiableList(List) unmodifiable}.",
                    "type": "java.util.List"
                },
                {
                    "name": "TTL_DONT_CACHE",
                    "comment_text": "The time-to-live constant for not caching loaded resource bundle\n instances.",
                    "type": "long"
                },
                {
                    "name": "TTL_NO_EXPIRATION_CONTROL",
                    "comment_text": "The time-to-live constant for disabling the expiration control\n for loaded resource bundle instances in the cache.",
                    "type": "long"
                }
            ],
            "methods": [
                {
                    "name": "getControl",
                    "comment_text": "Returns a <code>ResourceBundle.Control</code> in which the {@link\n #getFormats(String) getFormats} method returns the specified\n <code>formats</code>. The <code>formats</code> must be equal to\n one of {@link Control#FORMAT_PROPERTIES}, {@link\n Control#FORMAT_CLASS} or {@link\n Control#FORMAT_DEFAULT}. <code>ResourceBundle.Control</code>\n instances returned by this method are singletons and thread-safe.\n\n <p>Specifying {@link Control#FORMAT_DEFAULT} is equivalent to\n instantiating the <code>ResourceBundle.Control</code> class,\n except that this method returns a singleton.",
                    "return_type": "java.util.ResourceBundle.Control",
                    "parameters": [
                        {
                            "name": "formats",
                            "comment_text": "the formats to be returned by the\n        <code>ResourceBundle.Control.getFormats</code> method",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getNoFallbackControl",
                    "comment_text": "Returns a <code>ResourceBundle.Control</code> in which the {@link\n #getFormats(String) getFormats} method returns the specified\n <code>formats</code> and the {@link\n Control#getFallbackLocale(String, Locale) getFallbackLocale}\n method returns <code>null</code>. The <code>formats</code> must\n be equal to one of {@link Control#FORMAT_PROPERTIES}, {@link\n Control#FORMAT_CLASS} or {@link Control#FORMAT_DEFAULT}.\n <code>ResourceBundle.Control</code> instances returned by this\n method are singletons and thread-safe.",
                    "return_type": "java.util.ResourceBundle.Control",
                    "parameters": [
                        {
                            "name": "formats",
                            "comment_text": "the formats to be returned by the\n        <code>ResourceBundle.Control.getFormats</code> method",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFormats",
                    "comment_text": "Returns a <code>List</code> of <code>String</code>s containing\n formats to be used to load resource bundles for the given\n <code>baseName</code>. The <code>ResourceBundle.getBundle</code>\n factory method tries to load resource bundles with formats in the\n order specified by the list. The list returned by this method\n must have at least one <code>String</code>. The predefined\n formats are <code>\"java.class\"</code> for class-based resource\n bundles and <code>\"java.properties\"</code> for {@linkplain\n PropertyResourceBundle properties-based} ones. Strings starting\n with <code>\"java.\"</code> are reserved for future extensions and\n must not be used by application-defined formats.\n\n <p>It is not a requirement to return an immutable (unmodifiable)\n <code>List</code>.  However, the returned <code>List</code> must\n not be mutated after it has been returned by\n <code>getFormats</code>.\n\n <p>The default implementation returns {@link #FORMAT_DEFAULT} so\n that the <code>ResourceBundle.getBundle</code> factory method\n looks up first class-based resource bundles, then\n properties-based ones.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully qualified class\n        name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCandidateLocales",
                    "comment_text": "Returns a <code>List</code> of <code>Locale</code>s as candidate\n locales for <code>baseName</code> and <code>locale</code>. This\n method is called by the <code>ResourceBundle.getBundle</code>\n factory method each time the factory method tries finding a\n resource bundle for a target <code>Locale</code>.\n\n <p>The sequence of the candidate locales also corresponds to the\n runtime resource lookup path (also known as the <I>parent\n chain</I>), if the corresponding resource bundles for the\n candidate locales exist and their parents are not defined by\n loaded resource bundles themselves.  The last element of the list\n must be a {@linkplain Locale#ROOT root locale} if it is desired to\n have the base bundle as the terminal of the parent chain.\n\n <p>If the given locale is equal to <code>Locale.ROOT</code> (the\n root locale), a <code>List</code> containing only the root\n <code>Locale</code> must be returned. In this case, the\n <code>ResourceBundle.getBundle</code> factory method loads only\n the base bundle as the resulting resource bundle.\n\n <p>It is not a requirement to return an immutable (unmodifiable)\n <code>List</code>. However, the returned <code>List</code> must not\n be mutated after it has been returned by\n <code>getCandidateLocales</code>.\n\n <p>The default implementation returns a <code>List</code> containing\n <code>Locale</code>s using the rules described below.  In the\n description below, <em>L</em>, <em>S</em>, <em>C</em> and <em>V</em>\n respectively represent non-empty language, script, country, and\n variant.  For example, [<em>L</em>, <em>C</em>] represents a\n <code>Locale</code> that has non-empty values only for language and\n country.  The form <em>L</em>(\"xx\") represents the (non-empty)\n language value is \"xx\".  For all cases, <code>Locale</code>s whose\n final component values are empty strings are omitted.\n\n <ol><li>For an input <code>Locale</code> with an empty script value,\n append candidate <code>Locale</code>s by omitting the final component\n one by one as below:\n\n <ul>\n <li> [<em>L</em>, <em>C</em>, <em>V</em>]\n <li> [<em>L</em>, <em>C</em>]\n <li> [<em>L</em>]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n <li>For an input <code>Locale</code> with a non-empty script value,\n append candidate <code>Locale</code>s by omitting the final component\n up to language, then append candidates generated from the\n <code>Locale</code> with country and variant restored:\n\n <ul>\n <li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V</em>]\n <li> [<em>L</em>, <em>S</em>, <em>C</em>]\n <li> [<em>L</em>, <em>S</em>]\n <li> [<em>L</em>, <em>C</em>, <em>V</em>]\n <li> [<em>L</em>, <em>C</em>]\n <li> [<em>L</em>]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n <li>For an input <code>Locale</code> with a variant value consisting\n of multiple subtags separated by underscore, generate candidate\n <code>Locale</code>s by omitting the variant subtags one by one, then\n insert them after every occurence of <code> Locale</code>s with the\n full variant value in the original list.  For example, if the\n the variant consists of two subtags <em>V1</em> and <em>V2</em>:\n\n <ul>\n <li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V1</em>, <em>V2</em>]\n <li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V1</em>]\n <li> [<em>L</em>, <em>S</em>, <em>C</em>]\n <li> [<em>L</em>, <em>S</em>]\n <li> [<em>L</em>, <em>C</em>, <em>V1</em>, <em>V2</em>]\n <li> [<em>L</em>, <em>C</em>, <em>V1</em>]\n <li> [<em>L</em>, <em>C</em>]\n <li> [<em>L</em>]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n <li>Special cases for Chinese.  When an input <code>Locale</code> has the\n language \"zh\" (Chinese) and an empty script value, either \"Hans\" (Simplified) or\n \"Hant\" (Traditional) might be supplied, depending on the country.\n When the country is \"CN\" (China) or \"SG\" (Singapore), \"Hans\" is supplied.\n When the country is \"HK\" (Hong Kong SAR China), \"MO\" (Macau SAR China),\n or \"TW\" (Taiwan), \"Hant\" is supplied.  For all other countries or when the country\n is empty, no script is supplied.  For example, for <code>Locale(\"zh\", \"CN\")\n </code>, the candidate list will be:\n <ul>\n <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hans\"), <em>C</em>(\"CN\")]\n <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hans\")]\n <li> [<em>L</em>(\"zh\"), <em>C</em>(\"CN\")]\n <li> [<em>L</em>(\"zh\")]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n For <code>Locale(\"zh\", \"TW\")</code>, the candidate list will be:\n <ul>\n <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hant\"), <em>C</em>(\"TW\")]\n <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hant\")]\n <li> [<em>L</em>(\"zh\"), <em>C</em>(\"TW\")]\n <li> [<em>L</em>(\"zh\")]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n <li>Special cases for Norwegian.  Both <code>Locale(\"no\", \"NO\",\n \"NY\")</code> and <code>Locale(\"nn\", \"NO\")</code> represent Norwegian\n Nynorsk.  When a locale's language is \"nn\", the standard candidate\n list is generated up to [<em>L</em>(\"nn\")], and then the following\n candidates are added:\n\n <ul><li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\"), <em>V</em>(\"NY\")]\n <li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\")]\n <li> [<em>L</em>(\"no\")]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n If the locale is exactly <code>Locale(\"no\", \"NO\", \"NY\")</code>, it is first\n converted to <code>Locale(\"nn\", \"NO\")</code> and then the above procedure is\n followed.\n\n <p>Also, Java treats the language \"no\" as a synonym of Norwegian\n Bokm&#xE5;l \"nb\".  Except for the single case <code>Locale(\"no\",\n \"NO\", \"NY\")</code> (handled above), when an input <code>Locale</code>\n has language \"no\" or \"nb\", candidate <code>Locale</code>s with\n language code \"no\" and \"nb\" are interleaved, first using the\n requested language, then using its synonym. For example,\n <code>Locale(\"nb\", \"NO\", \"POSIX\")</code> generates the following\n candidate list:\n\n <ul>\n <li> [<em>L</em>(\"nb\"), <em>C</em>(\"NO\"), <em>V</em>(\"POSIX\")]\n <li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\"), <em>V</em>(\"POSIX\")]\n <li> [<em>L</em>(\"nb\"), <em>C</em>(\"NO\")]\n <li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\")]\n <li> [<em>L</em>(\"nb\")]\n <li> [<em>L</em>(\"no\")]\n <li> <code>Locale.ROOT</code>\n </ul>\n\n <code>Locale(\"no\", \"NO\", \"POSIX\")</code> would generate the same list\n except that locales with \"no\" would appear before the corresponding\n locales with \"nb\".</li>\n\n </li>\n </ol>\n\n <p>The default implementation uses an {@link ArrayList} that\n overriding implementations may modify before returning it to the\n caller. However, a subclass must not modify it after it has\n been returned by <code>getCandidateLocales</code>.\n\n <p>For example, if the given <code>baseName</code> is \"Messages\"\n and the given <code>locale</code> is\n <code>Locale(\"ja\",&nbsp;\"\",&nbsp;\"XX\")</code>, then a\n <code>List</code> of <code>Locale</code>s:\n <pre>\n     Locale(\"ja\", \"\", \"XX\")\n     Locale(\"ja\")\n     Locale.ROOT\n </pre>\n is returned. And if the resource bundles for the \"ja\" and\n \"\" <code>Locale</code>s are found, then the runtime resource\n lookup path (parent chain) is:\n <pre>\n     Messages_ja -> Messages\n </pre>",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully\n        qualified class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for which a resource bundle is desired",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFallbackLocale",
                    "comment_text": "Returns a <code>Locale</code> to be used as a fallback locale for\n further resource bundle searches by the\n <code>ResourceBundle.getBundle</code> factory method. This method\n is called from the factory method every time when no resulting\n resource bundle has been found for <code>baseName</code> and\n <code>locale</code>, where locale is either the parameter for\n <code>ResourceBundle.getBundle</code> or the previous fallback\n locale returned by this method.\n\n <p>The method returns <code>null</code> if no further fallback\n search is desired.\n\n <p>The default implementation returns the {@linkplain\n Locale#getDefault() default <code>Locale</code>} if the given\n <code>locale</code> isn't the default one.  Otherwise,\n <code>null</code> is returned.",
                    "return_type": "java.util.Locale",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully\n        qualified class name for which\n        <code>ResourceBundle.getBundle</code> has been\n        unable to find any resource bundles (except for the\n        base bundle)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the <code>Locale</code> for which\n        <code>ResourceBundle.getBundle</code> has been\n        unable to find any resource bundles (except for the\n        base bundle)",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newBundle",
                    "comment_text": "Instantiates a resource bundle for the given bundle name of the\n given format and locale, using the given class loader if\n necessary. This method returns <code>null</code> if there is no\n resource bundle available for the given parameters. If a resource\n bundle can't be instantiated due to an unexpected error, the\n error must be reported by throwing an <code>Error</code> or\n <code>Exception</code> rather than simply returning\n <code>null</code>.\n\n <p>If the <code>reload</code> flag is <code>true</code>, it\n indicates that this method is being called because the previously\n loaded resource bundle has expired.\n\n <p>The default implementation instantiates a\n <code>ResourceBundle</code> as follows.\n\n <ul>\n\n <li>The bundle name is obtained by calling {@link\n #toBundleName(String, Locale) toBundleName(baseName,\n locale)}.</li>\n\n <li>If <code>format</code> is <code>\"java.class\"</code>, the\n {@link Class} specified by the bundle name is loaded by calling\n {@link ClassLoader#loadClass(String)}. Then, a\n <code>ResourceBundle</code> is instantiated by calling {@link\n Class#newInstance()}.  Note that the <code>reload</code> flag is\n ignored for loading class-based resource bundles in this default\n implementation.</li>\n\n <li>If <code>format</code> is <code>\"java.properties\"</code>,\n {@link #toResourceName(String, String) toResourceName(bundlename,\n \"properties\")} is called to get the resource name.\n If <code>reload</code> is <code>true</code>, {@link\n ClassLoader#getResource(String) load.getResource} is called\n to get a {@link URL} for creating a {@link\n URLConnection}. This <code>URLConnection</code> is used to\n {@linkplain URLConnection#setUseCaches(boolean) disable the\n caches} of the underlying resource loading layers,\n and to {@linkplain URLConnection#getInputStream() get an\n <code>InputStream</code>}.\n Otherwise, {@link ClassLoader#getResourceAsStream(String)\n loader.getResourceAsStream} is called to get an {@link\n InputStream}. Then, a {@link\n PropertyResourceBundle} is constructed with the\n <code>InputStream</code>.</li>\n\n <li>If <code>format</code> is neither <code>\"java.class\"</code>\n nor <code>\"java.properties\"</code>, an\n <code>IllegalArgumentException</code> is thrown.</li>\n\n </ul>",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base bundle name of the resource bundle, a fully\n        qualified class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for which the resource bundle should be\n        instantiated",
                            "type": "java.util.Locale"
                        },
                        {
                            "name": "format",
                            "comment_text": "the resource bundle format to be loaded",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "loader",
                            "comment_text": "the <code>ClassLoader</code> to use to load the bundle",
                            "type": "java.lang.ClassLoader"
                        },
                        {
                            "name": "reload",
                            "comment_text": "the flag to indicate bundle reloading; <code>true</code>\n        if reloading an expired resource bundle,\n        <code>false</code> otherwise",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.IllegalAccessException",
                            "comment_text": "if the class or its nullary constructor is not\n        accessible."
                        },
                        {
                            "name": "java.lang.InstantiationException",
                            "comment_text": "if the instantiation of a class fails for some other\n        reason."
                        },
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error occurred when reading resources using\n        any I/O operations"
                        }
                    ]
                },
                {
                    "name": "getTimeToLive",
                    "comment_text": "Returns the time-to-live (TTL) value for resource bundles that\n are loaded under this\n <code>ResourceBundle.Control</code>. Positive time-to-live values\n specify the number of milliseconds a bundle can remain in the\n cache without being validated against the source data from which\n it was constructed. The value 0 indicates that a bundle must be\n validated each time it is retrieved from the cache. {@link\n #TTL_DONT_CACHE} specifies that loaded resource bundles are not\n put in the cache. {@link #TTL_NO_EXPIRATION_CONTROL} specifies\n that loaded resource bundles are put in the cache with no\n expiration control.\n\n <p>The expiration affects only the bundle loading process by the\n <code>ResourceBundle.getBundle</code> factory method.  That is,\n if the factory method finds a resource bundle in the cache that\n has expired, the factory method calls the {@link\n #needsReload(String, Locale, String, ClassLoader, ResourceBundle,\n long) needsReload} method to determine whether the resource\n bundle needs to be reloaded. If <code>needsReload</code> returns\n <code>true</code>, the cached resource bundle instance is removed\n from the cache. Otherwise, the instance stays in the cache,\n updated with the new TTL value returned by this method.\n\n <p>All cached resource bundles are subject to removal from the\n cache due to memory constraints of the runtime environment.\n Returning a large positive value doesn't mean to lock loaded\n resource bundles in the cache.\n\n <p>The default implementation returns {@link #TTL_NO_EXPIRATION_CONTROL}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle for which the\n        expiration value is specified.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale of the resource bundle for which the\n        expiration value is specified.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "needsReload",
                    "comment_text": "Determines if the expired <code>bundle</code> in the cache needs\n to be reloaded based on the loading time given by\n <code>loadTime</code> or some other criteria. The method returns\n <code>true</code> if reloading is required; <code>false</code>\n otherwise. <code>loadTime</code> is a millisecond offset since\n the <a href=\"Calendar.html#Epoch\"> <code>Calendar</code>\n Epoch</a>.\n\n The calling <code>ResourceBundle.getBundle</code> factory method\n calls this method on the <code>ResourceBundle.Control</code>\n instance used for its current invocation, not on the instance\n used in the invocation that originally loaded the resource\n bundle.\n\n <p>The default implementation compares <code>loadTime</code> and\n the last modified time of the source data of the resource\n bundle. If it's determined that the source data has been modified\n since <code>loadTime</code>, <code>true</code> is\n returned. Otherwise, <code>false</code> is returned. This\n implementation assumes that the given <code>format</code> is the\n same string as its file suffix if it's not one of the default\n formats, <code>\"java.class\"</code> or\n <code>\"java.properties\"</code>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base bundle name of the resource bundle, a\n        fully qualified class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for which the resource bundle\n        should be instantiated",
                            "type": "java.util.Locale"
                        },
                        {
                            "name": "format",
                            "comment_text": "the resource bundle format to be loaded",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "loader",
                            "comment_text": "the <code>ClassLoader</code> to use to load the bundle",
                            "type": "java.lang.ClassLoader"
                        },
                        {
                            "name": "bundle",
                            "comment_text": "the resource bundle instance that has been expired\n        in the cache",
                            "type": "java.util.ResourceBundle"
                        },
                        {
                            "name": "loadTime",
                            "comment_text": "the time when <code>bundle</code> was loaded and put\n        in the cache",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toBundleName",
                    "comment_text": "Converts the given <code>baseName</code> and <code>locale</code>\n to the bundle name. This method is called from the default\n implementation of the {@link #newBundle(String, Locale, String,\n ClassLoader, boolean) newBundle} and {@link #needsReload(String,\n Locale, String, ClassLoader, ResourceBundle, long) needsReload}\n methods.\n\n <p>This implementation returns the following value:\n <pre>\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n </pre>\n where <code>language</code>, <code>script</code>, <code>country</code>,\n and <code>variant</code> are the language, script, country, and variant\n values of <code>locale</code>, respectively. Final component values that\n are empty Strings are omitted along with the preceding '_'.  When the\n script is empty, the script value is ommitted along with the preceding '_'.\n If all of the values are empty strings, then <code>baseName</code>\n is returned.\n\n <p>For example, if <code>baseName</code> is\n <code>\"baseName\"</code> and <code>locale</code> is\n <code>Locale(\"ja\",&nbsp;\"\",&nbsp;\"XX\")</code>, then\n <code>\"baseName_ja_&thinsp;_XX\"</code> is returned. If the given\n locale is <code>Locale(\"en\")</code>, then\n <code>\"baseName_en\"</code> is returned.\n\n <p>Overriding this method allows applications to use different\n conventions in the organization and packaging of localized\n resources.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "baseName",
                            "comment_text": "the base name of the resource bundle, a fully\n        qualified class name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for which a resource bundle should be\n        loaded",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toResourceName",
                    "comment_text": "Converts the given <code>bundleName</code> to the form required\n by the {@link ClassLoader#getResource ClassLoader.getResource}\n method by replacing all occurrences of <code>'.'</code> in\n <code>bundleName</code> with <code>'/'</code> and appending a\n <code>'.'</code> and the given file <code>suffix</code>. For\n example, if <code>bundleName</code> is\n <code>\"foo.bar.MyResources_ja_JP\"</code> and <code>suffix</code>\n is <code>\"properties\"</code>, then\n <code>\"foo/bar/MyResources_ja_JP.properties\"</code> is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "bundleName",
                            "comment_text": "the bundle name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "suffix",
                            "comment_text": "the file type suffix",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.RandomAccess",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "Marker interface used by <tt>List</tt> implementations to indicate that\n they support fast (generally constant time) random access.  The primary\n purpose of this interface is to allow generic algorithms to alter their\n behavior to provide good performance when applied to either random or\n sequential access lists.\n\n <p>The best algorithms for manipulating random access lists (such as\n <tt>ArrayList</tt>) can produce quadratic behavior when applied to\n sequential access lists (such as <tt>LinkedList</tt>).  Generic list\n algorithms are encouraged to check whether the given list is an\n <tt>instanceof</tt> this interface before applying an algorithm that would\n provide poor performance if it were applied to a sequential access list,\n and to alter their behavior if necessary to guarantee acceptable\n performance.\n\n <p>It is recognized that the distinction between random and sequential\n access is often fuzzy.  For example, some <tt>List</tt> implementations\n provide asymptotically linear access times if they get huge, but constant\n access times in practice.  Such a <tt>List</tt> implementation\n should generally implement this interface.  As a rule of thumb, a\n <tt>List</tt> implementation should implement this interface if,\n for typical instances of the class, this loop:\n <pre>\n     for (int i=0, n=list.size(); i &lt; n; i++)\n         list.get(i);\n </pre>\n runs faster than this loop:\n <pre>\n     for (Iterator i=list.iterator(); i.hasNext(); )\n         i.next();\n </pre>\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.Random",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An instance of this class is used to generate a stream of\n pseudorandom numbers. The class uses a 48-bit seed, which is\n modified using a linear congruential formula. (See Donald Knuth,\n <i>The Art of Computer Programming, Volume 2</i>, Section 3.2.1.)\n <p>\n If two instances of {@code Random} are created with the same\n seed, and the same sequence of method calls is made for each, they\n will generate and return identical sequences of numbers. In order to\n guarantee this property, particular algorithms are specified for the\n class {@code Random}. Java implementations must use all the algorithms\n shown here for the class {@code Random}, for the sake of absolute\n portability of Java code. However, subclasses of class {@code Random}\n are permitted to use other algorithms, so long as they adhere to the\n general contracts for all the methods.\n <p>\n The algorithms implemented by class {@code Random} use a\n {@code protected} utility method that on each invocation can supply\n up to 32 pseudorandomly generated bits.\n <p>\n Many applications will find the method {@link Math#random} simpler to use.\n\n <p>Instances of {@code java.util.Random} are threadsafe.\n However, the concurrent use of the same {@code java.util.Random}\n instance across threads may encounter contention and consequent\n poor performance. Consider instead using\n {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n designs.\n\n <p>Instances of {@code java.util.Random} are not cryptographically\n secure.  Consider instead using {@link java.security.SecureRandom} to\n get a cryptographically secure pseudo-random number generator for use\n by security-sensitive applications.",
            "since": "1.0",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Random",
                    "comment_text": "Creates a new random number generator. This constructor sets\n the seed of the random number generator to a value very likely\n to be distinct from any other invocation of this constructor.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Random",
                    "comment_text": "Creates a new random number generator using a single {@code long} seed.\n The seed is the initial value of the internal state of the pseudorandom\n number generator which is maintained by method {@link #next}.\n\n <p>The invocation {@code new Random(seed)} is equivalent to:\n  <pre> {@code\n Random rnd = new Random();\n rnd.setSeed(seed);}</pre>",
                    "parameters": [
                        {
                            "name": "seed",
                            "comment_text": "the initial seed",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "setSeed",
                    "comment_text": "Sets the seed of this random number generator using a single\n {@code long} seed. The general contract of {@code setSeed} is\n that it alters the state of this random number generator object\n so as to be in exactly the same state as if it had just been\n created with the argument {@code seed} as a seed. The method\n {@code setSeed} is implemented by class {@code Random} by\n atomically updating the seed to\n  <pre>{@code (seed ^ 0x5DEECE66DL) & ((1L << 48) - 1)}</pre>\n and clearing the {@code haveNextNextGaussian} flag used by {@link\n #nextGaussian}.\n\n <p>The implementation of {@code setSeed} by class {@code Random}\n happens to use only 48 bits of the given seed. In general, however,\n an overriding method may use all 64 bits of the {@code long}\n argument as a seed value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "seed",
                            "comment_text": "the initial seed",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "Generates the next pseudorandom number. Subclasses should\n override this, as this is used by all other methods.\n\n <p>The general contract of {@code next} is that it returns an\n {@code int} value and if the argument {@code bits} is between\n {@code 1} and {@code 32} (inclusive), then that many low-order\n bits of the returned value will be (approximately) independently\n chosen bit values, each of which is (approximately) equally\n likely to be {@code 0} or {@code 1}. The method {@code next} is\n implemented by class {@code Random} by atomically updating the seed to\n  <pre>{@code (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1)}</pre>\n and returning\n  <pre>{@code (int)(seed >>> (48 - bits))}.</pre>\n\n This is a linear congruential pseudorandom number generator, as\n defined by D. H. Lehmer and described by Donald E. Knuth in\n <i>The Art of Computer Programming,</i> Volume 3:\n <i>Seminumerical Algorithms</i>, section 3.2.1.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "bits",
                            "comment_text": "random bits",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextBytes",
                    "comment_text": "Generates random bytes and places them into a user-supplied\n byte array.  The number of random bytes produced is equal to\n the length of the byte array.\n\n <p>The method {@code nextBytes} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public void nextBytes(byte[] bytes) {\n   for (int i = 0; i < bytes.length; )\n     for (int rnd = nextInt(), n = Math.min(bytes.length - i, 4);\n          n-- > 0; rnd >>= 8)\n       bytes[i++] = (byte)rnd;\n }}</pre>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "bytes",
                            "comment_text": "the byte array to fill with random bytes",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextInt",
                    "comment_text": "Returns the next pseudorandom, uniformly distributed {@code int}\n value from this random number generator's sequence. The general\n contract of {@code nextInt} is that one {@code int} value is\n pseudorandomly generated and returned. All 2<font size=\"-1\"><sup>32\n </sup></font> possible {@code int} values are produced with\n (approximately) equal probability.\n\n <p>The method {@code nextInt} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public int nextInt() {\n   return next(32);\n }}</pre>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextInt",
                    "comment_text": "Returns a pseudorandom, uniformly distributed {@code int} value\n between 0 (inclusive) and the specified value (exclusive), drawn from\n this random number generator's sequence.  The general contract of\n {@code nextInt} is that one {@code int} value in the specified range\n is pseudorandomly generated and returned.  All {@code n} possible\n {@code int} values are produced with (approximately) equal\n probability.  The method {@code nextInt(int n)} is implemented by\n class {@code Random} as if by:\n  <pre> {@code\n public int nextInt(int n) {\n   if (n <= 0)\n     throw new IllegalArgumentException(\"n must be positive\");\n\n   if ((n & -n) == n)  // i.e., n is a power of 2\n     return (int)((n * (long)next(31)) >> 31);\n\n   int bits, val;\n   do {\n       bits = next(31);\n       val = bits % n;\n   } while (bits - val + (n-1) < 0);\n   return val;\n }}</pre>\n\n <p>The hedge \"approximately\" is used in the foregoing description only\n because the next method is only approximately an unbiased source of\n independently chosen bits.  If it were a perfect source of randomly\n chosen bits, then the algorithm shown would choose {@code int}\n values from the stated range with perfect uniformity.\n <p>\n The algorithm is slightly tricky.  It rejects values that would result\n in an uneven distribution (due to the fact that 2^31 is not divisible\n by n). The probability of a value being rejected depends on n.  The\n worst case is n=2^30+1, for which the probability of a reject is 1/2,\n and the expected number of iterations before the loop terminates is 2.\n <p>\n The algorithm treats the case where n is a power of two specially: it\n returns the correct number of high-order bits from the underlying\n pseudo-random number generator.  In the absence of special treatment,\n the correct number of <i>low-order</i> bits would be returned.  Linear\n congruential pseudo-random number generators such as the one\n implemented by this class are known to have short periods in the\n sequence of values of their low-order bits.  Thus, this special case\n greatly increases the length of the sequence of values returned by\n successive calls to this method if n is a small power of two.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the bound on the random number to be returned.  Must be\n        positive.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextLong",
                    "comment_text": "Returns the next pseudorandom, uniformly distributed {@code long}\n value from this random number generator's sequence. The general\n contract of {@code nextLong} is that one {@code long} value is\n pseudorandomly generated and returned.\n\n <p>The method {@code nextLong} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public long nextLong() {\n   return ((long)next(32) << 32) + next(32);\n }}</pre>\n\n Because class {@code Random} uses a seed with only 48 bits,\n this algorithm will not return all possible {@code long} values.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextBoolean",
                    "comment_text": "Returns the next pseudorandom, uniformly distributed\n {@code boolean} value from this random number generator's\n sequence. The general contract of {@code nextBoolean} is that one\n {@code boolean} value is pseudorandomly generated and returned.  The\n values {@code true} and {@code false} are produced with\n (approximately) equal probability.\n\n <p>The method {@code nextBoolean} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public boolean nextBoolean() {\n   return next(1) != 0;\n }}</pre>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextFloat",
                    "comment_text": "Returns the next pseudorandom, uniformly distributed {@code float}\n value between {@code 0.0} and {@code 1.0} from this random\n number generator's sequence.\n\n <p>The general contract of {@code nextFloat} is that one\n {@code float} value, chosen (approximately) uniformly from the\n range {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive), is\n pseudorandomly generated and returned. All 2<font\n size=\"-1\"><sup>24</sup></font> possible {@code float} values\n of the form <i>m&nbsp;x&nbsp</i>2<font\n size=\"-1\"><sup>-24</sup></font>, where <i>m</i> is a positive\n integer less than 2<font size=\"-1\"><sup>24</sup> </font>, are\n produced with (approximately) equal probability.\n\n <p>The method {@code nextFloat} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public float nextFloat() {\n   return next(24) / ((float)(1 << 24));\n }}</pre>\n\n <p>The hedge \"approximately\" is used in the foregoing description only\n because the next method is only approximately an unbiased source of\n independently chosen bits. If it were a perfect source of randomly\n chosen bits, then the algorithm shown would choose {@code float}\n values from the stated range with perfect uniformity.<p>\n [In early versions of Java, the result was incorrectly calculated as:\n  <pre> {@code\n   return next(30) / ((float)(1 << 30));}</pre>\n This might seem to be equivalent, if not better, but in fact it\n introduced a slight nonuniformity because of the bias in the rounding\n of floating-point numbers: it was slightly more likely that the\n low-order bit of the significand would be 0 than that it would be 1.]",
                    "return_type": "float",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextDouble",
                    "comment_text": "Returns the next pseudorandom, uniformly distributed\n {@code double} value between {@code 0.0} and\n {@code 1.0} from this random number generator's sequence.\n\n <p>The general contract of {@code nextDouble} is that one\n {@code double} value, chosen (approximately) uniformly from the\n range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is\n pseudorandomly generated and returned.\n\n <p>The method {@code nextDouble} is implemented by class {@code Random}\n as if by:\n  <pre> {@code\n public double nextDouble() {\n   return (((long)next(26) << 27) + next(27))\n     / (double)(1L << 53);\n }}</pre>\n\n <p>The hedge \"approximately\" is used in the foregoing description only\n because the {@code next} method is only approximately an unbiased\n source of independently chosen bits. If it were a perfect source of\n randomly chosen bits, then the algorithm shown would choose\n {@code double} values from the stated range with perfect uniformity.\n <p>[In early versions of Java, the result was incorrectly calculated as:\n  <pre> {@code\n   return (((long)next(27) << 27) + next(27))\n     / (double)(1L << 54);}</pre>\n This might seem to be equivalent, if not better, but in fact it\n introduced a large nonuniformity because of the bias in the rounding\n of floating-point numbers: it was three times as likely that the\n low-order bit of the significand would be 0 than that it would be 1!\n This nonuniformity probably doesn't matter much in practice, but we\n strive for perfection.]",
                    "return_type": "double",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextGaussian",
                    "comment_text": "Returns the next pseudorandom, Gaussian (\"normally\") distributed\n {@code double} value with mean {@code 0.0} and standard\n deviation {@code 1.0} from this random number generator's sequence.\n <p>\n The general contract of {@code nextGaussian} is that one\n {@code double} value, chosen from (approximately) the usual\n normal distribution with mean {@code 0.0} and standard deviation\n {@code 1.0}, is pseudorandomly generated and returned.\n\n <p>The method {@code nextGaussian} is implemented by class\n {@code Random} as if by a threadsafe version of the following:\n  <pre> {@code\n private double nextNextGaussian;\n private boolean haveNextNextGaussian = false;\n\n public double nextGaussian() {\n   if (haveNextNextGaussian) {\n     haveNextNextGaussian = false;\n     return nextNextGaussian;\n   } else {\n     double v1, v2, s;\n     do {\n       v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n       v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n       s = v1 * v1 + v2 * v2;\n     } while (s >= 1 || s == 0);\n     double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);\n     nextNextGaussian = v2 * multiplier;\n     haveNextNextGaussian = true;\n     return v1 * multiplier;\n   }\n }}</pre>\n This uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and\n G. Marsaglia, as described by Donald E. Knuth in <i>The Art of\n Computer Programming</i>, Volume 3: <i>Seminumerical Algorithms</i>,\n section 3.4.1, subsection C, algorithm P. Note that it generates two\n independent values at the cost of only one call to {@code StrictMath.log}\n and one call to {@code StrictMath.sqrt}.",
                    "return_type": "double",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Queue",
            "interfaces": [
                "java.util.Collection"
            ],
            "superclass": "",
            "comment_text": "A collection designed for holding elements prior to processing.\n Besides basic {@link java.util.Collection Collection} operations,\n queues provide additional insertion, extraction, and inspection\n operations.  Each of these methods exists in two forms: one throws\n an exception if the operation fails, the other returns a special\n value (either <tt>null</tt> or <tt>false</tt>, depending on the\n operation).  The latter form of the insert operation is designed\n specifically for use with capacity-restricted <tt>Queue</tt>\n implementations; in most implementations, insert operations cannot\n fail.\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Returns special value</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #add add(e)}</td>\n    <td>{@link #offer offer(e)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #remove remove()}</td>\n    <td>{@link #poll poll()}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #element element()}</td>\n    <td>{@link #peek peek()}</td>\n  </tr>\n </table>\n\n <p>Queues typically, but do not necessarily, order elements in a\n FIFO (first-in-first-out) manner.  Among the exceptions are\n priority queues, which order elements according to a supplied\n comparator, or the elements' natural ordering, and LIFO queues (or\n stacks) which order the elements LIFO (last-in-first-out).\n Whatever the ordering used, the <em>head</em> of the queue is that\n element which would be removed by a call to {@link #remove() } or\n {@link #poll()}.  In a FIFO queue, all new elements are inserted at\n the <em> tail</em> of the queue. Other kinds of queues may use\n different placement rules.  Every <tt>Queue</tt> implementation\n must specify its ordering properties.\n\n <p>The {@link #offer offer} method inserts an element if possible,\n otherwise returning <tt>false</tt>.  This differs from the {@link\n java.util.Collection#add Collection.add} method, which can fail to\n add an element only by throwing an unchecked exception.  The\n <tt>offer</tt> method is designed for use when failure is a normal,\n rather than exceptional occurrence, for example, in fixed-capacity\n (or &quot;bounded&quot;) queues.\n\n <p>The {@link #remove()} and {@link #poll()} methods remove and\n return the head of the queue.\n Exactly which element is removed from the queue is a\n function of the queue's ordering policy, which differs from\n implementation to implementation. The <tt>remove()</tt> and\n <tt>poll()</tt> methods differ only in their behavior when the\n queue is empty: the <tt>remove()</tt> method throws an exception,\n while the <tt>poll()</tt> method returns <tt>null</tt>.\n\n <p>The {@link #element()} and {@link #peek()} methods return, but do\n not remove, the head of the queue.\n\n <p>The <tt>Queue</tt> interface does not define the <i>blocking queue\n methods</i>, which are common in concurrent programming.  These methods,\n which wait for elements to appear or for space to become available, are\n defined in the {@link java.util.concurrent.BlockingQueue} interface, which\n extends this interface.\n\n <p><tt>Queue</tt> implementations generally do not allow insertion\n of <tt>null</tt> elements, although some implementations, such as\n {@link LinkedList}, do not prohibit insertion of <tt>null</tt>.\n Even in the implementations that permit it, <tt>null</tt> should\n not be inserted into a <tt>Queue</tt>, as <tt>null</tt> is also\n used as a special return value by the <tt>poll</tt> method to\n indicate that the queue contains no elements.\n\n <p><tt>Queue</tt> implementations generally do not define\n element-based versions of methods <tt>equals</tt> and\n <tt>hashCode</tt> but instead inherit the identity based versions\n from class <tt>Object</tt>, because element-based equality is not\n always well-defined for queues with the same elements but different\n ordering properties.\n\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [
                "java.util.Collection",
                "java.util.LinkedList",
                "java.util.PriorityQueue",
                "java.util.concurrent.LinkedBlockingQueue",
                "java.util.concurrent.BlockingQueue",
                "java.util.concurrent.ArrayBlockingQueue",
                "java.util.concurrent.LinkedBlockingQueue",
                "java.util.concurrent.PriorityBlockingQueue"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt>\n if no space is currently available.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions.\n When using a capacity-restricted queue, this method is generally\n preferable to {@link #add}, which can fail to insert an element only\n by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head of this queue.  This method differs\n from {@link #poll poll} only in that it throws an exception if this\n queue is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of this queue,\n or returns <tt>null</tt> if this queue is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head of this queue.  This method\n differs from {@link #peek peek} only in that it throws an exception\n if this queue is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Retrieves, but does not remove, the head of this queue,\n or returns <tt>null</tt> if this queue is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.PropertyResourceBundle",
            "interfaces": [

            ],
            "superclass": "java.util.ResourceBundle",
            "comment_text": "<code>PropertyResourceBundle</code> is a concrete subclass of\n <code>ResourceBundle</code> that manages resources for a locale\n using a set of static strings from a property file. See\n {@link ResourceBundle ResourceBundle} for more information about resource\n bundles.\n\n <p>\n Unlike other types of resource bundle, you don't subclass\n <code>PropertyResourceBundle</code>.  Instead, you supply properties\n files containing the resource data.  <code>ResourceBundle.getBundle</code>\n will automatically look for the appropriate properties file and create a\n <code>PropertyResourceBundle</code> that refers to it. See\n {@link ResourceBundle#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) ResourceBundle.getBundle}\n for a complete description of the search and instantiation strategy.\n\n <p>\n The following <a name=\"sample\">example</a> shows a member of a resource\n bundle family with the base name \"MyResources\".\n The text defines the bundle \"MyResources_de\",\n the German member of the bundle family.\n This member is based on <code>PropertyResourceBundle</code>, and the text\n therefore is the content of the file \"MyResources_de.properties\"\n (a related <a href=\"ListResourceBundle.html#sample\">example</a> shows\n how you can add bundles to this family that are implemented as subclasses\n of <code>ListResourceBundle</code>).\n The keys in this example are of the form \"s1\" etc. The actual\n keys are entirely up to your choice, so long as they are the same as\n the keys you use in your program to retrieve the objects from the bundle.\n Keys are case-sensitive.\n <blockquote>\n <pre>\n # MessageFormat pattern\n s1=Die Platte \\\"{1}\\\" enth&auml;lt {0}.\n\n # location of {0} in pattern\n s2=1\n\n # sample disk name\n s3=Meine Platte\n\n # first ChoiceFormat choice\n s4=keine Dateien\n\n # second ChoiceFormat choice\n s5=eine Datei\n\n # third ChoiceFormat choice\n s6={0,number} Dateien\n\n # sample date\n s7=3. M&auml;rz 1996\n </pre>\n </blockquote>\n\n <p>\n <strong>Note:</strong> PropertyResourceBundle can be constructed either\n from an InputStream or a Reader, which represents a property file.\n Constructing a PropertyResourceBundle instance from an InputStream requires\n that the input stream be encoded in ISO-8859-1.  In that case, characters\n that cannot be represented in ISO-8859-1 encoding must be represented by Unicode Escapes\n as defined in section 3.3 of\n <cite>The Java&trade; Language Specification</cite>\n whereas the other constructor which takes a Reader does not have that limitation.",
            "since": "JDK1.1",
            "see": [
                "java.util.ResourceBundle",
                "java.util.ListResourceBundle",
                "java.util.Properties"
            ],
            "constructors": [
                {
                    "name": "PropertyResourceBundle",
                    "comment_text": "Creates a property resource bundle from an {@link java.io.InputStream\n InputStream}.  The property file read with this constructor\n must be encoded in ISO-8859-1.",
                    "parameters": [
                        {
                            "name": "stream",
                            "comment_text": "an InputStream that represents a property file\n        to read from.",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs"
                        }
                    ]
                },
                {
                    "name": "PropertyResourceBundle",
                    "comment_text": "Creates a property resource bundle from a {@link java.io.Reader\n Reader}.  Unlike the constructor\n {@link #PropertyResourceBundle(java.io.InputStream) PropertyResourceBundle(InputStream)},\n there is no limitation as to the encoding of the input property file.",
                    "parameters": [
                        {
                            "name": "reader",
                            "comment_text": "a Reader that represents a property file to\n        read from.",
                            "type": "java.io.Reader"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs"
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "handleGetObject",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getKeys",
                    "comment_text": "Returns an <code>Enumeration</code> of the keys contained in\n this <code>ResourceBundle</code> and its parent bundles.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "handleKeySet",
                    "comment_text": "Returns a <code>Set</code> of the keys contained\n <em>only</em> in this <code>ResourceBundle</code>.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.PropertyPermission",
            "interfaces": [

            ],
            "superclass": "java.security.BasicPermission",
            "comment_text": "This class is for property permissions.\n\n <P>\n The name is the name of the property (\"java.home\",\n \"os.name\", etc). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"java.*\" or \"*\" is valid,\n \"*java\" or \"a*b\" is not valid.\n <P>\n <P>\n The actions to be granted are passed to the constructor in a string containing\n a list of one or more comma-separated keywords. The possible keywords are\n \"read\" and \"write\". Their meaning is defined as follows:\n <P>\n <DL>\n    <DT> read\n    <DD> read permission. Allows <code>System.getProperty</code> to\n         be called.\n    <DT> write\n    <DD> write permission. Allows <code>System.setProperty</code> to\n         be called.\n </DL>\n <P>\n The actions string is converted to lowercase before processing.\n <P>\n Care should be taken before granting code permission to access\n certain system properties.  For example, granting permission to\n access the \"java.home\" system property gives potentially malevolent\n code sensitive information about the system environment (the Java\n installation directory).  Also, granting permission to access\n the \"user.name\" and \"user.home\" system properties gives potentially\n malevolent code sensitive information about the user environment\n (the user's account name and home directory).",
            "since": "1.2",
            "see": [
                "java.security.BasicPermission",
                "java.security.Permission",
                "java.security.Permissions",
                "java.security.PermissionCollection",
                "java.lang.SecurityManager"
            ],
            "constructors": [
                {
                    "name": "PropertyPermission",
                    "comment_text": "Creates a new PropertyPermission object with the specified name.\n The name is the name of the system property, and\n <i>actions</i> contains a comma-separated list of the\n desired actions granted on the property. Possible actions are\n \"read\" and \"write\".",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the PropertyPermission.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "actions",
                            "comment_text": "the actions string.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "implies",
                    "comment_text": "Checks if this PropertyPermission object \"implies\" the specified\n permission.\n <P>\n More specifically, this method returns true if:<p>\n <ul>\n <li> <i>p</i> is an instanceof PropertyPermission,<p>\n <li> <i>p</i>'s actions are a subset of this\n object's actions, and <p>\n <li> <i>p</i>'s name is implied by this object's\n      name. For example, \"java.*\" implies \"java.home\".\n </ul>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "p",
                            "comment_text": "the permission to check against.",
                            "type": "java.security.Permission"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Checks two PropertyPermission objects for equality. Checks that <i>obj</i> is\n a PropertyPermission, and has the same name and actions as this object.\n <P>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object we are testing for equality with this object.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this object.\n The hash code used is the hash code of this permissions name, that is,\n <code>getName().hashCode()</code>, where <code>getName</code> is\n from the Permission superclass.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActions",
                    "comment_text": "Returns the \"canonical string representation\" of the actions.\n That is, this method always returns present actions in the following order:\n read, write. For example, if this PropertyPermission object\n allows both write and read actions, a call to <code>getActions</code>\n will return the string \"read,write\".",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newPermissionCollection",
                    "comment_text": "Returns a new PermissionCollection object for storing\n PropertyPermission objects.\n <p>",
                    "return_type": "java.security.PermissionCollection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Properties",
            "interfaces": [

            ],
            "superclass": "java.util.Hashtable",
            "comment_text": "The <code>Properties</code> class represents a persistent set of\n properties. The <code>Properties</code> can be saved to a stream\n or loaded from a stream. Each key and its corresponding value in\n the property list is a string.\n <p>\n A property list can contain another property list as its\n \"defaults\"; this second property list is searched if\n the property key is not found in the original property list.\n <p>\n Because <code>Properties</code> inherits from <code>Hashtable</code>, the\n <code>put</code> and <code>putAll</code> methods can be applied to a\n <code>Properties</code> object.  Their use is strongly discouraged as they\n allow the caller to insert entries whose keys or values are not\n <code>Strings</code>.  The <code>setProperty</code> method should be used\n instead.  If the <code>store</code> or <code>save</code> method is called\n on a \"compromised\" <code>Properties</code> object that contains a\n non-<code>String</code> key or value, the call will fail. Similarly,\n the call to the <code>propertyNames</code> or <code>list</code> method\n will fail if it is called on a \"compromised\" <code>Properties</code>\n object that contains a non-<code>String</code> key.\n\n <p>\n The {@link #load(java.io.Reader) load(Reader)} <tt>/</tt>\n {@link #store(java.io.Writer, java.lang.String) store(Writer, String)}\n methods load and store properties from and to a character based stream\n in a simple line-oriented format specified below.\n\n The {@link #load(java.io.InputStream) load(InputStream)} <tt>/</tt>\n {@link #store(java.io.OutputStream, java.lang.String) store(OutputStream, String)}\n methods work the same way as the load(Reader)/store(Writer, String) pair, except\n the input/output stream is encoded in ISO 8859-1 character encoding.\n Characters that cannot be directly represented in this encoding can be written using\n Unicode escapes as defined in section 3.3 of\n <cite>The Java&trade; Language Specification</cite>;\n only a single 'u' character is allowed in an escape\n sequence. The native2ascii tool can be used to convert property files to and\n from other character encodings.\n\n <p> The {@link #loadFromXML(InputStream)} and {@link\n #storeToXML(OutputStream, String, String)} methods load and store properties\n in a simple XML format.  By default the UTF-8 character encoding is used,\n however a specific encoding may be specified if required.  An XML properties\n document has the following DOCTYPE declaration:\n\n <pre>\n &lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;\n </pre>\n Note that the system URI (http://java.sun.com/dtd/properties.dtd) is\n <i>not</i> accessed when exporting or importing properties; it merely\n serves as a string to uniquely identify the DTD, which is:\n <pre>\n    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n    &lt;!-- DTD for properties --&gt;\n\n    &lt;!ELEMENT properties ( comment?, entry* ) &gt;\n\n    &lt;!ATTLIST properties version CDATA #FIXED \"1.0\"&gt;\n\n    &lt;!ELEMENT comment (#PCDATA) &gt;\n\n    &lt;!ELEMENT entry (#PCDATA) &gt;\n\n    &lt;!ATTLIST entry key CDATA #REQUIRED&gt;\n </pre>\n\n <p>This class is thread-safe: multiple threads can share a single\n <tt>Properties</tt> object without the need for external synchronization.",
            "since": "JDK1.0",
            "see": [
                null,
                null
            ],
            "constructors": [
                {
                    "name": "Properties",
                    "comment_text": "Creates an empty property list with no default values.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Properties",
                    "comment_text": "Creates an empty property list with the specified defaults.",
                    "parameters": [
                        {
                            "name": "defaults",
                            "comment_text": "the defaults.",
                            "type": "java.util.Properties"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "defaults",
                    "comment_text": "A property list that contains default values for any keys not\n found in this property list.",
                    "type": "java.util.Properties"
                }
            ],
            "methods": [
                {
                    "name": "setProperty",
                    "comment_text": "Calls the <tt>Hashtable</tt> method <code>put</code>. Provided for\n parallelism with the <tt>getProperty</tt> method. Enforces use of\n strings for property keys and values. The value returned is the\n result of the <tt>Hashtable</tt> call to <code>put</code>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key to be placed into this property list.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value corresponding to <tt>key</tt>.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "load",
                    "comment_text": "Reads a property list (key and element pairs) from the input\n character stream in a simple line-oriented format.\n <p>\n Properties are processed in terms of lines. There are two\n kinds of line, <i>natural lines</i> and <i>logical lines</i>.\n A natural line is defined as a line of\n characters that is terminated either by a set of line terminator\n characters (<code>\\n</code> or <code>\\r</code> or <code>\\r\\n</code>)\n or by the end of the stream. A natural line may be either a blank line,\n a comment line, or hold all or some of a key-element pair. A logical\n line holds all the data of a key-element pair, which may be spread\n out across several adjacent natural lines by escaping\n the line terminator sequence with a backslash character\n <code>\\</code>.  Note that a comment line cannot be extended\n in this manner; every natural line that is a comment must have\n its own comment indicator, as described below. Lines are read from\n input until the end of the stream is reached.\n\n <p>\n A natural line that contains only white space characters is\n considered blank and is ignored.  A comment line has an ASCII\n <code>'#'</code> or <code>'!'</code> as its first non-white\n space character; comment lines are also ignored and do not\n encode key-element information.  In addition to line\n terminators, this format considers the characters space\n (<code>' '</code>, <code>'&#92;u0020'</code>), tab\n (<code>'\\t'</code>, <code>'&#92;u0009'</code>), and form feed\n (<code>'\\f'</code>, <code>'&#92;u000C'</code>) to be white\n space.\n\n <p>\n If a logical line is spread across several natural lines, the\n backslash escaping the line terminator sequence, the line\n terminator sequence, and any white space at the start of the\n following line have no affect on the key or element values.\n The remainder of the discussion of key and element parsing\n (when loading) will assume all the characters constituting\n the key and element appear on a single natural line after\n line continuation characters have been removed.  Note that\n it is <i>not</i> sufficient to only examine the character\n preceding a line terminator sequence to decide if the line\n terminator is escaped; there must be an odd number of\n contiguous backslashes for the line terminator to be escaped.\n Since the input is processed from left to right, a\n non-zero even number of 2<i>n</i> contiguous backslashes\n before a line terminator (or elsewhere) encodes <i>n</i>\n backslashes after escape processing.\n\n <p>\n The key contains all of the characters in the line starting\n with the first non-white space character and up to, but not\n including, the first unescaped <code>'='</code>,\n <code>':'</code>, or white space character other than a line\n terminator. All of these key termination characters may be\n included in the key by escaping them with a preceding backslash\n character; for example,<p>\n\n <code>\\:\\=</code><p>\n\n would be the two-character key <code>\":=\"</code>.  Line\n terminator characters can be included using <code>\\r</code> and\n <code>\\n</code> escape sequences.  Any white space after the\n key is skipped; if the first non-white space character after\n the key is <code>'='</code> or <code>':'</code>, then it is\n ignored and any white space characters after it are also\n skipped.  All remaining characters on the line become part of\n the associated element string; if there are no remaining\n characters, the element is the empty string\n <code>&quot;&quot;</code>.  Once the raw character sequences\n constituting the key and element are identified, escape\n processing is performed as described above.\n\n <p>\n As an example, each of the following three lines specifies the key\n <code>\"Truth\"</code> and the associated element value\n <code>\"Beauty\"</code>:\n <p>\n <pre>\n Truth = Beauty\n  Truth:Beauty\n Truth                    :Beauty\n </pre>\n As another example, the following three lines specify a single\n property:\n <p>\n <pre>\n fruits                           apple, banana, pear, \\\n                                  cantaloupe, watermelon, \\\n                                  kiwi, mango\n </pre>\n The key is <code>\"fruits\"</code> and the associated element is:\n <p>\n <pre>\"apple, banana, pear, cantaloupe, watermelon, kiwi, mango\"</pre>\n Note that a space appears before each <code>\\</code> so that a space\n will appear after each comma in the final result; the <code>\\</code>,\n line terminator, and leading white space on the continuation line are\n merely discarded and are <i>not</i> replaced by one or more other\n characters.\n <p>\n As a third example, the line:\n <p>\n <pre>cheeses\n </pre>\n specifies that the key is <code>\"cheeses\"</code> and the associated\n element is the empty string <code>\"\"</code>.<p>\n <p>\n\n <a name=\"unicodeescapes\"></a>\n Characters in keys and elements can be represented in escape\n sequences similar to those used for character and string literals\n (see sections 3.3 and 3.10.6 of\n <cite>The Java&trade; Language Specification</cite>).\n\n The differences from the character escape sequences and Unicode\n escapes used for characters and strings are:\n\n <ul>\n <li> Octal escapes are not recognized.\n\n <li> The character sequence <code>\\b</code> does <i>not</i>\n represent a backspace character.\n\n <li> The method does not treat a backslash character,\n <code>\\</code>, before a non-valid escape character as an\n error; the backslash is silently dropped.  For example, in a\n Java string the sequence <code>\"\\z\"</code> would cause a\n compile time error.  In contrast, this method silently drops\n the backslash.  Therefore, this method treats the two character\n sequence <code>\"\\b\"</code> as equivalent to the single\n character <code>'b'</code>.\n\n <li> Escapes are not necessary for single and double quotes;\n however, by the rule above, single and double quote characters\n preceded by a backslash still yield single and double quote\n characters, respectively.\n\n <li> Only a single 'u' character is allowed in a Uniocde escape\n sequence.\n\n </ul>\n <p>\n The specified stream remains open after this method returns.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "reader",
                            "comment_text": "the input character stream.",
                            "type": "java.io.Reader"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error occurred when reading from the\n          input stream."
                        }
                    ]
                },
                {
                    "name": "load",
                    "comment_text": "Reads a property list (key and element pairs) from the input\n byte stream. The input stream is in a simple line-oriented\n format as specified in\n {@link #load(java.io.Reader) load(Reader)} and is assumed to use\n the ISO 8859-1 character encoding; that is each byte is one Latin1\n character. Characters not in Latin1, and certain special characters,\n are represented in keys and elements using Unicode escapes as defined in\n section 3.3 of\n <cite>The Java&trade; Language Specification</cite>.\n <p>\n The specified stream remains open after this method returns.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "inStream",
                            "comment_text": "the input stream.",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error occurred when reading from the\n             input stream."
                        }
                    ]
                },
                {
                    "name": "save",
                    "comment_text": "Calls the <code>store(OutputStream out, String comments)</code> method\n and suppresses IOExceptions that were thrown.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "an output stream.",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "comments",
                            "comment_text": "a description of the property list.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "store",
                    "comment_text": "Writes this property list (key and element pairs) in this\n <code>Properties</code> table to the output character stream in a\n format suitable for using the {@link #load(java.io.Reader) load(Reader)}\n method.\n <p>\n Properties from the defaults table of this <code>Properties</code>\n table (if any) are <i>not</i> written out by this method.\n <p>\n If the comments argument is not null, then an ASCII <code>#</code>\n character, the comments string, and a line separator are first written\n to the output stream. Thus, the <code>comments</code> can serve as an\n identifying comment. Any one of a line feed ('\\n'), a carriage\n return ('\\r'), or a carriage return followed immediately by a line feed\n in comments is replaced by a line separator generated by the <code>Writer</code>\n and if the next character in comments is not character <code>#</code> or\n character <code>!</code> then an ASCII <code>#</code> is written out\n after that line separator.\n <p>\n Next, a comment line is always written, consisting of an ASCII\n <code>#</code> character, the current date and time (as if produced\n by the <code>toString</code> method of <code>Date</code> for the\n current time), and a line separator as generated by the <code>Writer</code>.\n <p>\n Then every entry in this <code>Properties</code> table is\n written out, one per line. For each entry the key string is\n written, then an ASCII <code>=</code>, then the associated\n element string. For the key, all space characters are\n written with a preceding <code>\\</code> character.  For the\n element, leading space characters, but not embedded or trailing\n space characters, are written with a preceding <code>\\</code>\n character. The key and element characters <code>#</code>,\n <code>!</code>, <code>=</code>, and <code>:</code> are written\n with a preceding backslash to ensure that they are properly loaded.\n <p>\n After the entries have been written, the output stream is flushed.\n The output stream remains open after this method returns.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "writer",
                            "comment_text": "an output character stream writer.",
                            "type": "java.io.Writer"
                        },
                        {
                            "name": "comments",
                            "comment_text": "a description of the property list.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing this property list to the specified\n             output stream throws an <tt>IOException</tt>."
                        }
                    ]
                },
                {
                    "name": "store",
                    "comment_text": "Writes this property list (key and element pairs) in this\n <code>Properties</code> table to the output stream in a format suitable\n for loading into a <code>Properties</code> table using the\n {@link #load(InputStream) load(InputStream)} method.\n <p>\n Properties from the defaults table of this <code>Properties</code>\n table (if any) are <i>not</i> written out by this method.\n <p>\n This method outputs the comments, properties keys and values in\n the same format as specified in\n {@link #store(java.io.Writer, java.lang.String) store(Writer)},\n with the following differences:\n <ul>\n <li>The stream is written using the ISO 8859-1 character encoding.\n\n <li>Characters not in Latin-1 in the comments are written as\n <code>&#92;u</code><i>xxxx</i> for their appropriate unicode\n hexadecimal value <i>xxxx</i>.\n\n <li>Characters less than <code>&#92;u0020</code> and characters greater\n than <code>&#92;u007E</code> in property keys or values are written\n as <code>&#92;u</code><i>xxxx</i> for the appropriate hexadecimal\n value <i>xxxx</i>.\n </ul>\n <p>\n After the entries have been written, the output stream is flushed.\n The output stream remains open after this method returns.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "an output stream.",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "comments",
                            "comment_text": "a description of the property list.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing this property list to the specified\n             output stream throws an <tt>IOException</tt>."
                        }
                    ]
                },
                {
                    "name": "loadFromXML",
                    "comment_text": "Loads all of the properties represented by the XML document on the\n specified input stream into this properties table.\n\n <p>The XML document must have the following DOCTYPE declaration:\n <pre>\n &lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;\n </pre>\n Furthermore, the document must satisfy the properties DTD described\n above.\n\n <p>The specified stream is closed after this method returns.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream from which to read the XML document.",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if reading from the specified input stream\n         results in an <tt>IOException</tt>."
                        },
                        {
                            "name": "java.util.InvalidPropertiesFormatException",
                            "comment_text": "Data on input stream does not\n         constitute a valid XML document with the mandated document type."
                        }
                    ]
                },
                {
                    "name": "storeToXML",
                    "comment_text": "Emits an XML document representing all of the properties contained\n in this table.\n\n <p> An invocation of this method of the form <tt>props.storeToXML(os,\n comment)</tt> behaves in exactly the same way as the invocation\n <tt>props.storeToXML(os, comment, \"UTF-8\");</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "the output stream on which to emit the XML document.",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "comment",
                            "comment_text": "a description of the property list, or <code>null</code>\n        if no comment is desired.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing to the specified output stream\n         results in an <tt>IOException</tt>."
                        }
                    ]
                },
                {
                    "name": "storeToXML",
                    "comment_text": "Emits an XML document representing all of the properties contained\n in this table, using the specified encoding.\n\n <p>The XML document will have the following DOCTYPE declaration:\n <pre>\n &lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;\n </pre>\n\n<p>If the specified comment is <code>null</code> then no comment\n will be stored in the document.\n\n <p>The specified stream remains open after this method returns.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "the output stream on which to emit the XML document.",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "comment",
                            "comment_text": "a description of the property list, or <code>null</code>\n                  if no comment is desired.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "encoding",
                            "comment_text": "the name of a supported\n                  <a href=\"../lang/package-summary.html#charenc\">\n                  character encoding</a>",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing to the specified output stream\n         results in an <tt>IOException</tt>."
                        }
                    ]
                },
                {
                    "name": "getProperty",
                    "comment_text": "Searches for the property with the specified key in this property list.\n If the key is not found in this property list, the default property list,\n and its defaults, recursively, are then checked. The method returns\n <code>null</code> if the property is not found.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the property key.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getProperty",
                    "comment_text": "Searches for the property with the specified key in this property list.\n If the key is not found in this property list, the default property list,\n and its defaults, recursively, are then checked. The method returns the\n default value argument if the property is not found.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the hashtable key.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "defaultValue",
                            "comment_text": "a default value.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "propertyNames",
                    "comment_text": "Returns an enumeration of all the keys in this property list,\n including distinct keys in the default property list if a key\n of the same name has not already been found from the main\n properties list.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "stringPropertyNames",
                    "comment_text": "Returns a set of keys in this property list where\n the key and its corresponding value are strings,\n including distinct keys in the default property list if a key\n of the same name has not already been found from the main\n properties list.  Properties whose key or value is not\n of type <tt>String</tt> are omitted.\n <p>\n The returned set is not backed by the <tt>Properties</tt> object.\n Changes to this <tt>Properties</tt> are not reflected in the set,\n or vice versa.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "list",
                    "comment_text": "Prints this property list out to the specified output stream.\n This method is useful for debugging.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "an output stream.",
                            "type": "java.io.PrintStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "list",
                    "comment_text": "Prints this property list out to the specified output stream.\n This method is useful for debugging.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "an output stream.",
                            "type": "java.io.PrintWriter"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.PriorityQueue",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An unbounded priority {@linkplain Queue queue} based on a priority heap.\n The elements of the priority queue are ordered according to their\n {@linkplain Comparable natural ordering}, or by a {@link Comparator}\n provided at queue construction time, depending on which constructor is\n used.  A priority queue does not permit {@code null} elements.\n A priority queue relying on natural ordering also does not permit\n insertion of non-comparable objects (doing so may result in\n {@code ClassCastException}).\n\n <p>The <em>head</em> of this queue is the <em>least</em> element\n with respect to the specified ordering.  If multiple elements are\n tied for least value, the head is one of those elements -- ties are\n broken arbitrarily.  The queue retrieval operations {@code poll},\n {@code remove}, {@code peek}, and {@code element} access the\n element at the head of the queue.\n\n <p>A priority queue is unbounded, but has an internal\n <i>capacity</i> governing the size of an array used to store the\n elements on the queue.  It is always at least as large as the queue\n size.  As elements are added to a priority queue, its capacity\n grows automatically.  The details of the growth policy are not\n specified.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.  The Iterator provided in method {@link\n #iterator()} is <em>not</em> guaranteed to traverse the elements of\n the priority queue in any particular order. If you need ordered\n traversal, consider using {@code Arrays.sort(pq.toArray())}.\n\n <p> <strong>Note that this implementation is not synchronized.</strong>\n Multiple threads should not access a {@code PriorityQueue}\n instance concurrently if any of the threads modifies the queue.\n Instead, use the thread-safe {@link\n java.util.concurrent.PriorityBlockingQueue} class.\n\n <p>Implementation note: this implementation provides\n O(log(n)) time for the enqueing and dequeing methods\n ({@code offer}, {@code poll}, {@code remove()} and {@code add});\n linear time for the {@code remove(Object)} and {@code contains(Object)}\n methods; and constant time for the retrieval methods\n ({@code peek}, {@code element}, and {@code size}).\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "PriorityQueue",
                    "comment_text": "Creates a {@code PriorityQueue} with the default initial\n capacity (11) that orders its elements according to their\n {@linkplain Comparable natural ordering}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityQueue",
                    "comment_text": "Creates a {@code PriorityQueue} with the specified initial\n capacity that orders its elements according to their\n {@linkplain Comparable natural ordering}.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity for this priority queue",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityQueue",
                    "comment_text": "Creates a {@code PriorityQueue} with the specified initial capacity\n that orders its elements according to the specified comparator.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity for this priority queue",
                            "type": "int"
                        },
                        {
                            "name": "comparator",
                            "comment_text": "the comparator that will be used to order this\n         priority queue.  If {@code null}, the {@linkplain Comparable\n         natural ordering} of the elements will be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityQueue",
                    "comment_text": "Creates a {@code PriorityQueue} containing the elements in the\n specified collection.  If the specified collection is an instance of\n a {@link SortedSet} or is another {@code PriorityQueue}, this\n priority queue will be ordered according to the same ordering.\n Otherwise, this priority queue will be ordered according to the\n {@linkplain Comparable natural ordering} of its elements.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed\n         into this priority queue",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityQueue",
                    "comment_text": "Creates a {@code PriorityQueue} containing the elements in the\n specified priority queue.  This priority queue will be\n ordered according to the same ordering as the given priority\n queue.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the priority queue whose elements are to be placed\n         into this priority queue",
                            "type": "java.util.PriorityQueue"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityQueue",
                    "comment_text": "Creates a {@code PriorityQueue} containing the elements in the\n specified sorted set.   This priority queue will be ordered\n according to the same ordering as the given sorted set.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the sorted set whose elements are to be placed\n         into this priority queue",
                            "type": "java.util.SortedSet"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into this priority queue.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this priority queue.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.  Returns {@code true} if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue.\n The elements are in no particular order.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n <p>If the queue fits in the specified array with room to spare\n (i.e., the array has more elements than the queue), the element in\n the array immediately following the end of the collection is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this queue. The iterator\n does not return the elements in any particular order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this priority queue.\n The queue will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "comparator",
                    "comment_text": "Returns the comparator used to order the elements in this\n queue, or {@code null} if this queue is sorted according to\n the {@linkplain Comparable natural ordering} of its elements.",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Observer",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A class can implement the <code>Observer</code> interface when it\n wants to be informed of changes in observable objects.",
            "since": "JDK1.0",
            "see": [
                "java.util.Observable"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "update",
                    "comment_text": "This method is called whenever the observed object is changed. An\n application calls an <tt>Observable</tt> object's\n <code>notifyObservers</code> method to have all the object's\n observers notified of the change.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the observable object.",
                            "type": "java.util.Observable"
                        },
                        {
                            "name": "arg",
                            "comment_text": "an argument passed to the <code>notifyObservers</code>\n                 method.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Observable",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class represents an observable object, or \"data\"\n in the model-view paradigm. It can be subclassed to represent an\n object that the application wants to have observed.\n <p>\n An observable object can have one or more observers. An observer\n may be any object that implements interface <tt>Observer</tt>. After an\n observable instance changes, an application calling the\n <code>Observable</code>'s <code>notifyObservers</code> method\n causes all of its observers to be notified of the change by a call\n to their <code>update</code> method.\n <p>\n The order in which notifications will be delivered is unspecified.\n The default implementation provided in the Observable class will\n notify Observers in the order in which they registered interest, but\n subclasses may change this order, use no guaranteed order, deliver\n notifications on separate threads, or may guarantee that their\n subclass follows this order, as they choose.\n <p>\n Note that this notification mechanism is has nothing to do with threads\n and is completely separate from the <tt>wait</tt> and <tt>notify</tt>\n mechanism of class <tt>Object</tt>.\n <p>\n When an observable object is newly created, its set of observers is\n empty. Two observers are considered the same if and only if the\n <tt>equals</tt> method returns true for them.",
            "since": "JDK1.0",
            "see": [
                "java.util.Observable",
                "java.util.Observable",
                "java.util.Observer",
                "java.util.Observer"
            ],
            "constructors": [
                {
                    "name": "Observable",
                    "comment_text": "Construct an Observable with zero Observers.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "addObserver",
                    "comment_text": "Adds an observer to the set of observers for this object, provided\n that it is not the same as some observer already in the set.\n The order in which notifications will be delivered to multiple\n observers is not specified. See the class comment.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "an observer to be added.",
                            "type": "java.util.Observer"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deleteObserver",
                    "comment_text": "Deletes an observer from the set of observers of this object.\n Passing <CODE>null</CODE> to this method will have no effect.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the observer to be deleted.",
                            "type": "java.util.Observer"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "notifyObservers",
                    "comment_text": "If this object has changed, as indicated by the\n <code>hasChanged</code> method, then notify all of its observers\n and then call the <code>clearChanged</code> method to\n indicate that this object has no longer changed.\n <p>\n Each observer has its <code>update</code> method called with two\n arguments: this observable object and <code>null</code>. In other\n words, this method is equivalent to:\n <blockquote><tt>\n notifyObservers(null)</tt></blockquote>",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "notifyObservers",
                    "comment_text": "If this object has changed, as indicated by the\n <code>hasChanged</code> method, then notify all of its observers\n and then call the <code>clearChanged</code> method to indicate\n that this object has no longer changed.\n <p>\n Each observer has its <code>update</code> method called with two\n arguments: this observable object and the <code>arg</code> argument.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "any object.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deleteObservers",
                    "comment_text": "Clears the observer list so that this object no longer has any observers.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setChanged",
                    "comment_text": "Marks this <tt>Observable</tt> object as having been changed; the\n <tt>hasChanged</tt> method will now return <tt>true</tt>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clearChanged",
                    "comment_text": "Indicates that this object has no longer changed, or that it has\n already notified all of its observers of its most recent change,\n so that the <tt>hasChanged</tt> method will now return <tt>false</tt>.\n This method is called automatically by the\n <code>notifyObservers</code> methods.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasChanged",
                    "comment_text": "Tests if this object has changed.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "countObservers",
                    "comment_text": "Returns the number of observers of this <tt>Observable</tt> object.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Objects",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class consists of {@code static} utility methods for operating\n on objects.  These utilities include {@code null}-safe or {@code\n null}-tolerant methods for computing the hash code of an object,\n returning a string for an object, and comparing two objects.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "equals",
                    "comment_text": "Returns {@code true} if the arguments are equal to each other\n and {@code false} otherwise.\n Consequently, if both arguments are {@code null}, {@code true}\n is returned and if exactly one argument is {@code null}, {@code\n false} is returned.  Otherwise, equality is determined by using\n the {@link Object#equals equals} method of the first\n argument.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "an object",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "b",
                            "comment_text": "an object to be compared with {@code a} for equality",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deepEquals",
                    "comment_text": "Returns {@code true} if the arguments are deeply equal to each other\n and {@code false} otherwise.\n\n Two {@code null} values are deeply equal.  If both arguments are\n arrays, the algorithm in {@link Arrays#deepEquals(Object[],\n Object[]) Arrays.deepEquals} is used to determine equality.\n Otherwise, equality is determined by using the {@link\n Object#equals equals} method of the first argument.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "an object",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "b",
                            "comment_text": "an object to be compared with {@code a} for deep equality",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code of a non-{@code null} argument and 0 for\n a {@code null} argument.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "an object",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hash",
                    "comment_text": "Generates a hash code for a sequence of input values. The hash\n code is generated as if all the input values were placed into an\n array, and that array were hashed by calling {@link\n Arrays#hashCode(Object[])}.\n\n <p>This method is useful for implementing {@link\n Object#hashCode()} on objects containing multiple fields. For\n example, if an object that has three fields, {@code x}, {@code\n y}, and {@code z}, one could write:\n\n <blockquote><pre>\n &#064;Override public int hashCode() {\n     return Objects.hash(x, y, z);\n }\n </pre></blockquote>\n\n <b>Warning: When a single object reference is supplied, the returned\n value does not equal the hash code of that object reference.</b> This\n value can be computed by calling {@link #hashCode(Object)}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "values",
                            "comment_text": "the values to be hashed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the result of calling {@code toString} for a non-{@code\n null} argument and {@code \"null\"} for a {@code null} argument.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "an object",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the result of calling {@code toString} on the first\n argument if the first argument is not {@code null} and returns\n the second argument otherwise.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "an object",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "nullDefault",
                            "comment_text": "string to return if the first argument is\n        {@code null}",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compare",
                    "comment_text": "Returns 0 if the arguments are identical and {@code\n c.compare(a, b)} otherwise.\n Consequently, if both arguments are {@code null} 0\n is returned.\n\n <p>Note that if one of the arguments is {@code null}, a {@code\n NullPointerException} may or may not be thrown depending on\n what ordering policy, if any, the {@link Comparator Comparator}\n chooses to have for {@code null} values.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "an object",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "b",
                            "comment_text": "an object to be compared with {@code a}",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "c",
                            "comment_text": "the {@code Comparator} to compare the first two arguments",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "requireNonNull",
                    "comment_text": "Checks that the specified object reference is not {@code null}. This\n method is designed primarily for doing parameter validation in methods\n and constructors, as demonstrated below:\n <blockquote><pre>\n public Foo(Bar bar) {\n     this.bar = Objects.requireNonNull(bar);\n }\n </pre></blockquote>",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object reference to check for nullity",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "requireNonNull",
                    "comment_text": "Checks that the specified object reference is not {@code null} and\n throws a customized {@link NullPointerException} if it is. This method\n is designed primarily for doing parameter validation in methods and\n constructors with multiple parameters, as demonstrated below:\n <blockquote><pre>\n public Foo(Bar bar, Baz baz) {\n     this.bar = Objects.requireNonNull(bar, \"bar must not be null\");\n     this.baz = Objects.requireNonNull(baz, \"baz must not be null\");\n }\n </pre></blockquote>",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object reference to check for nullity",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "message",
                            "comment_text": "detail message to be used in the event that a {@code\n                NullPointerException} is thrown",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.NoSuchElementException",
            "interfaces": [

            ],
            "superclass": "java.lang.RuntimeException",
            "comment_text": "Thrown by the <code>nextElement</code> method of an\n <code>Enumeration</code> to indicate that there are no more\n elements in the enumeration.",
            "since": "JDK1.0",
            "see": [
                "java.util.Enumeration",
                "java.util.Enumeration"
            ],
            "constructors": [
                {
                    "name": "NoSuchElementException",
                    "comment_text": "Constructs a <code>NoSuchElementException</code> with <tt>null</tt>\n as its error message string.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "NoSuchElementException",
                    "comment_text": "Constructs a <code>NoSuchElementException</code>, saving a reference\n to the error message string <tt>s</tt> for later retrieval by the\n <tt>getMessage</tt> method.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.NavigableSet",
            "interfaces": [
                "java.util.SortedSet"
            ],
            "superclass": "",
            "comment_text": "A {@link SortedSet} extended with navigation methods reporting\n closest matches for given search targets. Methods {@code lower},\n {@code floor}, {@code ceiling}, and {@code higher} return elements\n respectively less than, less than or equal, greater than or equal,\n and greater than a given element, returning {@code null} if there\n is no such element.  A {@code NavigableSet} may be accessed and\n traversed in either ascending or descending order.  The {@code\n descendingSet} method returns a view of the set with the senses of\n all relational and directional methods inverted. The performance of\n ascending operations and views is likely to be faster than that of\n descending ones.  This interface additionally defines methods\n {@code pollFirst} and {@code pollLast} that return and remove the\n lowest and highest element, if one exists, else returning {@code\n null}.  Methods {@code subSet}, {@code headSet},\n and {@code tailSet} differ from the like-named {@code\n SortedSet} methods in accepting additional arguments describing\n whether lower and upper bounds are inclusive versus exclusive.\n Subsets of any {@code NavigableSet} must implement the {@code\n NavigableSet} interface.\n\n <p> The return values of navigation methods may be ambiguous in\n implementations that permit {@code null} elements. However, even\n in this case the result can be disambiguated by checking\n {@code contains(null)}. To avoid such issues, implementations of\n this interface are encouraged to <em>not</em> permit insertion of\n {@code null} elements. (Note that sorted sets of {@link\n Comparable} elements intrinsically do not permit {@code null}.)\n\n <p>Methods\n {@link #subSet(Object, Object) subSet(E, E)},\n {@link #headSet(Object) headSet(E)}, and\n {@link #tailSet(Object) tailSet(E)}\n are specified to return {@code SortedSet} to allow existing\n implementations of {@code SortedSet} to be compatibly retrofitted to\n implement {@code NavigableSet}, but extensions and implementations\n of this interface are encouraged to override these methods to return\n {@code NavigableSet}.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "lower",
                    "comment_text": "Returns the greatest element in this set strictly less than the\n given element, or {@code null} if there is no such element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the value to match",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floor",
                    "comment_text": "Returns the greatest element in this set less than or equal to\n the given element, or {@code null} if there is no such element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the value to match",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceiling",
                    "comment_text": "Returns the least element in this set greater than or equal to\n the given element, or {@code null} if there is no such element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the value to match",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higher",
                    "comment_text": "Returns the least element in this set strictly greater than the\n given element, or {@code null} if there is no such element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the value to match",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "Retrieves and removes the first (lowest) element,\n or returns {@code null} if this set is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "Retrieves and removes the last (highest) element,\n or returns {@code null} if this set is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this set, in ascending order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingSet",
                    "comment_text": "Returns a reverse order view of the elements contained in this set.\n The descending set is backed by this set, so changes to the set are\n reflected in the descending set, and vice-versa.  If either set is\n modified while an iteration over either set is in progress (except\n through the iterator's own {@code remove} operation), the results of\n the iteration are undefined.\n\n <p>The returned set has an ordering equivalent to\n <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n The expression {@code s.descendingSet().descendingSet()} returns a\n view of {@code s} essentially equivalent to {@code s}.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "Returns an iterator over the elements in this set, in descending order.\n Equivalent in effect to {@code descendingSet().iterator()}.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "Returns a view of the portion of this set whose elements range from\n {@code fromElement} to {@code toElement}.  If {@code fromElement} and\n {@code toElement} are equal, the returned set is empty unless {@code\n fromInclusive} and {@code toInclusive} are both true.  The returned set\n is backed by this set, so changes in the returned set are reflected in\n this set, and vice-versa.  The returned set supports all optional set\n operations that this set supports.\n\n <p>The returned set will throw an {@code IllegalArgumentException}\n on an attempt to insert an element outside its range.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "low endpoint of the returned set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "{@code true} if the low endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "high endpoint of the returned set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "{@code true} if the high endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "Returns a view of the portion of this set whose elements are less than\n (or equal to, if {@code inclusive} is true) {@code toElement}.  The\n returned set is backed by this set, so changes in the returned set are\n reflected in this set, and vice-versa.  The returned set supports all\n optional set operations that this set supports.\n\n <p>The returned set will throw an {@code IllegalArgumentException}\n on an attempt to insert an element outside its range.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "high endpoint of the returned set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "{@code true} if the high endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "Returns a view of the portion of this set whose elements are greater\n than (or equal to, if {@code inclusive} is true) {@code fromElement}.\n The returned set is backed by this set, so changes in the returned set\n are reflected in this set, and vice-versa.  The returned set supports\n all optional set operations that this set supports.\n\n <p>The returned set will throw an {@code IllegalArgumentException}\n on an attempt to insert an element outside its range.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "low endpoint of the returned set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "{@code true} if the low endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "{@inheritDoc}\n\n <p>Equivalent to {@code subSet(fromElement, true, toElement, false)}.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "{@inheritDoc}\n\n <p>Equivalent to {@code headSet(toElement, false)}.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "{@inheritDoc}\n\n <p>Equivalent to {@code tailSet(fromElement, true)}.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.NavigableMap",
            "interfaces": [
                "java.util.SortedMap"
            ],
            "superclass": "",
            "comment_text": "A {@link SortedMap} extended with navigation methods returning the\n closest matches for given search targets. Methods\n {@code lowerEntry}, {@code floorEntry}, {@code ceilingEntry},\n and {@code higherEntry} return {@code Map.Entry} objects\n associated with keys respectively less than, less than or equal,\n greater than or equal, and greater than a given key, returning\n {@code null} if there is no such key.  Similarly, methods\n {@code lowerKey}, {@code floorKey}, {@code ceilingKey}, and\n {@code higherKey} return only the associated keys. All of these\n methods are designed for locating, not traversing entries.\n\n <p>A {@code NavigableMap} may be accessed and traversed in either\n ascending or descending key order.  The {@code descendingMap}\n method returns a view of the map with the senses of all relational\n and directional methods inverted. The performance of ascending\n operations and views is likely to be faster than that of descending\n ones.  Methods {@code subMap}, {@code headMap},\n and {@code tailMap} differ from the like-named {@code\n SortedMap} methods in accepting additional arguments describing\n whether lower and upper bounds are inclusive versus exclusive.\n Submaps of any {@code NavigableMap} must implement the {@code\n NavigableMap} interface.\n\n <p>This interface additionally defines methods {@code firstEntry},\n {@code pollFirstEntry}, {@code lastEntry}, and\n {@code pollLastEntry} that return and/or remove the least and\n greatest mappings, if any exist, else returning {@code null}.\n\n <p>Implementations of entry-returning methods are expected to\n return {@code Map.Entry} pairs representing snapshots of mappings\n at the time they were produced, and thus generally do <em>not</em>\n support the optional {@code Entry.setValue} method. Note however\n that it is possible to change mappings in the associated map using\n method {@code put}.\n\n <p>Methods\n {@link #subMap(Object, Object) subMap(K, K)},\n {@link #headMap(Object) headMap(K)}, and\n {@link #tailMap(Object) tailMap(K)}\n are specified to return {@code SortedMap} to allow existing\n implementations of {@code SortedMap} to be compatibly retrofitted to\n implement {@code NavigableMap}, but extensions and implementations\n of this interface are encouraged to override these methods to return\n {@code NavigableMap}.  Similarly,\n {@link #keySet()} can be overriden to return {@code NavigableSet}.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "lowerEntry",
                    "comment_text": "Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or {@code null} if there is\n no such key.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lowerKey",
                    "comment_text": "Returns the greatest key strictly less than the given key, or\n {@code null} if there is no such key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floorEntry",
                    "comment_text": "Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or {@code null} if there\n is no such key.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floorKey",
                    "comment_text": "Returns the greatest key less than or equal to the given key,\n or {@code null} if there is no such key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceilingEntry",
                    "comment_text": "Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or {@code null} if\n there is no such key.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceilingKey",
                    "comment_text": "Returns the least key greater than or equal to the given key,\n or {@code null} if there is no such key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higherEntry",
                    "comment_text": "Returns a key-value mapping associated with the least key\n strictly greater than the given key, or {@code null} if there\n is no such key.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higherKey",
                    "comment_text": "Returns the least key strictly greater than the given key, or\n {@code null} if there is no such key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstEntry",
                    "comment_text": "Returns a key-value mapping associated with the least\n key in this map, or {@code null} if the map is empty.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastEntry",
                    "comment_text": "Returns a key-value mapping associated with the greatest\n key in this map, or {@code null} if the map is empty.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirstEntry",
                    "comment_text": "Removes and returns a key-value mapping associated with\n the least key in this map, or {@code null} if the map is empty.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLastEntry",
                    "comment_text": "Removes and returns a key-value mapping associated with\n the greatest key in this map, or {@code null} if the map is empty.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingMap",
                    "comment_text": "Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.  If either map is\n modified while an iteration over a collection view of either map\n is in progress (except through the iterator's own {@code remove}\n operation), the results of the iteration are undefined.\n\n <p>The returned map has an ordering equivalent to\n <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n The expression {@code m.descendingMap().descendingMap()} returns a\n view of {@code m} essentially equivalent to {@code m}.",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "navigableKeySet",
                    "comment_text": "Returns a {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress (except through the iterator's own {@code\n remove} operation), the results of the iteration are undefined.  The\n set supports element removal, which removes the corresponding mapping\n from the map, via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear} operations.\n It does not support the {@code add} or {@code addAll} operations.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingKeySet",
                    "comment_text": "Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress (except through the iterator's own {@code\n remove} operation), the results of the iteration are undefined.  The\n set supports element removal, which removes the corresponding mapping\n from the map, via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear} operations.\n It does not support the {@code add} or {@code addAll} operations.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "Returns a view of the portion of this map whose keys range from\n {@code fromKey} to {@code toKey}.  If {@code fromKey} and\n {@code toKey} are equal, the returned map is empty unless\n {@code fromInclusive} and {@code toInclusive} are both true.  The\n returned map is backed by this map, so changes in the returned map are\n reflected in this map, and vice-versa.  The returned map supports all\n optional map operations that this map supports.\n\n <p>The returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside of its range, or to construct a\n submap either of whose endpoints lie outside its range.",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "low endpoint of the keys in the returned map",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "{@code true} if the low endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "high endpoint of the keys in the returned map",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "{@code true} if the high endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "Returns a view of the portion of this map whose keys are less than (or\n equal to, if {@code inclusive} is true) {@code toKey}.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n <p>The returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "high endpoint of the keys in the returned map",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "{@code true} if the high endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "Returns a view of the portion of this map whose keys are greater than (or\n equal to, if {@code inclusive} is true) {@code fromKey}.  The returned\n map is backed by this map, so changes in the returned map are reflected\n in this map, and vice-versa.  The returned map supports all optional\n map operations that this map supports.\n\n <p>The returned map will throw an {@code IllegalArgumentException}\n on an attempt to insert a key outside its range.",
                    "return_type": "java.util.NavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "low endpoint of the keys in the returned map",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "{@code true} if the low endpoint\n        is to be included in the returned view",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "{@inheritDoc}\n\n <p>Equivalent to {@code subMap(fromKey, true, toKey, false)}.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "{@inheritDoc}\n\n <p>Equivalent to {@code headMap(toKey, false)}.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "{@inheritDoc}\n\n <p>Equivalent to {@code tailMap(fromKey, true)}.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.MissingResourceException",
            "interfaces": [

            ],
            "superclass": "java.lang.RuntimeException",
            "comment_text": "Signals that a resource is missing.",
            "since": "JDK1.1",
            "see": [
                "java.lang.Exception",
                "java.util.ResourceBundle"
            ],
            "constructors": [
                {
                    "name": "MissingResourceException",
                    "comment_text": "Constructs a MissingResourceException with the specified information.\n A detail message is a String that describes this particular exception.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "className",
                            "comment_text": "the name of the resource class",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "key",
                            "comment_text": "the key for the missing resource.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getClassName",
                    "comment_text": "Gets parameter passed by constructor.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getKey",
                    "comment_text": "Gets parameter passed by constructor.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.MissingFormatWidthException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when the format width is required.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to anyg\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "MissingFormatWidthException",
                    "comment_text": "Constructs an instance of this class with the specified format\n specifier.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "The format specifier which does not have a width",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFormatSpecifier",
                    "comment_text": "Returns the format specifier which does not have a width.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.MissingFormatArgumentException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when there is a format specifier which does not\n have a corresponding argument or if an argument index refers to an argument\n that does not exist.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "MissingFormatArgumentException",
                    "comment_text": "Constructs an instance of this class with the unmatched format\n specifier.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "Format specifier which does not have a corresponding argument",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFormatSpecifier",
                    "comment_text": "Returns the unmatched format specifier.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Map",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "An object that maps keys to values.  A map cannot contain duplicate keys;\n each key can map to at most one value.\n\n <p>This interface takes the place of the <tt>Dictionary</tt> class, which\n was a totally abstract class rather than an interface.\n\n <p>The <tt>Map</tt> interface provides three <i>collection views</i>, which\n allow a map's contents to be viewed as a set of keys, collection of values,\n or set of key-value mappings.  The <i>order</i> of a map is defined as\n the order in which the iterators on the map's collection views return their\n elements.  Some map implementations, like the <tt>TreeMap</tt> class, make\n specific guarantees as to their order; others, like the <tt>HashMap</tt>\n class, do not.\n\n <p>Note: great care must be exercised if mutable objects are used as map\n keys.  The behavior of a map is not specified if the value of an object is\n changed in a manner that affects <tt>equals</tt> comparisons while the\n object is a key in the map.  A special case of this prohibition is that it\n is not permissible for a map to contain itself as a key.  While it is\n permissible for a map to contain itself as a value, extreme caution is\n advised: the <tt>equals</tt> and <tt>hashCode</tt> methods are no longer\n well defined on such a map.\n\n <p>All general-purpose map implementation classes should provide two\n \"standard\" constructors: a void (no arguments) constructor which creates an\n empty map, and a constructor with a single argument of type <tt>Map</tt>,\n which creates a new map with the same key-value mappings as its argument.\n In effect, the latter constructor allows the user to copy any map,\n producing an equivalent map of the desired class.  There is no way to\n enforce this recommendation (as interfaces cannot contain constructors) but\n all of the general-purpose map implementations in the JDK comply.\n\n <p>The \"destructive\" methods contained in this interface, that is, the\n methods that modify the map on which they operate, are specified to throw\n <tt>UnsupportedOperationException</tt> if this map does not support the\n operation.  If this is the case, these methods may, but are not required\n to, throw an <tt>UnsupportedOperationException</tt> if the invocation would\n have no effect on the map.  For example, invoking the {@link #putAll(Map)}\n method on an unmodifiable map may, but is not required to, throw the\n exception if the map whose mappings are to be \"superimposed\" is empty.\n\n <p>Some map implementations have restrictions on the keys and values they\n may contain.  For example, some implementations prohibit null keys and\n values, and some have restrictions on the types of their keys.  Attempting\n to insert an ineligible key or value throws an unchecked exception,\n typically <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.\n Attempting to query the presence of an ineligible key or value may throw an\n exception, or it may simply return false; some implementations will exhibit\n the former behavior and some will exhibit the latter.  More generally,\n attempting an operation on an ineligible key or value whose completion\n would not result in the insertion of an ineligible element into the map may\n throw an exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.\n\n <p>Many methods in Collections Framework interfaces are defined\n in terms of the {@link Object#equals(Object) equals} method.  For\n example, the specification for the {@link #containsKey(Object)\n containsKey(Object key)} method says: \"returns <tt>true</tt> if and\n only if this map contains a mapping for a key <tt>k</tt> such that\n <tt>(key==null ? k==null : key.equals(k))</tt>.\" This specification should\n <i>not</i> be construed to imply that invoking <tt>Map.containsKey</tt>\n with a non-null argument <tt>key</tt> will cause <tt>key.equals(k)</tt> to\n be invoked for any key <tt>k</tt>.  Implementations are free to\n implement optimizations whereby the <tt>equals</tt> invocation is avoided,\n for example, by first comparing the hash codes of the two keys.  (The\n {@link Object#hashCode()} specification guarantees that two objects with\n unequal hash codes cannot be equal.)  More generally, implementations of\n the various Collections Framework interfaces are free to take advantage of\n the specified behavior of underlying {@link Object} methods wherever the\n implementor deems it appropriate.",
            "since": "1.2",
            "see": [
                "java.util.HashMap",
                "java.util.TreeMap",
                "java.util.Hashtable",
                "java.util.SortedMap",
                "java.util.Collection",
                "java.util.Set"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.  If the\n map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this map contains no key-value mappings.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns <tt>true</tt> if this map contains a mapping for the specified\n key.  More formally, returns <tt>true</tt> if and only if\n this map contains a mapping for a key <tt>k</tt> such that\n <tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be\n at most one such mapping.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.  More formally, returns <tt>true</tt> if and only if\n this map contains at least one mapping to a value <tt>v</tt> such that\n <tt>(value==null ? v==null : value.equals(v))</tt>.  This operation\n will probably require time linear in the map size for most\n implementations of the <tt>Map</tt> interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>If this map permits null values, then a return value of\n {@code null} does not <i>necessarily</i> indicate that the map\n contains no mapping for the key; it's also possible that the map\n explicitly maps the key to {@code null}.  The {@link #containsKey\n containsKey} operation may be used to distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key whose associated value is to be returned",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this map\n (optional operation).  If the map previously contained a mapping for\n the key, the old value is replaced by the specified value.  (A map\n <tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only\n if {@link #containsKey(Object) m.containsKey(k)} would return\n <tt>true</tt>.)",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for a key from this map if it is present\n (optional operation).   More formally, if this map contains a mapping\n from key <tt>k</tt> to value <tt>v</tt> such that\n <code>(key==null ?  k==null : key.equals(k))</code>, that mapping\n is removed.  (The map can contain at most one such mapping.)\n\n <p>Returns the value to which this map previously associated the key,\n or <tt>null</tt> if the map contained no mapping for the key.\n\n <p>If this map permits null values, then a return value of\n <tt>null</tt> does not <i>necessarily</i> indicate that the map\n contained no mapping for the key; it's also possible that the map\n explicitly mapped the key to <tt>null</tt>.\n\n <p>The map will not contain a mapping for the specified key once the\n call returns.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose mapping is to be removed from the map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this map\n (optional operation).  The effect of this call is equivalent to that\n of calling {@link #put(Object,Object) put(k, v)} on this map once\n for each mapping from key <tt>k</tt> to value <tt>v</tt> in the\n specified map.  The behavior of this operation is undefined if the\n specified map is modified while the operation is in progress.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map (optional operation).\n The map will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>\n operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own <tt>remove</tt> operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation, or through the\n <tt>setValue</tt> operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and\n <tt>clear</tt> operations.  It does not support the\n <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this map for equality.  Returns\n <tt>true</tt> if the given object is also a map and the two maps\n represent the same mappings.  More formally, two maps <tt>m1</tt> and\n <tt>m2</tt> represent the same mappings if\n <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This ensures that the\n <tt>equals</tt> method works properly across different implementations\n of the <tt>Map</tt> interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps\n <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of\n {@link Object#hashCode}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Map.Entry",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A map entry (key-value pair).  The <tt>Map.entrySet</tt> method returns\n a collection-view of the map, whose elements are of this class.  The\n <i>only</i> way to obtain a reference to a map entry is from the\n iterator of this collection-view.  These <tt>Map.Entry</tt> objects are\n valid <i>only</i> for the duration of the iteration; more formally,\n the behavior of a map entry is undefined if the backing map has been\n modified after the entry was returned by the iterator, except through\n the <tt>setValue</tt> operation on the map entry.",
            "since": "1.2",
            "see": [
                "java.util.Map"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getKey",
                    "comment_text": "Returns the key corresponding to this entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the value corresponding to this entry.  If the mapping\n has been removed from the backing map (by the iterator's\n <tt>remove</tt> operation), the results of this call are undefined.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setValue",
                    "comment_text": "Replaces the value corresponding to this entry with the specified\n value (optional operation).  (Writes through to the map.)  The\n behavior of this call is undefined if the mapping has already been\n removed from the map (by the iterator's <tt>remove</tt> operation).",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "new value to be stored in this entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this entry for equality.\n Returns <tt>true</tt> if the given object is also a map entry and\n the two entries represent the same mapping.  More formally, two\n entries <tt>e1</tt> and <tt>e2</tt> represent the same mapping\n if<pre>\n     (e1.getKey()==null ?\n      e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &amp;&amp;\n     (e1.getValue()==null ?\n      e2.getValue()==null : e1.getValue().equals(e2.getValue()))\n </pre>\n This ensures that the <tt>equals</tt> method works properly across\n different implementations of the <tt>Map.Entry</tt> interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map entry.  The hash code\n of a map entry <tt>e</tt> is defined to be: <pre>\n     (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n     (e.getValue()==null ? 0 : e.getValue().hashCode())\n </pre>\n This ensures that <tt>e1.equals(e2)</tt> implies that\n <tt>e1.hashCode()==e2.hashCode()</tt> for any two Entries\n <tt>e1</tt> and <tt>e2</tt>, as required by the general\n contract of <tt>Object.hashCode</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Locale",
            "interfaces": [
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A <code>Locale</code> object represents a specific geographical, political,\n or cultural region. An operation that requires a <code>Locale</code> to perform\n its task is called <em>locale-sensitive</em> and uses the <code>Locale</code>\n to tailor information for the user. For example, displaying a number\n is a locale-sensitive operation&mdash; the number should be formatted\n according to the customs and conventions of the user's native country,\n region, or culture.\n\n <p> The <code>Locale</code> class implements identifiers\n interchangeable with BCP 47 (IETF BCP 47, \"Tags for Identifying\n Languages\"), with support for the LDML (UTS#35, \"Unicode Locale\n Data Markup Language\") BCP 47-compatible extensions for locale data\n exchange.\n\n <p> A <code>Locale</code> object logically consists of the fields\n described below.\n\n <dl>\n   <dt><a name=\"def_language\"/><b>language</b></dt>\n\n   <dd>ISO 639 alpha-2 or alpha-3 language code, or registered\n   language subtags up to 8 alpha letters (for future enhancements).\n   When a language has both an alpha-2 code and an alpha-3 code, the\n   alpha-2 code must be used.  You can find a full list of valid\n   language codes in the IANA Language Subtag Registry (search for\n   \"Type: language\").  The language field is case insensitive, but\n   <code>Locale</code> always canonicalizes to lower case.</dd><br>\n\n   <dd>Well-formed language values have the form\n   <code>[a-zA-Z]{2,8}</code>.  Note that this is not the the full\n   BCP47 language production, since it excludes extlang.  They are\n   not needed since modern three-letter language codes replace\n   them.</dd><br>\n\n   <dd>Example: \"en\" (English), \"ja\" (Japanese), \"kok\" (Konkani)</dd><br>\n\n   <dt><a name=\"def_script\"/><b>script</b></dt>\n\n   <dd>ISO 15924 alpha-4 script code.  You can find a full list of\n   valid script codes in the IANA Language Subtag Registry (search\n   for \"Type: script\").  The script field is case insensitive, but\n   <code>Locale</code> always canonicalizes to title case (the first\n   letter is upper case and the rest of the letters are lower\n   case).</dd><br>\n\n   <dd>Well-formed script values have the form\n   <code>[a-zA-Z]{4}</code></dd><br>\n\n   <dd>Example: \"Latn\" (Latin), \"Cyrl\" (Cyrillic)</dd><br>\n\n   <dt><a name=\"def_region\"/><b>country (region)</b></dt>\n\n   <dd>ISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.\n   You can find a full list of valid country and region codes in the\n   IANA Language Subtag Registry (search for \"Type: region\").  The\n   country (region) field is case insensitive, but\n   <code>Locale</code> always canonicalizes to upper case.</dd><br>\n\n   <dd>Well-formed country/region values have\n   the form <code>[a-zA-Z]{2} | [0-9]{3}</code></dd><br>\n\n   <dd>Example: \"US\" (United States), \"FR\" (France), \"029\"\n   (Caribbean)</dd><br>\n\n   <dt><a name=\"def_variant\"/><b>variant</b></dt>\n\n   <dd>Any arbitrary value used to indicate a variation of a\n   <code>Locale</code>.  Where there are two or more variant values\n   each indicating its own semantics, these values should be ordered\n   by importance, with most important first, separated by\n   underscore('_').  The variant field is case sensitive.</dd><br>\n\n   <dd>Note: IETF BCP 47 places syntactic restrictions on variant\n   subtags.  Also BCP 47 subtags are strictly used to indicate\n   additional variations that define a language or its dialects that\n   are not covered by any combinations of language, script and\n   region subtags.  You can find a full list of valid variant codes\n   in the IANA Language Subtag Registry (search for \"Type: variant\").\n\n   <p>However, the variant field in <code>Locale</code> has\n   historically been used for any kind of variation, not just\n   language variations.  For example, some supported variants\n   available in Java SE Runtime Environments indicate alternative\n   cultural behaviors such as calendar type or number script.  In\n   BCP 47 this kind of information, which does not identify the\n   language, is supported by extension subtags or private use\n   subtags.</dd><br>\n\n   <dd>Well-formed variant values have the form <code>SUBTAG\n   (('_'|'-') SUBTAG)*</code> where <code>SUBTAG =\n   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}</code>. (Note: BCP 47 only\n   uses hyphen ('-') as a delimiter, this is more lenient).</dd><br>\n\n   <dd>Example: \"polyton\" (Polytonic Greek), \"POSIX\"</dd><br>\n\n   <dt><a name=\"def_extensions\"/><b>extensions</b></dt>\n\n   <dd>A map from single character keys to string values, indicating\n   extensions apart from language identification.  The extensions in\n   <code>Locale</code> implement the semantics and syntax of BCP 47\n   extension subtags and private use subtags. The extensions are\n   case insensitive, but <code>Locale</code> canonicalizes all\n   extension keys and values to lower case. Note that extensions\n   cannot have empty values.</dd><br>\n\n   <dd>Well-formed keys are single characters from the set\n   <code>[0-9a-zA-Z]</code>.  Well-formed values have the form\n   <code>SUBTAG ('-' SUBTAG)*</code> where for the key 'x'\n   <code>SUBTAG = [0-9a-zA-Z]{1,8}</code> and for other keys\n   <code>SUBTAG = [0-9a-zA-Z]{2,8}</code> (that is, 'x' allows\n   single-character subtags).</dd><br>\n\n   <dd>Example: key=\"u\"/value=\"ca-japanese\" (Japanese Calendar),\n   key=\"x\"/value=\"java-1-7\"</dd>\n </dl>\n\n <b>Note:</b> Although BCP 47 requires field values to be registered\n in the IANA Language Subtag Registry, the <code>Locale</code> class\n does not provide any validation features.  The <code>Builder</code>\n only checks if an individual field satisfies the syntactic\n requirement (is well-formed), but does not validate the value\n itself.  See {@link Builder} for details.\n\n <h4><a name=\"def_locale_extension\">Unicode locale/language extension</h4>\n\n <p>UTS#35, \"Unicode Locale Data Markup Language\" defines optional\n attributes and keywords to override or refine the default behavior\n associated with a locale.  A keyword is represented by a pair of\n key and type.  For example, \"nu-thai\" indicates that Thai local\n digits (value:\"thai\") should be used for formatting numbers\n (key:\"nu\").\n\n <p>The keywords are mapped to a BCP 47 extension value using the\n extension key 'u' ({@link #UNICODE_LOCALE_EXTENSION}).  The above\n example, \"nu-thai\", becomes the extension \"u-nu-thai\".code\n\n <p>Thus, when a <code>Locale</code> object contains Unicode locale\n attributes and keywords,\n <code>getExtension(UNICODE_LOCALE_EXTENSION)</code> will return a\n String representing this information, for example, \"nu-thai\".  The\n <code>Locale</code> class also provides {@link\n #getUnicodeLocaleAttributes}, {@link #getUnicodeLocaleKeys}, and\n {@link #getUnicodeLocaleType} which allow you to access Unicode\n locale attributes and key/type pairs directly.  When represented as\n a string, the Unicode Locale Extension lists attributes\n alphabetically, followed by key/type sequences with keys listed\n alphabetically (the order of subtags comprising a key's type is\n fixed when the type is defined)\n\n <p>A well-formed locale key has the form\n <code>[0-9a-zA-Z]{2}</code>.  A well-formed locale type has the\n form <code>\"\" | [0-9a-zA-Z]{3,8} ('-' [0-9a-zA-Z]{3,8})*</code> (it\n can be empty, or a series of subtags 3-8 alphanums in length).  A\n well-formed locale attribute has the form\n <code>[0-9a-zA-Z]{3,8}</code> (it is a single subtag with the same\n form as a locale type subtag).\n\n <p>The Unicode locale extension specifies optional behavior in\n locale-sensitive services.  Although the LDML specification defines\n various keys and values, actual locale-sensitive service\n implementations in a Java Runtime Environment might not support any\n particular Unicode locale attributes or key/type pairs.\n\n <h4>Creating a Locale</h4>\n\n <p>There are several different ways to create a <code>Locale</code>\n object.\n\n <h5>Builder</h5>\n\n <p>Using {@link Builder} you can construct a <code>Locale</code> object\n that conforms to BCP 47 syntax.\n\n <h5>Constructors</h5>\n\n <p>The <code>Locale</code> class provides three constructors:\n <blockquote>\n <pre>\n     {@link #Locale(String language)}\n     {@link #Locale(String language, String country)}\n     {@link #Locale(String language, String country, String variant)}\n </pre>\n </blockquote>\n These constructors allow you to create a <code>Locale</code> object\n with language, country and variant, but you cannot specify\n script or extensions.\n\n <h5>Factory Methods</h5>\n\n <p>The method {@link #forLanguageTag} creates a <code>Locale</code>\n object for a well-formed BCP 47 language tag.\n\n <h5>Locale Constants</h5>\n\n <p>The <code>Locale</code> class provides a number of convenient constants\n that you can use to create <code>Locale</code> objects for commonly used\n locales. For example, the following creates a <code>Locale</code> object\n for the United States:\n <blockquote>\n <pre>\n     Locale.US\n </pre>\n </blockquote>\n\n <h4>Use of Locale</h4>\n\n <p>Once you've created a <code>Locale</code> you can query it for information\n about itself. Use <code>getCountry</code> to get the country (or region)\n code and <code>getLanguage</code> to get the language code.\n You can use <code>getDisplayCountry</code> to get the\n name of the country suitable for displaying to the user. Similarly,\n you can use <code>getDisplayLanguage</code> to get the name of\n the language suitable for displaying to the user. Interestingly,\n the <code>getDisplayXXX</code> methods are themselves locale-sensitive\n and have two versions: one that uses the default locale and one\n that uses the locale specified as an argument.\n\n <p>The Java Platform provides a number of classes that perform locale-sensitive\n operations. For example, the <code>NumberFormat</code> class formats\n numbers, currency, and percentages in a locale-sensitive manner. Classes\n such as <code>NumberFormat</code> have several convenience methods\n for creating a default object of that type. For example, the\n <code>NumberFormat</code> class provides these three convenience methods\n for creating a default <code>NumberFormat</code> object:\n <blockquote>\n <pre>\n     NumberFormat.getInstance()\n     NumberFormat.getCurrencyInstance()\n     NumberFormat.getPercentInstance()\n </pre>\n </blockquote>\n Each of these methods has two variants; one with an explicit locale\n and one without; the latter uses the default locale:\n <blockquote>\n <pre>\n     NumberFormat.getInstance(myLocale)\n     NumberFormat.getCurrencyInstance(myLocale)\n     NumberFormat.getPercentInstance(myLocale)\n </pre>\n </blockquote>\n A <code>Locale</code> is the mechanism for identifying the kind of object\n (<code>NumberFormat</code>) that you would like to get. The locale is\n <STRONG>just</STRONG> a mechanism for identifying objects,\n <STRONG>not</STRONG> a container for the objects themselves.\n\n <h4>Compatibility</h4>\n\n <p>In order to maintain compatibility with existing usage, Locale's\n constructors retain their behavior prior to the Java Runtime\n Environment version 1.7.  The same is largely true for the\n <code>toString</code> method. Thus Locale objects can continue to\n be used as they were. In particular, clients who parse the output\n of toString into language, country, and variant fields can continue\n to do so (although this is strongly discouraged), although the\n variant field will have additional information in it if script or\n extensions are present.\n\n <p>In addition, BCP 47 imposes syntax restrictions that are not\n imposed by Locale's constructors. This means that conversions\n between some Locales and BCP 47 language tags cannot be made without\n losing information. Thus <code>toLanguageTag</code> cannot\n represent the state of locales whose language, country, or variant\n do not conform to BCP 47.\n\n <p>Because of these issues, it is recommended that clients migrate\n away from constructing non-conforming locales and use the\n <code>forLanguageTag</code> and <code>Locale.Builder</code> APIs instead.\n Clients desiring a string representation of the complete locale can\n then always rely on <code>toLanguageTag</code> for this purpose.\n\n <h5><a name=\"special_cases_constructor\"/>Special cases</h5>\n\n <p>For compatibility reasons, two\n non-conforming locales are treated as special cases.  These are\n <b><tt>ja_JP_JP</tt></b> and <b><tt>th_TH_TH</tt></b>. These are ill-formed\n in BCP 47 since the variants are too short. To ease migration to BCP 47,\n these are treated specially during construction.  These two cases (and only\n these) cause a constructor to generate an extension, all other values behave\n exactly as they did prior to Java 7.\n\n <p>Java has used <tt>ja_JP_JP</tt> to represent Japanese as used in\n Japan together with the Japanese Imperial calendar. This is now\n representable using a Unicode locale extension, by specifying the\n Unicode locale key <tt>ca</tt> (for \"calendar\") and type\n <tt>japanese</tt>. When the Locale constructor is called with the\n arguments \"ja\", \"JP\", \"JP\", the extension \"u-ca-japanese\" is\n automatically added.\n\n <p>Java has used <tt>th_TH_TH</tt> to represent Thai as used in\n Thailand together with Thai digits. This is also now representable using\n a Unicode locale extension, by specifying the Unicode locale key\n <tt>nu</tt> (for \"number\") and value <tt>thai</tt>. When the Locale\n constructor is called with the arguments \"th\", \"TH\", \"TH\", the\n extension \"u-nu-thai\" is automatically added.\n\n <h5>Serialization</h5>\n\n <p>During serialization, writeObject writes all fields to the output\n stream, including extensions.\n\n <p>During deserialization, readResolve adds extensions as described\n in <a href=\"#special_cases_constructor\">Special Cases</a>, only\n for the two cases th_TH_TH and ja_JP_JP.\n\n <h5>Legacy language codes</h5>\n\n <p>Locale's constructor has always converted three language codes to\n their earlier, obsoleted forms: <tt>he</tt> maps to <tt>iw</tt>,\n <tt>yi</tt> maps to <tt>ji</tt>, and <tt>id</tt> maps to\n <tt>in</tt>.  This continues to be the case, in order to not break\n backwards compatibility.\n\n <p>The APIs added in 1.7 map between the old and new language codes,\n maintaining the old codes internal to Locale (so that\n <code>getLanguage</code> and <code>toString</code> reflect the old\n code), but using the new codes in the BCP 47 language tag APIs (so\n that <code>toLanguageTag</code> reflects the new one). This\n preserves the equivalence between Locales no matter which code or\n API is used to construct them. Java's default resource bundle\n lookup mechanism also implements this mapping, so that resources\n can be named using either convention, see {@link ResourceBundle.Control}.\n\n <h5>Three-letter language/country(region) codes</h5>\n\n <p>The Locale constructors have always specified that the language\n and the country param be two characters in length, although in\n practice they have accepted any length.  The specification has now\n been relaxed to allow language codes of two to eight characters and\n country (region) codes of two to three characters, and in\n particular, three-letter language codes and three-digit region\n codes as specified in the IANA Language Subtag Registry.  For\n compatibility, the implementation still does not impose a length\n constraint.",
            "since": "1.1",
            "see": [
                "java.util.Locale.Builder",
                "java.util.ResourceBundle",
                "java.text.Format",
                "java.text.NumberFormat",
                "java.text.Collator"
            ],
            "constructors": [
                {
                    "name": "Locale",
                    "comment_text": "Construct a locale from language, country and variant.\n This constructor normalizes the language value to lowercase and\n the country value to uppercase.\n <p>\n <b>Note:</b>\n <ul>\n <li>ISO 639 is not a stable standard; some of the language codes it defines\n (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n API on Locale will return only the OLD codes.\n <li>For backward compatibility reasons, this constructor does not make\n any syntactic checks on the input.\n <li>The two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially,\n see <a href=\"#special_cases_constructor\">Special Cases</a> for more information.\n </ul>",
                    "parameters": [
                        {
                            "name": "language",
                            "comment_text": "An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n up to 8 characters in length.  See the <code>Locale</code> class description about\n valid language values.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "country",
                            "comment_text": "An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.\n See the <code>Locale</code> class description about valid country values.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "variant",
                            "comment_text": "Any arbitrary value used to indicate a variation of a <code>Locale</code>.\n See the <code>Locale</code> class description for the details.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Locale",
                    "comment_text": "Construct a locale from language and country.\n This constructor normalizes the language value to lowercase and\n the country value to uppercase.\n <p>\n <b>Note:</b>\n <ul>\n <li>ISO 639 is not a stable standard; some of the language codes it defines\n (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n API on Locale will return only the OLD codes.\n <li>For backward compatibility reasons, this constructor does not make\n any syntactic checks on the input.\n </ul>",
                    "parameters": [
                        {
                            "name": "language",
                            "comment_text": "An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n up to 8 characters in length.  See the <code>Locale</code> class description about\n valid language values.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "country",
                            "comment_text": "An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.\n See the <code>Locale</code> class description about valid country values.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Locale",
                    "comment_text": "Construct a locale from a language code.\n This constructor normalizes the language value to lowercase.\n <p>\n <b>Note:</b>\n <ul>\n <li>ISO 639 is not a stable standard; some of the language codes it defines\n (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n API on Locale will return only the OLD codes.\n <li>For backward compatibility reasons, this constructor does not make\n any syntactic checks on the input.\n </ul>",
                    "parameters": [
                        {
                            "name": "language",
                            "comment_text": "An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n up to 8 characters in length.  See the <code>Locale</code> class description about\n valid language values.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "ENGLISH",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "FRENCH",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "GERMAN",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "ITALIAN",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "JAPANESE",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "KOREAN",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "CHINESE",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "SIMPLIFIED_CHINESE",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "TRADITIONAL_CHINESE",
                    "comment_text": "Useful constant for language.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "FRANCE",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "GERMANY",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "ITALY",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "JAPAN",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "KOREA",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "CHINA",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "PRC",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "TAIWAN",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "UK",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "US",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "CANADA",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "CANADA_FRENCH",
                    "comment_text": "Useful constant for country.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "ROOT",
                    "comment_text": "Useful constant for the root locale.  The root locale is the locale whose\n language, country, and variant are empty (\"\") strings.  This is regarded\n as the base locale of all locales, and is used as the language/country\n neutral locale for the locale sensitive operations.",
                    "type": "java.util.Locale"
                },
                {
                    "name": "PRIVATE_USE_EXTENSION",
                    "comment_text": "The key for the private use extension ('x').",
                    "type": "char"
                },
                {
                    "name": "UNICODE_LOCALE_EXTENSION",
                    "comment_text": "The key for Unicode locale extension ('u').",
                    "type": "char"
                }
            ],
            "methods": [
                {
                    "name": "getDefault",
                    "comment_text": "Gets the current value of the default locale for this instance\n of the Java Virtual Machine.\n <p>\n The Java Virtual Machine sets the default locale during startup\n based on the host environment. It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n It can be changed using the\n {@link #setDefault(java.util.Locale) setDefault} method.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDefault",
                    "comment_text": "Gets the current value of the default locale for the specified Category\n for this instance of the Java Virtual Machine.\n <p>\n The Java Virtual Machine sets the default locale during startup based\n on the host environment. It is used by many locale-sensitive methods\n if no locale is explicitly specified. It can be changed using the\n setDefault(Locale.Category, Locale) method.",
                    "return_type": "java.util.Locale",
                    "parameters": [
                        {
                            "name": "category",
                            "comment_text": "- the specified category to get the default locale",
                            "type": "java.util.Locale.Category"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDefault",
                    "comment_text": "Sets the default locale for this instance of the Java Virtual Machine.\n This does not affect the host locale.\n <p>\n If there is a security manager, its <code>checkPermission</code>\n method is called with a <code>PropertyPermission(\"user.language\", \"write\")</code>\n permission before the default locale is changed.\n <p>\n The Java Virtual Machine sets the default locale during startup\n based on the host environment. It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n <p>\n Since changing the default locale may affect many different areas\n of functionality, this method should only be used if the caller\n is prepared to reinitialize locale-sensitive code running\n within the same Java Virtual Machine.\n <p>\n By setting the default locale with this method, all of the default\n locales for each Category are also set to the specified default locale.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newLocale",
                            "comment_text": "the new default locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDefault",
                    "comment_text": "Sets the default locale for the specified Category for this instance\n of the Java Virtual Machine. This does not affect the host locale.\n <p>\n If there is a security manager, its checkPermission method is called\n with a PropertyPermission(\"user.language\", \"write\") permission before\n the default locale is changed.\n <p>\n The Java Virtual Machine sets the default locale during startup based\n on the host environment. It is used by many locale-sensitive methods\n if no locale is explicitly specified.\n <p>\n Since changing the default locale may affect many different areas of\n functionality, this method should only be used if the caller is\n prepared to reinitialize locale-sensitive code running within the\n same Java Virtual Machine.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "category",
                            "comment_text": "- the specified category to set the default locale",
                            "type": "java.util.Locale.Category"
                        },
                        {
                            "name": "newLocale",
                            "comment_text": "- the new default locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAvailableLocales",
                    "comment_text": "Returns an array of all installed locales.\n The returned array represents the union of locales supported\n by the Java runtime environment and by installed\n {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider}\n implementations.  It must contain at least a <code>Locale</code>\n instance equal to {@link java.util.Locale#US Locale.US}.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getISOCountries",
                    "comment_text": "Returns a list of all 2-letter country codes defined in ISO 3166.\n Can be used to create Locales.\n <p>\n <b>Note:</b> The <code>Locale</code> class also supports other codes for\n country (region), such as 3-letter numeric UN M.49 area codes.\n Therefore, the list returned by this method does not contain ALL valid\n codes that can be used to create Locales.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getISOLanguages",
                    "comment_text": "Returns a list of all 2-letter language codes defined in ISO 639.\n Can be used to create Locales.\n <p>\n <b>Note:</b>\n <ul>\n <li>ISO 639 is not a stable standard&mdash; some languages' codes have changed.\n The list this function returns includes both the new and the old codes for the\n languages whose codes have changed.\n <li>The <code>Locale</code> class also supports language codes up to\n 8 characters in length.  Therefore, the list returned by this method does\n not contain ALL valid codes that can be used to create Locales.\n </ul>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLanguage",
                    "comment_text": "Returns the language code of this Locale.\n\n <p><b>Note:</b> ISO 639 is not a stable standard&mdash; some languages' codes have changed.\n Locale's constructor recognizes both the new and the old codes for the languages\n whose codes have changed, but this function always returns the old code.  If you\n want to check for a specific language whose code has changed, don't do\n <pre>\n if (locale.getLanguage().equals(\"he\")) // BAD!\n    ...\n </pre>\n Instead, do\n <pre>\n if (locale.getLanguage().equals(new Locale(\"he\").getLanguage()))\n    ...\n </pre>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getScript",
                    "comment_text": "Returns the script for this locale, which should\n either be the empty string or an ISO 15924 4-letter script\n code. The first letter is uppercase and the rest are\n lowercase, for example, 'Latn', 'Cyrl'.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCountry",
                    "comment_text": "Returns the country/region code for this locale, which should\n either be the empty string, an uppercase ISO 3166 2-letter code,\n or a UN M.49 3-digit code.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getVariant",
                    "comment_text": "Returns the variant code for this locale.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExtension",
                    "comment_text": "Returns the extension (or private use) value associated with\n the specified key, or null if there is no extension\n associated with the key. To be well-formed, the key must be one\n of <code>[0-9A-Za-z]</code>. Keys are case-insensitive, so\n for example 'z' and 'Z' represent the same extension.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the extension key",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExtensionKeys",
                    "comment_text": "Returns the set of extension keys associated with this locale, or the\n empty set if it has no extensions. The returned set is unmodifiable.\n The keys will all be lower-case.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getUnicodeLocaleAttributes",
                    "comment_text": "Returns the set of unicode locale attributes associated with\n this locale, or the empty set if it has no attributes. The\n returned set is unmodifiable.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getUnicodeLocaleType",
                    "comment_text": "Returns the Unicode locale type associated with the specified Unicode locale key\n for this locale. Returns the empty string for keys that are defined with no type.\n Returns null if the key is not defined. Keys are case-insensitive. The key must\n be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is\n thrown.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the Unicode locale key",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getUnicodeLocaleKeys",
                    "comment_text": "Returns the set of Unicode locale keys defined by this locale, or the empty set if\n this locale has none.  The returned set is immutable.  Keys are all lower case.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this <code>Locale</code>\n object, consisting of language, country, variant, script,\n and extensions as below:\n <p><blockquote>\n language + \"_\" + country + \"_\" + (variant + \"_#\" | \"#\") + script + \"-\" + extensions\n </blockquote>\n\n Language is always lower case, country is always upper case, script is always title\n case, and extensions are always lower case.  Extensions and private use subtags\n will be in canonical order as explained in {@link #toLanguageTag}.\n\n <p>When the locale has neither script nor extensions, the result is the same as in\n Java 6 and prior.\n\n <p>If both the language and country fields are missing, this function will return\n the empty string, even if the variant, script, or extensions field is present (you\n can't have a locale with just a variant, the variant must accompany a well-formed\n language or country code).\n\n <p>If script or extensions are present and variant is missing, no underscore is\n added before the \"#\".\n\n <p>This behavior is designed to support debugging and to be compatible with\n previous uses of <code>toString</code> that expected language, country, and variant\n fields only.  To represent a Locale as a String for interchange purposes, use\n {@link #toLanguageTag}.\n\n <p>Examples: <ul><tt>\n <li>en\n <li>de_DE\n <li>_GB\n <li>en_US_WIN\n <li>de__POSIX\n <li>zh_CN_#Hans\n <li>zh_TW_#Hant-x-java\n <li>th_TH_TH_#u-nu-thai</tt></ul>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toLanguageTag",
                    "comment_text": "Returns a well-formed IETF BCP 47 language tag representing\n this locale.\n\n <p>If this <code>Locale</code> has a language, country, or\n variant that does not satisfy the IETF BCP 47 language tag\n syntax requirements, this method handles these fields as\n described below:\n\n <p><b>Language:</b> If language is empty, or not <a\n href=\"#def_language\" >well-formed</a> (for example \"a\" or\n \"e2\"), it will be emitted as \"und\" (Undetermined).\n\n <p><b>Country:</b> If country is not <a\n href=\"#def_region\">well-formed</a> (for example \"12\" or \"USA\"),\n it will be omitted.\n\n <p><b>Variant:</b> If variant <b>is</b> <a\n href=\"#def_variant\">well-formed</a>, each sub-segment\n (delimited by '-' or '_') is emitted as a subtag.  Otherwise:\n <ul>\n\n <li>if all sub-segments match <code>[0-9a-zA-Z]{1,8}</code>\n (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first\n ill-formed sub-segment and all following will be appended to\n the private use subtag.  The first appended subtag will be\n \"lvariant\", followed by the sub-segments in order, separated by\n hyphen. For example, \"x-lvariant-WIN\",\n \"Oracle-x-lvariant-JDK-Standard-Edition\".\n\n <li>if any sub-segment does not match\n <code>[0-9a-zA-Z]{1,8}</code>, the variant will be truncated\n and the problematic sub-segment and all following sub-segments\n will be omitted.  If the remainder is non-empty, it will be\n emitted as a private use subtag as above (even if the remainder\n turns out to be well-formed).  For example,\n \"Solaris_isjustthecoolestthing\" is emitted as\n \"x-lvariant-Solaris\", not as \"solaris\".</li></ul>\n\n <p><b>Special Conversions:</b> Java supports some old locale\n representations, including deprecated ISO language codes,\n for compatibility. This method performs the following\n conversions:\n <ul>\n\n <li>Deprecated ISO language codes \"iw\", \"ji\", and \"in\" are\n converted to \"he\", \"yi\", and \"id\", respectively.\n\n <li>A locale with language \"no\", country \"NO\", and variant\n \"NY\", representing Norwegian Nynorsk (Norway), is converted\n to a language tag \"nn-NO\".</li></ul>\n\n <p><b>Note:</b> Although the language tag created by this\n method is well-formed (satisfies the syntax requirements\n defined by the IETF BCP 47 specification), it is not\n necessarily a valid BCP 47 language tag.  For example,\n <pre>\n   new Locale(\"xx\", \"YY\").toLanguageTag();</pre>\n\n will return \"xx-YY\", but the language subtag \"xx\" and the\n region subtag \"YY\" are invalid because they are not registered\n in the IANA Language Subtag Registry.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "forLanguageTag",
                    "comment_text": "Returns a locale for the specified IETF BCP 47 language tag string.\n\n <p>If the specified language tag contains any ill-formed subtags,\n the first such subtag and all following subtags are ignored.  Compare\n to {@link Locale.Builder#setLanguageTag} which throws an exception\n in this case.\n\n <p>The following <b>conversions</b> are performed:<ul>\n\n <li>The language code \"und\" is mapped to language \"\".\n\n <li>The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\",\n \"ji\", and \"in\" respectively. (This is the same canonicalization\n that's done in Locale's constructors.)\n\n <li>The portion of a private use subtag prefixed by \"lvariant\",\n if any, is removed and appended to the variant field in the\n result locale (without case normalization).  If it is then\n empty, the private use subtag is discarded:\n\n <pre>\n     Locale loc;\n     loc = Locale.forLanguageTag(\"en-US-x-lvariant-POSIX\");\n     loc.getVariant(); // returns \"POSIX\"\n     loc.getExtension('x'); // returns null\n\n     loc = Locale.forLanguageTag(\"de-POSIX-x-URP-lvariant-Abc-Def\");\n     loc.getVariant(); // returns \"POSIX_Abc_Def\"\n     loc.getExtension('x'); // returns \"urp\"\n </pre>\n\n <li>When the languageTag argument contains an extlang subtag,\n the first such subtag is used as the language, and the primary\n language subtag and other extlang subtags are ignored:\n\n <pre>\n     Locale.forLanguageTag(\"ar-aao\").getLanguage(); // returns \"aao\"\n     Locale.forLanguageTag(\"en-abc-def-us\").toString(); // returns \"abc_US\"\n </pre>\n\n <li>Case is normalized except for variant tags, which are left\n unchanged.  Language is normalized to lower case, script to\n title case, country to upper case, and extensions to lower\n case.\n\n <li>If, after processing, the locale would exactly match either\n ja_JP_JP or th_TH_TH with no extensions, the appropriate\n extensions are added as though the constructor had been called:\n\n <pre>\n    Locale.forLanguageTag(\"ja-JP-x-lvariant-JP\").toLanguageTag();\n    // returns \"ja-JP-u-ca-japanese-x-lvariant-JP\"\n    Locale.forLanguageTag(\"th-TH-x-lvariant-TH\").toLanguageTag();\n    // returns \"th-TH-u-nu-thai-x-lvariant-TH\"\n <pre></ul>\n\n <p>This implements the 'Language-Tag' production of BCP47, and\n so supports grandfathered (regular and irregular) as well as\n private use language tags.  Stand alone private use tags are\n represented as empty language and extension 'x-whatever',\n and grandfathered tags are converted to their canonical replacements\n where they exist.\n\n <p>Grandfathered tags with canonical replacements are as follows:\n\n <table>\n <tbody align=\"center\">\n <tr><th>grandfathered tag</th><th>&nbsp;</th><th>modern replacement</th></tr>\n <tr><td>art-lojban</td><td>&nbsp;</td><td>jbo</td></tr>\n <tr><td>i-ami</td><td>&nbsp;</td><td>ami</td></tr>\n <tr><td>i-bnn</td><td>&nbsp;</td><td>bnn</td></tr>\n <tr><td>i-hak</td><td>&nbsp;</td><td>hak</td></tr>\n <tr><td>i-klingon</td><td>&nbsp;</td><td>tlh</td></tr>\n <tr><td>i-lux</td><td>&nbsp;</td><td>lb</td></tr>\n <tr><td>i-navajo</td><td>&nbsp;</td><td>nv</td></tr>\n <tr><td>i-pwn</td><td>&nbsp;</td><td>pwn</td></tr>\n <tr><td>i-tao</td><td>&nbsp;</td><td>tao</td></tr>\n <tr><td>i-tay</td><td>&nbsp;</td><td>tay</td></tr>\n <tr><td>i-tsu</td><td>&nbsp;</td><td>tsu</td></tr>\n <tr><td>no-bok</td><td>&nbsp;</td><td>nb</td></tr>\n <tr><td>no-nyn</td><td>&nbsp;</td><td>nn</td></tr>\n <tr><td>sgn-BE-FR</td><td>&nbsp;</td><td>sfb</td></tr>\n <tr><td>sgn-BE-NL</td><td>&nbsp;</td><td>vgt</td></tr>\n <tr><td>sgn-CH-DE</td><td>&nbsp;</td><td>sgg</td></tr>\n <tr><td>zh-guoyu</td><td>&nbsp;</td><td>cmn</td></tr>\n <tr><td>zh-hakka</td><td>&nbsp;</td><td>hak</td></tr>\n <tr><td>zh-min-nan</td><td>&nbsp;</td><td>nan</td></tr>\n <tr><td>zh-xiang</td><td>&nbsp;</td><td>hsn</td></tr>\n </tbody>\n </table>\n\n <p>Grandfathered tags with no modern replacement will be\n converted as follows:\n\n <table>\n <tbody align=\"center\">\n <tr><th>grandfathered tag</th><th>&nbsp;</th><th>converts to</th></tr>\n <tr><td>cel-gaulish</td><td>&nbsp;</td><td>xtg-x-cel-gaulish</td></tr>\n <tr><td>en-GB-oed</td><td>&nbsp;</td><td>en-GB-x-oed</td></tr>\n <tr><td>i-default</td><td>&nbsp;</td><td>en-x-i-default</td></tr>\n <tr><td>i-enochian</td><td>&nbsp;</td><td>und-x-i-enochian</td></tr>\n <tr><td>i-mingo</td><td>&nbsp;</td><td>see-x-i-mingo</td></tr>\n <tr><td>zh-min</td><td>&nbsp;</td><td>nan-x-zh-min</td></tr>\n </tbody>\n </table>\n\n <p>For a list of all grandfathered tags, see the\n IANA Language Subtag Registry (search for \"Type: grandfathered\").\n\n <p><b>Note</b>: there is no guarantee that <code>toLanguageTag</code>\n and <code>forLanguageTag</code> will round-trip.",
                    "return_type": "java.util.Locale",
                    "parameters": [
                        {
                            "name": "languageTag",
                            "comment_text": "the language tag",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getISO3Language",
                    "comment_text": "Returns a three-letter abbreviation of this locale's language.\n If the language matches an ISO 639-1 two-letter code, the\n corresponding ISO 639-2/T three-letter lowercase code is\n returned.  The ISO 639-2 language codes can be found on-line,\n see \"Codes for the Representation of Names of Languages Part 2:\n Alpha-3 Code\".  If the locale specifies a three-letter\n language, the language is returned as is.  If the locale does\n not specify a language the empty string is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.MissingResourceException",
                            "comment_text": "Throws MissingResourceException if\n three-letter language abbreviation is not available for this locale."
                        }
                    ]
                },
                {
                    "name": "getISO3Country",
                    "comment_text": "Returns a three-letter abbreviation for this locale's country.\n If the country matches an ISO 3166-1 alpha-2 code, the\n corresponding ISO 3166-1 alpha-3 uppercase code is returned.\n If the locale doesn't specify a country, this will be the empty\n string.\n\n <p>The ISO 3166-1 codes can be found on-line.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.MissingResourceException",
                            "comment_text": "Throws MissingResourceException if the\n three-letter country abbreviation is not available for this locale."
                        }
                    ]
                },
                {
                    "name": "getDisplayLanguage",
                    "comment_text": "Returns a name for the locale's language that is appropriate for display to the\n user.\n If possible, the name returned will be localized for the default locale.\n For example, if the locale is fr_FR and the default locale\n is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and\n the default locale is fr_FR, getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized for the default locale,\n (say, we don't have a Japanese name for Croatian),\n this function falls back on the English name, and uses the ISO code as a last-resort\n value.  If the locale doesn't specify a language, this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayLanguage",
                    "comment_text": "Returns a name for the locale's language that is appropriate for display to the\n user.\n If possible, the name returned will be localized according to inLocale.\n For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized according to inLocale,\n (say, we don't have a Japanese name for Croatian),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  If the locale doesn't specify a language,\n this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "inLocale",
                            "comment_text": "",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayScript",
                    "comment_text": "Returns a name for the the locale's script that is appropriate for display to\n the user. If possible, the name will be localized for the default locale.  Returns\n the empty string if this locale doesn't specify a script code.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayScript",
                    "comment_text": "Returns a name for the locale's script that is appropriate\n for display to the user. If possible, the name will be\n localized for the given locale. Returns the empty string if\n this locale doesn't specify a script code.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "inLocale",
                            "comment_text": "",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayCountry",
                    "comment_text": "Returns a name for the locale's country that is appropriate for display to the\n user.\n If possible, the name returned will be localized for the default locale.\n For example, if the locale is fr_FR and the default locale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n the default locale is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized for the default locale,\n (say, we don't have a Japanese name for Croatia),\n this function falls back on the English name, and uses the ISO code as a last-resort\n value.  If the locale doesn't specify a country, this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayCountry",
                    "comment_text": "Returns a name for the locale's country that is appropriate for display to the\n user.\n If possible, the name returned will be localized according to inLocale.\n For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized according to inLocale.\n (say, we don't have a Japanese name for Croatia),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  If the locale doesn't specify a country,\n this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "inLocale",
                            "comment_text": "",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayVariant",
                    "comment_text": "Returns a name for the locale's variant code that is appropriate for display to the\n user.  If possible, the name will be localized for the default locale.  If the locale\n doesn't specify a variant code, this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayVariant",
                    "comment_text": "Returns a name for the locale's variant code that is appropriate for display to the\n user.  If possible, the name will be localized for inLocale.  If the locale\n doesn't specify a variant code, this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "inLocale",
                            "comment_text": "",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a name for the locale that is appropriate for display to the\n user. This will be the values returned by getDisplayLanguage(),\n getDisplayScript(), getDisplayCountry(), and getDisplayVariant() assembled\n into a single string. The the non-empty values are used in order,\n with the second and subsequent names in parentheses.  For example:\n <blockquote>\n language (script, country, variant)<br>\n language (country)<br>\n language (variant)<br>\n script (country)<br>\n country<br>\n </blockquote>\n depending on which fields are specified in the locale.  If the\n language, sacript, country, and variant fields are all empty,\n this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a name for the locale that is appropriate for display\n to the user.  This will be the values returned by\n getDisplayLanguage(), getDisplayScript(),getDisplayCountry(),\n and getDisplayVariant() assembled into a single string.\n The non-empty values are used in order,\n with the second and subsequent names in parentheses.  For example:\n <blockquote>\n language (script, country, variant)<br>\n language (country)<br>\n language (variant)<br>\n script (country)<br>\n country<br>\n </blockquote>\n depending on which fields are specified in the locale.  If the\n language, script, country, and variant fields are all empty,\n this function returns the empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "inLocale",
                            "comment_text": "",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Overrides Cloneable.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Override hashCode.\n Since Locales are often used in hashtables, caches the value\n for speed.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns true if this Locale is equal to another object.  A Locale is\n deemed equal to another Locale with identical language, script, country,\n variant and extensions, and unequal to all other objects.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Locale.Category",
            "interfaces": [

            ],
            "superclass": "java.lang.Enum",
            "comment_text": "Enum for locale categories.  These locale categories are used to get/set\n the default locale for the specific functionality represented by the\n category.",
            "since": "1.7",
            "see": [
                "java.util.Locale.Category",
                "java.util.Locale.Category"
            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "DISPLAY",
                    "comment_text": "Category used to represent the default locale for\n displaying user interfaces.",
                    "type": "java.util.Locale.Category"
                },
                {
                    "name": "FORMAT",
                    "comment_text": "Category used to represent the default locale for\n formatting dates, numbers, and/or currencies.",
                    "type": "java.util.Locale.Category"
                }
            ],
            "methods": [
                {
                    "name": "values",
                    "comment_text": "",
                    "return_type": "java.util.Locale.Category",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "valueOf",
                    "comment_text": "",
                    "return_type": "java.util.Locale.Category",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Locale.Builder",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "<code>Builder</code> is used to build instances of <code>Locale</code>\n from values configured by the setters.  Unlike the <code>Locale</code>\n constructors, the <code>Builder</code> checks if a value configured by a\n setter satisfies the syntax requirements defined by the <code>Locale</code>\n class.  A <code>Locale</code> object created by a <code>Builder</code> is\n well-formed and can be transformed to a well-formed IETF BCP 47 language tag\n without losing information.\n\n <p><b>Note:</b> The <code>Locale</code> class does not provide any\n syntactic restrictions on variant, while BCP 47 requires each variant\n subtag to be 5 to 8 alphanumerics or a single numeric followed by 3\n alphanumerics.  The method <code>setVariant</code> throws\n <code>IllformedLocaleException</code> for a variant that does not satisfy\n this restriction. If it is necessary to support such a variant, use a\n Locale constructor.  However, keep in mind that a <code>Locale</code>\n object created this way might lose the variant information when\n transformed to a BCP 47 language tag.\n\n <p>The following example shows how to create a <code>Locale</code> object\n with the <code>Builder</code>.\n <blockquote>\n <pre>\n     Locale aLocale = new Builder().setLanguage(\"sr\").setScript(\"Latn\").setRegion(\"RS\").build();\n </pre>\n </blockquote>\n\n <p>Builders can be reused; <code>clear()</code> resets all\n fields to their default values.",
            "since": "1.7",
            "see": [
                "java.util.Locale"
            ],
            "constructors": [
                {
                    "name": "Locale.Builder",
                    "comment_text": "Constructs an empty Builder. The default value of all\n fields, extensions, and private use information is the\n empty string.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "setLocale",
                    "comment_text": "Resets the <code>Builder</code> to match the provided\n <code>locale</code>.  Existing state is discarded.\n\n <p>All fields of the locale must be well-formed, see {@link Locale}.\n\n <p>Locales with any ill-formed fields cause\n <code>IllformedLocaleException</code> to be thrown, except for the\n following three cases which are accepted for compatibility\n reasons:<ul>\n <li>Locale(\"ja\", \"JP\", \"JP\") is treated as \"ja-JP-u-ca-japanese\"\n <li>Locale(\"th\", \"TH\", \"TH\") is treated as \"th-TH-u-nu-thai\"\n <li>Locale(\"no\", \"NO\", \"NY\") is treated as \"nn-NO\"</ul>",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "locale",
                            "comment_text": "the locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLanguageTag",
                    "comment_text": "Resets the Builder to match the provided IETF BCP 47\n language tag.  Discards the existing state.  Null and the\n empty string cause the builder to be reset, like {@link\n #clear}.  Grandfathered tags (see {@link\n Locale#forLanguageTag}) are converted to their canonical\n form before being processed.  Otherwise, the language tag\n must be well-formed (see {@link Locale}) or an exception is\n thrown (unlike <code>Locale.forLanguageTag</code>, which\n just discards ill-formed and following portions of the\n tag).",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "languageTag",
                            "comment_text": "the language tag",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLanguage",
                    "comment_text": "Sets the language.  If <code>language</code> is the empty string or\n null, the language in this <code>Builder</code> is removed.  Otherwise,\n the language must be <a href=\"./Locale.html#def_language\">well-formed</a>\n or an exception is thrown.\n\n <p>The typical language value is a two or three-letter language\n code as defined in ISO639.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "language",
                            "comment_text": "the language",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setScript",
                    "comment_text": "Sets the script. If <code>script</code> is null or the empty string,\n the script in this <code>Builder</code> is removed.\n Otherwise, the script must be <a href=\"./Locale.html#def_script\">well-formed</a> or an\n exception is thrown.\n\n <p>The typical script value is a four-letter script code as defined by ISO 15924.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "script",
                            "comment_text": "the script",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRegion",
                    "comment_text": "Sets the region.  If region is null or the empty string, the region\n in this <code>Builder</code> is removed.  Otherwise,\n the region must be <a href=\"./Locale.html#def_region\">well-formed</a> or an\n exception is thrown.\n\n <p>The typical region value is a two-letter ISO 3166 code or a\n three-digit UN M.49 area code.\n\n <p>The country value in the <code>Locale</code> created by the\n <code>Builder</code> is always normalized to upper case.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "region",
                            "comment_text": "the region",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setVariant",
                    "comment_text": "Sets the variant.  If variant is null or the empty string, the\n variant in this <code>Builder</code> is removed.  Otherwise, it\n must consist of one or more <a href=\"./Locale.html#def_variant\">well-formed</a>\n subtags, or an exception is thrown.\n\n <p><b>Note:</b> This method checks if <code>variant</code>\n satisfies the IETF BCP 47 variant subtag's syntax requirements,\n and normalizes the value to lowercase letters.  However,\n the <code>Locale</code> class does not impose any syntactic\n restriction on variant, and the variant value in\n <code>Locale</code> is case sensitive.  To set such a variant,\n use a Locale constructor.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "variant",
                            "comment_text": "the variant",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setExtension",
                    "comment_text": "Sets the extension for the given key. If the value is null or the\n empty string, the extension is removed.  Otherwise, the extension\n must be <a href=\"./Locale.html#def_extensions\">well-formed</a> or an exception\n is thrown.\n\n <p><b>Note:</b> The key {@link Locale#UNICODE_LOCALE_EXTENSION\n UNICODE_LOCALE_EXTENSION} ('u') is used for the Unicode locale extension.\n Setting a value for this key replaces any existing Unicode locale key/type\n pairs with those defined in the extension.\n\n <p><b>Note:</b> The key {@link Locale#PRIVATE_USE_EXTENSION\n PRIVATE_USE_EXTENSION} ('x') is used for the private use code. To be\n well-formed, the value for this key needs only to have subtags of one to\n eight alphanumeric characters, not two to eight as in the general case.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the extension key",
                            "type": "char"
                        },
                        {
                            "name": "value",
                            "comment_text": "the extension value",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setUnicodeLocaleKeyword",
                    "comment_text": "Sets the Unicode locale keyword type for the given key.  If the type\n is null, the Unicode keyword is removed.  Otherwise, the key must be\n non-null and both key and type must be <a\n href=\"./Locale.html#def_locale_extension\">well-formed</a> or an exception\n is thrown.\n\n <p>Keys and types are converted to lower case.\n\n <p><b>Note</b>:Setting the 'u' extension via {@link #setExtension}\n replaces all Unicode locale keywords with those defined in the\n extension.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the Unicode locale key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "type",
                            "comment_text": "the Unicode locale type",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addUnicodeLocaleAttribute",
                    "comment_text": "Adds a unicode locale attribute, if not already present, otherwise\n has no effect.  The attribute must not be null and must be <a\n href=\"./Locale.html#def_locale_extension\">well-formed</a> or an exception\n is thrown.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "attribute",
                            "comment_text": "the attribute",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeUnicodeLocaleAttribute",
                    "comment_text": "Removes a unicode locale attribute, if present, otherwise has no\n effect.  The attribute must not be null and must be <a\n href=\"./Locale.html#def_locale_extension\">well-formed</a> or an exception\n is thrown.\n\n <p>Attribute comparision for removal is case-insensitive.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [
                        {
                            "name": "attribute",
                            "comment_text": "the attribute",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Resets the builder to its initial, empty state.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clearExtensions",
                    "comment_text": "Resets the extensions to their initial, empty state.\n Language, script, region and variant are unchanged.",
                    "return_type": "java.util.Locale.Builder",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "build",
                    "comment_text": "Returns an instance of <code>Locale</code> created from the fields set\n on this builder.\n\n <p>This applies the conversions listed in {@link Locale#forLanguageTag}\n when constructing a Locale. (Grandfathered tags are handled in\n {@link #setLanguageTag}.)",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ListResourceBundle",
            "interfaces": [

            ],
            "superclass": "java.util.ResourceBundle",
            "comment_text": "<code>ListResourceBundle</code> is an abstract subclass of\n <code>ResourceBundle</code> that manages resources for a locale\n in a convenient and easy to use list. See <code>ResourceBundle</code> for\n more information about resource bundles in general.\n\n <P>\n Subclasses must override <code>getContents</code> and provide an array,\n where each item in the array is a pair of objects.\n The first element of each pair is the key, which must be a\n <code>String</code>, and the second element is the value associated with\n that key.\n\n <p>\n The following <a name=\"sample\">example</a> shows two members of a resource\n bundle family with the base name \"MyResources\".\n \"MyResources\" is the default member of the bundle family, and\n \"MyResources_fr\" is the French member.\n These members are based on <code>ListResourceBundle</code>\n (a related <a href=\"PropertyResourceBundle.html#sample\">example</a> shows\n how you can add a bundle to this family that's based on a properties file).\n The keys in this example are of the form \"s1\" etc. The actual\n keys are entirely up to your choice, so long as they are the same as\n the keys you use in your program to retrieve the objects from the bundle.\n Keys are case-sensitive.\n <blockquote>\n <pre>\n\n public class MyResources extends ListResourceBundle {\n     protected Object[][] getContents() {\n         return new Object[][] {\n         // LOCALIZE THIS\n             {\"s1\", \"The disk \\\"{1}\\\" contains {0}.\"},  // MessageFormat pattern\n             {\"s2\", \"1\"},                               // location of {0} in pattern\n             {\"s3\", \"My Disk\"},                         // sample disk name\n             {\"s4\", \"no files\"},                        // first ChoiceFormat choice\n             {\"s5\", \"one file\"},                        // second ChoiceFormat choice\n             {\"s6\", \"{0,number} files\"},                // third ChoiceFormat choice\n             {\"s7\", \"3 Mar 96\"},                        // sample date\n             {\"s8\", new Dimension(1,5)}                 // real object, not just string\n         // END OF MATERIAL TO LOCALIZE\n         };\n     }\n }\n\n public class MyResources_fr extends ListResourceBundle {\n     protected Object[][] getContents() {\n         return new Object[][] = {\n         // LOCALIZE THIS\n             {\"s1\", \"Le disque \\\"{1}\\\" {0}.\"},          // MessageFormat pattern\n             {\"s2\", \"1\"},                               // location of {0} in pattern\n             {\"s3\", \"Mon disque\"},                      // sample disk name\n             {\"s4\", \"ne contient pas de fichiers\"},     // first ChoiceFormat choice\n             {\"s5\", \"contient un fichier\"},             // second ChoiceFormat choice\n             {\"s6\", \"contient {0,number} fichiers\"},    // third ChoiceFormat choice\n             {\"s7\", \"3 mars 1996\"},                     // sample date\n             {\"s8\", new Dimension(1,3)}                 // real object, not just string\n         // END OF MATERIAL TO LOCALIZE\n         };\n     }\n }\n </pre>\n </blockquote>",
            "since": "JDK1.1",
            "see": [
                "java.util.ResourceBundle",
                "java.util.PropertyResourceBundle"
            ],
            "constructors": [
                {
                    "name": "ListResourceBundle",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "handleGetObject",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getKeys",
                    "comment_text": "Returns an <code>Enumeration</code> of the keys contained in\n this <code>ResourceBundle</code> and its parent bundles.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "handleKeySet",
                    "comment_text": "Returns a <code>Set</code> of the keys contained\n <em>only</em> in this <code>ResourceBundle</code>.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getContents",
                    "comment_text": "Returns an array in which each item is a pair of objects in an\n <code>Object</code> array. The first element of each pair is\n the key, which must be a <code>String</code>, and the second\n element is the value associated with that key.  See the class\n description for details.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ListIterator",
            "interfaces": [
                "java.util.Iterator"
            ],
            "superclass": "",
            "comment_text": "An iterator for lists that allows the programmer\n to traverse the list in either direction, modify\n the list during iteration, and obtain the iterator's\n current position in the list. A {@code ListIterator}\n has no current element; its <I>cursor position</I> always\n lies between the element that would be returned by a call\n to {@code previous()} and the element that would be\n returned by a call to {@code next()}.\n An iterator for a list of length {@code n} has {@code n+1} possible\n cursor positions, as illustrated by the carets ({@code ^}) below:\n <PRE>\n                      Element(0)   Element(1)   Element(2)   ... Element(n-1)\n cursor positions:  ^            ^            ^            ^                  ^\n </PRE>\n Note that the {@link #remove} and {@link #set(Object)} methods are\n <i>not</i> defined in terms of the cursor position;  they are defined to\n operate on the last element returned by a call to {@link #next} or\n {@link #previous()}.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.List",
                "java.util.Iterator",
                "java.util.Enumeration",
                "java.util.List"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "hasNext",
                    "comment_text": "Returns {@code true} if this list iterator has more elements when\n traversing the list in the forward direction. (In other words,\n returns {@code true} if {@link #next} would return an element rather\n than throwing an exception.)",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "Returns the next element in the list and advances the cursor position.\n This method may be called repeatedly to iterate through the list,\n or intermixed with calls to {@link #previous} to go back and forth.\n (Note that alternating calls to {@code next} and {@code previous}\n will return the same element repeatedly.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasPrevious",
                    "comment_text": "Returns {@code true} if this list iterator has more elements when\n traversing the list in the reverse direction.  (In other words,\n returns {@code true} if {@link #previous} would return an element\n rather than throwing an exception.)",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "previous",
                    "comment_text": "Returns the previous element in the list and moves the cursor\n position backwards.  This method may be called repeatedly to\n iterate through the list backwards, or intermixed with calls to\n {@link #next} to go back and forth.  (Note that alternating calls\n to {@code next} and {@code previous} will return the same\n element repeatedly.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextIndex",
                    "comment_text": "Returns the index of the element that would be returned by a\n subsequent call to {@link #next}. (Returns list size if the list\n iterator is at the end of the list.)",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "previousIndex",
                    "comment_text": "Returns the index of the element that would be returned by a\n subsequent call to {@link #previous}. (Returns -1 if the list\n iterator is at the beginning of the list.)",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes from the list the last element that was returned by {@link\n #next} or {@link #previous} (optional operation).  This call can\n only be made once per call to {@code next} or {@code previous}.\n It can be made only if {@link #add} has not been\n called after the last call to {@code next} or {@code previous}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the last element returned by {@link #next} or\n {@link #previous} with the specified element (optional operation).\n This call can be made only if neither {@link #remove} nor {@link\n #add} have been called after the last call to {@code next} or\n {@code previous}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element with which to replace the last element returned by\n          {@code next} or {@code previous}",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into the list (optional operation).\n The element is inserted immediately before the element that\n would be returned by {@link #next}, if any, and after the element\n that would be returned by {@link #previous}, if any.  (If the\n list contains no elements, the new element becomes the sole element\n on the list.)  The new element is inserted before the implicit\n cursor: a subsequent call to {@code next} would be unaffected, and a\n subsequent call to {@code previous} would return the new element.\n (This call increases by one the value that would be returned by a\n call to {@code nextIndex} or {@code previousIndex}.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to insert",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.List",
            "interfaces": [
                "java.util.Collection"
            ],
            "superclass": "",
            "comment_text": "An ordered collection (also known as a <i>sequence</i>).  The user of this\n interface has precise control over where in the list each element is\n inserted.  The user can access elements by their integer index (position in\n the list), and search for elements in the list.<p>\n\n Unlike sets, lists typically allow duplicate elements.  More formally,\n lists typically allow pairs of elements <tt>e1</tt> and <tt>e2</tt>\n such that <tt>e1.equals(e2)</tt>, and they typically allow multiple\n null elements if they allow null elements at all.  It is not inconceivable\n that someone might wish to implement a list that prohibits duplicates, by\n throwing runtime exceptions when the user attempts to insert them, but we\n expect this usage to be rare.<p>\n\n The <tt>List</tt> interface places additional stipulations, beyond those\n specified in the <tt>Collection</tt> interface, on the contracts of the\n <tt>iterator</tt>, <tt>add</tt>, <tt>remove</tt>, <tt>equals</tt>, and\n <tt>hashCode</tt> methods.  Declarations for other inherited methods are\n also included here for convenience.<p>\n\n The <tt>List</tt> interface provides four methods for positional (indexed)\n access to list elements.  Lists (like Java arrays) are zero based.  Note\n that these operations may execute in time proportional to the index value\n for some implementations (the <tt>LinkedList</tt> class, for\n example). Thus, iterating over the elements in a list is typically\n preferable to indexing through it if the caller does not know the\n implementation.<p>\n\n The <tt>List</tt> interface provides a special iterator, called a\n <tt>ListIterator</tt>, that allows element insertion and replacement, and\n bidirectional access in addition to the normal operations that the\n <tt>Iterator</tt> interface provides.  A method is provided to obtain a\n list iterator that starts at a specified position in the list.<p>\n\n The <tt>List</tt> interface provides two methods to search for a specified\n object.  From a performance standpoint, these methods should be used with\n caution.  In many implementations they will perform costly linear\n searches.<p>\n\n The <tt>List</tt> interface provides two methods to efficiently insert and\n remove multiple elements at an arbitrary point in the list.<p>\n\n Note: While it is permissible for lists to contain themselves as elements,\n extreme caution is advised: the <tt>equals</tt> and <tt>hashCode</tt>\n methods are no longer well defined on such a list.\n\n <p>Some list implementations have restrictions on the elements that\n they may contain.  For example, some implementations prohibit null elements,\n and some have restrictions on the types of their elements.  Attempting to\n add an ineligible element throws an unchecked exception, typically\n <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting\n to query the presence of an ineligible element may throw an exception,\n or it may simply return false; some implementations will exhibit the former\n behavior and some will exhibit the latter.  More generally, attempting an\n operation on an ineligible element whose completion would not result in\n the insertion of an ineligible element into the list may throw an\n exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.Set",
                "java.util.ArrayList",
                "java.util.LinkedList",
                "java.util.Vector",
                "java.util.Arrays",
                "java.util.Collections",
                "java.util.Collections",
                "java.util.AbstractList",
                "java.util.AbstractSequentialList"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this list.  If this list contains\n more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this list contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this list is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this list in proper sequence.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list in proper\n sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must\n allocate a new array even if this list is backed by an array).\n The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n <p>If the list fits in the specified array with room to spare (i.e.,\n the array has more elements than the list), the element in the array\n immediately following the end of the list is set to <tt>null</tt>.\n (This is useful in determining the length of the list <i>only</i> if\n the caller knows that the list does not contain any null elements.)\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of this list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Appends the specified element to the end of this list (optional\n operation).\n\n <p>Lists that support this operation may place limitations on what\n elements may be added to this list.  In particular, some\n lists will refuse to add null elements, and others will impose\n restrictions on the type of elements that may be added.  List\n classes should clearly specify in their documentation any restrictions\n on what elements may be added.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be appended to this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this list,\n if it is present (optional operation).  If this list does not contain\n the element, it is unchanged.  More formally, removes the element with\n the lowest index <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list changed\n as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this list, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns <tt>true</tt> if this list contains all of the elements of the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection to be checked for containment in this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the specified\n collection's iterator (optional operation).  The behavior of this\n operation is undefined if the specified collection is modified while\n the operation is in progress.  (Note that this will occur if the\n specified collection is this list, and it's nonempty.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  The new elements\n will appear in this list in the order that they are returned by the\n specified collection's iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  (Note that this will occur if the specified\n collection is this list, and it's nonempty.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which to insert the first element from the\n              specified collection",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this list all of its elements that are contained in the\n specified collection (optional operation).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this list that are contained in the\n specified collection (optional operation).  In other words, removes\n from this list all of its elements that are not contained in the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be retained in this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this list (optional operation).\n The list will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this list for equality.  Returns\n <tt>true</tt> if and only if the specified object is also a list, both\n lists have the same size, and all corresponding pairs of elements in\n the two lists are <i>equal</i>.  (Two elements <tt>e1</tt> and\n <tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :\n e1.equals(e2))</tt>.)  In other words, two lists are defined to be\n equal if they contain the same elements in the same order.  This\n definition ensures that the equals method works properly across\n different implementations of the <tt>List</tt> interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to be compared for equality with this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this list.  The hash code of a list\n is defined to be the result of the following calculation:\n <pre>\n  int hashCode = 1;\n  for (E e : list)\n      hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());\n </pre>\n This ensures that <tt>list1.equals(list2)</tt> implies that\n <tt>list1.hashCode()==list2.hashCode()</tt> for any two lists,\n <tt>list1</tt> and <tt>list2</tt>, as required by the general\n contract of {@link Object#hashCode}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the element at the specified position in this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to return",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the element at the specified position in this list with the\n specified element (optional operation).",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to replace",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be stored at the specified position",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the specified position in this list\n (optional operation).  Shifts the element currently at that position\n (if any) and any subsequent elements to the right (adds one to their\n indices).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which the specified element is to be inserted",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be inserted",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the element at the specified position in this list (optional\n operation).  Shifts any subsequent elements to the left (subtracts one\n from their indices).  Returns the element that was removed from the\n list.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "the index of the element to be removed",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence).",
                    "return_type": "java.util.ListIterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to {@link ListIterator#next next}.\n An initial call to {@link ListIterator#previous previous} would\n return the element with the specified index minus one.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the first element to be returned from the\n        list iterator (by a call to {@link ListIterator#next next})",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subList",
                    "comment_text": "Returns a view of the portion of this list between the specified\n <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.  (If\n <tt>fromIndex</tt> and <tt>toIndex</tt> are equal, the returned list is\n empty.)  The returned list is backed by this list, so non-structural\n changes in the returned list are reflected in this list, and vice-versa.\n The returned list supports all of the optional list operations supported\n by this list.<p>\n\n This method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a list can be used as a range operation by passing a subList view\n instead of a whole list.  For example, the following idiom\n removes a range of elements from a list:\n <pre>\n      list.subList(from, to).clear();\n </pre>\n Similar idioms may be constructed for <tt>indexOf</tt> and\n <tt>lastIndexOf</tt>, and all of the algorithms in the\n <tt>Collections</tt> class can be applied to a subList.<p>\n\n The semantics of the list returned by this method become undefined if\n the backing list (i.e., this list) is <i>structurally modified</i> in\n any way other than via the returned list.  (Structural modifications are\n those that change the size of this list, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "low endpoint (inclusive) of the subList",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "high endpoint (exclusive) of the subList",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.LinkedList",
            "interfaces": [
                "java.util.List",
                "java.util.Deque",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractSequentialList",
            "comment_text": "Doubly-linked list implementation of the {@code List} and {@code Deque}\n interfaces.  Implements all optional list operations, and permits all\n elements (including {@code null}).\n\n <p>All of the operations perform as could be expected for a doubly-linked\n list.  Operations that index into the list will traverse the list from\n the beginning or the end, whichever is closer to the specified index.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a linked list concurrently, and at least\n one of the threads modifies the list structurally, it <i>must</i> be\n synchronized externally.  (A structural modification is any operation\n that adds or deletes one or more elements; merely setting the value of\n an element is not a structural modification.)  This is typically\n accomplished by synchronizing on some object that naturally\n encapsulates the list.\n\n If no such object exists, the list should be \"wrapped\" using the\n {@link Collections#synchronizedList Collections.synchronizedList}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the list:<pre>\n   List list = Collections.synchronizedList(new LinkedList(...));</pre>\n\n <p>The iterators returned by this class's {@code iterator} and\n {@code listIterator} methods are <i>fail-fast</i>: if the list is\n structurally modified at any time after the iterator is created, in\n any way except through the Iterator's own {@code remove} or\n {@code add} methods, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than\n risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.List",
                "java.util.ArrayList"
            ],
            "constructors": [
                {
                    "name": "LinkedList",
                    "comment_text": "Constructs an empty list.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedList",
                    "comment_text": "Constructs a list containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed into this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFirst",
                    "comment_text": "Returns the first element in this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLast",
                    "comment_text": "Returns the last element in this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirst",
                    "comment_text": "Removes and returns the first element from this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLast",
                    "comment_text": "Removes and returns the last element from this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addFirst",
                    "comment_text": "Inserts the specified element at the beginning of this list.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addLast",
                    "comment_text": "Appends the specified element to the end of this list.\n\n <p>This method is equivalent to {@link #add}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this list contains the specified element.\n More formally, returns {@code true} if and only if this list contains\n at least one element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this list is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this list.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Appends the specified element to the end of this list.\n\n <p>This method is equivalent to {@link #addLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be appended to this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n {@code i} such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns {@code true} if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this list, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the specified\n collection's iterator.  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in\n progress.  (Note that this will occur if the specified collection is\n this list, and it's nonempty.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in the list in the order that they are returned by the\n specified collection's iterator.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which to insert the first element\n              from the specified collection",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this list.\n The list will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the element at the specified position in this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to return",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the element at the specified position in this list with the\n specified element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to replace",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be stored at the specified position",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the specified position in this list.\n Shifts the element currently at that position (if any) and any\n subsequent elements to the right (adds one to their indices).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which the specified element is to be inserted",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be inserted",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the element at the specified position in this list.  Shifts any\n subsequent elements to the left (subtracts one from their indices).\n Returns the element that was removed from the list.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "the index of the element to be removed",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index {@code i} such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index {@code i} such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Retrieves, but does not remove, the head (first element) of this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head (first element) of this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head (first element) of this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head (first element) of this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Adds the specified element as the tail (last element) of this list.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "Inserts the specified element at the front of this list.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to insert",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "Inserts the specified element at the end of this list.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to insert",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekFirst",
                    "comment_text": "Retrieves, but does not remove, the first element of this list,\n or returns {@code null} if this list is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekLast",
                    "comment_text": "Retrieves, but does not remove, the last element of this list,\n or returns {@code null} if this list is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "Retrieves and removes the first element of this list,\n or returns {@code null} if this list is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "Retrieves and removes the last element of this list,\n or returns {@code null} if this list is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "Pushes an element onto the stack represented by this list.  In other\n words, inserts the element at the front of this list.\n\n <p>This method is equivalent to {@link #addFirst}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to push",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pop",
                    "comment_text": "Pops an element from the stack represented by this list.  In other\n words, removes and returns the first element of this list.\n\n <p>This method is equivalent to {@link #removeFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirstOccurrence",
                    "comment_text": "Removes the first occurrence of the specified element in this\n list (when traversing the list from head to tail).  If the list\n does not contain the element, it is unchanged.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this list, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLastOccurrence",
                    "comment_text": "Removes the last occurrence of the specified element in this\n list (when traversing the list from head to tail).  If the list\n does not contain the element, it is unchanged.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this list, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list-iterator of the elements in this list (in proper\n sequence), starting at the specified position in the list.\n Obeys the general contract of {@code List.listIterator(int)}.<p>\n\n The list-iterator is <i>fail-fast</i>: if the list is structurally\n modified at any time after the Iterator is created, in any way except\n through the list-iterator's own {@code remove} or {@code add}\n methods, the list-iterator will throw a\n {@code ConcurrentModificationException}.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the first element to be returned from the\n              list-iterator (by a call to {@code next})",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this {@code LinkedList}. (The elements\n themselves are not cloned.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n <p>If the list fits in the specified array with room to spare (i.e.,\n the array has more elements than the list), the element in the array\n immediately following the end of the list is set to {@code null}.\n (This is useful in determining the length of the list <i>only</i> if\n the caller knows that the list does not contain any null elements.)\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.LinkedHashSet",
            "interfaces": [
                "java.util.Set",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.HashSet",
            "comment_text": "<p>Hash table and linked list implementation of the <tt>Set</tt> interface,\n with predictable iteration order.  This implementation differs from\n <tt>HashSet</tt> in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is the order in which elements were inserted into the set\n (<i>insertion-order</i>).  Note that insertion order is <i>not</i> affected\n if an element is <i>re-inserted</i> into the set.  (An element <tt>e</tt>\n is reinserted into a set <tt>s</tt> if <tt>s.add(e)</tt> is invoked when\n <tt>s.contains(e)</tt> would return <tt>true</tt> immediately prior to\n the invocation.)\n\n <p>This implementation spares its clients from the unspecified, generally\n chaotic ordering provided by {@link HashSet}, without incurring the\n increased cost associated with {@link TreeSet}.  It can be used to\n produce a copy of a set that has the same order as the original, regardless\n of the original set's implementation:\n <pre>\n     void foo(Set s) {\n         Set copy = new LinkedHashSet(s);\n         ...\n     }\n </pre>\n This technique is particularly useful if a module takes a set on input,\n copies it, and later returns results whose order is determined by that of\n the copy.  (Clients generally appreciate having things returned in the same\n order they were presented.)\n\n <p>This class provides all of the optional <tt>Set</tt> operations, and\n permits null elements.  Like <tt>HashSet</tt>, it provides constant-time\n performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and\n <tt>remove</tt>), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of <tt>HashSet</tt>, due to the added expense of maintaining the\n linked list, with one exception: Iteration over a <tt>LinkedHashSet</tt>\n requires time proportional to the <i>size</i> of the set, regardless of\n its capacity.  Iteration over a <tt>HashSet</tt> is likely to be more\n expensive, requiring time proportional to its <i>capacity</i>.\n\n <p>A linked hash set has two parameters that affect its performance:\n <i>initial capacity</i> and <i>load factor</i>.  They are defined precisely\n as for <tt>HashSet</tt>.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for <tt>HashSet</tt>, as iteration times for this class are unaffected\n by capacity.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a linked hash set concurrently, and at least\n one of the threads modifies the set, it <em>must</em> be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the set.\n\n If no such object exists, the set should be \"wrapped\" using the\n {@link Collections#synchronizedSet Collections.synchronizedSet}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set: <pre>\n   Set s = Collections.synchronizedSet(new LinkedHashSet(...));</pre>\n\n <p>The iterators returned by this class's <tt>iterator</tt> method are\n <em>fail-fast</em>: if the set is modified at any time after the iterator\n is created, in any way except through the iterator's own <tt>remove</tt>\n method, the iterator will throw a {@link ConcurrentModificationException}.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.4",
            "see": [
                "java.lang.Object",
                "java.util.Collection",
                "java.util.Set",
                "java.util.HashSet",
                "java.util.TreeSet",
                "java.util.Hashtable"
            ],
            "constructors": [
                {
                    "name": "LinkedHashSet",
                    "comment_text": "Constructs a new, empty linked hash set with the specified initial\n capacity and load factor.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the linked hash set",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor of the linked hash set",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashSet",
                    "comment_text": "Constructs a new, empty linked hash set with the specified initial\n capacity and the default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the LinkedHashSet",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashSet",
                    "comment_text": "Constructs a new, empty linked hash set with the default initial\n capacity (16) and load factor (0.75).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashSet",
                    "comment_text": "Constructs a new linked hash set with the same elements as the\n specified collection.  The linked hash set is created with an initial\n capacity sufficient to hold the elements in the specified collection\n and the default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed into\n           this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.LinkedHashMap",
            "interfaces": [
                "java.util.Map"
            ],
            "superclass": "java.util.HashMap",
            "comment_text": "<p>Hash table and linked list implementation of the <tt>Map</tt> interface,\n with predictable iteration order.  This implementation differs from\n <tt>HashMap</tt> in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is normally the order in which keys were inserted into the map\n (<i>insertion-order</i>).  Note that insertion order is not affected\n if a key is <i>re-inserted</i> into the map.  (A key <tt>k</tt> is\n reinserted into a map <tt>m</tt> if <tt>m.put(k, v)</tt> is invoked when\n <tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to\n the invocation.)\n\n <p>This implementation spares its clients from the unspecified, generally\n chaotic ordering provided by {@link HashMap} (and {@link Hashtable}),\n without incurring the increased cost associated with {@link TreeMap}.  It\n can be used to produce a copy of a map that has the same order as the\n original, regardless of the original map's implementation:\n <pre>\n     void foo(Map m) {\n         Map copy = new LinkedHashMap(m);\n         ...\n     }\n </pre>\n This technique is particularly useful if a module takes a map on input,\n copies it, and later returns results whose order is determined by that of\n the copy.  (Clients generally appreciate having things returned in the same\n order they were presented.)\n\n <p>A special {@link #LinkedHashMap(int,float,boolean) constructor} is\n provided to create a linked hash map whose order of iteration is the order\n in which its entries were last accessed, from least-recently accessed to\n most-recently (<i>access-order</i>).  This kind of map is well-suited to\n building LRU caches.  Invoking the <tt>put</tt> or <tt>get</tt> method\n results in an access to the corresponding entry (assuming it exists after\n the invocation completes).  The <tt>putAll</tt> method generates one entry\n access for each mapping in the specified map, in the order that key-value\n mappings are provided by the specified map's entry set iterator.  <i>No\n other methods generate entry accesses.</i> In particular, operations on\n collection-views do <i>not</i> affect the order of iteration of the backing\n map.\n\n <p>The {@link #removeEldestEntry(Map.Entry)} method may be overridden to\n impose a policy for removing stale mappings automatically when new mappings\n are added to the map.\n\n <p>This class provides all of the optional <tt>Map</tt> operations, and\n permits null elements.  Like <tt>HashMap</tt>, it provides constant-time\n performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and\n <tt>remove</tt>), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of <tt>HashMap</tt>, due to the added expense of maintaining the\n linked list, with one exception: Iteration over the collection-views\n of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i>\n of the map, regardless of its capacity.  Iteration over a <tt>HashMap</tt>\n is likely to be more expensive, requiring time proportional to its\n <i>capacity</i>.\n\n <p>A linked hash map has two parameters that affect its performance:\n <i>initial capacity</i> and <i>load factor</i>.  They are defined precisely\n as for <tt>HashMap</tt>.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for <tt>HashMap</tt>, as iteration times for this class are unaffected\n by capacity.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a linked hash map concurrently, and at least\n one of the threads modifies the map structurally, it <em>must</em> be\n synchronized externally.  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n {@link Collections#synchronizedMap Collections.synchronizedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map:<pre>\n   Map m = Collections.synchronizedMap(new LinkedHashMap(...));</pre>\n\n A structural modification is any operation that adds or deletes one or more\n mappings or, in the case of access-ordered linked hash maps, affects\n iteration order.  In insertion-ordered linked hash maps, merely changing\n the value associated with a key that is already contained in the map is not\n a structural modification.  <strong>In access-ordered linked hash maps,\n merely querying the map with <tt>get</tt> is a structural\n modification.</strong>)\n\n <p>The iterators returned by the <tt>iterator</tt> method of the collections\n returned by all of this class's collection view methods are\n <em>fail-fast</em>: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n <tt>remove</tt> method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.4",
            "see": [
                "java.lang.Object",
                "java.util.Collection",
                "java.util.Map",
                "java.util.HashMap",
                "java.util.TreeMap",
                "java.util.Hashtable"
            ],
            "constructors": [
                {
                    "name": "LinkedHashMap",
                    "comment_text": "Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance\n with the specified initial capacity and load factor.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashMap",
                    "comment_text": "Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance\n with the specified initial capacity and a default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashMap",
                    "comment_text": "Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance\n with the default initial capacity (16) and load factor (0.75).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashMap",
                    "comment_text": "Constructs an insertion-ordered <tt>LinkedHashMap</tt> instance with\n the same mappings as the specified map.  The <tt>LinkedHashMap</tt>\n instance is created with a default load factor (0.75) and an initial\n capacity sufficient to hold the mappings in the specified map.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map whose mappings are to be placed in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedHashMap",
                    "comment_text": "Constructs an empty <tt>LinkedHashMap</tt> instance with the\n specified initial capacity, load factor and ordering mode.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor",
                            "type": "float"
                        },
                        {
                            "name": "accessOrder",
                            "comment_text": "the ordering mode - <tt>true</tt> for\n         access-order, <tt>false</tt> for insertion-order",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.\n The map will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeEldestEntry",
                    "comment_text": "Returns <tt>true</tt> if this map should remove its eldest entry.\n This method is invoked by <tt>put</tt> and <tt>putAll</tt> after\n inserting a new entry into the map.  It provides the implementor\n with the opportunity to remove the eldest entry each time a new one\n is added.  This is useful if the map represents a cache: it allows\n the map to reduce memory consumption by deleting stale entries.\n\n <p>Sample use: this override will allow the map to grow up to 100\n entries and then delete the eldest entry each time a new entry is\n added, maintaining a steady state of 100 entries.\n <pre>\n     private static final int MAX_ENTRIES = 100;\n\n     protected boolean removeEldestEntry(Map.Entry eldest) {\n        return size() > MAX_ENTRIES;\n     }\n </pre>\n\n <p>This method typically does not modify the map in any way,\n instead allowing the map to modify itself as directed by its\n return value.  It <i>is</i> permitted for this method to modify\n the map directly, but if it does so, it <i>must</i> return\n <tt>false</tt> (indicating that the map should not attempt any\n further modification).  The effects of returning <tt>true</tt>\n after modifying the map from within this method are unspecified.\n\n <p>This implementation merely returns <tt>false</tt> (so that this\n map acts like a normal map - the eldest element is never removed).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "eldest",
                            "comment_text": "The least recently inserted entry in the map, or if\n           this is an access-ordered map, the least recently accessed\n           entry.  This is the entry that will be removed it this\n           method returns <tt>true</tt>.  If the map was empty prior\n           to the <tt>put</tt> or <tt>putAll</tt> invocation resulting\n           in this invocation, this will be the entry that was just\n           inserted; in other words, if the map contains a single\n           entry, the eldest entry is also the newest.",
                            "type": "java.util.Map.Entry"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Iterator",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "An iterator over a collection.  {@code Iterator} takes the place of\n {@link Enumeration} in the Java Collections Framework.  Iterators\n differ from enumerations in two ways:\n\n <ul>\n      <li> Iterators allow the caller to remove elements from the\n           underlying collection during the iteration with well-defined\n           semantics.\n      <li> Method names have been improved.\n </ul>\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.ListIterator",
                "java.lang.Iterable"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "hasNext",
                    "comment_text": "Returns {@code true} if the iteration has more elements.\n (In other words, returns {@code true} if {@link #next} would\n return an element rather than throwing an exception.)",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "Returns the next element in the iteration.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes from the underlying collection the last element returned\n by this iterator (optional operation).  This method can be called\n only once per call to {@link #next}.  The behavior of an iterator\n is unspecified if the underlying collection is modified while the\n iteration is in progress in any way other than by calling this\n method.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.InvalidPropertiesFormatException",
            "interfaces": [

            ],
            "superclass": "java.io.IOException",
            "comment_text": "Thrown to indicate that an operation could not complete because\n the input did not conform to the appropriate XML document type\n for a collection of properties, as per the {@link Properties}\n specification.<p>\n\n Note, that although InvalidPropertiesFormatException inherits Serializable\n interface from Exception, it is not intended to be Serializable. Appropriate\n serialization methods are implemented to throw NotSerializableException.",
            "since": "1.5",
            "see": [
                "java.util.Properties"
            ],
            "constructors": [
                {
                    "name": "InvalidPropertiesFormatException",
                    "comment_text": "Constructs an InvalidPropertiesFormatException with the specified\n cause.",
                    "parameters": [
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InvalidPropertiesFormatException",
                    "comment_text": "Constructs an InvalidPropertiesFormatException with the specified\n detail message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message. The detail message is saved for\n          later retrieval by the {@link Throwable#getMessage()} method.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.InputMismatchException",
            "interfaces": [

            ],
            "superclass": "java.util.NoSuchElementException",
            "comment_text": "Thrown by a <code>Scanner</code> to indicate that the token\n retrieved does not match the pattern for the expected type, or\n that the token is out of range for the expected type.",
            "since": "1.5",
            "see": [
                "java.util.Scanner"
            ],
            "constructors": [
                {
                    "name": "InputMismatchException",
                    "comment_text": "Constructs an <code>InputMismatchException</code> with <tt>null</tt>\n as its error message string.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InputMismatchException",
                    "comment_text": "Constructs an <code>InputMismatchException</code>, saving a reference\n to the error message string <tt>s</tt> for later retrieval by the\n <tt>getMessage</tt> method.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.IllformedLocaleException",
            "interfaces": [

            ],
            "superclass": "java.lang.RuntimeException",
            "comment_text": "Thrown by methods in {@link Locale} and {@link Locale.Builder} to\n indicate that an argument is not a well-formed BCP 47 tag.",
            "since": "1.7",
            "see": [
                "java.util.Locale"
            ],
            "constructors": [
                {
                    "name": "IllformedLocaleException",
                    "comment_text": "Constructs a new <code>IllformedLocaleException</code> with no\n detail message and -1 as the error index.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "IllformedLocaleException",
                    "comment_text": "Constructs a new <code>IllformedLocaleException</code> with the\n given message and -1 as the error index.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "IllformedLocaleException",
                    "comment_text": "Constructs a new <code>IllformedLocaleException</code> with the\n given message and the error index.  The error index is the approximate\n offset from the start of the ill-formed value to the point where the\n parse first detected an error.  A negative error index value indicates\n either the error index is not applicable or unknown.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the message",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "errorIndex",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getErrorIndex",
                    "comment_text": "Returns the index where the error was found. A negative value indicates\n either the error index is not applicable or unknown.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.IllegalFormatWidthException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when the format width is a negative value other\n than <tt>-1</tt> or is otherwise unsupported.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "IllegalFormatWidthException",
                    "comment_text": "Constructs an instance of this class with the specified width.",
                    "parameters": [
                        {
                            "name": "w",
                            "comment_text": "The width",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getWidth",
                    "comment_text": "Returns the width",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.IllegalFormatPrecisionException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when the precision is a negative value other than\n <tt>-1</tt>, the conversion does not support a precision, or the value is\n otherwise unsupported.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "IllegalFormatPrecisionException",
                    "comment_text": "Constructs an instance of this class with the specified precision.",
                    "parameters": [
                        {
                            "name": "p",
                            "comment_text": "The precision",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getPrecision",
                    "comment_text": "Returns the precision",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.IllegalFormatFlagsException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when an illegal combination flags is given.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "IllegalFormatFlagsException",
                    "comment_text": "Constructs an instance of this class with the specified flags.",
                    "parameters": [
                        {
                            "name": "f",
                            "comment_text": "The set of format flags which contain an illegal combination",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFlags",
                    "comment_text": "Returns the set of flags which contains an illegal combination.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.IllegalFormatException",
            "interfaces": [

            ],
            "superclass": "java.lang.IllegalArgumentException",
            "comment_text": "Unchecked exception thrown when a format string contains an illegal syntax\n or a format specifier that is incompatible with the given arguments.  Only\n explicit subtypes of this exception which correspond to specific errors\n should be instantiated.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.IllegalFormatConversionException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when the argument corresponding to the format\n specifier is of an incompatible type.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "IllegalFormatConversionException",
                    "comment_text": "Constructs an instance of this class with the mismatched conversion and\n the corresponding argument class.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "Inapplicable conversion",
                            "type": "char"
                        },
                        {
                            "name": "arg",
                            "comment_text": "Class of the mismatched argument",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getConversion",
                    "comment_text": "Returns the inapplicable conversion.",
                    "return_type": "char",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getArgumentClass",
                    "comment_text": "Returns the class of the mismatched argument.",
                    "return_type": "java.lang.Class",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.IllegalFormatCodePointException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when a character with an invalid Unicode code\n point as defined by {@link Character#isValidCodePoint} is passed to the\n {@link Formatter}.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "IllegalFormatCodePointException",
                    "comment_text": "Constructs an instance of this class with the specified illegal code\n point as defined by {@link Character#isValidCodePoint}.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "The illegal Unicode code point",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getCodePoint",
                    "comment_text": "Returns the illegal code point as defined by {@link\n Character#isValidCodePoint}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.IdentityHashMap",
            "interfaces": [
                "java.util.Map",
                "java.io.Serializable",
                "java.lang.Cloneable"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "This class implements the <tt>Map</tt> interface with a hash table, using\n reference-equality in place of object-equality when comparing keys (and\n values).  In other words, in an <tt>IdentityHashMap</tt>, two keys\n <tt>k1</tt> and <tt>k2</tt> are considered equal if and only if\n <tt>(k1==k2)</tt>.  (In normal <tt>Map</tt> implementations (like\n <tt>HashMap</tt>) two keys <tt>k1</tt> and <tt>k2</tt> are considered equal\n if and only if <tt>(k1==null ? k2==null : k1.equals(k2))</tt>.)\n\n <p><b>This class is <i>not</i> a general-purpose <tt>Map</tt>\n implementation!  While this class implements the <tt>Map</tt> interface, it\n intentionally violates <tt>Map's</tt> general contract, which mandates the\n use of the <tt>equals</tt> method when comparing objects.  This class is\n designed for use only in the rare cases wherein reference-equality\n semantics are required.</b>\n\n <p>A typical use of this class is <i>topology-preserving object graph\n transformations</i>, such as serialization or deep-copying.  To perform such\n a transformation, a program must maintain a \"node table\" that keeps track\n of all the object references that have already been processed.  The node\n table must not equate distinct objects even if they happen to be equal.\n Another typical use of this class is to maintain <i>proxy objects</i>.  For\n example, a debugging facility might wish to maintain a proxy object for\n each object in the program being debugged.\n\n <p>This class provides all of the optional map operations, and permits\n <tt>null</tt> values and the <tt>null</tt> key.  This class makes no\n guarantees as to the order of the map; in particular, it does not guarantee\n that the order will remain constant over time.\n\n <p>This class provides constant-time performance for the basic\n operations (<tt>get</tt> and <tt>put</tt>), assuming the system\n identity hash function ({@link System#identityHashCode(Object)})\n disperses elements properly among the buckets.\n\n <p>This class has one tuning parameter (which affects performance but not\n semantics): <i>expected maximum size</i>.  This parameter is the maximum\n number of key-value mappings that the map is expected to hold.  Internally,\n this parameter is used to determine the number of buckets initially\n comprising the hash table.  The precise relationship between the expected\n maximum size and the number of buckets is unspecified.\n\n <p>If the size of the map (the number of key-value mappings) sufficiently\n exceeds the expected maximum size, the number of buckets is increased\n Increasing the number of buckets (\"rehashing\") may be fairly expensive, so\n it pays to create identity hash maps with a sufficiently large expected\n maximum size.  On the other hand, iteration over collection views requires\n time proportional to the number of buckets in the hash table, so it\n pays not to set the expected maximum size too high if you are especially\n concerned with iteration performance or memory usage.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access an identity hash map concurrently, and at\n least one of the threads modifies the map structurally, it <i>must</i>\n be synchronized externally.  (A structural modification is any operation\n that adds or deletes one or more mappings; merely changing the value\n associated with a key that an instance already contains is not a\n structural modification.)  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n {@link Collections#synchronizedMap Collections.synchronizedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map:<pre>\n   Map m = Collections.synchronizedMap(new IdentityHashMap(...));</pre>\n\n <p>The iterators returned by the <tt>iterator</tt> method of the\n collections returned by all of this class's \"collection view\n methods\" are <i>fail-fast</i>: if the map is structurally modified\n at any time after the iterator is created, in any way except\n through the iterator's own <tt>remove</tt> method, the iterator\n will throw a {@link ConcurrentModificationException}.  Thus, in the\n face of concurrent modification, the iterator fails quickly and\n cleanly, rather than risking arbitrary, non-deterministic behavior\n at an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: <i>fail-fast iterators should be used only\n to detect bugs.</i>\n\n <p>Implementation note: This is a simple <i>linear-probe</i> hash table,\n as described for example in texts by Sedgewick and Knuth.  The array\n alternates holding keys and values.  (This has better locality for large\n tables than does using separate arrays.)  For many JRE implementations\n and operation mixes, this class will yield better performance than\n {@link HashMap} (which uses <i>chaining</i> rather than linear-probing).\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.4",
            "see": [
                "java.lang.System",
                "java.lang.Object",
                "java.util.Collection",
                "java.util.Map",
                "java.util.HashMap",
                "java.util.TreeMap"
            ],
            "constructors": [
                {
                    "name": "IdentityHashMap",
                    "comment_text": "Constructs a new, empty identity hash map with a default expected\n maximum size (21).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "IdentityHashMap",
                    "comment_text": "Constructs a new, empty map with the specified expected maximum size.\n Putting more than the expected number of key-value mappings into\n the map may cause the internal data structure to grow, which may be\n somewhat time-consuming.",
                    "parameters": [
                        {
                            "name": "expectedMaxSize",
                            "comment_text": "the expected maximum size of the map",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "IdentityHashMap",
                    "comment_text": "Constructs a new identity hash map containing the keys-value mappings\n in the specified map.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map whose mappings are to be placed into this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this identity hash map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this identity hash map contains no key-value\n mappings.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key == k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Tests whether the specified object reference is a key in this identity\n hash map.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "possible key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Tests whether the specified object reference is a value in this identity\n hash map.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this identity\n hash map.  If the map previously contained a mapping for the key, the\n old value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for\n any of the keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for this key from this map if present.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose mapping is to be removed from the map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.\n The map will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this map for equality.  Returns\n <tt>true</tt> if the given object is also a map and the two maps\n represent identical object-reference mappings.  More formally, this\n map is equal to another map <tt>m</tt> if and only if\n <tt>this.entrySet().equals(m.entrySet())</tt>.\n\n <p><b>Owing to the reference-equality-based semantics of this map it is\n possible that the symmetry and transitivity requirements of the\n <tt>Object.equals</tt> contract may be violated if this map is compared\n to a normal map.  However, the <tt>Object.equals</tt> contract is\n guaranteed to hold among <tt>IdentityHashMap</tt> instances.</b>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two\n <tt>IdentityHashMap</tt> instances <tt>m1</tt> and <tt>m2</tt>, as\n required by the general contract of {@link Object#hashCode}.\n\n <p><b>Owing to the reference-equality-based semantics of the\n <tt>Map.Entry</tt> instances in the set returned by this map's\n <tt>entrySet</tt> method, it is possible that the contractual\n requirement of <tt>Object.hashCode</tt> mentioned in the previous\n paragraph will be violated if one of the two objects being compared is\n an <tt>IdentityHashMap</tt> instance and the other is a normal map.</b>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this identity hash map: the keys and values\n themselves are not cloned.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns an identity-based set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa.  If the map is modified while an iteration\n over the set is in progress, the results of the iteration are\n undefined.  The set supports element removal, which removes the\n corresponding mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and\n <tt>clear</tt> methods.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> methods.\n\n <p><b>While the object returned by this method implements the\n <tt>Set</tt> interface, it does <i>not</i> obey <tt>Set's</tt> general\n contract.  Like its backing map, the set returned by this method\n defines element equality as reference-equality rather than\n object-equality.  This affects the behavior of its <tt>contains</tt>,\n <tt>remove</tt>, <tt>containsAll</tt>, <tt>equals</tt>, and\n <tt>hashCode</tt> methods.</b>\n\n <p><b>The <tt>equals</tt> method of the returned set returns <tt>true</tt>\n only if the specified object is a set containing exactly the same\n object references as the returned set.  The symmetry and transitivity\n requirements of the <tt>Object.equals</tt> contract may be violated if\n the set returned by this method is compared to a normal set.  However,\n the <tt>Object.equals</tt> contract is guaranteed to hold among sets\n returned by this method.</b>\n\n <p>The <tt>hashCode</tt> method of the returned set returns the sum of\n the <i>identity hashcodes</i> of the elements in the set, rather than\n the sum of their hashcodes.  This is mandated by the change in the\n semantics of the <tt>equals</tt> method, in order to enforce the\n general contract of the <tt>Object.hashCode</tt> method among sets\n returned by this method.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress,\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> methods.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> methods.\n\n <p><b>While the object returned by this method implements the\n <tt>Collection</tt> interface, it does <i>not</i> obey\n <tt>Collection's</tt> general contract.  Like its backing map,\n the collection returned by this method defines element equality as\n reference-equality rather than object-equality.  This affects the\n behavior of its <tt>contains</tt>, <tt>remove</tt> and\n <tt>containsAll</tt> methods.</b>",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n Each element in the returned set is a reference-equality-based\n <tt>Map.Entry</tt>.  The set is backed by the map, so changes\n to the map are reflected in the set, and vice-versa.  If the\n map is modified while an iteration over the set is in progress,\n the results of the iteration are undefined.  The set supports\n element removal, which removes the corresponding mapping from\n the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt>\n methods.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> methods.\n\n <p>Like the backing map, the <tt>Map.Entry</tt> objects in the set\n returned by this method define key and value equality as\n reference-equality rather than object-equality.  This affects the\n behavior of the <tt>equals</tt> and <tt>hashCode</tt> methods of these\n <tt>Map.Entry</tt> objects.  A reference-equality based <tt>Map.Entry\n e</tt> is equal to an object <tt>o</tt> if and only if <tt>o</tt> is a\n <tt>Map.Entry</tt> and <tt>e.getKey()==o.getKey() &amp;&amp;\n e.getValue()==o.getValue()</tt>.  To accommodate these equals\n semantics, the <tt>hashCode</tt> method returns\n <tt>System.identityHashCode(e.getKey()) ^\n System.identityHashCode(e.getValue())</tt>.\n\n <p><b>Owing to the reference-equality-based semantics of the\n <tt>Map.Entry</tt> instances in the set returned by this method,\n it is possible that the symmetry and transitivity requirements of\n the {@link Object#equals(Object)} contract may be violated if any of\n the entries in the set is compared to a normal map entry, or if\n the set returned by this method is compared to a set of normal map\n entries (such as would be returned by a call to this method on a normal\n map).  However, the <tt>Object.equals</tt> contract is guaranteed to\n hold among identity-based map entries, and among sets of such entries.\n </b>",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Hashtable",
            "interfaces": [
                "java.util.Map",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.Dictionary",
            "comment_text": "This class implements a hash table, which maps keys to values. Any\n non-<code>null</code> object can be used as a key or as a value. <p>\n\n To successfully store and retrieve objects from a hashtable, the\n objects used as keys must implement the <code>hashCode</code>\n method and the <code>equals</code> method. <p>\n\n An instance of <code>Hashtable</code> has two parameters that affect its\n performance: <i>initial capacity</i> and <i>load factor</i>.  The\n <i>capacity</i> is the number of <i>buckets</i> in the hash table, and the\n <i>initial capacity</i> is simply the capacity at the time the hash table\n is created.  Note that the hash table is <i>open</i>: in the case of a \"hash\n collision\", a single bucket stores multiple entries, which must be searched\n sequentially.  The <i>load factor</i> is a measure of how full the hash\n table is allowed to get before its capacity is automatically increased.\n The initial capacity and load factor parameters are merely hints to\n the implementation.  The exact details as to when and whether the rehash\n method is invoked are implementation-dependent.<p>\n\n Generally, the default load factor (.75) offers a good tradeoff between\n time and space costs.  Higher values decrease the space overhead but\n increase the time cost to look up an entry (which is reflected in most\n <tt>Hashtable</tt> operations, including <tt>get</tt> and <tt>put</tt>).<p>\n\n The initial capacity controls a tradeoff between wasted space and the\n need for <code>rehash</code> operations, which are time-consuming.\n No <code>rehash</code> operations will <i>ever</i> occur if the initial\n capacity is greater than the maximum number of entries the\n <tt>Hashtable</tt> will contain divided by its load factor.  However,\n setting the initial capacity too high can waste space.<p>\n\n If many entries are to be made into a <code>Hashtable</code>,\n creating it with a sufficiently large capacity may allow the\n entries to be inserted more efficiently than letting it perform\n automatic rehashing as needed to grow the table. <p>\n\n This example creates a hashtable of numbers. It uses the names of\n the numbers as keys:\n <pre>   {@code\n   Hashtable<String, Integer> numbers\n     = new Hashtable<String, Integer>();\n   numbers.put(\"one\", 1);\n   numbers.put(\"two\", 2);\n   numbers.put(\"three\", 3);}</pre>\n\n <p>To retrieve a number, use the following code:\n <pre>   {@code\n   Integer n = numbers.get(\"two\");\n   if (n != null) {\n     System.out.println(\"two = \" + n);\n   }}</pre>\n\n <p>The iterators returned by the <tt>iterator</tt> method of the collections\n returned by all of this class's \"collection view methods\" are\n <em>fail-fast</em>: if the Hashtable is structurally modified at any time\n after the iterator is created, in any way except through the iterator's own\n <tt>remove</tt> method, the iterator will throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n The Enumerations returned by Hashtable's keys and elements methods are\n <em>not</em> fail-fast.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>As of the Java 2 platform v1.2, this class was retrofitted to\n implement the {@link Map} interface, making it a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n\n Java Collections Framework</a>.  Unlike the new collection\n implementations, {@code Hashtable} is synchronized.  If a\n thread-safe implementation is not needed, it is recommended to use\n {@link HashMap} in place of {@code Hashtable}.  If a thread-safe\n highly-concurrent implementation is desired, then it is recommended\n to use {@link java.util.concurrent.ConcurrentHashMap} in place of\n {@code Hashtable}.",
            "since": "JDK1.0",
            "see": [
                "java.lang.Object",
                "java.lang.Object",
                "java.util.Hashtable",
                "java.util.Collection",
                "java.util.Map",
                "java.util.HashMap",
                "java.util.TreeMap"
            ],
            "constructors": [
                {
                    "name": "Hashtable",
                    "comment_text": "Constructs a new, empty hashtable with the specified initial\n capacity and the specified load factor.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the hashtable.",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor of the hashtable.",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Hashtable",
                    "comment_text": "Constructs a new, empty hashtable with the specified initial capacity\n and default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the hashtable.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Hashtable",
                    "comment_text": "Constructs a new, empty hashtable with a default initial capacity (11)\n and load factor (0.75).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Hashtable",
                    "comment_text": "Constructs a new hashtable with the same mappings as the given\n Map.  The hashtable is created with an initial capacity sufficient to\n hold the mappings in the given Map and a default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "t",
                            "comment_text": "the map whose mappings are to be placed in this map.",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of keys in this hashtable.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Tests if this hashtable maps no keys to values.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keys",
                    "comment_text": "Returns an enumeration of the keys in this hashtable.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "elements",
                    "comment_text": "Returns an enumeration of the values in this hashtable.\n Use the Enumeration methods on the returned object to fetch the elements\n sequentially.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Tests if some key maps into the specified value in this hashtable.\n This operation is more expensive than the {@link #containsKey\n containsKey} method.\n\n <p>Note that this method is identical in functionality to\n {@link #containsValue containsValue}, (which is part of the\n {@link Map} interface in the collections framework).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "a value to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns true if this hashtable maps one or more keys to this value.\n\n <p>Note that this method is identical in functionality to {@link\n #contains contains} (which predates the {@link Map} interface).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this hashtable is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Tests if the specified object is a key in this hashtable.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "possible key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key.equals(k))},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key whose associated value is to be returned",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "rehash",
                    "comment_text": "Increases the capacity of and internally reorganizes this\n hashtable, in order to accommodate and access its entries more\n efficiently.  This method is called automatically when the\n number of keys in the hashtable exceeds this hashtable's capacity\n and load factor.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Maps the specified <code>key</code> to the specified\n <code>value</code> in this hashtable. Neither the key nor the\n value can be <code>null</code>. <p>\n\n The value can be retrieved by calling the <code>get</code> method\n with a key that is equal to the original key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the hashtable key",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the key (and its corresponding value) from this\n hashtable. This method does nothing if the key is not in the hashtable.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key that needs to be removed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this hashtable.\n These mappings will replace any mappings that this hashtable had for any\n of the keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "t",
                            "comment_text": "mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Clears this hashtable so that it contains no keys.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Creates a shallow copy of this hashtable. All the structure of the\n hashtable itself is copied, but the keys and values are not cloned.\n This is a relatively expensive operation.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this <tt>Hashtable</tt> object\n in the form of a set of entries, enclosed in braces and separated\n by the ASCII characters \"<tt>,&nbsp;</tt>\" (comma and space). Each\n entry is rendered as the key, an equals sign <tt>=</tt>, and the\n associated element, where the <tt>toString</tt> method is used to\n convert the key and element to strings.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>\n operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation, or through the\n <tt>setValue</tt> operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and\n <tt>clear</tt> operations.  It does not support the\n <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own <tt>remove</tt> operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified Object with this Map for equality,\n as per the definition in the Map interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this hashtable",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this Map as per the definition in the\n Map interface.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.HashSet",
            "interfaces": [
                "java.util.Set",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractSet",
            "comment_text": "This class implements the <tt>Set</tt> interface, backed by a hash table\n (actually a <tt>HashMap</tt> instance).  It makes no guarantees as to the\n iteration order of the set; in particular, it does not guarantee that the\n order will remain constant over time.  This class permits the <tt>null</tt>\n element.\n\n <p>This class offers constant time performance for the basic operations\n (<tt>add</tt>, <tt>remove</tt>, <tt>contains</tt> and <tt>size</tt>),\n assuming the hash function disperses the elements properly among the\n buckets.  Iterating over this set requires time proportional to the sum of\n the <tt>HashSet</tt> instance's size (the number of elements) plus the\n \"capacity\" of the backing <tt>HashMap</tt> instance (the number of\n buckets).  Thus, it's very important not to set the initial capacity too\n high (or the load factor too low) if iteration performance is important.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a hash set concurrently, and at least one of\n the threads modifies the set, it <i>must</i> be synchronized externally.\n This is typically accomplished by synchronizing on some object that\n naturally encapsulates the set.\n\n If no such object exists, the set should be \"wrapped\" using the\n {@link Collections#synchronizedSet Collections.synchronizedSet}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set:<pre>\n   Set s = Collections.synchronizedSet(new HashSet(...));</pre>\n\n <p>The iterators returned by this class's <tt>iterator</tt> method are\n <i>fail-fast</i>: if the set is modified at any time after the iterator is\n created, in any way except through the iterator's own <tt>remove</tt>\n method, the Iterator throws a {@link ConcurrentModificationException}.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.Set",
                "java.util.TreeSet",
                "java.util.HashMap"
            ],
            "constructors": [
                {
                    "name": "HashSet",
                    "comment_text": "Constructs a new, empty set; the backing <tt>HashMap</tt> instance has\n default initial capacity (16) and load factor (0.75).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "HashSet",
                    "comment_text": "Constructs a new set containing the elements in the specified\n collection.  The <tt>HashMap</tt> is created with default load factor\n (0.75) and an initial capacity sufficient to contain the elements in\n the specified collection.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed into this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "HashSet",
                    "comment_text": "Constructs a new, empty set; the backing <tt>HashMap</tt> instance has\n the specified initial capacity and the specified load factor.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the hash map",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor of the hash map",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "HashSet",
                    "comment_text": "Constructs a new, empty set; the backing <tt>HashMap</tt> instance has\n the specified initial capacity and default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the hash table",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this set.  The elements\n are returned in no particular order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this set (its cardinality).",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this set contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this set is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element <tt>e</tt> to this set if\n this set contains no element <tt>e2</tt> such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be added to this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the specified element from this set if it is present.\n More formally, removes an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,\n if this set contains such an element.  Returns <tt>true</tt> if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be removed from this set, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this set.\n The set will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this <tt>HashSet</tt> instance: the elements\n themselves are not cloned.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.HashMap",
            "interfaces": [
                "java.util.Map",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "Hash table based implementation of the <tt>Map</tt> interface.  This\n implementation provides all of the optional map operations, and permits\n <tt>null</tt> values and the <tt>null</tt> key.  (The <tt>HashMap</tt>\n class is roughly equivalent to <tt>Hashtable</tt>, except that it is\n unsynchronized and permits nulls.)  This class makes no guarantees as to\n the order of the map; in particular, it does not guarantee that the order\n will remain constant over time.\n\n <p>This implementation provides constant-time performance for the basic\n operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function\n disperses the elements properly among the buckets.  Iteration over\n collection views requires time proportional to the \"capacity\" of the\n <tt>HashMap</tt> instance (the number of buckets) plus its size (the number\n of key-value mappings).  Thus, it's very important not to set the initial\n capacity too high (or the load factor too low) if iteration performance is\n important.\n\n <p>An instance of <tt>HashMap</tt> has two parameters that affect its\n performance: <i>initial capacity</i> and <i>load factor</i>.  The\n <i>capacity</i> is the number of buckets in the hash table, and the initial\n capacity is simply the capacity at the time the hash table is created.  The\n <i>load factor</i> is a measure of how full the hash table is allowed to\n get before its capacity is automatically increased.  When the number of\n entries in the hash table exceeds the product of the load factor and the\n current capacity, the hash table is <i>rehashed</i> (that is, internal data\n structures are rebuilt) so that the hash table has approximately twice the\n number of buckets.\n\n <p>As a general rule, the default load factor (.75) offers a good tradeoff\n between time and space costs.  Higher values decrease the space overhead\n but increase the lookup cost (reflected in most of the operations of the\n <tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>).  The\n expected number of entries in the map and its load factor should be taken\n into account when setting its initial capacity, so as to minimize the\n number of rehash operations.  If the initial capacity is greater\n than the maximum number of entries divided by the load factor, no\n rehash operations will ever occur.\n\n <p>If many mappings are to be stored in a <tt>HashMap</tt> instance,\n creating it with a sufficiently large capacity will allow the mappings to\n be stored more efficiently than letting it perform automatic rehashing as\n needed to grow the table.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access a hash map concurrently, and at least one of\n the threads modifies the map structurally, it <i>must</i> be\n synchronized externally.  (A structural modification is any operation\n that adds or deletes one or more mappings; merely changing the value\n associated with a key that an instance already contains is not a\n structural modification.)  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n {@link Collections#synchronizedMap Collections.synchronizedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map:<pre>\n   Map m = Collections.synchronizedMap(new HashMap(...));</pre>\n\n <p>The iterators returned by all of this class's \"collection view methods\"\n are <i>fail-fast</i>: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n <tt>remove</tt> method, the iterator will throw a\n {@link ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the\n future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.lang.Object",
                "java.util.Collection",
                "java.util.Map",
                "java.util.TreeMap",
                "java.util.Hashtable"
            ],
            "constructors": [
                {
                    "name": "HashMap",
                    "comment_text": "Constructs an empty <tt>HashMap</tt> with the specified initial\n capacity and load factor.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "HashMap",
                    "comment_text": "Constructs an empty <tt>HashMap</tt> with the specified initial\n capacity and the default load factor (0.75).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "HashMap",
                    "comment_text": "Constructs an empty <tt>HashMap</tt> with the default initial capacity\n (16) and the default load factor (0.75).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "HashMap",
                    "comment_text": "Constructs a new <tt>HashMap</tt> with the same mappings as the\n specified <tt>Map</tt>.  The <tt>HashMap</tt> is created with\n default load factor (0.75) and an initial capacity sufficient to\n hold the mappings in the specified <tt>Map</tt>.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map whose mappings are to be placed in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this map contains no key-value mappings.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns <tt>true</tt> if this map contains a mapping for the\n specified key.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "The key whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for\n any of the keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for the specified key from this map if present.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose mapping is to be removed from the map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.\n The map will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and\n values themselves are not cloned.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>\n operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own <tt>remove</tt> operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own <tt>remove</tt> operation, or through the\n <tt>setValue</tt> operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and\n <tt>clear</tt> operations.  It does not support the\n <tt>add</tt> or <tt>addAll</tt> operations.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.GregorianCalendar",
            "interfaces": [

            ],
            "superclass": "java.util.Calendar",
            "comment_text": "<code>GregorianCalendar</code> is a concrete subclass of\n <code>Calendar</code> and provides the standard calendar system\n used by most of the world.\n\n <p> <code>GregorianCalendar</code> is a hybrid calendar that\n supports both the Julian and Gregorian calendar systems with the\n support of a single discontinuity, which corresponds by default to\n the Gregorian date when the Gregorian calendar was instituted\n (October 15, 1582 in some countries, later in others).  The cutover\n date may be changed by the caller by calling {@link\n #setGregorianChange(Date) setGregorianChange()}.\n\n <p>\n Historically, in those countries which adopted the Gregorian calendar first,\n October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models\n this correctly.  Before the Gregorian cutover, <code>GregorianCalendar</code>\n implements the Julian calendar.  The only difference between the Gregorian\n and the Julian calendar is the leap year rule. The Julian calendar specifies\n leap years every four years, whereas the Gregorian calendar omits century\n years which are not divisible by 400.\n\n <p>\n <code>GregorianCalendar</code> implements <em>proleptic</em> Gregorian and\n Julian calendars. That is, dates are computed by extrapolating the current\n rules indefinitely far backward and forward in time. As a result,\n <code>GregorianCalendar</code> may be used for all years to generate\n meaningful and consistent results. However, dates obtained using\n <code>GregorianCalendar</code> are historically accurate only from March 1, 4\n AD onward, when modern Julian calendar rules were adopted.  Before this date,\n leap year rules were applied irregularly, and before 45 BC the Julian\n calendar did not even exist.\n\n <p>\n Prior to the institution of the Gregorian calendar, New Year's Day was\n March 25. To avoid confusion, this calendar always uses January 1. A manual\n adjustment may be made if desired for dates that are prior to the Gregorian\n changeover and which fall between January 1 and March 24.\n\n <h4><a name=\"week_and_year\">Week Of Year and Week Year</a></h4>\n\n <p>Values calculated for the {@link Calendar#WEEK_OF_YEAR\n WEEK_OF_YEAR} field range from 1 to 53. The first week of a\n calendar year is the earliest seven day period starting on {@link\n Calendar#getFirstDayOfWeek() getFirstDayOfWeek()} that contains at\n least {@link Calendar#getMinimalDaysInFirstWeek()\n getMinimalDaysInFirstWeek()} days from that year. It thus depends\n on the values of {@code getMinimalDaysInFirstWeek()}, {@code\n getFirstDayOfWeek()}, and the day of the week of January 1. Weeks\n between week 1 of one year and week 1 of the following year\n (exclusive) are numbered sequentially from 2 to 52 or 53 (except\n for year(s) involved in the Julian-Gregorian transition).\n\n <p>The {@code getFirstDayOfWeek()} and {@code\n getMinimalDaysInFirstWeek()} values are initialized using\n locale-dependent resources when constructing a {@code\n GregorianCalendar}. <a name=\"iso8601_compatible_setting\">The week\n determination is compatible</a> with the ISO 8601 standard when {@code\n getFirstDayOfWeek()} is {@code MONDAY} and {@code\n getMinimalDaysInFirstWeek()} is 4, which values are used in locales\n where the standard is preferred. These values can explicitly be set by\n calling {@link Calendar#setFirstDayOfWeek(int) setFirstDayOfWeek()} and\n {@link Calendar#setMinimalDaysInFirstWeek(int)\n setMinimalDaysInFirstWeek()}.\n\n <p>A <a name=\"week_year\"><em>week year</em></a> is in sync with a\n {@code WEEK_OF_YEAR} cycle. All weeks between the first and last\n weeks (inclusive) have the same <em>week year</em> value.\n Therefore, the first and last days of a week year may have\n different calendar year values.\n\n <p>For example, January 1, 1998 is a Thursday. If {@code\n getFirstDayOfWeek()} is {@code MONDAY} and {@code\n getMinimalDaysInFirstWeek()} is 4 (ISO 8601 standard compatible\n setting), then week 1 of 1998 starts on December 29, 1997, and ends\n on January 4, 1998. The week year is 1998 for the last three days\n of calendar year 1997. If, however, {@code getFirstDayOfWeek()} is\n {@code SUNDAY}, then week 1 of 1998 starts on January 4, 1998, and\n ends on January 10, 1998; the first three days of 1998 then are\n part of week 53 of 1997 and their week year is 1997.\n\n <h4>Week Of Month</h4>\n\n <p>Values calculated for the <code>WEEK_OF_MONTH</code> field range from 0\n to 6.  Week 1 of a month (the days with <code>WEEK_OF_MONTH =\n 1</code>) is the earliest set of at least\n <code>getMinimalDaysInFirstWeek()</code> contiguous days in that month,\n ending on the day before <code>getFirstDayOfWeek()</code>.  Unlike\n week 1 of a year, week 1 of a month may be shorter than 7 days, need\n not start on <code>getFirstDayOfWeek()</code>, and will not include days of\n the previous month.  Days of a month before week 1 have a\n <code>WEEK_OF_MONTH</code> of 0.\n\n <p>For example, if <code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>\n and <code>getMinimalDaysInFirstWeek()</code> is 4, then the first week of\n January 1998 is Sunday, January 4 through Saturday, January 10.  These days\n have a <code>WEEK_OF_MONTH</code> of 1.  Thursday, January 1 through\n Saturday, January 3 have a <code>WEEK_OF_MONTH</code> of 0.  If\n <code>getMinimalDaysInFirstWeek()</code> is changed to 3, then January 1\n through January 3 have a <code>WEEK_OF_MONTH</code> of 1.\n\n <h4>Default Fields Values</h4>\n\n <p>The <code>clear</code> method sets calendar field(s)\n undefined. <code>GregorianCalendar</code> uses the following\n default value for each calendar field if its value is undefined.\n\n <table cellpadding=\"0\" cellspacing=\"3\" border=\"0\"\n        summary=\"GregorianCalendar default field values\"\n        style=\"text-align: left; width: 66%;\">\n   <tbody>\n     <tr>\n       <th style=\"vertical-align: top; background-color: rgb(204, 204, 255);\n           text-align: center;\">Field<br>\n       </th>\n       <th style=\"vertical-align: top; background-color: rgb(204, 204, 255);\n           text-align: center;\">Default Value<br>\n       </th>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: middle;\">\n              <code>ERA<br></code>\n       </td>\n       <td style=\"vertical-align: middle;\">\n              <code>AD<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">\n              <code>YEAR<br></code>\n       </td>\n       <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">\n              <code>1970<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: middle;\">\n              <code>MONTH<br></code>\n       </td>\n       <td style=\"vertical-align: middle;\">\n              <code>JANUARY<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">\n              <code>DAY_OF_MONTH<br></code>\n       </td>\n       <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">\n              <code>1<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: middle;\">\n              <code>DAY_OF_WEEK<br></code>\n       </td>\n       <td style=\"vertical-align: middle;\">\n              <code>the first day of week<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">\n              <code>WEEK_OF_MONTH<br></code>\n       </td>\n       <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">\n              <code>0<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: top;\">\n              <code>DAY_OF_WEEK_IN_MONTH<br></code>\n       </td>\n       <td style=\"vertical-align: top;\">\n              <code>1<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">\n              <code>AM_PM<br></code>\n       </td>\n       <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">\n              <code>AM<br></code>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"vertical-align: middle;\">\n              <code>HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND<br></code>\n       </td>\n       <td style=\"vertical-align: middle;\">\n              <code>0<br></code>\n       </td>\n     </tr>\n   </tbody>\n </table>\n <br>Default values are not applicable for the fields not listed above.\n\n <p>\n <strong>Example:</strong>\n <blockquote>\n <pre>\n // get the supported ids for GMT-08:00 (Pacific Standard Time)\n String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);\n // if no ids were returned, something is wrong. get out.\n if (ids.length == 0)\n     System.exit(0);\n\n  // begin output\n System.out.println(\"Current Time\");\n\n // create a Pacific Standard Time time zone\n SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);\n\n // set up rules for Daylight Saving Time\n pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);\n\n // create a GregorianCalendar with the Pacific Daylight time zone\n // and the current date and time\n Calendar calendar = new GregorianCalendar(pdt);\n Date trialTime = new Date();\n calendar.setTime(trialTime);\n\n // print out a bunch of interesting things\n System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));\n System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));\n System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));\n System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));\n System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));\n System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));\n System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));\n System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));\n System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));\n System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"\n                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));\n System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));\n System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));\n System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));\n System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));\n System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));\n System.out.println(\"ZONE_OFFSET: \"\n                    + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));\n System.out.println(\"DST_OFFSET: \"\n                    + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));\n\n System.out.println(\"Current Time, with hour reset to 3\");\n calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override\n calendar.set(Calendar.HOUR, 3);\n System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));\n System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));\n System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));\n System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));\n System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));\n System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));\n System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));\n System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));\n System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));\n System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"\n                    + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));\n System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));\n System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));\n System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));\n System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));\n System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));\n System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));\n System.out.println(\"ZONE_OFFSET: \"\n        + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours\n System.out.println(\"DST_OFFSET: \"\n        + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours\n </pre>\n </blockquote>",
            "since": "JDK1.1",
            "see": [
                "java.util.TimeZone"
            ],
            "constructors": [
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a default <code>GregorianCalendar</code> using the current time\n in the default time zone with the default locale.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a <code>GregorianCalendar</code> based on the current time\n in the given time zone with the default locale.",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "the given time zone.",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a <code>GregorianCalendar</code> based on the current time\n in the default time zone with the given locale.",
                    "parameters": [
                        {
                            "name": "aLocale",
                            "comment_text": "the given locale.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a <code>GregorianCalendar</code> based on the current time\n in the given time zone with the given locale.",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "the given time zone.",
                            "type": "java.util.TimeZone"
                        },
                        {
                            "name": "aLocale",
                            "comment_text": "the given locale.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a <code>GregorianCalendar</code> with the given date set\n in the default time zone with the default locale.",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the value used to set the <code>YEAR</code> calendar field in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the value used to set the <code>MONTH</code> calendar field in the calendar.\n Month value is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "dayOfMonth",
                            "comment_text": "the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a <code>GregorianCalendar</code> with the given date\n and time set for the default time zone with the default locale.",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the value used to set the <code>YEAR</code> calendar field in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the value used to set the <code>MONTH</code> calendar field in the calendar.\n Month value is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "dayOfMonth",
                            "comment_text": "the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "hourOfDay",
                            "comment_text": "the value used to set the <code>HOUR_OF_DAY</code> calendar field\n in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "minute",
                            "comment_text": "the value used to set the <code>MINUTE</code> calendar field\n in the calendar.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "GregorianCalendar",
                    "comment_text": "Constructs a GregorianCalendar with the given date\n and time set for the default time zone with the default locale.",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the value used to set the <code>YEAR</code> calendar field in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the value used to set the <code>MONTH</code> calendar field in the calendar.\n Month value is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "dayOfMonth",
                            "comment_text": "the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "hourOfDay",
                            "comment_text": "the value used to set the <code>HOUR_OF_DAY</code> calendar field\n in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "minute",
                            "comment_text": "the value used to set the <code>MINUTE</code> calendar field\n in the calendar.",
                            "type": "int"
                        },
                        {
                            "name": "second",
                            "comment_text": "the value used to set the <code>SECOND</code> calendar field\n in the calendar.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "BC",
                    "comment_text": "Value of the <code>ERA</code> field indicating\n the period before the common era (before Christ), also known as BCE.\n The sequence of years at the transition from <code>BC</code> to <code>AD</code> is\n ..., 2 BC, 1 BC, 1 AD, 2 AD,...",
                    "type": "int"
                },
                {
                    "name": "AD",
                    "comment_text": "Value of the <code>ERA</code> field indicating\n the common era (Anno Domini), also known as CE.\n The sequence of years at the transition from <code>BC</code> to <code>AD</code> is\n ..., 2 BC, 1 BC, 1 AD, 2 AD,...",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "setGregorianChange",
                    "comment_text": "Sets the <code>GregorianCalendar</code> change date. This is the point when the switch\n from Julian dates to Gregorian dates occurred. Default is October 15,\n 1582 (Gregorian). Previous to this, dates will be in the Julian calendar.\n <p>\n To obtain a pure Julian calendar, set the change date to\n <code>Date(Long.MAX_VALUE)</code>.  To obtain a pure Gregorian calendar,\n set the change date to <code>Date(Long.MIN_VALUE)</code>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the given Gregorian cutover date.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getGregorianChange",
                    "comment_text": "Gets the Gregorian Calendar change date.  This is the point when the\n switch from Julian dates to Gregorian dates occurred. Default is\n October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian\n calendar.",
                    "return_type": "java.util.Date",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLeapYear",
                    "comment_text": "Determines if the given year is a leap year. Returns <code>true</code> if\n the given year is a leap year. To specify BC year numbers,\n <code>1 - year number</code> must be given. For example, year BC 4 is\n specified as -3.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the given year.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares this <code>GregorianCalendar</code> to the specified\n <code>Object</code>. The result is <code>true</code> if and\n only if the argument is a <code>GregorianCalendar</code> object\n that represents the same time value (millisecond offset from\n the <a href=\"Calendar.html#Epoch\">Epoch</a>) under the same\n <code>Calendar</code> parameters and Gregorian change date as\n this object.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object to compare with.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Generates the hash code for this <code>GregorianCalendar</code> object.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds the specified (signed) amount of time to the given calendar field,\n based on the calendar's rules.\n\n <p><em>Add rule 1</em>. The value of <code>field</code>\n after the call minus the value of <code>field</code> before the\n call is <code>amount</code>, modulo any overflow that has occurred in\n <code>field</code>. Overflow occurs when a field value exceeds its\n range and, as a result, the next larger field is incremented or\n decremented and the field value is adjusted back into its range.</p>\n\n <p><em>Add rule 2</em>. If a smaller field is expected to be\n invariant, but it is impossible for it to be equal to its\n prior value because of changes in its minimum or maximum after\n <code>field</code> is changed, then its value is adjusted to be as close\n as possible to its expected value. A smaller field represents a\n smaller unit of time. <code>HOUR</code> is a smaller field than\n <code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields\n that are not expected to be invariant. The calendar system\n determines what fields are expected to be invariant.</p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "amount",
                            "comment_text": "the amount of date or time to be added to the field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "roll",
                    "comment_text": "Adds or subtracts (up/down) a single unit of time on the given time\n field without changing larger fields.\n <p>\n <em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to December 31, 1999. Calling {@link #roll(int,boolean) roll(Calendar.MONTH, true)}\n sets the calendar to January 31, 1999.  The <code>YEAR</code> field is unchanged\n because it is a larger field than <code>MONTH</code>.</p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "up",
                            "comment_text": "indicates if the value of the specified calendar field is to be\n rolled up or rolled down. Use <code>true</code> if rolling up, <code>false</code> otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "roll",
                    "comment_text": "Adds a signed amount to the specified calendar field without changing larger fields.\n A negative roll amount means to subtract from field without changing\n larger fields. If the specified amount is 0, this method performs nothing.\n\n <p>This method calls {@link #complete()} before adding the\n amount so that all the calendar fields are normalized. If there\n is any calendar field having an out-of-range value in non-lenient mode, then an\n <code>IllegalArgumentException</code> is thrown.\n\n <p>\n <em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to August 31, 1999. Calling <code>roll(Calendar.MONTH,\n 8)</code> sets the calendar to April 30, <strong>1999</strong>. Using a\n <code>GregorianCalendar</code>, the <code>DAY_OF_MONTH</code> field cannot\n be 31 in the month April. <code>DAY_OF_MONTH</code> is set to the closest possible\n value, 30. The <code>YEAR</code> field maintains the value of 1999 because it\n is a larger field than <code>MONTH</code>.\n <p>\n <em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to Sunday June 6, 1999. Calling\n <code>roll(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to\n Tuesday June 1, 1999, whereas calling\n <code>add(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to\n Sunday May 30, 1999. This is because the roll rule imposes an\n additional constraint: The <code>MONTH</code> must not change when the\n <code>WEEK_OF_MONTH</code> is rolled. Taken together with add rule 1,\n the resultant date must be between Tuesday June 1 and Saturday June\n 5. According to add rule 2, the <code>DAY_OF_WEEK</code>, an invariant\n when changing the <code>WEEK_OF_MONTH</code>, is set to Tuesday, the\n closest possible value to Sunday (where Sunday is the first day of the\n week).</p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "amount",
                            "comment_text": "the signed amount to add to <code>field</code>.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMinimum",
                    "comment_text": "Returns the minimum value for the given calendar field of this\n <code>GregorianCalendar</code> instance. The minimum value is\n defined as the smallest value returned by the {@link\n Calendar#get(int) get} method for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMaximum",
                    "comment_text": "Returns the maximum value for the given calendar field of this\n <code>GregorianCalendar</code> instance. The maximum value is\n defined as the largest value returned by the {@link\n Calendar#get(int) get} method for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getGreatestMinimum",
                    "comment_text": "Returns the highest minimum value for the given calendar field\n of this <code>GregorianCalendar</code> instance. The highest\n minimum value is defined as the largest value returned by\n {@link #getActualMinimum(int)} for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLeastMaximum",
                    "comment_text": "Returns the lowest maximum value for the given calendar field\n of this <code>GregorianCalendar</code> instance. The lowest\n maximum value is defined as the smallest value returned by\n {@link #getActualMaximum(int)} for any possible time value,\n taking into consideration the current values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActualMinimum",
                    "comment_text": "Returns the minimum value that this calendar field could have,\n taking into consideration the given time value and the current\n values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.\n\n <p>For example, if the Gregorian change date is January 10,\n 1970 and the date of this <code>GregorianCalendar</code> is\n January 20, 1970, the actual minimum value of the\n <code>DAY_OF_MONTH</code> field is 10 because the previous date\n of January 10, 1970 is December 27, 1996 (in the Julian\n calendar). Therefore, December 28, 1969 to January 9, 1970\n don't exist.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActualMaximum",
                    "comment_text": "Returns the maximum value that this calendar field could have,\n taking into consideration the given time value and the current\n values of the\n {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n {@link #getGregorianChange() getGregorianChange} and\n {@link Calendar#getTimeZone() getTimeZone} methods.\n For example, if the date of this instance is February 1, 2004,\n the actual maximum value of the <code>DAY_OF_MONTH</code> field\n is 29 because 2004 is a leap year, and if the date of this\n instance is February 1, 2005, it's 28.\n\n <p>This method calculates the maximum value of {@link\n Calendar#WEEK_OF_YEAR WEEK_OF_YEAR} based on the {@link\n Calendar#YEAR YEAR} (calendar year) value, not the <a\n href=\"#week_year\">week year</a>. Call {@link\n #getWeeksInWeekYear()} to get the maximum value of {@code\n WEEK_OF_YEAR} in the week year of this {@code GregorianCalendar}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTimeZone",
                    "comment_text": "",
                    "return_type": "java.util.TimeZone",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setTimeZone",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isWeekDateSupported",
                    "comment_text": "Returns {@code true} indicating this {@code GregorianCalendar}\n supports week dates.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWeekYear",
                    "comment_text": "Returns the <a href=\"#week_year\">week year</a> represented by this\n {@code GregorianCalendar}. The dates in the weeks between 1 and the\n maximum week number of the week year have the same week year value\n that may be one year before or after the {@link Calendar#YEAR YEAR}\n (calendar year) value.\n\n <p>This method calls {@link Calendar#complete()} before\n calculating the week year.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setWeekDate",
                    "comment_text": "Sets this {@code GregorianCalendar} to the date given by the\n date specifiers - <a href=\"#week_year\">{@code weekYear}</a>,\n {@code weekOfYear}, and {@code dayOfWeek}. {@code weekOfYear}\n follows the <a href=\"#week_and_year\">{@code WEEK_OF_YEAR}\n numbering</a>.  The {@code dayOfWeek} value must be one of the\n {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} values: {@link\n Calendar#SUNDAY SUNDAY} to {@link Calendar#SATURDAY SATURDAY}.\n\n <p>Note that the numeric day-of-week representation differs from\n the ISO 8601 standard, and that the {@code weekOfYear}\n numbering is compatible with the standard when {@code\n getFirstDayOfWeek()} is {@code MONDAY} and {@code\n getMinimalDaysInFirstWeek()} is 4.\n\n <p>Unlike the {@code set} method, all of the calendar fields\n and the instant of time value are calculated upon return.\n\n <p>If {@code weekOfYear} is out of the valid week-of-year\n range in {@code weekYear}, the {@code weekYear}\n and {@code weekOfYear} values are adjusted in lenient\n mode, or an {@code IllegalArgumentException} is thrown in\n non-lenient mode.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "weekYear",
                            "comment_text": "the week year",
                            "type": "int"
                        },
                        {
                            "name": "weekOfYear",
                            "comment_text": "the week number based on {@code weekYear}",
                            "type": "int"
                        },
                        {
                            "name": "dayOfWeek",
                            "comment_text": "the day of week value: one of the constants\n                    for the {@link #DAY_OF_WEEK DAY_OF_WEEK} field:\n                    {@link Calendar#SUNDAY SUNDAY}, ...,\n                    {@link Calendar#SATURDAY SATURDAY}.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWeeksInWeekYear",
                    "comment_text": "Returns the number of weeks in the <a href=\"#week_year\">week year</a>\n represented by this {@code GregorianCalendar}.\n\n <p>For example, if this {@code GregorianCalendar}'s date is\n December 31, 2008 with <a href=\"#iso8601_compatible_setting\">the ISO\n 8601 compatible setting</a>, this method will return 53 for the\n period: December 29, 2008 to January 3, 2010 while {@link\n #getActualMaximum(int) getActualMaximum(WEEK_OF_YEAR)} will return\n 52 for the period: December 31, 2007 to December 28, 2008.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "computeFields",
                    "comment_text": "Converts the time value (millisecond offset from the <a\n href=\"Calendar.html#Epoch\">Epoch</a>) to calendar field values.\n The time is <em>not</em>\n recomputed first; to recompute the time, then the fields, call the\n <code>complete</code> method.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "computeTime",
                    "comment_text": "Converts calendar field values to the time value (millisecond\n offset from the <a href=\"Calendar.html#Epoch\">Epoch</a>).",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.FormatterClosedException",
            "interfaces": [

            ],
            "superclass": "java.lang.IllegalStateException",
            "comment_text": "Unchecked exception thrown when the formatter has been closed.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "FormatterClosedException",
                    "comment_text": "Constructs an instance of this class.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.Formatter",
            "interfaces": [
                "java.io.Closeable",
                "java.io.Flushable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An interpreter for printf-style format strings.  This class provides support\n for layout justification and alignment, common formats for numeric, string,\n and date/time data, and locale-specific output.  Common Java types such as\n {@code byte}, {@link java.math.BigDecimal BigDecimal}, and {@link Calendar}\n are supported.  Limited formatting customization for arbitrary user types is\n provided through the {@link Formattable} interface.\n\n <p> Formatters are not necessarily safe for multithreaded access.  Thread\n safety is optional and is the responsibility of users of methods in this\n class.\n\n <p> Formatted printing for the Java language is heavily inspired by C's\n {@code printf}.  Although the format strings are similar to C, some\n customizations have been made to accommodate the Java language and exploit\n some of its features.  Also, Java formatting is more strict than C's; for\n example, if a conversion is incompatible with a flag, an exception will be\n thrown.  In C inapplicable flags are silently ignored.  The format strings\n are thus intended to be recognizable to C programmers but not necessarily\n completely compatible with those in C.\n\n <p> Examples of expected usage:\n\n <blockquote><pre>\n   StringBuilder sb = new StringBuilder();\n   // Send all output to the Appendable object sb\n   Formatter formatter = new Formatter(sb, Locale.US);\n\n   // Explicit argument indices may be used to re-order output.\n   formatter.format(\"%4$2s %3$2s %2$2s %1$2s\", \"a\", \"b\", \"c\", \"d\")\n   // -&gt; \" d  c  b  a\"\n\n   // Optional locale as the first argument can be used to get\n   // locale-specific formatting of numbers.  The precision and width can be\n   // given to round and align the value.\n   formatter.format(Locale.FRANCE, \"e = %+10.4f\", Math.E);\n   // -&gt; \"e =    +2,7183\"\n\n   // The '(' numeric flag may be used to format negative numbers with\n   // parentheses rather than a minus sign.  Group separators are\n   // automatically inserted.\n   formatter.format(\"Amount gained or lost since last statement: $ %(,.2f\",\n                    balanceDelta);\n   // -&gt; \"Amount gained or lost since last statement: $ (6,217.58)\"\n </pre></blockquote>\n\n <p> Convenience methods for common formatting requests exist as illustrated\n by the following invocations:\n\n <blockquote><pre>\n   // Writes a formatted string to System.out.\n   System.out.format(\"Local time: %tT\", Calendar.getInstance());\n   // -&gt; \"Local time: 13:34:18\"\n\n   // Writes formatted output to System.err.\n   System.err.printf(\"Unable to open file '%1$s': %2$s\",\n                     fileName, exception.getMessage());\n   // -&gt; \"Unable to open file 'food': No such file or directory\"\n </pre></blockquote>\n\n <p> Like C's {@code sprintf(3)}, Strings may be formatted using the static\n method {@link String#format(String,Object...) String.format}:\n\n <blockquote><pre>\n   // Format a string containing a date.\n   import java.util.Calendar;\n   import java.util.GregorianCalendar;\n   import static java.util.Calendar.*;\n\n   Calendar c = new GregorianCalendar(1995, MAY, 23);\n   String s = String.format(\"Duke's Birthday: %1$tm %1$te,%1$tY\", c);\n   // -&gt; s == \"Duke's Birthday: May 23, 1995\"\n </pre></blockquote>\n\n <h3><a name=\"org\">Organization</a></h3>\n\n <p> This specification is divided into two sections.  The first section, <a\n href=\"#summary\">Summary</a>, covers the basic formatting concepts.  This\n section is intended for users who want to get started quickly and are\n familiar with formatted printing in other programming languages.  The second\n section, <a href=\"#detail\">Details</a>, covers the specific implementation\n details.  It is intended for users who want more precise specification of\n formatting behavior.\n\n <h3><a name=\"summary\">Summary</a></h3>\n\n <p> This section is intended to provide a brief overview of formatting\n concepts.  For precise behavioral details, refer to the <a\n href=\"#detail\">Details</a> section.\n\n <h4><a name=\"syntax\">Format String Syntax</a></h4>\n\n <p> Every method which produces formatted output requires a <i>format\n string</i> and an <i>argument list</i>.  The format string is a {@link\n String} which may contain fixed text and one or more embedded <i>format\n specifiers</i>.  Consider the following example:\n\n <blockquote><pre>\n   Calendar c = ...;\n   String s = String.format(\"Duke's Birthday: %1$tm %1$te,%1$tY\", c);\n </pre></blockquote>\n\n This format string is the first argument to the {@code format} method.  It\n contains three format specifiers \"{@code %1$tm}\", \"{@code %1$te}\", and\n \"{@code %1$tY}\" which indicate how the arguments should be processed and\n where they should be inserted in the text.  The remaining portions of the\n format string are fixed text including {@code \"Dukes Birthday: \"} and any\n other spaces or punctuation.\n\n The argument list consists of all arguments passed to the method after the\n format string.  In the above example, the argument list is of size one and\n consists of the {@link java.util.Calendar Calendar} object {@code c}.\n\n <ul>\n\n <li> The format specifiers for general, character, and numeric types have\n the following syntax:\n\n <blockquote><pre>\n   %[argument_index$][flags][width][.precision]conversion\n </pre></blockquote>\n\n <p> The optional <i>argument_index</i> is a decimal integer indicating the\n position of the argument in the argument list.  The first argument is\n referenced by \"{@code 1$}\", the second by \"{@code 2$}\", etc.\n\n <p> The optional <i>flags</i> is a set of characters that modify the output\n format.  The set of valid flags depends on the conversion.\n\n <p> The optional <i>width</i> is a non-negative decimal integer indicating\n the minimum number of characters to be written to the output.\n\n <p> The optional <i>precision</i> is a non-negative decimal integer usually\n used to restrict the number of characters.  The specific behavior depends on\n the conversion.\n\n <p> The required <i>conversion</i> is a character indicating how the\n argument should be formatted.  The set of valid conversions for a given\n argument depends on the argument's data type.\n\n <li> The format specifiers for types which are used to represents dates and\n times have the following syntax:\n\n <blockquote><pre>\n   %[argument_index$][flags][width]conversion\n </pre></blockquote>\n\n <p> The optional <i>argument_index</i>, <i>flags</i> and <i>width</i> are\n defined as above.\n\n <p> The required <i>conversion</i> is a two character sequence.  The first\n character is {@code 't'} or {@code 'T'}.  The second character indicates\n the format to be used.  These characters are similar to but not completely\n identical to those defined by GNU {@code date} and POSIX\n {@code strftime(3c)}.\n\n <li> The format specifiers which do not correspond to arguments have the\n following syntax:\n\n <blockquote><pre>\n   %[flags][width]conversion\n </pre></blockquote>\n\n <p> The optional <i>flags</i> and <i>width</i> is defined as above.\n\n <p> The required <i>conversion</i> is a character indicating content to be\n inserted in the output.\n\n </ul>\n\n <h4> Conversions </h4>\n\n <p> Conversions are divided into the following categories:\n\n <ol>\n\n <li> <b>General</b> - may be applied to any argument\n type\n\n <li> <b>Character</b> - may be applied to basic types which represent\n Unicode characters: {@code char}, {@link Character}, {@code byte}, {@link\n Byte}, {@code short}, and {@link Short}. This conversion may also be\n applied to the types {@code int} and {@link Integer} when {@link\n Character#isValidCodePoint} returns {@code true}\n\n <li> <b>Numeric</b>\n\n <ol>\n\n <li> <b>Integral</b> - may be applied to Java integral types: {@code byte},\n {@link Byte}, {@code short}, {@link Short}, {@code int} and {@link\n Integer}, {@code long}, {@link Long}, and {@link java.math.BigInteger\n BigInteger}\n\n <li><b>Floating Point</b> - may be applied to Java floating-point types:\n {@code float}, {@link Float}, {@code double}, {@link Double}, and {@link\n java.math.BigDecimal BigDecimal}\n\n </ol>\n\n <li> <b>Date/Time</b> - may be applied to Java types which are capable of\n encoding a date or time: {@code long}, {@link Long}, {@link Calendar}, and\n {@link Date}.\n\n <li> <b>Percent</b> - produces a literal {@code '%'}\n (<tt>'&#92;u0025'</tt>)\n\n <li> <b>Line Separator</b> - produces the platform-specific line separator\n\n </ol>\n\n <p> The following table summarizes the supported conversions.  Conversions\n denoted by an upper-case character (i.e. {@code 'B'}, {@code 'H'},\n {@code 'S'}, {@code 'C'}, {@code 'X'}, {@code 'E'}, {@code 'G'},\n {@code 'A'}, and {@code 'T'}) are the same as those for the corresponding\n lower-case conversion characters except that the result is converted to\n upper case according to the rules of the prevailing {@link java.util.Locale\n Locale}.  The result is equivalent to the following invocation of {@link\n String#toUpperCase()}\n\n <pre>\n    out.toUpperCase() </pre>\n\n <table cellpadding=5 summary=\"genConv\">\n\n <tr><th valign=\"bottom\"> Conversion\n     <th valign=\"bottom\"> Argument Category\n     <th valign=\"bottom\"> Description\n\n <tr><td valign=\"top\"> {@code 'b'}, {@code 'B'}\n     <td valign=\"top\"> general\n     <td> If the argument <i>arg</i> is {@code null}, then the result is\n     \"{@code false}\".  If <i>arg</i> is a {@code boolean} or {@link\n     Boolean}, then the result is the string returned by {@link\n     String#valueOf(boolean) String.valueOf(arg)}.  Otherwise, the result is\n     \"true\".\n\n <tr><td valign=\"top\"> {@code 'h'}, {@code 'H'}\n     <td valign=\"top\"> general\n     <td> If the argument <i>arg</i> is {@code null}, then the result is\n     \"{@code null}\".  Otherwise, the result is obtained by invoking\n     {@code Integer.toHexString(arg.hashCode())}.\n\n <tr><td valign=\"top\"> {@code 's'}, {@code 'S'}\n     <td valign=\"top\"> general\n     <td> If the argument <i>arg</i> is {@code null}, then the result is\n     \"{@code null}\".  If <i>arg</i> implements {@link Formattable}, then\n     {@link Formattable#formatTo arg.formatTo} is invoked. Otherwise, the\n     result is obtained by invoking {@code arg.toString()}.\n\n <tr><td valign=\"top\">{@code 'c'}, {@code 'C'}\n     <td valign=\"top\"> character\n     <td> The result is a Unicode character\n\n <tr><td valign=\"top\">{@code 'd'}\n     <td valign=\"top\"> integral\n     <td> The result is formatted as a decimal integer\n\n <tr><td valign=\"top\">{@code 'o'}\n     <td valign=\"top\"> integral\n     <td> The result is formatted as an octal integer\n\n <tr><td valign=\"top\">{@code 'x'}, {@code 'X'}\n     <td valign=\"top\"> integral\n     <td> The result is formatted as a hexadecimal integer\n\n <tr><td valign=\"top\">{@code 'e'}, {@code 'E'}\n     <td valign=\"top\"> floating point\n     <td> The result is formatted as a decimal number in computerized\n     scientific notation\n\n <tr><td valign=\"top\">{@code 'f'}\n     <td valign=\"top\"> floating point\n     <td> The result is formatted as a decimal number\n\n <tr><td valign=\"top\">{@code 'g'}, {@code 'G'}\n     <td valign=\"top\"> floating point\n     <td> The result is formatted using computerized scientific notation or\n     decimal format, depending on the precision and the value after rounding.\n\n <tr><td valign=\"top\">{@code 'a'}, {@code 'A'}\n     <td valign=\"top\"> floating point\n     <td> The result is formatted as a hexadecimal floating-point number with\n     a significand and an exponent\n\n <tr><td valign=\"top\">{@code 't'}, {@code 'T'}\n     <td valign=\"top\"> date/time\n     <td> Prefix for date and time conversion characters.  See <a\n     href=\"#dt\">Date/Time Conversions</a>.\n\n <tr><td valign=\"top\">{@code '%'}\n     <td valign=\"top\"> percent\n     <td> The result is a literal {@code '%'} (<tt>'&#92;u0025'</tt>)\n\n <tr><td valign=\"top\">{@code 'n'}\n     <td valign=\"top\"> line separator\n     <td> The result is the platform-specific line separator\n\n </table>\n\n <p> Any characters not explicitly defined as conversions are illegal and are\n reserved for future extensions.\n\n <h4><a name=\"dt\">Date/Time Conversions</a></h4>\n\n <p> The following date and time conversion suffix characters are defined for\n the {@code 't'} and {@code 'T'} conversions.  The types are similar to but\n not completely identical to those defined by GNU {@code date} and POSIX\n {@code strftime(3c)}.  Additional conversion types are provided to access\n Java-specific functionality (e.g. {@code 'L'} for milliseconds within the\n second).\n\n <p> The following conversion characters are used for formatting times:\n\n <table cellpadding=5 summary=\"time\">\n\n <tr><td valign=\"top\"> {@code 'H'}\n     <td> Hour of the day for the 24-hour clock, formatted as two digits with\n     a leading zero as necessary i.e. {@code 00 - 23}.\n\n <tr><td valign=\"top\">{@code 'I'}\n     <td> Hour for the 12-hour clock, formatted as two digits with a leading\n     zero as necessary, i.e.  {@code 01 - 12}.\n\n <tr><td valign=\"top\">{@code 'k'}\n     <td> Hour of the day for the 24-hour clock, i.e. {@code 0 - 23}.\n\n <tr><td valign=\"top\">{@code 'l'}\n     <td> Hour for the 12-hour clock, i.e. {@code 1 - 12}.\n\n <tr><td valign=\"top\">{@code 'M'}\n     <td> Minute within the hour formatted as two digits with a leading zero\n     as necessary, i.e.  {@code 00 - 59}.\n\n <tr><td valign=\"top\">{@code 'S'}\n     <td> Seconds within the minute, formatted as two digits with a leading\n     zero as necessary, i.e. {@code 00 - 60} (\"{@code 60}\" is a special\n     value required to support leap seconds).\n\n <tr><td valign=\"top\">{@code 'L'}\n     <td> Millisecond within the second formatted as three digits with\n     leading zeros as necessary, i.e. {@code 000 - 999}.\n\n <tr><td valign=\"top\">{@code 'N'}\n     <td> Nanosecond within the second, formatted as nine digits with leading\n     zeros as necessary, i.e. {@code 000000000 - 999999999}.\n\n <tr><td valign=\"top\">{@code 'p'}\n     <td> Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker\n     in lower case, e.g.\"{@code am}\" or \"{@code pm}\". Use of the conversion\n     prefix {@code 'T'} forces this output to upper case.\n\n <tr><td valign=\"top\">{@code 'z'}\n     <td> <a href=\"http://www.ietf.org/rfc/rfc0822.txt\">RFC&nbsp;822</a>\n     style numeric time zone offset from GMT, e.g. {@code -0800}.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.\n\n <tr><td valign=\"top\">{@code 'Z'}\n     <td> A string representing the abbreviation for the time zone.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the  time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.  The Formatter's locale will\n     supersede the locale of the argument (if any).\n\n <tr><td valign=\"top\">{@code 's'}\n     <td> Seconds since the beginning of the epoch starting at 1 January 1970\n     {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE/1000} to\n     {@code Long.MAX_VALUE/1000}.\n\n <tr><td valign=\"top\">{@code 'Q'}\n     <td> Milliseconds since the beginning of the epoch starting at 1 January\n     1970 {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE} to\n     {@code Long.MAX_VALUE}.\n\n </table>\n\n <p> The following conversion characters are used for formatting dates:\n\n <table cellpadding=5 summary=\"date\">\n\n <tr><td valign=\"top\">{@code 'B'}\n     <td> Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths\n     full month name}, e.g. {@code \"January\"}, {@code \"February\"}.\n\n <tr><td valign=\"top\">{@code 'b'}\n     <td> Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getShortMonths abbreviated month name},\n     e.g. {@code \"Jan\"}, {@code \"Feb\"}.\n\n <tr><td valign=\"top\">{@code 'h'}\n     <td> Same as {@code 'b'}.\n\n <tr><td valign=\"top\">{@code 'A'}\n     <td> Locale-specific full name of the {@linkplain\n     java.text.DateFormatSymbols#getWeekdays day of the week},\n     e.g. {@code \"Sunday\"}, {@code \"Monday\"}\n\n <tr><td valign=\"top\">{@code 'a'}\n     <td> Locale-specific short name of the {@linkplain\n     java.text.DateFormatSymbols#getShortWeekdays day of the week},\n     e.g. {@code \"Sun\"}, {@code \"Mon\"}\n\n <tr><td valign=\"top\">{@code 'C'}\n     <td> Four-digit year divided by {@code 100}, formatted as two digits\n     with leading zero as necessary, i.e. {@code 00 - 99}\n\n <tr><td valign=\"top\">{@code 'Y'}\n     <td> Year, formatted as at least four digits with leading zeros as\n     necessary, e.g. {@code 0092} equals {@code 92} CE for the Gregorian\n     calendar.\n\n <tr><td valign=\"top\">{@code 'y'}\n     <td> Last two digits of the year, formatted with leading zeros as\n     necessary, i.e. {@code 00 - 99}.\n\n <tr><td valign=\"top\">{@code 'j'}\n     <td> Day of year, formatted as three digits with leading zeros as\n     necessary, e.g. {@code 001 - 366} for the Gregorian calendar.\n\n <tr><td valign=\"top\">{@code 'm'}\n     <td> Month, formatted as two digits with leading zeros as necessary,\n     i.e. {@code 01 - 13}.\n\n <tr><td valign=\"top\">{@code 'd'}\n     <td> Day of month, formatted as two digits with leading zeros as\n     necessary, i.e. {@code 01 - 31}\n\n <tr><td valign=\"top\">{@code 'e'}\n     <td> Day of month, formatted as two digits, i.e. {@code 1 - 31}.\n\n </table>\n\n <p> The following conversion characters are used for formatting common\n date/time compositions.\n\n <table cellpadding=5 summary=\"composites\">\n\n <tr><td valign=\"top\">{@code 'R'}\n     <td> Time formatted for the 24-hour clock as {@code \"%tH:%tM\"}\n\n <tr><td valign=\"top\">{@code 'T'}\n     <td> Time formatted for the 24-hour clock as {@code \"%tH:%tM:%tS\"}.\n\n <tr><td valign=\"top\">{@code 'r'}\n     <td> Time formatted for the 12-hour clock as {@code \"%tI:%tM:%tS %Tp\"}.\n     The location of the morning or afternoon marker ({@code '%Tp'}) may be\n     locale-dependent.\n\n <tr><td valign=\"top\">{@code 'D'}\n     <td> Date formatted as {@code \"%tm/%td/%ty\"}.\n\n <tr><td valign=\"top\">{@code 'F'}\n     <td> <a href=\"http://www.w3.org/TR/NOTE-datetime\">ISO&nbsp;8601</a>\n     complete date formatted as {@code \"%tY-%tm-%td\"}.\n\n <tr><td valign=\"top\">{@code 'c'}\n     <td> Date and time formatted as {@code \"%ta %tb %td %tT %tZ %tY\"},\n     e.g. {@code \"Sun Jul 20 16:17:00 EDT 1969\"}.\n\n </table>\n\n <p> Any characters not explicitly defined as date/time conversion suffixes\n are illegal and are reserved for future extensions.\n\n <h4> Flags </h4>\n\n <p> The following table summarizes the supported flags.  <i>y</i> means the\n flag is supported for the indicated argument types.\n\n <table cellpadding=5 summary=\"genConv\">\n\n <tr><th valign=\"bottom\"> Flag <th valign=\"bottom\"> General\n     <th valign=\"bottom\"> Character <th valign=\"bottom\"> Integral\n     <th valign=\"bottom\"> Floating Point\n     <th valign=\"bottom\"> Date/Time\n     <th valign=\"bottom\"> Description\n\n <tr><td> '-' <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> y\n     <td> The result will be left-justified.\n\n <tr><td> '#' <td align=\"center\" valign=\"top\"> y<sup>1</sup>\n     <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> y<sup>3</sup>\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> -\n     <td> The result should use a conversion-dependent alternate form\n\n <tr><td> '+' <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> y<sup>4</sup>\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> -\n     <td> The result will always include a sign\n\n <tr><td> '&nbsp;&nbsp;' <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> y<sup>4</sup>\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> -\n     <td> The result will include a leading space for positive values\n\n <tr><td> '0' <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> y\n     <td align=\"center\" valign=\"top\"> -\n     <td> The result will be zero-padded\n\n <tr><td> ',' <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> y<sup>2</sup>\n     <td align=\"center\" valign=\"top\"> y<sup>5</sup>\n     <td align=\"center\" valign=\"top\"> -\n     <td> The result will include locale-specific {@linkplain\n     java.text.DecimalFormatSymbols#getGroupingSeparator grouping separators}\n\n <tr><td> '(' <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> -\n     <td align=\"center\" valign=\"top\"> y<sup>4</sup>\n     <td align=\"center\" valign=\"top\"> y<sup>5</sup>\n     <td align=\"center\"> -\n     <td> The result will enclose negative numbers in parentheses\n\n </table>\n\n <p> <sup>1</sup> Depends on the definition of {@link Formattable}.\n\n <p> <sup>2</sup> For {@code 'd'} conversion only.\n\n <p> <sup>3</sup> For {@code 'o'}, {@code 'x'}, and {@code 'X'}\n conversions only.\n\n <p> <sup>4</sup> For {@code 'd'}, {@code 'o'}, {@code 'x'}, and\n {@code 'X'} conversions applied to {@link java.math.BigInteger BigInteger}\n or {@code 'd'} applied to {@code byte}, {@link Byte}, {@code short}, {@link\n Short}, {@code int} and {@link Integer}, {@code long}, and {@link Long}.\n\n <p> <sup>5</sup> For {@code 'e'}, {@code 'E'}, {@code 'f'},\n {@code 'g'}, and {@code 'G'} conversions only.\n\n <p> Any characters not explicitly defined as flags are illegal and are\n reserved for future extensions.\n\n <h4> Width </h4>\n\n <p> The width is the minimum number of characters to be written to the\n output.  For the line separator conversion, width is not applicable; if it\n is provided, an exception will be thrown.\n\n <h4> Precision </h4>\n\n <p> For general argument types, the precision is the maximum number of\n characters to be written to the output.\n\n <p> For the floating-point conversions {@code 'e'}, {@code 'E'}, and\n {@code 'f'} the precision is the number of digits after the decimal\n separator.  If the conversion is {@code 'g'} or {@code 'G'}, then the\n precision is the total number of digits in the resulting magnitude after\n rounding.  If the conversion is {@code 'a'} or {@code 'A'}, then the\n precision must not be specified.\n\n <p> For character, integral, and date/time argument types and the percent\n and line separator conversions, the precision is not applicable; if a\n precision is provided, an exception will be thrown.\n\n <h4> Argument Index </h4>\n\n <p> The argument index is a decimal integer indicating the position of the\n argument in the argument list.  The first argument is referenced by\n \"{@code 1$}\", the second by \"{@code 2$}\", etc.\n\n <p> Another way to reference arguments by position is to use the\n {@code '<'} (<tt>'&#92;u003c'</tt>) flag, which causes the argument for\n the previous format specifier to be re-used.  For example, the following two\n statements would produce identical strings:\n\n <blockquote><pre>\n   Calendar c = ...;\n   String s1 = String.format(\"Duke's Birthday: %1$tm %1$te,%1$tY\", c);\n\n   String s2 = String.format(\"Duke's Birthday: %1$tm %&lt;te,%&lt;tY\", c);\n </pre></blockquote>\n\n <hr>\n <h3><a name=\"detail\">Details</a></h3>\n\n <p> This section is intended to provide behavioral details for formatting,\n including conditions and exceptions, supported data types, localization, and\n interactions between flags, conversions, and data types.  For an overview of\n formatting concepts, refer to the <a href=\"#summary\">Summary</a>\n\n <p> Any characters not explicitly defined as conversions, date/time\n conversion suffixes, or flags are illegal and are reserved for\n future extensions.  Use of such a character in a format string will\n cause an {@link UnknownFormatConversionException} or {@link\n UnknownFormatFlagsException} to be thrown.\n\n <p> If the format specifier contains a width or precision with an invalid\n value or which is otherwise unsupported, then a {@link\n IllegalFormatWidthException} or {@link IllegalFormatPrecisionException}\n respectively will be thrown.\n\n <p> If a format specifier contains a conversion character that is not\n applicable to the corresponding argument, then an {@link\n IllegalFormatConversionException} will be thrown.\n\n <p> All specified exceptions may be thrown by any of the {@code format}\n methods of {@code Formatter} as well as by any {@code format} convenience\n methods such as {@link String#format(String,Object...) String.format} and\n {@link java.io.PrintStream#printf(String,Object...) PrintStream.printf}.\n\n <p> Conversions denoted by an upper-case character (i.e. {@code 'B'},\n {@code 'H'}, {@code 'S'}, {@code 'C'}, {@code 'X'}, {@code 'E'},\n {@code 'G'}, {@code 'A'}, and {@code 'T'}) are the same as those for the\n corresponding lower-case conversion characters except that the result is\n converted to upper case according to the rules of the prevailing {@link\n java.util.Locale Locale}.  The result is equivalent to the following\n invocation of {@link String#toUpperCase()}\n\n <pre>\n    out.toUpperCase() </pre>\n\n <h4><a name=\"dgen\">General</a></h4>\n\n <p> The following general conversions may be applied to any argument type:\n\n <table cellpadding=5 summary=\"dgConv\">\n\n <tr><td valign=\"top\"> {@code 'b'}\n     <td valign=\"top\"> <tt>'&#92;u0062'</tt>\n     <td> Produces either \"{@code true}\" or \"{@code false}\" as returned by\n     {@link Boolean#toString(boolean)}.\n\n     <p> If the argument is {@code null}, then the result is\n     \"{@code false}\".  If the argument is a {@code boolean} or {@link\n     Boolean}, then the result is the string returned by {@link\n     String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is\n     \"{@code true}\".\n\n     <p> If the {@code '#'} flag is given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'B'}\n     <td valign=\"top\"> <tt>'&#92;u0042'</tt>\n     <td> The upper-case variant of {@code 'b'}.\n\n <tr><td valign=\"top\"> {@code 'h'}\n     <td valign=\"top\"> <tt>'&#92;u0068'</tt>\n     <td> Produces a string representing the hash code value of the object.\n\n     <p> If the argument, <i>arg</i> is {@code null}, then the\n     result is \"{@code null}\".  Otherwise, the result is obtained\n     by invoking {@code Integer.toHexString(arg.hashCode())}.\n\n     <p> If the {@code '#'} flag is given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'H'}\n     <td valign=\"top\"> <tt>'&#92;u0048'</tt>\n     <td> The upper-case variant of {@code 'h'}.\n\n <tr><td valign=\"top\"> {@code 's'}\n     <td valign=\"top\"> <tt>'&#92;u0073'</tt>\n     <td> Produces a string.\n\n     <p> If the argument is {@code null}, then the result is\n     \"{@code null}\".  If the argument implements {@link Formattable}, then\n     its {@link Formattable#formatTo formatTo} method is invoked.\n     Otherwise, the result is obtained by invoking the argument's\n     {@code toString()} method.\n\n     <p> If the {@code '#'} flag is given and the argument is not a {@link\n     Formattable} , then a {@link FormatFlagsConversionMismatchException}\n     will be thrown.\n\n <tr><td valign=\"top\"> {@code 'S'}\n     <td valign=\"top\"> <tt>'&#92;u0053'</tt>\n     <td> The upper-case variant of {@code 's'}.\n\n </table>\n\n <p> The following <a name=\"dFlags\">flags</a> apply to general conversions:\n\n <table cellpadding=5 summary=\"dFlags\">\n\n <tr><td valign=\"top\"> {@code '-'}\n     <td valign=\"top\"> <tt>'&#92;u002d'</tt>\n     <td> Left justifies the output.  Spaces (<tt>'&#92;u0020'</tt>) will be\n     added at the end of the converted value as required to fill the minimum\n     width of the field.  If the width is not provided, then a {@link\n     MissingFormatWidthException} will be thrown.  If this flag is not given\n     then the output will be right-justified.\n\n <tr><td valign=\"top\"> {@code '#'}\n     <td valign=\"top\"> <tt>'&#92;u0023'</tt>\n     <td> Requires the output use an alternate form.  The definition of the\n     form is specified by the conversion.\n\n </table>\n\n <p> The <a name=\"genWidth\">width</a> is the minimum number of characters to\n be written to the\n output.  If the length of the converted value is less than the width then\n the output will be padded by <tt>'&nbsp;&nbsp;'</tt> (<tt>'&#92;u0020'</tt>)\n until the total number of characters equals the width.  The padding is on\n the left by default.  If the {@code '-'} flag is given, then the padding\n will be on the right.  If the width is not specified then there is no\n minimum.\n\n <p> The precision is the maximum number of characters to be written to the\n output.  The precision is applied before the width, thus the output will be\n truncated to {@code precision} characters even if the width is greater than\n the precision.  If the precision is not specified then there is no explicit\n limit on the number of characters.\n\n <h4><a name=\"dchar\">Character</a></h4>\n\n This conversion may be applied to {@code char} and {@link Character}.  It\n may also be applied to the types {@code byte}, {@link Byte},\n {@code short}, and {@link Short}, {@code int} and {@link Integer} when\n {@link Character#isValidCodePoint} returns {@code true}.  If it returns\n {@code false} then an {@link IllegalFormatCodePointException} will be\n thrown.\n\n <table cellpadding=5 summary=\"charConv\">\n\n <tr><td valign=\"top\"> {@code 'c'}\n     <td valign=\"top\"> <tt>'&#92;u0063'</tt>\n     <td> Formats the argument as a Unicode character as described in <a\n     href=\"../lang/Character.html#unicode\">Unicode Character\n     Representation</a>.  This may be more than one 16-bit {@code char} in\n     the case where the argument represents a supplementary character.\n\n     <p> If the {@code '#'} flag is given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'C'}\n     <td valign=\"top\"> <tt>'&#92;u0043'</tt>\n     <td> The upper-case variant of {@code 'c'}.\n\n </table>\n\n <p> The {@code '-'} flag defined for <a href=\"#dFlags\">General\n conversions</a> applies.  If the {@code '#'} flag is given, then a {@link\n FormatFlagsConversionMismatchException} will be thrown.\n\n <p> The width is defined as for <a href=\"#genWidth\">General conversions</a>.\n\n <p> The precision is not applicable.  If the precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n <h4><a name=\"dnum\">Numeric</a></h4>\n\n <p> Numeric conversions are divided into the following categories:\n\n <ol>\n\n <li> <a href=\"#dnint\"><b>Byte, Short, Integer, and Long</b></a>\n\n <li> <a href=\"#dnbint\"><b>BigInteger</b></a>\n\n <li> <a href=\"#dndec\"><b>Float and Double</b></a>\n\n <li> <a href=\"#dnbdec\"><b>BigDecimal</b></a>\n\n </ol>\n\n <p> Numeric types will be formatted according to the following algorithm:\n\n <p><b><a name=\"l10n algorithm\"> Number Localization Algorithm</a></b>\n\n <p> After digits are obtained for the integer part, fractional part, and\n exponent (as appropriate for the data type), the following transformation\n is applied:\n\n <ol>\n\n <li> Each digit character <i>d</i> in the string is replaced by a\n locale-specific digit computed relative to the current locale's\n {@linkplain java.text.DecimalFormatSymbols#getZeroDigit() zero digit}\n <i>z</i>; that is <i>d&nbsp;-&nbsp;</i> {@code '0'}\n <i>&nbsp;+&nbsp;z</i>.\n\n <li> If a decimal separator is present, a locale-specific {@linkplain\n java.text.DecimalFormatSymbols#getDecimalSeparator decimal separator} is\n substituted.\n\n <li> If the {@code ','} (<tt>'&#92;u002c'</tt>)\n <a name=\"l10n group\">flag</a> is given, then the locale-specific {@linkplain\n java.text.DecimalFormatSymbols#getGroupingSeparator grouping separator} is\n inserted by scanning the integer part of the string from least significant\n to most significant digits and inserting a separator at intervals defined by\n the locale's {@linkplain java.text.DecimalFormat#getGroupingSize() grouping\n size}.\n\n <li> If the {@code '0'} flag is given, then the locale-specific {@linkplain\n java.text.DecimalFormatSymbols#getZeroDigit() zero digits} are inserted\n after the sign character, if any, and before the first non-zero digit, until\n the length of the string is equal to the requested field width.\n\n <li> If the value is negative and the {@code '('} flag is given, then a\n {@code '('} (<tt>'&#92;u0028'</tt>) is prepended and a {@code ')'}\n (<tt>'&#92;u0029'</tt>) is appended.\n\n <li> If the value is negative (or floating-point negative zero) and\n {@code '('} flag is not given, then a {@code '-'} (<tt>'&#92;u002d'</tt>)\n is prepended.\n\n <li> If the {@code '+'} flag is given and the value is positive or zero (or\n floating-point positive zero), then a {@code '+'} (<tt>'&#92;u002b'</tt>)\n will be prepended.\n\n </ol>\n\n <p> If the value is NaN or positive infinity the literal strings \"NaN\" or\n \"Infinity\" respectively, will be output.  If the value is negative infinity,\n then the output will be \"(Infinity)\" if the {@code '('} flag is given\n otherwise the output will be \"-Infinity\".  These values are not localized.\n\n <p><a name=\"dnint\"><b> Byte, Short, Integer, and Long </b></a>\n\n <p> The following conversions may be applied to {@code byte}, {@link Byte},\n {@code short}, {@link Short}, {@code int} and {@link Integer},\n {@code long}, and {@link Long}.\n\n <table cellpadding=5 summary=\"IntConv\">\n\n <tr><td valign=\"top\"> {@code 'd'}\n     <td valign=\"top\"> <tt>'&#92;u0054'</tt>\n     <td> Formats the argument as a decimal integer. The <a\n     href=\"#l10n algorithm\">localization algorithm</a> is applied.\n\n     <p> If the {@code '0'} flag is given and the value is negative, then\n     the zero padding will occur after the sign.\n\n     <p> If the {@code '#'} flag is given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'o'}\n     <td valign=\"top\"> <tt>'&#92;u006f'</tt>\n     <td> Formats the argument as an integer in base eight.  No localization\n     is applied.\n\n     <p> If <i>x</i> is negative then the result will be an unsigned value\n     generated by adding 2<sup>n</sup> to the value where {@code n} is the\n     number of bits in the type as returned by the static {@code SIZE} field\n     in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},\n     {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}\n     classes as appropriate.\n\n     <p> If the {@code '#'} flag is given then the output will always begin\n     with the radix indicator {@code '0'}.\n\n     <p> If the {@code '0'} flag is given then the output will be padded\n     with leading zeros to the field width following any indication of sign.\n\n     <p> If {@code '('}, {@code '+'}, '&nbsp&nbsp;', or {@code ','} flags\n     are given then a {@link FormatFlagsConversionMismatchException} will be\n     thrown.\n\n <tr><td valign=\"top\"> {@code 'x'}\n     <td valign=\"top\"> <tt>'&#92;u0078'</tt>\n     <td> Formats the argument as an integer in base sixteen. No\n     localization is applied.\n\n     <p> If <i>x</i> is negative then the result will be an unsigned value\n     generated by adding 2<sup>n</sup> to the value where {@code n} is the\n     number of bits in the type as returned by the static {@code SIZE} field\n     in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},\n     {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}\n     classes as appropriate.\n\n     <p> If the {@code '#'} flag is given then the output will always begin\n     with the radix indicator {@code \"0x\"}.\n\n     <p> If the {@code '0'} flag is given then the output will be padded to\n     the field width with leading zeros after the radix indicator or sign (if\n     present).\n\n     <p> If {@code '('}, <tt>'&nbsp;&nbsp;'</tt>, {@code '+'}, or\n     {@code ','} flags are given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'X'}\n     <td valign=\"top\"> <tt>'&#92;u0058'</tt>\n     <td> The upper-case variant of {@code 'x'}.  The entire string\n     representing the number will be converted to {@linkplain\n     String#toUpperCase upper case} including the {@code 'x'} (if any) and\n     all hexadecimal digits {@code 'a'} - {@code 'f'}\n     (<tt>'&#92;u0061'</tt> -  <tt>'&#92;u0066'</tt>).\n\n </table>\n\n <p> If the conversion is {@code 'o'}, {@code 'x'}, or {@code 'X'} and\n both the {@code '#'} and the {@code '0'} flags are given, then result will\n contain the radix indicator ({@code '0'} for octal and {@code \"0x\"} or\n {@code \"0X\"} for hexadecimal), some number of zeros (based on the width),\n and the value.\n\n <p> If the {@code '-'} flag is not given, then the space padding will occur\n before the sign.\n\n <p> The following <a name=\"intFlags\">flags</a> apply to numeric integral\n conversions:\n\n <table cellpadding=5 summary=\"intFlags\">\n\n <tr><td valign=\"top\"> {@code '+'}\n     <td valign=\"top\"> <tt>'&#92;u002b'</tt>\n     <td> Requires the output to include a positive sign for all positive\n     numbers.  If this flag is not given then only negative values will\n     include a sign.\n\n     <p> If both the {@code '+'} and <tt>'&nbsp;&nbsp;'</tt> flags are given\n     then an {@link IllegalFormatFlagsException} will be thrown.\n\n <tr><td valign=\"top\"> <tt>'&nbsp;&nbsp;'</tt>\n     <td valign=\"top\"> <tt>'&#92;u0020'</tt>\n     <td> Requires the output to include a single extra space\n     (<tt>'&#92;u0020'</tt>) for non-negative values.\n\n     <p> If both the {@code '+'} and <tt>'&nbsp;&nbsp;'</tt> flags are given\n     then an {@link IllegalFormatFlagsException} will be thrown.\n\n <tr><td valign=\"top\"> {@code '0'}\n     <td valign=\"top\"> <tt>'&#92;u0030'</tt>\n     <td> Requires the output to be padded with leading {@linkplain\n     java.text.DecimalFormatSymbols#getZeroDigit zeros} to the minimum field\n     width following any sign or radix indicator except when converting NaN\n     or infinity.  If the width is not provided, then a {@link\n     MissingFormatWidthException} will be thrown.\n\n     <p> If both the {@code '-'} and {@code '0'} flags are given then an\n     {@link IllegalFormatFlagsException} will be thrown.\n\n <tr><td valign=\"top\"> {@code ','}\n     <td valign=\"top\"> <tt>'&#92;u002c'</tt>\n     <td> Requires the output to include the locale-specific {@linkplain\n     java.text.DecimalFormatSymbols#getGroupingSeparator group separators} as\n     described in the <a href=\"#l10n group\">\"group\" section</a> of the\n     localization algorithm.\n\n <tr><td valign=\"top\"> {@code '('}\n     <td valign=\"top\"> <tt>'&#92;u0028'</tt>\n     <td> Requires the output to prepend a {@code '('}\n     (<tt>'&#92;u0028'</tt>) and append a {@code ')'}\n     (<tt>'&#92;u0029'</tt>) to negative values.\n\n </table>\n\n <p> If no <a name=\"intdFlags\">flags</a> are given the default formatting is\n as follows:\n\n <ul>\n\n <li> The output is right-justified within the {@code width}\n\n <li> Negative numbers begin with a {@code '-'} (<tt>'&#92;u002d'</tt>)\n\n <li> Positive numbers and zero do not include a sign or extra leading\n space\n\n <li> No grouping separators are included\n\n </ul>\n\n <p> The <a name=\"intWidth\">width</a> is the minimum number of characters to\n be written to the output.  This includes any signs, digits, grouping\n separators, radix indicator, and parentheses.  If the length of the\n converted value is less than the width then the output will be padded by\n spaces (<tt>'&#92;u0020'</tt>) until the total number of characters equals\n width.  The padding is on the left by default.  If {@code '-'} flag is\n given then the padding will be on the right.  If width is not specified then\n there is no minimum.\n\n <p> The precision is not applicable.  If precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n <p><a name=\"dnbint\"><b> BigInteger </b></a>\n\n <p> The following conversions may be applied to {@link\n java.math.BigInteger}.\n\n <table cellpadding=5 summary=\"BIntConv\">\n\n <tr><td valign=\"top\"> {@code 'd'}\n     <td valign=\"top\"> <tt>'&#92;u0054'</tt>\n     <td> Requires the output to be formatted as a decimal integer. The <a\n     href=\"#l10n algorithm\">localization algorithm</a> is applied.\n\n     <p> If the {@code '#'} flag is given {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'o'}\n     <td valign=\"top\"> <tt>'&#92;u006f'</tt>\n     <td> Requires the output to be formatted as an integer in base eight.\n     No localization is applied.\n\n     <p> If <i>x</i> is negative then the result will be a signed value\n     beginning with {@code '-'} (<tt>'&#92;u002d'</tt>).  Signed output is\n     allowed for this type because unlike the primitive types it is not\n     possible to create an unsigned equivalent without assuming an explicit\n     data-type size.\n\n     <p> If <i>x</i> is positive or zero and the {@code '+'} flag is given\n     then the result will begin with {@code '+'} (<tt>'&#92;u002b'</tt>).\n\n     <p> If the {@code '#'} flag is given then the output will always begin\n     with {@code '0'} prefix.\n\n     <p> If the {@code '0'} flag is given then the output will be padded\n     with leading zeros to the field width following any indication of sign.\n\n     <p> If the {@code ','} flag is given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'x'}\n     <td valign=\"top\"> <tt>'&#92;u0078'</tt>\n     <td> Requires the output to be formatted as an integer in base\n     sixteen.  No localization is applied.\n\n     <p> If <i>x</i> is negative then the result will be a signed value\n     beginning with {@code '-'} (<tt>'&#92;u002d'</tt>).  Signed output is\n     allowed for this type because unlike the primitive types it is not\n     possible to create an unsigned equivalent without assuming an explicit\n     data-type size.\n\n     <p> If <i>x</i> is positive or zero and the {@code '+'} flag is given\n     then the result will begin with {@code '+'} (<tt>'&#92;u002b'</tt>).\n\n     <p> If the {@code '#'} flag is given then the output will always begin\n     with the radix indicator {@code \"0x\"}.\n\n     <p> If the {@code '0'} flag is given then the output will be padded to\n     the field width with leading zeros after the radix indicator or sign (if\n     present).\n\n     <p> If the {@code ','} flag is given then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'X'}\n     <td valign=\"top\"> <tt>'&#92;u0058'</tt>\n     <td> The upper-case variant of {@code 'x'}.  The entire string\n     representing the number will be converted to {@linkplain\n     String#toUpperCase upper case} including the {@code 'x'} (if any) and\n     all hexadecimal digits {@code 'a'} - {@code 'f'}\n     (<tt>'&#92;u0061'</tt> - <tt>'&#92;u0066'</tt>).\n\n </table>\n\n <p> If the conversion is {@code 'o'}, {@code 'x'}, or {@code 'X'} and\n both the {@code '#'} and the {@code '0'} flags are given, then result will\n contain the base indicator ({@code '0'} for octal and {@code \"0x\"} or\n {@code \"0X\"} for hexadecimal), some number of zeros (based on the width),\n and the value.\n\n <p> If the {@code '0'} flag is given and the value is negative, then the\n zero padding will occur after the sign.\n\n <p> If the {@code '-'} flag is not given, then the space padding will occur\n before the sign.\n\n <p> All <a href=\"#intFlags\">flags</a> defined for Byte, Short, Integer, and\n Long apply.  The <a href=\"#intdFlags\">default behavior</a> when no flags are\n given is the same as for Byte, Short, Integer, and Long.\n\n <p> The specification of <a href=\"#intWidth\">width</a> is the same as\n defined for Byte, Short, Integer, and Long.\n\n <p> The precision is not applicable.  If precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n <p><a name=\"dndec\"><b> Float and Double</b></a>\n\n <p> The following conversions may be applied to {@code float}, {@link\n Float}, {@code double} and {@link Double}.\n\n <table cellpadding=5 summary=\"floatConv\">\n\n <tr><td valign=\"top\"> {@code 'e'}\n     <td valign=\"top\"> <tt>'&#92;u0065'</tt>\n     <td> Requires the output to be formatted using <a\n     name=\"scientific\">computerized scientific notation</a>.  The <a\n     href=\"#l10n algorithm\">localization algorithm</a> is applied.\n\n     <p> The formatting of the magnitude <i>m</i> depends upon its value.\n\n     <p> If <i>m</i> is NaN or infinite, the literal strings \"NaN\" or\n     \"Infinity\", respectively, will be output.  These values are not\n     localized.\n\n     <p> If <i>m</i> is positive-zero or negative-zero, then the exponent\n     will be {@code \"+00\"}.\n\n     <p> Otherwise, the result is a string that represents the sign and\n     magnitude (absolute value) of the argument.  The formatting of the sign\n     is described in the <a href=\"#l10n algorithm\">localization\n     algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its\n     value.\n\n     <p> Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup>\n     &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the\n     mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so\n     that 1 &lt;= <i>a</i> &lt; 10. The magnitude is then represented as the\n     integer part of <i>a</i>, as a single decimal digit, followed by the\n     decimal separator followed by decimal digits representing the fractional\n     part of <i>a</i>, followed by the exponent symbol {@code 'e'}\n     (<tt>'&#92;u0065'</tt>), followed by the sign of the exponent, followed\n     by a representation of <i>n</i> as a decimal integer, as produced by the\n     method {@link Long#toString(long, int)}, and zero-padded to include at\n     least two digits.\n\n     <p> The number of digits in the result for the fractional part of\n     <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not\n     specified then the default value is {@code 6}. If the precision is less\n     than the number of digits which would appear after the decimal point in\n     the string returned by {@link Float#toString(float)} or {@link\n     Double#toString(double)} respectively, then the value will be rounded\n     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     Float#toString(float)} or {@link Double#toString(double)} as\n     appropriate.\n\n     <p>If the {@code ','} flag is given, then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'E'}\n     <td valign=\"top\"> <tt>'&#92;u0045'</tt>\n     <td> The upper-case variant of {@code 'e'}.  The exponent symbol\n     will be {@code 'E'} (<tt>'&#92;u0045'</tt>).\n\n <tr><td valign=\"top\"> {@code 'g'}\n     <td valign=\"top\"> <tt>'&#92;u0067'</tt>\n     <td> Requires the output to be formatted in general scientific notation\n     as described below. The <a href=\"#l10n algorithm\">localization\n     algorithm</a> is applied.\n\n     <p> After rounding for the precision, the formatting of the resulting\n     magnitude <i>m</i> depends on its value.\n\n     <p> If <i>m</i> is greater than or equal to 10<sup>-4</sup> but less\n     than 10<sup>precision</sup> then it is represented in <i><a\n     href=\"#decimal\">decimal format</a></i>.\n\n     <p> If <i>m</i> is less than 10<sup>-4</sup> or greater than or equal to\n     10<sup>precision</sup>, then it is represented in <i><a\n     href=\"#scientific\">computerized scientific notation</a></i>.\n\n     <p> The total number of significant digits in <i>m</i> is equal to the\n     precision.  If the precision is not specified, then the default value is\n     {@code 6}.  If the precision is {@code 0}, then it is taken to be\n     {@code 1}.\n\n     <p> If the {@code '#'} flag is given then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'G'}\n     <td valign=\"top\"> <tt>'&#92;u0047'</tt>\n     <td> The upper-case variant of {@code 'g'}.\n\n <tr><td valign=\"top\"> {@code 'f'}\n     <td valign=\"top\"> <tt>'&#92;u0066'</tt>\n     <td> Requires the output to be formatted using <a name=\"decimal\">decimal\n     format</a>.  The <a href=\"#l10n algorithm\">localization algorithm</a> is\n     applied.\n\n     <p> The result is a string that represents the sign and magnitude\n     (absolute value) of the argument.  The formatting of the sign is\n     described in the <a href=\"#l10n algorithm\">localization\n     algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its\n     value.\n\n     <p> If <i>m</i> NaN or infinite, the literal strings \"NaN\" or\n     \"Infinity\", respectively, will be output.  These values are not\n     localized.\n\n     <p> The magnitude is formatted as the integer part of <i>m</i>, with no\n     leading zeroes, followed by the decimal separator followed by one or\n     more decimal digits representing the fractional part of <i>m</i>.\n\n     <p> The number of digits in the result for the fractional part of\n     <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not\n     specified then the default value is {@code 6}. If the precision is less\n     than the number of digits which would appear after the decimal point in\n     the string returned by {@link Float#toString(float)} or {@link\n     Double#toString(double)} respectively, then the value will be rounded\n     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     Float#toString(float)} or {@link Double#toString(double)} as\n     appropriate.\n\n <tr><td valign=\"top\"> {@code 'a'}\n     <td valign=\"top\"> <tt>'&#92;u0061'</tt>\n     <td> Requires the output to be formatted in hexadecimal exponential\n     form.  No localization is applied.\n\n     <p> The result is a string that represents the sign and magnitude\n     (absolute value) of the argument <i>x</i>.\n\n     <p> If <i>x</i> is negative or a negative-zero value then the result\n     will begin with {@code '-'} (<tt>'&#92;u002d'</tt>).\n\n     <p> If <i>x</i> is positive or a positive-zero value and the\n     {@code '+'} flag is given then the result will begin with {@code '+'}\n     (<tt>'&#92;u002b'</tt>).\n\n     <p> The formatting of the magnitude <i>m</i> depends upon its value.\n\n     <ul>\n\n     <li> If the value is NaN or infinite, the literal strings \"NaN\" or\n     \"Infinity\", respectively, will be output.\n\n     <li> If <i>m</i> is zero then it is represented by the string\n     {@code \"0x0.0p0\"}.\n\n     <li> If <i>m</i> is a {@code double} value with a normalized\n     representation then substrings are used to represent the significand and\n     exponent fields.  The significand is represented by the characters\n     {@code \"0x1.\"} followed by the hexadecimal representation of the rest\n     of the significand as a fraction.  The exponent is represented by\n     {@code 'p'} (<tt>'&#92;u0070'</tt>) followed by a decimal string of the\n     unbiased exponent as if produced by invoking {@link\n     Integer#toString(int) Integer.toString} on the exponent value.\n\n     <li> If <i>m</i> is a {@code double} value with a subnormal\n     representation then the significand is represented by the characters\n     {@code '0x0.'} followed by the hexadecimal representation of the rest\n     of the significand as a fraction.  The exponent is represented by\n     {@code 'p-1022'}.  Note that there must be at least one nonzero digit\n     in a subnormal significand.\n\n     </ul>\n\n     <p> If the {@code '('} or {@code ','} flags are given, then a {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'A'}\n     <td valign=\"top\"> <tt>'&#92;u0041'</tt>\n     <td> The upper-case variant of {@code 'a'}.  The entire string\n     representing the number will be converted to upper case including the\n     {@code 'x'} (<tt>'&#92;u0078'</tt>) and {@code 'p'}\n     (<tt>'&#92;u0070'</tt> and all hexadecimal digits {@code 'a'} -\n     {@code 'f'} (<tt>'&#92;u0061'</tt> - <tt>'&#92;u0066'</tt>).\n\n </table>\n\n <p> All <a href=\"#intFlags\">flags</a> defined for Byte, Short, Integer, and\n Long apply.\n\n <p> If the {@code '#'} flag is given, then the decimal separator will\n always be present.\n\n <p> If no <a name=\"floatdFlags\">flags</a> are given the default formatting\n is as follows:\n\n <ul>\n\n <li> The output is right-justified within the {@code width}\n\n <li> Negative numbers begin with a {@code '-'}\n\n <li> Positive numbers and positive zero do not include a sign or extra\n leading space\n\n <li> No grouping separators are included\n\n <li> The decimal separator will only appear if a digit follows it\n\n </ul>\n\n <p> The <a name=\"floatDWidth\">width</a> is the minimum number of characters\n to be written to the output.  This includes any signs, digits, grouping\n separators, decimal separators, exponential symbol, radix indicator,\n parentheses, and strings representing infinity and NaN as applicable.  If\n the length of the converted value is less than the width then the output\n will be padded by spaces (<tt>'&#92;u0020'</tt>) until the total number of\n characters equals width.  The padding is on the left by default.  If the\n {@code '-'} flag is given then the padding will be on the right.  If width\n is not specified then there is no minimum.\n\n <p> If the <a name=\"floatDPrec\">conversion</a> is {@code 'e'},\n {@code 'E'} or {@code 'f'}, then the precision is the number of digits\n after the decimal separator.  If the precision is not specified, then it is\n assumed to be {@code 6}.\n\n <p> If the conversion is {@code 'g'} or {@code 'G'}, then the precision is\n the total number of significant digits in the resulting magnitude after\n rounding.  If the precision is not specified, then the default value is\n {@code 6}.  If the precision is {@code 0}, then it is taken to be\n {@code 1}.\n\n <p> If the conversion is {@code 'a'} or {@code 'A'}, then the precision\n is the number of hexadecimal digits after the decimal separator.  If the\n precision is not provided, then all of the digits as returned by {@link\n Double#toHexString(double)} will be output.\n\n <p><a name=\"dnbdec\"><b> BigDecimal </b></a>\n\n <p> The following conversions may be applied {@link java.math.BigDecimal\n BigDecimal}.\n\n <table cellpadding=5 summary=\"floatConv\">\n\n <tr><td valign=\"top\"> {@code 'e'}\n     <td valign=\"top\"> <tt>'&#92;u0065'</tt>\n     <td> Requires the output to be formatted using <a\n     name=\"bscientific\">computerized scientific notation</a>.  The <a\n     href=\"#l10n algorithm\">localization algorithm</a> is applied.\n\n     <p> The formatting of the magnitude <i>m</i> depends upon its value.\n\n     <p> If <i>m</i> is positive-zero or negative-zero, then the exponent\n     will be {@code \"+00\"}.\n\n     <p> Otherwise, the result is a string that represents the sign and\n     magnitude (absolute value) of the argument.  The formatting of the sign\n     is described in the <a href=\"#l10n algorithm\">localization\n     algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its\n     value.\n\n     <p> Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup>\n     &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the\n     mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so\n     that 1 &lt;= <i>a</i> &lt; 10. The magnitude is then represented as the\n     integer part of <i>a</i>, as a single decimal digit, followed by the\n     decimal separator followed by decimal digits representing the fractional\n     part of <i>a</i>, followed by the exponent symbol {@code 'e'}\n     (<tt>'&#92;u0065'</tt>), followed by the sign of the exponent, followed\n     by a representation of <i>n</i> as a decimal integer, as produced by the\n     method {@link Long#toString(long, int)}, and zero-padded to include at\n     least two digits.\n\n     <p> The number of digits in the result for the fractional part of\n     <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not\n     specified then the default value is {@code 6}.  If the precision is\n     less than the number of digits to the right of the decimal point then\n     the value will be rounded using the\n     {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     BigDecimal#toString()}.\n\n     <p> If the {@code ','} flag is given, then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'E'}\n     <td valign=\"top\"> <tt>'&#92;u0045'</tt>\n     <td> The upper-case variant of {@code 'e'}.  The exponent symbol\n     will be {@code 'E'} (<tt>'&#92;u0045'</tt>).\n\n <tr><td valign=\"top\"> {@code 'g'}\n     <td valign=\"top\"> <tt>'&#92;u0067'</tt>\n     <td> Requires the output to be formatted in general scientific notation\n     as described below. The <a href=\"#l10n algorithm\">localization\n     algorithm</a> is applied.\n\n     <p> After rounding for the precision, the formatting of the resulting\n     magnitude <i>m</i> depends on its value.\n\n     <p> If <i>m</i> is greater than or equal to 10<sup>-4</sup> but less\n     than 10<sup>precision</sup> then it is represented in <i><a\n     href=\"#bdecimal\">decimal format</a></i>.\n\n     <p> If <i>m</i> is less than 10<sup>-4</sup> or greater than or equal to\n     10<sup>precision</sup>, then it is represented in <i><a\n     href=\"#bscientific\">computerized scientific notation</a></i>.\n\n     <p> The total number of significant digits in <i>m</i> is equal to the\n     precision.  If the precision is not specified, then the default value is\n     {@code 6}.  If the precision is {@code 0}, then it is taken to be\n     {@code 1}.\n\n     <p> If the {@code '#'} flag is given then an {@link\n     FormatFlagsConversionMismatchException} will be thrown.\n\n <tr><td valign=\"top\"> {@code 'G'}\n     <td valign=\"top\"> <tt>'&#92;u0047'</tt>\n     <td> The upper-case variant of {@code 'g'}.\n\n <tr><td valign=\"top\"> {@code 'f'}\n     <td valign=\"top\"> <tt>'&#92;u0066'</tt>\n     <td> Requires the output to be formatted using <a name=\"bdecimal\">decimal\n     format</a>.  The <a href=\"#l10n algorithm\">localization algorithm</a> is\n     applied.\n\n     <p> The result is a string that represents the sign and magnitude\n     (absolute value) of the argument.  The formatting of the sign is\n     described in the <a href=\"#l10n algorithm\">localization\n     algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its\n     value.\n\n     <p> The magnitude is formatted as the integer part of <i>m</i>, with no\n     leading zeroes, followed by the decimal separator followed by one or\n     more decimal digits representing the fractional part of <i>m</i>.\n\n     <p> The number of digits in the result for the fractional part of\n     <i>m</i> or <i>a</i> is equal to the precision. If the precision is not\n     specified then the default value is {@code 6}.  If the precision is\n     less than the number of digits to the right of the decimal point\n     then the value will be rounded using the\n     {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up\n     algorithm}.  Otherwise, zeros may be appended to reach the precision.\n     For a canonical representation of the value, use {@link\n     BigDecimal#toString()}.\n\n </table>\n\n <p> All <a href=\"#intFlags\">flags</a> defined for Byte, Short, Integer, and\n Long apply.\n\n <p> If the {@code '#'} flag is given, then the decimal separator will\n always be present.\n\n <p> The <a href=\"#floatdFlags\">default behavior</a> when no flags are\n given is the same as for Float and Double.\n\n <p> The specification of <a href=\"#floatDWidth\">width</a> and <a\n href=\"#floatDPrec\">precision</a> is the same as defined for Float and\n Double.\n\n <h4><a name=\"ddt\">Date/Time</a></h4>\n\n <p> This conversion may be applied to {@code long}, {@link Long}, {@link\n Calendar}, and {@link Date}.\n\n <table cellpadding=5 summary=\"DTConv\">\n\n <tr><td valign=\"top\"> {@code 't'}\n     <td valign=\"top\"> <tt>'&#92;u0074'</tt>\n     <td> Prefix for date and time conversion characters.\n <tr><td valign=\"top\"> {@code 'T'}\n     <td valign=\"top\"> <tt>'&#92;u0054'</tt>\n     <td> The upper-case variant of {@code 't'}.\n\n </table>\n\n <p> The following date and time conversion character suffixes are defined\n for the {@code 't'} and {@code 'T'} conversions.  The types are similar to\n but not completely identical to those defined by GNU {@code date} and\n POSIX {@code strftime(3c)}.  Additional conversion types are provided to\n access Java-specific functionality (e.g. {@code 'L'} for milliseconds\n within the second).\n\n <p> The following conversion characters are used for formatting times:\n\n <table cellpadding=5 summary=\"time\">\n\n <tr><td valign=\"top\"> {@code 'H'}\n     <td valign=\"top\"> <tt>'&#92;u0048'</tt>\n     <td> Hour of the day for the 24-hour clock, formatted as two digits with\n     a leading zero as necessary i.e. {@code 00 - 23}. {@code 00}\n     corresponds to midnight.\n\n <tr><td valign=\"top\">{@code 'I'}\n     <td valign=\"top\"> <tt>'&#92;u0049'</tt>\n     <td> Hour for the 12-hour clock, formatted as two digits with a leading\n     zero as necessary, i.e.  {@code 01 - 12}.  {@code 01} corresponds to\n     one o'clock (either morning or afternoon).\n\n <tr><td valign=\"top\">{@code 'k'}\n     <td valign=\"top\"> <tt>'&#92;u006b'</tt>\n     <td> Hour of the day for the 24-hour clock, i.e. {@code 0 - 23}.\n     {@code 0} corresponds to midnight.\n\n <tr><td valign=\"top\">{@code 'l'}\n     <td valign=\"top\"> <tt>'&#92;u006c'</tt>\n     <td> Hour for the 12-hour clock, i.e. {@code 1 - 12}.  {@code 1}\n     corresponds to one o'clock (either morning or afternoon).\n\n <tr><td valign=\"top\">{@code 'M'}\n     <td valign=\"top\"> <tt>'&#92;u004d'</tt>\n     <td> Minute within the hour formatted as two digits with a leading zero\n     as necessary, i.e.  {@code 00 - 59}.\n\n <tr><td valign=\"top\">{@code 'S'}\n     <td valign=\"top\"> <tt>'&#92;u0053'</tt>\n     <td> Seconds within the minute, formatted as two digits with a leading\n     zero as necessary, i.e. {@code 00 - 60} (\"{@code 60}\" is a special\n     value required to support leap seconds).\n\n <tr><td valign=\"top\">{@code 'L'}\n     <td valign=\"top\"> <tt>'&#92;u004c'</tt>\n     <td> Millisecond within the second formatted as three digits with\n     leading zeros as necessary, i.e. {@code 000 - 999}.\n\n <tr><td valign=\"top\">{@code 'N'}\n     <td valign=\"top\"> <tt>'&#92;u004e'</tt>\n     <td> Nanosecond within the second, formatted as nine digits with leading\n     zeros as necessary, i.e. {@code 000000000 - 999999999}.  The precision\n     of this value is limited by the resolution of the underlying operating\n     system or hardware.\n\n <tr><td valign=\"top\">{@code 'p'}\n     <td valign=\"top\"> <tt>'&#92;u0070'</tt>\n     <td> Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker\n     in lower case, e.g.\"{@code am}\" or \"{@code pm}\".  Use of the\n     conversion prefix {@code 'T'} forces this output to upper case.  (Note\n     that {@code 'p'} produces lower-case output.  This is different from\n     GNU {@code date} and POSIX {@code strftime(3c)} which produce\n     upper-case output.)\n\n <tr><td valign=\"top\">{@code 'z'}\n     <td valign=\"top\"> <tt>'&#92;u007a'</tt>\n     <td> <a href=\"http://www.ietf.org/rfc/rfc0822.txt\">RFC&nbsp;822</a>\n     style numeric time zone offset from GMT, e.g. {@code -0800}.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.\n\n <tr><td valign=\"top\">{@code 'Z'}\n     <td valign=\"top\"> <tt>'&#92;u005a'</tt>\n     <td> A string representing the abbreviation for the time zone.  This\n     value will be adjusted as necessary for Daylight Saving Time.  For\n     {@code long}, {@link Long}, and {@link Date} the time zone used is\n     the {@linkplain TimeZone#getDefault() default time zone} for this\n     instance of the Java virtual machine.  The Formatter's locale will\n     supersede the locale of the argument (if any).\n\n <tr><td valign=\"top\">{@code 's'}\n     <td valign=\"top\"> <tt>'&#92;u0073'</tt>\n     <td> Seconds since the beginning of the epoch starting at 1 January 1970\n     {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE/1000} to\n     {@code Long.MAX_VALUE/1000}.\n\n <tr><td valign=\"top\">{@code 'Q'}\n     <td valign=\"top\"> <tt>'&#92;u004f'</tt>\n     <td> Milliseconds since the beginning of the epoch starting at 1 January\n     1970 {@code 00:00:00} UTC, i.e. {@code Long.MIN_VALUE} to\n     {@code Long.MAX_VALUE}. The precision of this value is limited by\n     the resolution of the underlying operating system or hardware.\n\n </table>\n\n <p> The following conversion characters are used for formatting dates:\n\n <table cellpadding=5 summary=\"date\">\n\n <tr><td valign=\"top\">{@code 'B'}\n     <td valign=\"top\"> <tt>'&#92;u0042'</tt>\n     <td> Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths\n     full month name}, e.g. {@code \"January\"}, {@code \"February\"}.\n\n <tr><td valign=\"top\">{@code 'b'}\n     <td valign=\"top\"> <tt>'&#92;u0062'</tt>\n     <td> Locale-specific {@linkplain\n     java.text.DateFormatSymbols#getShortMonths abbreviated month name},\n     e.g. {@code \"Jan\"}, {@code \"Feb\"}.\n\n <tr><td valign=\"top\">{@code 'h'}\n     <td valign=\"top\"> <tt>'&#92;u0068'</tt>\n     <td> Same as {@code 'b'}.\n\n <tr><td valign=\"top\">{@code 'A'}\n     <td valign=\"top\"> <tt>'&#92;u0041'</tt>\n     <td> Locale-specific full name of the {@linkplain\n     java.text.DateFormatSymbols#getWeekdays day of the week},\n     e.g. {@code \"Sunday\"}, {@code \"Monday\"}\n\n <tr><td valign=\"top\">{@code 'a'}\n     <td valign=\"top\"> <tt>'&#92;u0061'</tt>\n     <td> Locale-specific short name of the {@linkplain\n     java.text.DateFormatSymbols#getShortWeekdays day of the week},\n     e.g. {@code \"Sun\"}, {@code \"Mon\"}\n\n <tr><td valign=\"top\">{@code 'C'}\n     <td valign=\"top\"> <tt>'&#92;u0043'</tt>\n     <td> Four-digit year divided by {@code 100}, formatted as two digits\n     with leading zero as necessary, i.e. {@code 00 - 99}\n\n <tr><td valign=\"top\">{@code 'Y'}\n     <td valign=\"top\"> <tt>'&#92;u0059'</tt> <td> Year, formatted to at least\n     four digits with leading zeros as necessary, e.g. {@code 0092} equals\n     {@code 92} CE for the Gregorian calendar.\n\n <tr><td valign=\"top\">{@code 'y'}\n     <td valign=\"top\"> <tt>'&#92;u0079'</tt>\n     <td> Last two digits of the year, formatted with leading zeros as\n     necessary, i.e. {@code 00 - 99}.\n\n <tr><td valign=\"top\">{@code 'j'}\n     <td valign=\"top\"> <tt>'&#92;u006a'</tt>\n     <td> Day of year, formatted as three digits with leading zeros as\n     necessary, e.g. {@code 001 - 366} for the Gregorian calendar.\n     {@code 001} corresponds to the first day of the year.\n\n <tr><td valign=\"top\">{@code 'm'}\n     <td valign=\"top\"> <tt>'&#92;u006d'</tt>\n     <td> Month, formatted as two digits with leading zeros as necessary,\n     i.e. {@code 01 - 13}, where \"{@code 01}\" is the first month of the\n     year and (\"{@code 13}\" is a special value required to support lunar\n     calendars).\n\n <tr><td valign=\"top\">{@code 'd'}\n     <td valign=\"top\"> <tt>'&#92;u0064'</tt>\n     <td> Day of month, formatted as two digits with leading zeros as\n     necessary, i.e. {@code 01 - 31}, where \"{@code 01}\" is the first day\n     of the month.\n\n <tr><td valign=\"top\">{@code 'e'}\n     <td valign=\"top\"> <tt>'&#92;u0065'</tt>\n     <td> Day of month, formatted as two digits, i.e. {@code 1 - 31} where\n     \"{@code 1}\" is the first day of the month.\n\n </table>\n\n <p> The following conversion characters are used for formatting common\n date/time compositions.\n\n <table cellpadding=5 summary=\"composites\">\n\n <tr><td valign=\"top\">{@code 'R'}\n     <td valign=\"top\"> <tt>'&#92;u0052'</tt>\n     <td> Time formatted for the 24-hour clock as {@code \"%tH:%tM\"}\n\n <tr><td valign=\"top\">{@code 'T'}\n     <td valign=\"top\"> <tt>'&#92;u0054'</tt>\n     <td> Time formatted for the 24-hour clock as {@code \"%tH:%tM:%tS\"}.\n\n <tr><td valign=\"top\">{@code 'r'}\n     <td valign=\"top\"> <tt>'&#92;u0072'</tt>\n     <td> Time formatted for the 12-hour clock as {@code \"%tI:%tM:%tS\n     %Tp\"}.  The location of the morning or afternoon marker\n     ({@code '%Tp'}) may be locale-dependent.\n\n <tr><td valign=\"top\">{@code 'D'}\n     <td valign=\"top\"> <tt>'&#92;u0044'</tt>\n     <td> Date formatted as {@code \"%tm/%td/%ty\"}.\n\n <tr><td valign=\"top\">{@code 'F'}\n     <td valign=\"top\"> <tt>'&#92;u0046'</tt>\n     <td> <a href=\"http://www.w3.org/TR/NOTE-datetime\">ISO&nbsp;8601</a>\n     complete date formatted as {@code \"%tY-%tm-%td\"}.\n\n <tr><td valign=\"top\">{@code 'c'}\n     <td valign=\"top\"> <tt>'&#92;u0063'</tt>\n     <td> Date and time formatted as {@code \"%ta %tb %td %tT %tZ %tY\"},\n     e.g. {@code \"Sun Jul 20 16:17:00 EDT 1969\"}.\n\n </table>\n\n <p> The {@code '-'} flag defined for <a href=\"#dFlags\">General\n conversions</a> applies.  If the {@code '#'} flag is given, then a {@link\n FormatFlagsConversionMismatchException} will be thrown.\n\n <p> The <a name=\"dtWidth\">width</a> is the minimum number of characters to\n be written to the output.  If the length of the converted value is less than\n the {@code width} then the output will be padded by spaces\n (<tt>'&#92;u0020'</tt>) until the total number of characters equals width.\n The padding is on the left by default.  If the {@code '-'} flag is given\n then the padding will be on the right.  If width is not specified then there\n is no minimum.\n\n <p> The precision is not applicable.  If the precision is specified then an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n <h4><a name=\"dper\">Percent</a></h4>\n\n <p> The conversion does not correspond to any argument.\n\n <table cellpadding=5 summary=\"DTConv\">\n\n <tr><td valign=\"top\">{@code '%'}\n     <td> The result is a literal {@code '%'} (<tt>'&#92;u0025'</tt>)\n\n <p> The <a name=\"dtWidth\">width</a> is the minimum number of characters to\n be written to the output including the {@code '%'}.  If the length of the\n converted value is less than the {@code width} then the output will be\n padded by spaces (<tt>'&#92;u0020'</tt>) until the total number of\n characters equals width.  The padding is on the left.  If width is not\n specified then just the {@code '%'} is output.\n\n <p> The {@code '-'} flag defined for <a href=\"#dFlags\">General\n conversions</a> applies.  If any other flags are provided, then a\n {@link FormatFlagsConversionMismatchException} will be thrown.\n\n <p> The precision is not applicable.  If the precision is specified an\n {@link IllegalFormatPrecisionException} will be thrown.\n\n </table>\n\n <h4><a name=\"dls\">Line Separator</a></h4>\n\n <p> The conversion does not correspond to any argument.\n\n <table cellpadding=5 summary=\"DTConv\">\n\n <tr><td valign=\"top\">{@code 'n'}\n     <td> the platform-specific line separator as returned by {@link\n     System#getProperty System.getProperty(\"line.separator\")}.\n\n </table>\n\n <p> Flags, width, and precision are not applicable.  If any are provided an\n {@link IllegalFormatFlagsException}, {@link IllegalFormatWidthException},\n and {@link IllegalFormatPrecisionException}, respectively will be thrown.\n\n <h4><a name=\"dpos\">Argument Index</a></h4>\n\n <p> Format specifiers can reference arguments in three ways:\n\n <ul>\n\n <li> <i>Explicit indexing</i> is used when the format specifier contains an\n argument index.  The argument index is a decimal integer indicating the\n position of the argument in the argument list.  The first argument is\n referenced by \"{@code 1$}\", the second by \"{@code 2$}\", etc.  An argument\n may be referenced more than once.\n\n <p> For example:\n\n <blockquote><pre>\n   formatter.format(\"%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s\",\n                    \"a\", \"b\", \"c\", \"d\")\n   // -&gt; \"d c b a d c b a\"\n </pre></blockquote>\n\n <li> <i>Relative indexing</i> is used when the format specifier contains a\n {@code '<'} (<tt>'&#92;u003c'</tt>) flag which causes the argument for\n the previous format specifier to be re-used.  If there is no previous\n argument, then a {@link MissingFormatArgumentException} is thrown.\n\n <blockquote><pre>\n    formatter.format(\"%s %s %&lt;s %&lt;s\", \"a\", \"b\", \"c\", \"d\")\n    // -&gt; \"a b b b\"\n    // \"c\" and \"d\" are ignored because they are not referenced\n </pre></blockquote>\n\n <li> <i>Ordinary indexing</i> is used when the format specifier contains\n neither an argument index nor a {@code '<'} flag.  Each format specifier\n which uses ordinary indexing is assigned a sequential implicit index into\n argument list which is independent of the indices used by explicit or\n relative indexing.\n\n <blockquote><pre>\n   formatter.format(\"%s %s %s %s\", \"a\", \"b\", \"c\", \"d\")\n   // -&gt; \"a b c d\"\n </pre></blockquote>\n\n </ul>\n\n <p> It is possible to have a format string which uses all forms of indexing,\n for example:\n\n <blockquote><pre>\n   formatter.format(\"%2$s %s %&lt;s %s\", \"a\", \"b\", \"c\", \"d\")\n   // -&gt; \"b a a b\"\n   // \"c\" and \"d\" are ignored because they are not referenced\n </pre></blockquote>\n\n <p> The maximum number of arguments is limited by the maximum dimension of a\n Java array as defined by\n <cite>The Java&trade; Virtual Machine Specification</cite>.\n If the argument index is does not correspond to an\n available argument, then a {@link MissingFormatArgumentException} is thrown.\n\n <p> If there are more arguments than format specifiers, the extra arguments\n are ignored.\n\n <p> Unless otherwise specified, passing a {@code null} argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter.\n\n <p> The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose\n current content may be converted into a string by invoking {@link\n #toString toString()}.  The locale used is the {@linkplain\n Locale#getDefault() default locale} for this instance of the Java\n virtual machine.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified destination.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "Destination for the formatted output.  If {@code a} is\n         {@code null} then a {@link StringBuilder} will be created.",
                            "type": "java.lang.Appendable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified locale.\n\n <p> The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose current\n content may be converted into a string by invoking {@link #toString\n toString()}.",
                    "parameters": [
                        {
                            "name": "l",
                            "comment_text": "The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If {@code l} is {@code null} then no localization\n         is applied.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified destination and locale.",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "Destination for the formatted output.  If {@code a} is\n         {@code null} then a {@link StringBuilder} will be created.",
                            "type": "java.lang.Appendable"
                        },
                        {
                            "name": "l",
                            "comment_text": "The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If {@code l} is {@code null} then no localization\n         is applied.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified file name.\n\n <p> The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "fileName",
                            "comment_text": "The name of the file to use as the destination of this\n         formatter.  If the file exists then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "If the given file name does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified file name and charset.\n\n <p> The locale used is the {@linkplain Locale#getDefault default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "fileName",
                            "comment_text": "The name of the file to use as the destination of this\n         formatter.  If the file exists then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "csn",
                            "comment_text": "The name of a supported {@linkplain java.nio.charset.Charset\n         charset}",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "If the given file name does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file"
                        },
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "If the named charset is not supported"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified file name, charset, and\n locale.",
                    "parameters": [
                        {
                            "name": "fileName",
                            "comment_text": "The name of the file to use as the destination of this\n         formatter.  If the file exists then it will be truncated to\n         zero size; otherwise, a new file will be created.  The output\n         will be written to the file and is buffered.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "csn",
                            "comment_text": "The name of a supported {@linkplain java.nio.charset.Charset\n         charset}",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "l",
                            "comment_text": "The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If {@code l} is {@code null} then no localization\n         is applied.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "If the given file name does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file"
                        },
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "If the named charset is not supported"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified file.\n\n <p> The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "The file to use as the destination of this formatter.  If the\n         file exists then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.",
                            "type": "java.io.File"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified file and charset.\n\n <p> The locale used is the {@linkplain Locale#getDefault default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "The file to use as the destination of this formatter.  If the\n         file exists then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.",
                            "type": "java.io.File"
                        },
                        {
                            "name": "csn",
                            "comment_text": "The name of a supported {@linkplain java.nio.charset.Charset\n         charset}",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file"
                        },
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "If the named charset is not supported"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified file, charset, and\n locale.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "The file to use as the destination of this formatter.  If the\n         file exists then it will be truncated to zero size; otherwise,\n         a new file will be created.  The output will be written to the\n         file and is buffered.",
                            "type": "java.io.File"
                        },
                        {
                            "name": "csn",
                            "comment_text": "The name of a supported {@linkplain java.nio.charset.Charset\n         charset}",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "l",
                            "comment_text": "The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If {@code l} is {@code null} then no localization\n         is applied.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.FileNotFoundException",
                            "comment_text": "If the given file object does not denote an existing, writable\n          regular file and a new regular file of that name cannot be\n          created, or if some other error occurs while opening or\n          creating the file"
                        },
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "If the named charset is not supported"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified print stream.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.\n\n <p> Characters are written to the given {@link java.io.PrintStream\n PrintStream} object and are therefore encoded using that object's\n charset.",
                    "parameters": [
                        {
                            "name": "ps",
                            "comment_text": "The stream to use as the destination of this formatter.",
                            "type": "java.io.PrintStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified output stream.\n\n <p> The charset used is the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n <p> The locale used is the {@linkplain Locale#getDefault() default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "The output stream to use as the destination of this formatter.\n         The output will be buffered.",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified output stream and\n charset.\n\n <p> The locale used is the {@linkplain Locale#getDefault default\n locale} for this instance of the Java virtual machine.",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "The output stream to use as the destination of this formatter.\n         The output will be buffered.",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "csn",
                            "comment_text": "The name of a supported {@linkplain java.nio.charset.Charset\n         charset}",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "If the named charset is not supported"
                        }
                    ]
                },
                {
                    "name": "Formatter",
                    "comment_text": "Constructs a new formatter with the specified output stream, charset,\n and locale.",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "The output stream to use as the destination of this formatter.\n         The output will be buffered.",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "csn",
                            "comment_text": "The name of a supported {@linkplain java.nio.charset.Charset\n         charset}",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "l",
                            "comment_text": "The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If {@code l} is {@code null} then no localization\n         is applied.",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "If the named charset is not supported"
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "locale",
                    "comment_text": "Returns the locale set by the construction of this formatter.\n\n <p> The {@link #format(java.util.Locale,String,Object...) format} method\n for this object which has a locale argument does not change this value.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "out",
                    "comment_text": "Returns the destination for the output.",
                    "return_type": "java.lang.Appendable",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the result of invoking {@code toString()} on the destination\n for the output.  For example, the following code formats text into a\n {@link StringBuilder} then retrieves the resultant string:\n\n <blockquote><pre>\n   Formatter f = new Formatter();\n   f.format(\"Last reboot at %tc\", lastRebootDate);\n   String s = f.toString();\n   // -&gt; s == \"Last reboot at Sat Jan 01 00:00:00 PST 2000\"\n </pre></blockquote>\n\n <p> An invocation of this method behaves in exactly the same way as the\n invocation\n\n <pre>\n     out().toString() </pre>\n\n <p> Depending on the specification of {@code toString} for the {@link\n Appendable}, the returned string may or may not contain the characters\n written to the destination.  For instance, buffers typically return\n their contents in {@code toString()}, but streams cannot since the\n data is discarded.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Flushes this formatter.  If the destination implements the {@link\n java.io.Flushable} interface, its {@code flush} method will be invoked.\n\n <p> Flushing a formatter writes any buffered output in the destination\n to the underlying stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Closes this formatter.  If the destination implements the {@link\n java.io.Closeable} interface, its {@code close} method will be invoked.\n\n <p> Closing a formatter allows it to release resources it may be holding\n (such as open files).  If the formatter is already closed, then invoking\n this method has no effect.\n\n <p> Attempting to invoke any methods except {@link #ioException()} in\n this formatter after it has been closed will result in a {@link\n FormatterClosedException}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ioException",
                    "comment_text": "Returns the {@code IOException} last thrown by this formatter's {@link\n Appendable}.\n\n <p> If the destination's {@code append()} method never throws\n {@code IOException}, then this method will always return {@code null}.",
                    "return_type": "java.io.IOException",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "format",
                    "comment_text": "Writes a formatted string to this object's destination using the\n specified format string and arguments.  The locale used is the one\n defined during the construction of this formatter.",
                    "return_type": "java.util.Formatter",
                    "parameters": [
                        {
                            "name": "format",
                            "comment_text": "A format string as described in <a href=\"#syntax\">Format string\n         syntax</a>.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "args",
                            "comment_text": "Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         <cite>The Java&trade; Virtual Machine Specification</cite>.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "format",
                    "comment_text": "Writes a formatted string to this object's destination using the\n specified locale, format string, and arguments.",
                    "return_type": "java.util.Formatter",
                    "parameters": [
                        {
                            "name": "l",
                            "comment_text": "The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If {@code l} is {@code null} then no localization\n         is applied.  This does not change this object's locale that was\n         set during construction.",
                            "type": "java.util.Locale"
                        },
                        {
                            "name": "format",
                            "comment_text": "A format string as described in <a href=\"#syntax\">Format string\n         syntax</a>",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "args",
                            "comment_text": "Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         <cite>The Java&trade; Virtual Machine Specification</cite>.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Formatter.BigDecimalLayoutForm",
            "interfaces": [

            ],
            "superclass": "java.lang.Enum",
            "comment_text": "",
            "since": "",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "SCIENTIFIC",
                    "comment_text": "",
                    "type": "java.util.Formatter.BigDecimalLayoutForm"
                },
                {
                    "name": "DECIMAL_FLOAT",
                    "comment_text": "",
                    "type": "java.util.Formatter.BigDecimalLayoutForm"
                }
            ],
            "methods": [
                {
                    "name": "values",
                    "comment_text": "",
                    "return_type": "java.util.Formatter.BigDecimalLayoutForm",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "valueOf",
                    "comment_text": "",
                    "return_type": "java.util.Formatter.BigDecimalLayoutForm",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.FormattableFlags",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "FomattableFlags are passed to the {@link Formattable#formatTo\n Formattable.formatTo()} method and modify the output format for {@linkplain\n Formattable Formattables}.  Implementations of {@link Formattable} are\n responsible for interpreting and validating any flags.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "LEFT_JUSTIFY",
                    "comment_text": "Left-justifies the output.  Spaces (<tt>'&#92;u0020'</tt>) will be added\n at the end of the converted value as required to fill the minimum width\n of the field.  If this flag is not set then the output will be\n right-justified.\n\n <p> This flag corresponds to <tt>'-'</tt> (<tt>'&#92;u002d'</tt>) in\n the format specifier.",
                    "type": "int"
                },
                {
                    "name": "UPPERCASE",
                    "comment_text": "Converts the output to upper case according to the rules of the\n {@linkplain java.util.Locale locale} given during creation of the\n <tt>formatter</tt> argument of the {@link Formattable#formatTo\n formatTo()} method.  The output should be equivalent the following\n invocation of {@link String#toUpperCase(java.util.Locale)}\n\n <pre>\n     out.toUpperCase() </pre>\n\n <p> This flag corresponds to <tt>'S'</tt> (<tt>'&#92;u0053'</tt>) in\n the format specifier.",
                    "type": "int"
                },
                {
                    "name": "ALTERNATE",
                    "comment_text": "Requires the output to use an alternate form.  The definition of the\n form is specified by the <tt>Formattable</tt>.\n\n <p> This flag corresponds to <tt>'#'</tt> (<tt>'&#92;u0023'</tt>) in\n the format specifier.",
                    "type": "int"
                }
            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.Formattable",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "The <tt>Formattable</tt> interface must be implemented by any class that\n needs to perform custom formatting using the <tt>'s'</tt> conversion\n specifier of {@link java.util.Formatter}.  This interface allows basic\n control for formatting arbitrary objects.\n\n For example, the following class prints out different representations of a\n stock's name depending on the flags and length constraints:\n\n <blockquote><pre>\n   import java.nio.CharBuffer;\n   import java.util.Formatter;\n   import java.util.Formattable;\n   import java.util.Locale;\n   import static java.util.FormattableFlags.*;\n\n  ...\n\n   public class StockName implements Formattable {\n       private String symbol, companyName, frenchCompanyName;\n       public StockName(String symbol, String companyName,\n                        String frenchCompanyName) {\n           ...\n       }\n\n       ...\n\n       public void formatTo(Formatter fmt, int f, int width, int precision) {\n           StringBuilder sb = new StringBuilder();\n\n           // decide form of name\n           String name = companyName;\n           if (fmt.locale().equals(Locale.FRANCE))\n               name = frenchCompanyName;\n           boolean alternate = (f & ALTERNATE) == ALTERNATE;\n           boolean usesymbol = alternate || (precision != -1 && precision < 10);\n           String out = (usesymbol ? symbol : name);\n\n           // apply precision\n           if (precision == -1 || out.length() < precision) {\n               // write it all\n               sb.append(out);\n           } else {\n               sb.append(out.substring(0, precision - 1)).append('*');\n           }\n\n           // apply width and justification\n           int len = sb.length();\n           if (len < width)\n               for (int i = 0; i < width - len; i++)\n                   if ((f & LEFT_JUSTIFY) == LEFT_JUSTIFY)\n                       sb.append(' ');\n                   else\n                       sb.insert(0, ' ');\n\n           fmt.format(sb.toString());\n       }\n\n       public String toString() {\n           return String.format(\"%s - %s\", symbol, companyName);\n       }\n   }\n </pre></blockquote>\n\n <p> When used in conjunction with the {@link java.util.Formatter}, the above\n class produces the following output for various format strings.\n\n <blockquote><pre>\n   Formatter fmt = new Formatter();\n   StockName sn = new StockName(\"HUGE\", \"Huge Fruit, Inc.\",\n                                \"Fruit Titanesque, Inc.\");\n   fmt.format(\"%s\", sn);                   //   -> \"Huge Fruit, Inc.\"\n   fmt.format(\"%s\", sn.toString());        //   -> \"HUGE - Huge Fruit, Inc.\"\n   fmt.format(\"%#s\", sn);                  //   -> \"HUGE\"\n   fmt.format(\"%-10.8s\", sn);              //   -> \"HUGE      \"\n   fmt.format(\"%.12s\", sn);                //   -> \"Huge Fruit,*\"\n   fmt.format(Locale.FRANCE, \"%25s\", sn);  //   -> \"   Fruit Titanesque, Inc.\"\n </pre></blockquote>\n\n <p> Formattables are not necessarily safe for multithreaded access.  Thread\n safety is optional and may be enforced by classes that extend and implement\n this interface.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to\n any method in this interface will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "formatTo",
                    "comment_text": "Formats the object using the provided {@link Formatter formatter}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "formatter",
                            "comment_text": "The {@link Formatter formatter}.  Implementing classes may call\n         {@link Formatter#out() formatter.out()} or {@link\n         Formatter#locale() formatter.locale()} to obtain the {@link\n         Appendable} or {@link Locale} used by this\n         <tt>formatter</tt> respectively.",
                            "type": "java.util.Formatter"
                        },
                        {
                            "name": "flags",
                            "comment_text": "The flags modify the output format.  The value is interpreted as\n         a bitmask.  Any combination of the following flags may be set:\n         {@link FormattableFlags#LEFT_JUSTIFY}, {@link\n         FormattableFlags#UPPERCASE}, and {@link\n         FormattableFlags#ALTERNATE}.  If no flags are set, the default\n         formatting of the implementing class will apply.",
                            "type": "int"
                        },
                        {
                            "name": "width",
                            "comment_text": "The minimum number of characters to be written to the output.\n         If the length of the converted value is less than the\n         <tt>width</tt> then the output will be padded by\n         <tt>'&nbsp;&nbsp;'</tt> until the total number of characters\n         equals width.  The padding is at the beginning by default.  If\n         the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the\n         padding will be at the end.  If <tt>width</tt> is <tt>-1</tt>\n         then there is no minimum.",
                            "type": "int"
                        },
                        {
                            "name": "precision",
                            "comment_text": "The maximum number of characters to be written to the output.\n         The precision is applied before the width, thus the output will\n         be truncated to <tt>precision</tt> characters even if the\n         <tt>width</tt> is greater than the <tt>precision</tt>.  If\n         <tt>precision</tt> is <tt>-1</tt> then there is no explicit\n         limit on the number of characters.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.FormatFlagsConversionMismatchException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when a conversion and flag are incompatible.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "FormatFlagsConversionMismatchException",
                    "comment_text": "Constructs an instance of this class with the specified flag\n and conversion.",
                    "parameters": [
                        {
                            "name": "f",
                            "comment_text": "The flag",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "c",
                            "comment_text": "The conversion",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFlags",
                    "comment_text": "Returns the incompatible flag.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getConversion",
                    "comment_text": "Returns the incompatible conversion.",
                    "return_type": "char",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.EventObject",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "<p>\n The root class from which all event state objects shall be derived.\n <p>\n All Events are constructed with a reference to the object, the \"source\",\n that is logically deemed to be the object upon which the Event in question\n initially occurred upon.",
            "since": "JDK1.1",
            "see": [

            ],
            "constructors": [
                {
                    "name": "EventObject",
                    "comment_text": "Constructs a prototypical Event.",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "The object on which the Event initially occurred.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "source",
                    "comment_text": "The object on which the Event initially occurred.",
                    "type": "java.lang.Object"
                }
            ],
            "methods": [
                {
                    "name": "getSource",
                    "comment_text": "The object on which the Event initially occurred.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a String representation of this EventObject.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.EventListenerProxy",
            "interfaces": [
                "java.util.EventListener"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An abstract wrapper class for an {@code EventListener} class\n which associates a set of additional parameters with the listener.\n Subclasses must provide the storage and accessor methods\n for the additional arguments or parameters.\n <p>\n For example, a bean which supports named properties\n would have a two argument method signature for adding\n a {@code PropertyChangeListener} for a property:\n <pre>\n public void addPropertyChangeListener(String propertyName,\n                                       PropertyChangeListener listener)\n </pre>\n If the bean also implemented the zero argument get listener method:\n <pre>\n public PropertyChangeListener[] getPropertyChangeListeners()\n </pre>\n then the array may contain inner {@code PropertyChangeListeners}\n which are also {@code PropertyChangeListenerProxy} objects.\n <p>\n If the calling method is interested in retrieving the named property\n then it would have to test the element to see if it is a proxy class.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "EventListenerProxy",
                    "comment_text": "Creates a proxy for the specified listener.",
                    "parameters": [
                        {
                            "name": "listener",
                            "comment_text": "the listener object",
                            "type": "java.util.EventListener"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getListener",
                    "comment_text": "Returns the listener associated with the proxy.",
                    "return_type": "java.util.EventListener",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.EventListener",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A tagging interface that all event listener interfaces must extend.",
            "since": "JDK1.1",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.Enumeration",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "An object that implements the Enumeration interface generates a\n series of elements, one at a time. Successive calls to the\n <code>nextElement</code> method return successive elements of the\n series.\n <p>\n For example, to print all elements of a <tt>Vector&lt;E&gt;</tt> <i>v</i>:\n <pre>\n   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)\n       System.out.println(e.nextElement());</pre>\n <p>\n Methods are provided to enumerate through the elements of a\n vector, the keys of a hashtable, and the values in a hashtable.\n Enumerations are also used to specify the input streams to a\n <code>SequenceInputStream</code>.\n <p>\n NOTE: The functionality of this interface is duplicated by the Iterator\n interface.  In addition, Iterator adds an optional remove operation, and\n has shorter method names.  New implementations should consider using\n Iterator in preference to Enumeration.",
            "since": "JDK1.0",
            "see": [
                "java.util.Iterator",
                "java.io.SequenceInputStream",
                "java.util.Enumeration",
                "java.util.Hashtable",
                "java.util.Hashtable",
                "java.util.Hashtable",
                "java.util.Vector",
                "java.util.Vector"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "hasMoreElements",
                    "comment_text": "Tests if this enumeration contains more elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextElement",
                    "comment_text": "Returns the next element of this enumeration if this enumeration\n object has at least one more element to provide.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.EnumSet",
            "interfaces": [
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractSet",
            "comment_text": "A specialized {@link Set} implementation for use with enum types.  All of\n the elements in an enum set must come from a single enum type that is\n specified, explicitly or implicitly, when the set is created.  Enum sets\n are represented internally as bit vectors.  This representation is\n extremely compact and efficient. The space and time performance of this\n class should be good enough to allow its use as a high-quality, typesafe\n alternative to traditional <tt>int</tt>-based \"bit flags.\"  Even bulk\n operations (such as <tt>containsAll</tt> and <tt>retainAll</tt>) should\n run very quickly if their argument is also an enum set.\n\n <p>The iterator returned by the <tt>iterator</tt> method traverses the\n elements in their <i>natural order</i> (the order in which the enum\n constants are declared).  The returned iterator is <i>weakly\n consistent</i>: it will never throw {@link ConcurrentModificationException}\n and it may or may not show the effects of any modifications to the set that\n occur while the iteration is in progress.\n\n <p>Null elements are not permitted.  Attempts to insert a null element\n will throw {@link NullPointerException}.  Attempts to test for the\n presence of a null element or to remove one will, however, function\n properly.\n\n <P>Like most collection implementations, <tt>EnumSet</tt> is not\n synchronized.  If multiple threads access an enum set concurrently, and at\n least one of the threads modifies the set, it should be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the enum set.  If no such object exists,\n the set should be \"wrapped\" using the {@link Collections#synchronizedSet}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access:\n\n <pre>\n Set&lt;MyEnum&gt; s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));\n </pre>\n\n <p>Implementation note: All basic operations execute in constant time.\n They are likely (though not guaranteed) to be much faster than their\n {@link HashSet} counterparts.  Even bulk operations execute in\n constant time if their argument is also an enum set.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [
                "java.util.EnumMap"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "noneOf",
                    "comment_text": "Creates an empty enum set with the specified element type.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "elementType",
                            "comment_text": "the class object of the element type for this enum\n     set",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "allOf",
                    "comment_text": "Creates an enum set containing all of the elements in the specified\n element type.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "elementType",
                            "comment_text": "the class object of the element type for this enum\n     set",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Creates an enum set with the same element type as the specified enum\n set, initially containing the same elements (if any).",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the enum set from which to initialize this enum set",
                            "type": "java.util.EnumSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Creates an enum set initialized from the specified collection.  If\n the specified collection is an <tt>EnumSet</tt> instance, this static\n factory method behaves identically to {@link #copyOf(EnumSet)}.\n Otherwise, the specified collection must contain at least one element\n (in order to determine the new enum set's element type).",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection from which to initialize this enum set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "complementOf",
                    "comment_text": "Creates an enum set with the same element type as the specified enum\n set, initially containing all the elements of this type that are\n <i>not</i> contained in the specified set.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the enum set from whose complement to initialize this enum set",
                            "type": "java.util.EnumSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "of",
                    "comment_text": "Creates an enum set initially containing the specified element.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "of",
                    "comment_text": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "e1",
                            "comment_text": "an element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e2",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "of",
                    "comment_text": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "e1",
                            "comment_text": "an element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e2",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e3",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "of",
                    "comment_text": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "e1",
                            "comment_text": "an element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e2",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e3",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e4",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "of",
                    "comment_text": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "e1",
                            "comment_text": "an element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e2",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e3",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e4",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "e5",
                            "comment_text": "another element that this set is to contain initially",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "of",
                    "comment_text": "Creates an enum set initially containing the specified elements.\n This factory, whose parameter list uses the varargs feature, may\n be used to create an enum set initially containing an arbitrary\n number of elements, but it is likely to run slower than the overloadings\n that do not use varargs.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "first",
                            "comment_text": "an element that the set is to contain initially",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "rest",
                            "comment_text": "the remaining elements the set is to contain initially",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "range",
                    "comment_text": "Creates an enum set initially containing all of the elements in the\n range defined by the two specified endpoints.  The returned set will\n contain the endpoints themselves, which may be identical but must not\n be out of order.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [
                        {
                            "name": "from",
                            "comment_text": "the first element in the range",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "to",
                            "comment_text": "the last element in the range",
                            "type": "java.lang.Enum"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a copy of this set.",
                    "return_type": "java.util.EnumSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.EnumMap",
            "interfaces": [
                "java.io.Serializable",
                "java.lang.Cloneable"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "A specialized {@link Map} implementation for use with enum type keys.  All\n of the keys in an enum map must come from a single enum type that is\n specified, explicitly or implicitly, when the map is created.  Enum maps\n are represented internally as arrays.  This representation is extremely\n compact and efficient.\n\n <p>Enum maps are maintained in the <i>natural order</i> of their keys\n (the order in which the enum constants are declared).  This is reflected\n in the iterators returned by the collections views ({@link #keySet()},\n {@link #entrySet()}, and {@link #values()}).\n\n <p>Iterators returned by the collection views are <i>weakly consistent</i>:\n they will never throw {@link ConcurrentModificationException} and they may\n or may not show the effects of any modifications to the map that occur while\n the iteration is in progress.\n\n <p>Null keys are not permitted.  Attempts to insert a null key will\n throw {@link NullPointerException}.  Attempts to test for the\n presence of a null key or to remove one will, however, function properly.\n Null values are permitted.\n\n <P>Like most collection implementations <tt>EnumMap</tt> is not\n synchronized. If multiple threads access an enum map concurrently, and at\n least one of the threads modifies the map, it should be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the enum map.  If no such object exists,\n the map should be \"wrapped\" using the {@link Collections#synchronizedMap}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access:\n\n <pre>\n     Map&lt;EnumKey, V&gt; m\n         = Collections.synchronizedMap(new EnumMap&lt;EnumKey, V&gt;(...));\n </pre>\n\n <p>Implementation note: All basic operations execute in constant time.\n They are likely (though not guaranteed) to be faster than their\n {@link HashMap} counterparts.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [
                "java.util.EnumSet"
            ],
            "constructors": [
                {
                    "name": "EnumMap",
                    "comment_text": "Creates an empty enum map with the specified key type.",
                    "parameters": [
                        {
                            "name": "keyType",
                            "comment_text": "the class object of the key type for this enum map",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "EnumMap",
                    "comment_text": "Creates an enum map with the same key type as the specified enum\n map, initially containing the same mappings (if any).",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the enum map from which to initialize this enum map",
                            "type": "java.util.EnumMap"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "EnumMap",
                    "comment_text": "Creates an enum map initialized from the specified map.  If the\n specified map is an <tt>EnumMap</tt> instance, this constructor behaves\n identically to {@link #EnumMap(EnumMap)}.  Otherwise, the specified map\n must contain at least one mapping (in order to determine the new\n enum map's key type).",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map from which to initialize this enum map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns <tt>true</tt> if this map contains a mapping for the specified\n key.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key == k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for this key, the old\n value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key with which the specified value is to be associated",
                            "type": "java.lang.Enum"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for this key from this map if present.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key whose mapping is to be removed from the map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for\n any of the keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all mappings from this map.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The returned set obeys the general contract outlined in\n {@link Map#keySet()}.  The set's iterator will return the keys\n in their natural order (the order in which the enum constants\n are declared).",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The returned collection obeys the general contract outlined in\n {@link Map#values()}.  The collection's iterator will return the\n values in the order their corresponding keys appear in map,\n which is their natural order (the order in which the enum constants\n are declared).",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The returned set obeys the general contract outlined in\n {@link Map#keySet()}.  The set's iterator will return the\n mappings in the order their keys appear in map, which is their\n natural order (the order in which the enum constants are declared).",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this map for equality.  Returns\n <tt>true</tt> if the given object is also a map and the two maps\n represent the same mappings, as specified in the {@link\n Map#equals(Object)} contract.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to be compared for equality with this map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this enum map.  (The values themselves\n are not cloned.",
                    "return_type": "java.util.EnumMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.EmptyStackException",
            "interfaces": [

            ],
            "superclass": "java.lang.RuntimeException",
            "comment_text": "Thrown by methods in the <code>Stack</code> class to indicate\n that the stack is empty.",
            "since": "JDK1.0",
            "see": [
                "java.util.Stack"
            ],
            "constructors": [
                {
                    "name": "EmptyStackException",
                    "comment_text": "Constructs a new <code>EmptyStackException</code> with <tt>null</tt>\n as its error message string.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.DuplicateFormatFlagsException",
            "interfaces": [

            ],
            "superclass": "java.util.IllegalFormatException",
            "comment_text": "Unchecked exception thrown when duplicate flags are provided in the format\n specifier.\n\n <p> Unless otherwise specified, passing a <tt>null</tt> argument to any\n method or constructor in this class will cause a {@link\n NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "DuplicateFormatFlagsException",
                    "comment_text": "Constructs an instance of this class with the specified flags.",
                    "parameters": [
                        {
                            "name": "f",
                            "comment_text": "The set of format flags which contain a duplicate flag.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getFlags",
                    "comment_text": "Returns the set of flags which contains a duplicate flag.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Dictionary",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "The <code>Dictionary</code> class is the abstract parent of any\n class, such as <code>Hashtable</code>, which maps keys to values.\n Every key and every value is an object. In any one <tt>Dictionary</tt>\n object, every key is associated with at most one value. Given a\n <tt>Dictionary</tt> and a key, the associated element can be looked up.\n Any non-<code>null</code> object can be used as a key and as a value.\n <p>\n As a rule, the <code>equals</code> method should be used by\n implementations of this class to decide if two keys are the same.\n <p>\n <strong>NOTE: This class is obsolete.  New implementations should\n implement the Map interface, rather than extending this class.</strong>",
            "since": "JDK1.0",
            "see": [
                "java.util.Map",
                "java.lang.Object",
                "java.lang.Object",
                "java.util.Hashtable"
            ],
            "constructors": [
                {
                    "name": "Dictionary",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of entries (distinct keys) in this dictionary.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Tests if this dictionary maps no keys to value. The general contract\n for the <tt>isEmpty</tt> method is that the result is true if and only\n if this dictionary contains no entries.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keys",
                    "comment_text": "Returns an enumeration of the keys in this dictionary. The general\n contract for the keys method is that an <tt>Enumeration</tt> object\n is returned that will generate all the keys for which this dictionary\n contains entries.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "elements",
                    "comment_text": "Returns an enumeration of the values in this dictionary. The general\n contract for the <tt>elements</tt> method is that an\n <tt>Enumeration</tt> is returned that will generate all the elements\n contained in entries in this dictionary.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the key is mapped in this dictionary.\n The general contract for the <tt>isEmpty</tt> method is that if this\n dictionary contains an entry for the specified key, the associated\n value is returned; otherwise, <tt>null</tt> is returned.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "a key in this dictionary.\n          <code>null</code> if the key is not mapped to any value in\n          this dictionary.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Maps the specified <code>key</code> to the specified\n <code>value</code> in this dictionary. Neither the key nor the\n value can be <code>null</code>.\n <p>\n If this dictionary already contains an entry for the specified\n <tt>key</tt>, the value already in this dictionary for that\n <tt>key</tt> is returned, after modifying the entry to contain the\n  new element. <p>If this dictionary does not already have an entry\n  for the specified <tt>key</tt>, an entry is created for the\n  specified <tt>key</tt> and <tt>value</tt>, and <tt>null</tt> is\n  returned.\n <p>\n The <code>value</code> can be retrieved by calling the\n <code>get</code> method with a <code>key</code> that is equal to\n the original <code>key</code>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the hashtable key.",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the <code>key</code> (and its corresponding\n <code>value</code>) from this dictionary. This method does nothing\n if the <code>key</code> is not in this dictionary.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key that needs to be removed.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Deque",
            "interfaces": [
                "java.util.Queue"
            ],
            "superclass": "",
            "comment_text": "A linear collection that supports element insertion and removal at\n both ends.  The name <i>deque</i> is short for \"double ended queue\"\n and is usually pronounced \"deck\".  Most <tt>Deque</tt>\n implementations place no fixed limits on the number of elements\n they may contain, but this interface supports capacity-restricted\n deques as well as those with no fixed size limit.\n\n <p>This interface defines methods to access the elements at both\n ends of the deque.  Methods are provided to insert, remove, and\n examine the element.  Each of these methods exists in two forms:\n one throws an exception if the operation fails, the other returns a\n special value (either <tt>null</tt> or <tt>false</tt>, depending on\n the operation).  The latter form of the insert operation is\n designed specifically for use with capacity-restricted\n <tt>Deque</tt> implementations; in most implementations, insert\n operations cannot fail.\n\n <p>The twelve methods described above are summarized in the\n following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER COLSPAN = 2> <b>First Element (Head)</b></td>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Last Element (Tail)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #addFirst addFirst(e)}</td>\n    <td>{@link #offerFirst offerFirst(e)}</td>\n    <td>{@link #addLast addLast(e)}</td>\n    <td>{@link #offerLast offerLast(e)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #removeFirst removeFirst()}</td>\n    <td>{@link #pollFirst pollFirst()}</td>\n    <td>{@link #removeLast removeLast()}</td>\n    <td>{@link #pollLast pollLast()}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #getFirst getFirst()}</td>\n    <td>{@link #peekFirst peekFirst()}</td>\n    <td>{@link #getLast getLast()}</td>\n    <td>{@link #peekLast peekLast()}</td>\n  </tr>\n </table>\n\n <p>This interface extends the {@link Queue} interface.  When a deque is\n used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are\n added at the end of the deque and removed from the beginning.  The methods\n inherited from the <tt>Queue</tt> interface are precisely equivalent to\n <tt>Deque</tt> methods as indicated in the following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td ALIGN=CENTER> <b><tt>Queue</tt> Method</b></td>\n    <td ALIGN=CENTER> <b>Equivalent <tt>Deque</tt> Method</b></td>\n  </tr>\n  <tr>\n    <td>{@link java.util.Queue#add add(e)}</td>\n    <td>{@link #addLast addLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link java.util.Queue#offer offer(e)}</td>\n    <td>{@link #offerLast offerLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link java.util.Queue#remove remove()}</td>\n    <td>{@link #removeFirst removeFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link java.util.Queue#poll poll()}</td>\n    <td>{@link #pollFirst pollFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link java.util.Queue#element element()}</td>\n    <td>{@link #getFirst getFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link java.util.Queue#peek peek()}</td>\n    <td>{@link #peek peekFirst()}</td>\n  </tr>\n </table>\n\n <p>Deques can also be used as LIFO (Last-In-First-Out) stacks.  This\n interface should be used in preference to the legacy {@link Stack} class.\n When a deque is used as a stack, elements are pushed and popped from the\n beginning of the deque.  Stack methods are precisely equivalent to\n <tt>Deque</tt> methods as indicated in the table below:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td ALIGN=CENTER> <b>Stack Method</b></td>\n    <td ALIGN=CENTER> <b>Equivalent <tt>Deque</tt> Method</b></td>\n  </tr>\n  <tr>\n    <td>{@link #push push(e)}</td>\n    <td>{@link #addFirst addFirst(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #pop pop()}</td>\n    <td>{@link #removeFirst removeFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #peek peek()}</td>\n    <td>{@link #peekFirst peekFirst()}</td>\n  </tr>\n </table>\n\n <p>Note that the {@link #peek peek} method works equally well when\n a deque is used as a queue or a stack; in either case, elements are\n drawn from the beginning of the deque.\n\n <p>This interface provides two methods to remove interior\n elements, {@link #removeFirstOccurrence removeFirstOccurrence} and\n {@link #removeLastOccurrence removeLastOccurrence}.\n\n <p>Unlike the {@link List} interface, this interface does not\n provide support for indexed access to elements.\n\n <p>While <tt>Deque</tt> implementations are not strictly required\n to prohibit the insertion of null elements, they are strongly\n encouraged to do so.  Users of any <tt>Deque</tt> implementations\n that do allow null elements are strongly encouraged <i>not</i> to\n take advantage of the ability to insert nulls.  This is so because\n <tt>null</tt> is used as a special return value by various methods\n to indicated that the deque is empty.\n\n <p><tt>Deque</tt> implementations generally do not define\n element-based versions of the <tt>equals</tt> and <tt>hashCode</tt>\n methods, but instead inherit the identity-based versions from class\n <tt>Object</tt>.\n\n <p>This interface is a member of the <a\n href=\"{@docRoot}/../technotes/guides/collections/index.html\"> Java Collections\n Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "addFirst",
                    "comment_text": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions.\n When using a capacity-restricted deque, it is generally preferable to\n use method {@link #offerFirst}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addLast",
                    "comment_text": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions.\n When using a capacity-restricted deque, it is generally preferable to\n use method {@link #offerLast}.\n\n <p>This method is equivalent to {@link #add}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "Inserts the specified element at the front of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addFirst} method,\n which can fail to insert an element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addLast} method,\n which can fail to insert an element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirst",
                    "comment_text": "Retrieves and removes the first element of this deque.  This method\n differs from {@link #pollFirst pollFirst} only in that it throws an\n exception if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLast",
                    "comment_text": "Retrieves and removes the last element of this deque.  This method\n differs from {@link #pollLast pollLast} only in that it throws an\n exception if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "Retrieves and removes the first element of this deque,\n or returns <tt>null</tt> if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "Retrieves and removes the last element of this deque,\n or returns <tt>null</tt> if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFirst",
                    "comment_text": "Retrieves, but does not remove, the first element of this deque.\n\n This method differs from {@link #peekFirst peekFirst} only in that it\n throws an exception if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLast",
                    "comment_text": "Retrieves, but does not remove, the last element of this deque.\n This method differs from {@link #peekLast peekLast} only in that it\n throws an exception if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekFirst",
                    "comment_text": "Retrieves, but does not remove, the first element of this deque,\n or returns <tt>null</tt> if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekLast",
                    "comment_text": "Retrieves, but does not remove, the last element of this deque,\n or returns <tt>null</tt> if this deque is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirstOccurrence",
                    "comment_text": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLastOccurrence",
                    "comment_text": "Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use {@link #offer(Object) offer}.\n\n <p>This method is equivalent to {@link #addLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and <tt>false</tt> if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the {@link #add} method, which can fail to\n insert an element only by throwing an exception.\n\n <p>This method is equivalent to {@link #offerLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n <tt>null</tt> if this deque is empty.\n\n <p>This method is equivalent to {@link #pollFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from {@link #peek peek} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns <tt>null</tt> if this deque is empty.\n\n <p>This method is equivalent to {@link #peekFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n\n <p>This method is equivalent to {@link #addFirst}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to push",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pop",
                    "comment_text": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n <p>This method is equivalent to {@link #removeFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to {@link #removeFirstOccurrence}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this deque is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this deque.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Date",
            "interfaces": [
                "java.io.Serializable",
                "java.lang.Cloneable",
                "java.lang.Comparable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The class <code>Date</code> represents a specific instant\n in time, with millisecond precision.\n <p>\n Prior to JDK&nbsp;1.1, the class <code>Date</code> had two additional\n functions.  It allowed the interpretation of dates as year, month, day, hour,\n minute, and second values.  It also allowed the formatting and parsing\n of date strings.  Unfortunately, the API for these functions was not\n amenable to internationalization.  As of JDK&nbsp;1.1, the\n <code>Calendar</code> class should be used to convert between dates and time\n fields and the <code>DateFormat</code> class should be used to format and\n parse date strings.\n The corresponding methods in <code>Date</code> are deprecated.\n <p>\n Although the <code>Date</code> class is intended to reflect\n coordinated universal time (UTC), it may not do so exactly,\n depending on the host environment of the Java Virtual Machine.\n Nearly all modern operating systems assume that 1&nbsp;day&nbsp;=\n 24&nbsp;&times;&nbsp;60&nbsp;&times;&nbsp;60&nbsp;= 86400 seconds\n in all cases. In UTC, however, about once every year or two there\n is an extra second, called a \"leap second.\" The leap\n second is always added as the last second of the day, and always\n on December 31 or June 30. For example, the last minute of the\n year 1995 was 61 seconds long, thanks to an added leap second.\n Most computer clocks are not accurate enough to be able to reflect\n the leap-second distinction.\n <p>\n Some computer standards are defined in terms of Greenwich mean\n time (GMT), which is equivalent to universal time (UT).  GMT is\n the \"civil\" name for the standard; UT is the\n \"scientific\" name for the same standard. The\n distinction between UTC and UT is that UTC is based on an atomic\n clock and UT is based on astronomical observations, which for all\n practical purposes is an invisibly fine hair to split. Because the\n earth's rotation is not uniform (it slows down and speeds up\n in complicated ways), UT does not always flow uniformly. Leap\n seconds are introduced as needed into UTC so as to keep UTC within\n 0.9 seconds of UT1, which is a version of UT with certain\n corrections applied. There are other time and date systems as\n well; for example, the time scale used by the satellite-based\n global positioning system (GPS) is synchronized to UTC but is\n <i>not</i> adjusted for leap seconds. An interesting source of\n further information is the U.S. Naval Observatory, particularly\n the Directorate of Time at:\n <blockquote><pre>\n     <a href=http://tycho.usno.navy.mil>http://tycho.usno.navy.mil</a>\n </pre></blockquote>\n <p>\n and their definitions of \"Systems of Time\" at:\n <blockquote><pre>\n     <a href=http://tycho.usno.navy.mil/systime.html>http://tycho.usno.navy.mil/systime.html</a>\n </pre></blockquote>\n <p>\n In all methods of class <code>Date</code> that accept or return\n year, month, date, hours, minutes, and seconds values, the\n following representations are used:\n <ul>\n <li>A year <i>y</i> is represented by the integer\n     <i>y</i>&nbsp;<code>-&nbsp;1900</code>.\n <li>A month is represented by an integer from 0 to 11; 0 is January,\n     1 is February, and so forth; thus 11 is December.\n <li>A date (day of month) is represented by an integer from 1 to 31\n     in the usual manner.\n <li>An hour is represented by an integer from 0 to 23. Thus, the hour\n     from midnight to 1 a.m. is hour 0, and the hour from noon to 1\n     p.m. is hour 12.\n <li>A minute is represented by an integer from 0 to 59 in the usual manner.\n <li>A second is represented by an integer from 0 to 61; the values 60 and\n     61 occur only for leap seconds and even then only in Java\n     implementations that actually track leap seconds correctly. Because\n     of the manner in which leap seconds are currently introduced, it is\n     extremely unlikely that two leap seconds will occur in the same\n     minute, but this specification follows the date and time conventions\n     for ISO C.\n </ul>\n <p>\n In all cases, arguments given to methods for these purposes need\n not fall within the indicated ranges; for example, a date may be\n specified as January 32 and is interpreted as meaning February 1.",
            "since": "JDK1.0",
            "see": [
                "java.text.DateFormat",
                "java.util.Calendar",
                "java.util.TimeZone"
            ],
            "constructors": [
                {
                    "name": "Date",
                    "comment_text": "Allocates a <code>Date</code> object and initializes it so that\n it represents the time at which it was allocated, measured to the\n nearest millisecond.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Date",
                    "comment_text": "Allocates a <code>Date</code> object and initializes it to\n represent the specified number of milliseconds since the\n standard base time known as \"the epoch\", namely January 1,\n 1970, 00:00:00 GMT.",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the milliseconds since January 1, 1970, 00:00:00 GMT.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Date",
                    "comment_text": "Allocates a <code>Date</code> object and initializes it so that\n it represents midnight, local time, at the beginning of the day\n specified by the <code>year</code>, <code>month</code>, and\n <code>date</code> arguments.",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the year minus 1900.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the month between 0-11.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the day of the month between 1-31.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Date",
                    "comment_text": "Allocates a <code>Date</code> object and initializes it so that\n it represents the instant at the start of the minute specified by\n the <code>year</code>, <code>month</code>, <code>date</code>,\n <code>hrs</code>, and <code>min</code> arguments, in the local\n time zone.",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the year minus 1900.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the month between 0-11.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the day of the month between 1-31.",
                            "type": "int"
                        },
                        {
                            "name": "hrs",
                            "comment_text": "the hours between 0-23.",
                            "type": "int"
                        },
                        {
                            "name": "min",
                            "comment_text": "the minutes between 0-59.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Date",
                    "comment_text": "Allocates a <code>Date</code> object and initializes it so that\n it represents the instant at the start of the second specified\n by the <code>year</code>, <code>month</code>, <code>date</code>,\n <code>hrs</code>, <code>min</code>, and <code>sec</code> arguments,\n in the local time zone.",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the year minus 1900.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the month between 0-11.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the day of the month between 1-31.",
                            "type": "int"
                        },
                        {
                            "name": "hrs",
                            "comment_text": "the hours between 0-23.",
                            "type": "int"
                        },
                        {
                            "name": "min",
                            "comment_text": "the minutes between 0-59.",
                            "type": "int"
                        },
                        {
                            "name": "sec",
                            "comment_text": "the seconds between 0-59.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Date",
                    "comment_text": "Allocates a <code>Date</code> object and initializes it so that\n it represents the date and time indicated by the string\n <code>s</code>, which is interpreted as if by the\n {@link Date#parse} method.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "a string representation of the date.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "clone",
                    "comment_text": "Return a copy of this object.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "UTC",
                    "comment_text": "Determines the date and time based on the arguments. The\n arguments are interpreted as a year, month, day of the month,\n hour of the day, minute within the hour, and second within the\n minute, exactly as for the <tt>Date</tt> constructor with six\n arguments, except that the arguments are interpreted relative\n to UTC rather than to the local time zone. The time indicated is\n returned represented as the distance, measured in milliseconds,\n of that time from the epoch (00:00:00 GMT on January 1, 1970).",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the year minus 1900.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the month between 0-11.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the day of the month between 1-31.",
                            "type": "int"
                        },
                        {
                            "name": "hrs",
                            "comment_text": "the hours between 0-23.",
                            "type": "int"
                        },
                        {
                            "name": "min",
                            "comment_text": "the minutes between 0-59.",
                            "type": "int"
                        },
                        {
                            "name": "sec",
                            "comment_text": "the seconds between 0-59.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parse",
                    "comment_text": "Attempts to interpret the string <tt>s</tt> as a representation\n of a date and time. If the attempt is successful, the time\n indicated is returned represented as the distance, measured in\n milliseconds, of that time from the epoch (00:00:00 GMT on\n January 1, 1970). If the attempt fails, an\n <tt>IllegalArgumentException</tt> is thrown.\n <p>\n It accepts many syntaxes; in particular, it recognizes the IETF\n standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also\n understands the continental U.S. time-zone abbreviations, but for\n general use, a time-zone offset should be used: \"Sat, 12 Aug 1995\n 13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich\n meridian). If no time zone is specified, the local time zone is\n assumed. GMT and UTC are considered equivalent.\n <p>\n The string <tt>s</tt> is processed from left to right, looking for\n data of interest. Any material in <tt>s</tt> that is within the\n ASCII parenthesis characters <tt>(</tt> and <tt>)</tt> is ignored.\n Parentheses may be nested. Otherwise, the only characters permitted\n within <tt>s</tt> are these ASCII characters:\n <blockquote><pre>\n abcdefghijklmnopqrstuvwxyz\n ABCDEFGHIJKLMNOPQRSTUVWXYZ\n 0123456789,+-:/</pre></blockquote>\n and whitespace characters.<p>\n A consecutive sequence of decimal digits is treated as a decimal\n number:<ul>\n <li>If a number is preceded by <tt>+</tt> or <tt>-</tt> and a year\n     has already been recognized, then the number is a time-zone\n     offset. If the number is less than 24, it is an offset measured\n     in hours. Otherwise, it is regarded as an offset in minutes,\n     expressed in 24-hour time format without punctuation. A\n     preceding <tt>-</tt> means a westward offset. Time zone offsets\n     are always relative to UTC (Greenwich). Thus, for example,\n     <tt>-5</tt> occurring in the string would mean \"five hours west\n     of Greenwich\" and <tt>+0430</tt> would mean \"four hours and\n     thirty minutes east of Greenwich.\" It is permitted for the\n     string to specify <tt>GMT</tt>, <tt>UT</tt>, or <tt>UTC</tt>\n     redundantly-for example, <tt>GMT-5</tt> or <tt>utc+0430</tt>.\n <li>The number is regarded as a year number if one of the\n     following conditions is true:\n <ul>\n     <li>The number is equal to or greater than 70 and followed by a\n         space, comma, slash, or end of string\n     <li>The number is less than 70, and both a month and a day of\n         the month have already been recognized</li>\n </ul>\n     If the recognized year number is less than 100, it is\n     interpreted as an abbreviated year relative to a century of\n     which dates are within 80 years before and 19 years after\n     the time when the Date class is initialized.\n     After adjusting the year number, 1900 is subtracted from\n     it. For example, if the current year is 1999 then years in\n     the range 19 to 99 are assumed to mean 1919 to 1999, while\n     years from 0 to 18 are assumed to mean 2000 to 2018.  Note\n     that this is slightly different from the interpretation of\n     years less than 100 that is used in {@link java.text.SimpleDateFormat}.\n <li>If the number is followed by a colon, it is regarded as an hour,\n     unless an hour has already been recognized, in which case it is\n     regarded as a minute.\n <li>If the number is followed by a slash, it is regarded as a month\n     (it is decreased by 1 to produce a number in the range <tt>0</tt>\n     to <tt>11</tt>), unless a month has already been recognized, in\n     which case it is regarded as a day of the month.\n <li>If the number is followed by whitespace, a comma, a hyphen, or\n     end of string, then if an hour has been recognized but not a\n     minute, it is regarded as a minute; otherwise, if a minute has\n     been recognized but not a second, it is regarded as a second;\n     otherwise, it is regarded as a day of the month. </ul><p>\n A consecutive sequence of letters is regarded as a word and treated\n as follows:<ul>\n <li>A word that matches <tt>AM</tt>, ignoring case, is ignored (but\n     the parse fails if an hour has not been recognized or is less\n     than <tt>1</tt> or greater than <tt>12</tt>).\n <li>A word that matches <tt>PM</tt>, ignoring case, adds <tt>12</tt>\n     to the hour (but the parse fails if an hour has not been\n     recognized or is less than <tt>1</tt> or greater than <tt>12</tt>).\n <li>Any word that matches any prefix of <tt>SUNDAY, MONDAY, TUESDAY,\n     WEDNESDAY, THURSDAY, FRIDAY</tt>, or <tt>SATURDAY</tt>, ignoring\n     case, is ignored. For example, <tt>sat, Friday, TUE</tt>, and\n     <tt>Thurs</tt> are ignored.\n <li>Otherwise, any word that matches any prefix of <tt>JANUARY,\n     FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,\n     OCTOBER, NOVEMBER</tt>, or <tt>DECEMBER</tt>, ignoring case, and\n     considering them in the order given here, is recognized as\n     specifying a month and is converted to a number (<tt>0</tt> to\n     <tt>11</tt>). For example, <tt>aug, Sept, april</tt>, and\n     <tt>NOV</tt> are recognized as months. So is <tt>Ma</tt>, which\n     is recognized as <tt>MARCH</tt>, not <tt>MAY</tt>.\n <li>Any word that matches <tt>GMT, UT</tt>, or <tt>UTC</tt>, ignoring\n     case, is treated as referring to UTC.\n <li>Any word that matches <tt>EST, CST, MST</tt>, or <tt>PST</tt>,\n     ignoring case, is recognized as referring to the time zone in\n     North America that is five, six, seven, or eight hours west of\n     Greenwich, respectively. Any word that matches <tt>EDT, CDT,\n     MDT</tt>, or <tt>PDT</tt>, ignoring case, is recognized as\n     referring to the same time zone, respectively, during daylight\n     saving time.</ul><p>\n Once the entire string s has been scanned, it is converted to a time\n result in one of two ways. If a time zone or time-zone offset has been\n recognized, then the year, month, day of month, hour, minute, and\n second are interpreted in UTC and then the time-zone offset is\n applied. Otherwise, the year, month, day of month, hour, minute, and\n second are interpreted in the local time zone.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "a string to be parsed as a date.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getYear",
                    "comment_text": "Returns a value that is the result of subtracting 1900 from the\n year that contains or begins with the instant in time represented\n by this <code>Date</code> object, as interpreted in the local\n time zone.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setYear",
                    "comment_text": "Sets the year of this <tt>Date</tt> object to be the specified\n value plus 1900. This <code>Date</code> object is modified so\n that it represents a point in time within the specified year,\n with the month, date, hour, minute, and second the same as\n before, as interpreted in the local time zone. (Of course, if\n the date was February 29, for example, and the year is set to a\n non-leap year, then the new date will be treated as if it were\n on March 1.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the year value.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMonth",
                    "comment_text": "Returns a number representing the month that contains or begins\n with the instant in time represented by this <tt>Date</tt> object.\n The value returned is between <code>0</code> and <code>11</code>,\n with the value <code>0</code> representing January.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMonth",
                    "comment_text": "Sets the month of this date to the specified value. This\n <tt>Date</tt> object is modified so that it represents a point\n in time within the specified month, with the year, date, hour,\n minute, and second the same as before, as interpreted in the\n local time zone. If the date was October 31, for example, and\n the month is set to June, then the new date will be treated as\n if it were on July 1, because June has only 30 days.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "month",
                            "comment_text": "the month value between 0-11.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDate",
                    "comment_text": "Returns the day of the month represented by this <tt>Date</tt> object.\n The value returned is between <code>1</code> and <code>31</code>\n representing the day of the month that contains or begins with the\n instant in time represented by this <tt>Date</tt> object, as\n interpreted in the local time zone.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDate",
                    "comment_text": "Sets the day of the month of this <tt>Date</tt> object to the\n specified value. This <tt>Date</tt> object is modified so that\n it represents a point in time within the specified day of the\n month, with the year, month, hour, minute, and second the same\n as before, as interpreted in the local time zone. If the date\n was April 30, for example, and the date is set to 31, then it\n will be treated as if it were on May 1, because April has only\n 30 days.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the day of the month value between 1-31.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDay",
                    "comment_text": "Returns the day of the week represented by this date. The\n returned value (<tt>0</tt> = Sunday, <tt>1</tt> = Monday,\n <tt>2</tt> = Tuesday, <tt>3</tt> = Wednesday, <tt>4</tt> =\n Thursday, <tt>5</tt> = Friday, <tt>6</tt> = Saturday)\n represents the day of the week that contains or begins with\n the instant in time represented by this <tt>Date</tt> object,\n as interpreted in the local time zone.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getHours",
                    "comment_text": "Returns the hour represented by this <tt>Date</tt> object. The\n returned value is a number (<tt>0</tt> through <tt>23</tt>)\n representing the hour within the day that contains or begins\n with the instant in time represented by this <tt>Date</tt>\n object, as interpreted in the local time zone.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setHours",
                    "comment_text": "Sets the hour of this <tt>Date</tt> object to the specified value.\n This <tt>Date</tt> object is modified so that it represents a point\n in time within the specified hour of the day, with the year, month,\n date, minute, and second the same as before, as interpreted in the\n local time zone.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "hours",
                            "comment_text": "the hour value.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMinutes",
                    "comment_text": "Returns the number of minutes past the hour represented by this date,\n as interpreted in the local time zone.\n The value returned is between <code>0</code> and <code>59</code>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMinutes",
                    "comment_text": "Sets the minutes of this <tt>Date</tt> object to the specified value.\n This <tt>Date</tt> object is modified so that it represents a point\n in time within the specified minute of the hour, with the year, month,\n date, hour, and second the same as before, as interpreted in the\n local time zone.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "minutes",
                            "comment_text": "the value of the minutes.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSeconds",
                    "comment_text": "Returns the number of seconds past the minute represented by this date.\n The value returned is between <code>0</code> and <code>61</code>. The\n values <code>60</code> and <code>61</code> can only occur on those\n Java Virtual Machines that take leap seconds into account.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSeconds",
                    "comment_text": "Sets the seconds of this <tt>Date</tt> to the specified value.\n This <tt>Date</tt> object is modified so that it represents a\n point in time within the specified second of the minute, with\n the year, month, date, hour, and minute the same as before, as\n interpreted in the local time zone.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "seconds",
                            "comment_text": "the seconds value.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTime",
                    "comment_text": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n represented by this <tt>Date</tt> object.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setTime",
                    "comment_text": "Sets this <code>Date</code> object to represent a point in time that is\n <code>time</code> milliseconds after January 1, 1970 00:00:00 GMT.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "the number of milliseconds.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "before",
                    "comment_text": "Tests if this date is before the specified date.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "when",
                            "comment_text": "a date.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "after",
                    "comment_text": "Tests if this date is after the specified date.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "when",
                            "comment_text": "a date.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares two dates for equality.\n The result is <code>true</code> if and only if the argument is\n not <code>null</code> and is a <code>Date</code> object that\n represents the same point in time, to the millisecond, as this object.\n <p>\n Thus, two <code>Date</code> objects are equal if and only if the\n <code>getTime</code> method returns the same <code>long</code>\n value for both.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object to compare with.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareTo",
                    "comment_text": "Compares two Dates for ordering.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "anotherDate",
                            "comment_text": "the <code>Date</code> to be compared.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code value for this object. The result is the\n exclusive OR of the two halves of the primitive <tt>long</tt>\n value returned by the {@link Date#getTime}\n method. That is, the hash code is the value of the expression:\n <blockquote><pre>\n (int)(this.getTime()^(this.getTime() >>> 32))</pre></blockquote>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Converts this <code>Date</code> object to a <code>String</code>\n of the form:\n <blockquote><pre>\n dow mon dd hh:mm:ss zzz yyyy</pre></blockquote>\n where:<ul>\n <li><tt>dow</tt> is the day of the week (<tt>Sun, Mon, Tue, Wed,\n     Thu, Fri, Sat</tt>).\n <li><tt>mon</tt> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun,\n     Jul, Aug, Sep, Oct, Nov, Dec</tt>).\n <li><tt>dd</tt> is the day of the month (<tt>01</tt> through\n     <tt>31</tt>), as two decimal digits.\n <li><tt>hh</tt> is the hour of the day (<tt>00</tt> through\n     <tt>23</tt>), as two decimal digits.\n <li><tt>mm</tt> is the minute within the hour (<tt>00</tt> through\n     <tt>59</tt>), as two decimal digits.\n <li><tt>ss</tt> is the second within the minute (<tt>00</tt> through\n     <tt>61</tt>, as two decimal digits.\n <li><tt>zzz</tt> is the time zone (and may reflect daylight saving\n     time). Standard time zone abbreviations include those\n     recognized by the method <tt>parse</tt>. If time zone\n     information is not available, then <tt>zzz</tt> is empty -\n     that is, it consists of no characters at all.\n <li><tt>yyyy</tt> is the year, as four decimal digits.\n </ul>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toLocaleString",
                    "comment_text": "Creates a string representation of this <tt>Date</tt> object in an\n implementation-dependent form. The intent is that the form should\n be familiar to the user of the Java application, wherever it may\n happen to be running. The intent is comparable to that of the\n \"<code>%c</code>\" format supported by the <code>strftime()</code>\n function of ISO&nbsp;C.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toGMTString",
                    "comment_text": "Creates a string representation of this <tt>Date</tt> object of\n the form:\n <blockquote<pre>\n d mon yyyy hh:mm:ss GMT</pre></blockquote>\n where:<ul>\n <li><i>d</i> is the day of the month (<tt>1</tt> through <tt>31</tt>),\n     as one or two decimal digits.\n <li><i>mon</i> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul,\n     Aug, Sep, Oct, Nov, Dec</tt>).\n <li><i>yyyy</i> is the year, as four decimal digits.\n <li><i>hh</i> is the hour of the day (<tt>00</tt> through <tt>23</tt>),\n     as two decimal digits.\n <li><i>mm</i> is the minute within the hour (<tt>00</tt> through\n     <tt>59</tt>), as two decimal digits.\n <li><i>ss</i> is the second within the minute (<tt>00</tt> through\n     <tt>61</tt>), as two decimal digits.\n <li><i>GMT</i> is exactly the ASCII letters \"<tt>GMT</tt>\" to indicate\n     Greenwich Mean Time.\n </ul><p>\n The result does not depend on the local time zone.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTimezoneOffset",
                    "comment_text": "Returns the offset, measured in minutes, for the local time zone\n relative to UTC that is appropriate for the time represented by\n this <code>Date</code> object.\n <p>\n For example, in Massachusetts, five time zones west of Greenwich:\n <blockquote><pre>\n new Date(96, 1, 14).getTimezoneOffset() returns 300</pre></blockquote>\n because on February 14, 1996, standard time (Eastern Standard Time)\n is in use, which is offset five hours from UTC; but:\n <blockquote><pre>\n new Date(96, 5, 1).getTimezoneOffset() returns 240</pre></blockquote>\n because on June 1, 1996, daylight saving time (Eastern Daylight Time)\n is in use, which is offset only four hours from UTC.<p>\n This method produces the same result as if it computed:\n <blockquote><pre>\n (this.getTime() - UTC(this.getYear(),\n                       this.getMonth(),\n                       this.getDate(),\n                       this.getHours(),\n                       this.getMinutes(),\n                       this.getSeconds())) / (60 * 1000)\n </pre></blockquote>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Currency",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "Represents a currency. Currencies are identified by their ISO 4217 currency\n codes. Visit the <a href=\"http://www.iso.org/iso/en/prods-services/popstds/currencycodes.html\">\n ISO web site</a> for more information, including a table of\n currency codes.\n <p>\n The class is designed so that there's never more than one\n <code>Currency</code> instance for any given currency. Therefore, there's\n no public constructor. You obtain a <code>Currency</code> instance using\n the <code>getInstance</code> methods.\n <p>\n Users can supersede the Java runtime currency data by creating a properties\n file named <code>&lt;JAVA_HOME&gt;/lib/currency.properties</code>.  The contents\n of the properties file are key/value pairs of the ISO 3166 country codes\n and the ISO 4217 currency data respectively.  The value part consists of\n three ISO 4217 values of a currency, i.e., an alphabetic code, a numeric\n code, and a minor unit.  Those three ISO 4217 values are separated by commas.\n The lines which start with '#'s are considered comment lines.  For example,\n <p>\n <code>\n #Sample currency properties<br>\n JP=JPZ,999,0\n </code>\n <p>\n will supersede the currency data for Japan.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getInstance",
                    "comment_text": "Returns the <code>Currency</code> instance for the given currency code.",
                    "return_type": "java.util.Currency",
                    "parameters": [
                        {
                            "name": "currencyCode",
                            "comment_text": "the ISO 4217 code of the currency",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInstance",
                    "comment_text": "Returns the <code>Currency</code> instance for the country of the\n given locale. The language and variant components of the locale\n are ignored. The result may vary over time, as countries change their\n currencies. For example, for the original member countries of the\n European Monetary Union, the method returns the old national currencies\n until December 31, 2001, and the Euro from January 1, 2002, local time\n of the respective countries.\n <p>\n The method returns <code>null</code> for territories that don't\n have a currency, such as Antarctica.",
                    "return_type": "java.util.Currency",
                    "parameters": [
                        {
                            "name": "locale",
                            "comment_text": "the locale for whose country a <code>Currency</code>\n instance is needed",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAvailableCurrencies",
                    "comment_text": "Gets the set of available currencies.  The returned set of currencies\n contains all of the available currencies, which may include currencies\n that represent obsolete ISO 4217 codes.  The set can be modified\n without affecting the available currencies in the runtime.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCurrencyCode",
                    "comment_text": "Gets the ISO 4217 currency code of this currency.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSymbol",
                    "comment_text": "Gets the symbol of this currency for the default locale.\n For example, for the US Dollar, the symbol is \"$\" if the default\n locale is the US, while for other locales it may be \"US$\". If no\n symbol can be determined, the ISO 4217 currency code is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSymbol",
                    "comment_text": "Gets the symbol of this currency for the specified locale.\n For example, for the US Dollar, the symbol is \"$\" if the specified\n locale is the US, while for other locales it may be \"US$\". If no\n symbol can be determined, the ISO 4217 currency code is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "locale",
                            "comment_text": "the locale for which a display name for this currency is\n needed",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDefaultFractionDigits",
                    "comment_text": "Gets the default number of fraction digits used with this currency.\n For example, the default number of fraction digits for the Euro is 2,\n while for the Japanese Yen it's 0.\n In the case of pseudo-currencies, such as IMF Special Drawing Rights,\n -1 is returned.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getNumericCode",
                    "comment_text": "Returns the ISO 4217 numeric code of this currency.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Gets the name that is suitable for displaying this currency for\n the default locale.  If there is no suitable display name found\n for the default locale, the ISO 4217 currency code is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Gets the name that is suitable for displaying this currency for\n the specified locale.  If there is no suitable display name found\n for the specified locale, the ISO 4217 currency code is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "locale",
                            "comment_text": "the locale for which a display name for this currency is\n needed",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the ISO 4217 currency code of this currency.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ConcurrentModificationException",
            "interfaces": [

            ],
            "superclass": "java.lang.RuntimeException",
            "comment_text": "This exception may be thrown by methods that have detected concurrent\n modification of an object when such modification is not permissible.\n <p>\n For example, it is not generally permissible for one thread to modify a Collection\n while another thread is iterating over it.  In general, the results of the\n iteration are undefined under these circumstances.  Some Iterator\n implementations (including those of all the general purpose collection implementations\n provided by the JRE) may choose to throw this exception if this behavior is\n detected.  Iterators that do this are known as <i>fail-fast</i> iterators,\n as they fail quickly and cleanly, rather that risking arbitrary,\n non-deterministic behavior at an undetermined time in the future.\n <p>\n Note that this exception does not always indicate that an object has\n been concurrently modified by a <i>different</i> thread.  If a single\n thread issues a sequence of method invocations that violates the\n contract of an object, the object may throw this exception.  For\n example, if a thread modifies a collection directly while it is\n iterating over the collection with a fail-fast iterator, the iterator\n will throw this exception.\n\n <p>Note that fail-fast behavior cannot be guaranteed as it is, generally\n speaking, impossible to make any hard guarantees in the presence of\n unsynchronized concurrent modification.  Fail-fast operations\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: <i>{@code ConcurrentModificationException}\n should be used only to detect bugs.</i>",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.Iterator",
                "java.util.ListIterator",
                "java.util.Vector",
                "java.util.LinkedList",
                "java.util.HashSet",
                "java.util.Hashtable",
                "java.util.TreeMap",
                "java.util.AbstractList"
            ],
            "constructors": [
                {
                    "name": "ConcurrentModificationException",
                    "comment_text": "Constructs a ConcurrentModificationException with no\n detail message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentModificationException",
                    "comment_text": "Constructs a {@code ConcurrentModificationException} with the\n specified detail message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message pertaining to this exception.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentModificationException",
                    "comment_text": "Constructs a new exception with the specified cause and a detail\n message of {@code (cause==null ? null : cause.toString())} (which\n typically contains the class and detail message of {@code cause}.",
                    "parameters": [
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).  (A {@code null} value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentModificationException",
                    "comment_text": "Constructs a new exception with the specified detail message and\n cause.\n\n <p>Note that the detail message associated with <code>cause</code> is\n <i>not</i> automatically incorporated in this exception's detail\n message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message (which is saved for later retrieval\n         by the {@link Throwable#getMessage()} method).",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).  (A {@code null} value\n         is permitted, and indicates that the cause is nonexistent or\n         unknown.)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.Comparator",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A comparison function, which imposes a <i>total ordering</i> on some\n collection of objects.  Comparators can be passed to a sort method (such\n as {@link Collections#sort(List,Comparator) Collections.sort} or {@link\n Arrays#sort(Object[],Comparator) Arrays.sort}) to allow precise control\n over the sort order.  Comparators can also be used to control the order of\n certain data structures (such as {@link SortedSet sorted sets} or {@link\n SortedMap sorted maps}), or to provide an ordering for collections of\n objects that don't have a {@link Comparable natural ordering}.<p>\n\n The ordering imposed by a comparator <tt>c</tt> on a set of elements\n <tt>S</tt> is said to be <i>consistent with equals</i> if and only if\n <tt>c.compare(e1, e2)==0</tt> has the same boolean value as\n <tt>e1.equals(e2)</tt> for every <tt>e1</tt> and <tt>e2</tt> in\n <tt>S</tt>.<p>\n\n Caution should be exercised when using a comparator capable of imposing an\n ordering inconsistent with equals to order a sorted set (or sorted map).\n Suppose a sorted set (or sorted map) with an explicit comparator <tt>c</tt>\n is used with elements (or keys) drawn from a set <tt>S</tt>.  If the\n ordering imposed by <tt>c</tt> on <tt>S</tt> is inconsistent with equals,\n the sorted set (or sorted map) will behave \"strangely.\"  In particular the\n sorted set (or sorted map) will violate the general contract for set (or\n map), which is defined in terms of <tt>equals</tt>.<p>\n\n For example, suppose one adds two elements {@code a} and {@code b} such that\n {@code (a.equals(b) && c.compare(a, b) != 0)}\n to an empty {@code TreeSet} with comparator {@code c}.\n The second {@code add} operation will return\n true (and the size of the tree set will increase) because {@code a} and\n {@code b} are not equivalent from the tree set's perspective, even though\n this is contrary to the specification of the\n {@link Set#add Set.add} method.<p>\n\n Note: It is generally a good idea for comparators to also implement\n <tt>java.io.Serializable</tt>, as they may be used as ordering methods in\n serializable data structures (like {@link TreeSet}, {@link TreeMap}).  In\n order for the data structure to serialize successfully, the comparator (if\n provided) must implement <tt>Serializable</tt>.<p>\n\n For the mathematically inclined, the <i>relation</i> that defines the\n <i>imposed ordering</i> that a given comparator <tt>c</tt> imposes on a\n given set of objects <tt>S</tt> is:<pre>\n       {(x, y) such that c.compare(x, y) &lt;= 0}.\n </pre> The <i>quotient</i> for this total order is:<pre>\n       {(x, y) such that c.compare(x, y) == 0}.\n </pre>\n\n It follows immediately from the contract for <tt>compare</tt> that the\n quotient is an <i>equivalence relation</i> on <tt>S</tt>, and that the\n imposed ordering is a <i>total order</i> on <tt>S</tt>.  When we say that\n the ordering imposed by <tt>c</tt> on <tt>S</tt> is <i>consistent with\n equals</i>, we mean that the quotient for the ordering is the equivalence\n relation defined by the objects' {@link Object#equals(Object)\n equals(Object)} method(s):<pre>\n     {(x, y) such that x.equals(y)}. </pre>\n\n <p>Unlike {@code Comparable}, a comparator may optionally permit\n comparison of null arguments, while maintaining the requirements for\n an equivalence relation.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.lang.Comparable",
                "java.io.Serializable"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "compare",
                    "comment_text": "Compares its two arguments for order.  Returns a negative integer,\n zero, or a positive integer as the first argument is less than, equal\n to, or greater than the second.<p>\n\n In the foregoing description, the notation\n <tt>sgn(</tt><i>expression</i><tt>)</tt> designates the mathematical\n <i>signum</i> function, which is defined to return one of <tt>-1</tt>,\n <tt>0</tt>, or <tt>1</tt> according to whether the value of\n <i>expression</i> is negative, zero or positive.<p>\n\n The implementor must ensure that <tt>sgn(compare(x, y)) ==\n -sgn(compare(y, x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This\n implies that <tt>compare(x, y)</tt> must throw an exception if and only\n if <tt>compare(y, x)</tt> throws an exception.)<p>\n\n The implementor must also ensure that the relation is transitive:\n <tt>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))</tt> implies\n <tt>compare(x, z)&gt;0</tt>.<p>\n\n Finally, the implementor must ensure that <tt>compare(x, y)==0</tt>\n implies that <tt>sgn(compare(x, z))==sgn(compare(y, z))</tt> for all\n <tt>z</tt>.<p>\n\n It is generally the case, but <i>not</i> strictly required that\n <tt>(compare(x, y)==0) == (x.equals(y))</tt>.  Generally speaking,\n any comparator that violates this condition should clearly indicate\n this fact.  The recommended language is \"Note: this comparator\n imposes orderings that are inconsistent with equals.\"",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o1",
                            "comment_text": "the first object to be compared.",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "o2",
                            "comment_text": "the second object to be compared.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Indicates whether some other object is &quot;equal to&quot; this\n comparator.  This method must obey the general contract of\n {@link Object#equals(Object)}.  Additionally, this method can return\n <tt>true</tt> <i>only</i> if the specified object is also a comparator\n and it imposes the same ordering as this comparator.  Thus,\n <code>comp1.equals(comp2)</code> implies that <tt>sgn(comp1.compare(o1,\n o2))==sgn(comp2.compare(o1, o2))</tt> for every object reference\n <tt>o1</tt> and <tt>o2</tt>.<p>\n\n Note that it is <i>always</i> safe <i>not</i> to override\n <tt>Object.equals(Object)</tt>.  However, overriding this method may,\n in some cases, improve performance by allowing programs to determine\n that two distinct comparators impose the same order.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the reference object with which to compare.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Collections",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class consists exclusively of static methods that operate on or return\n collections.  It contains polymorphic algorithms that operate on\n collections, \"wrappers\", which return a new collection backed by a\n specified collection, and a few other odds and ends.\n\n <p>The methods of this class all throw a <tt>NullPointerException</tt>\n if the collections or class objects provided to them are null.\n\n <p>The documentation for the polymorphic algorithms contained in this class\n generally includes a brief description of the <i>implementation</i>.  Such\n descriptions should be regarded as <i>implementation notes</i>, rather than\n parts of the <i>specification</i>.  Implementors should feel free to\n substitute other algorithms, so long as the specification itself is adhered\n to.  (For example, the algorithm used by <tt>sort</tt> does not have to be\n a mergesort, but it does have to be <i>stable</i>.)\n\n <p>The \"destructive\" algorithms contained in this class, that is, the\n algorithms that modify the collection on which they operate, are specified\n to throw <tt>UnsupportedOperationException</tt> if the collection does not\n support the appropriate mutation primitive(s), such as the <tt>set</tt>\n method.  These algorithms may, but are not required to, throw this\n exception if an invocation would have no effect on the collection.  For\n example, invoking the <tt>sort</tt> method on an unmodifiable list that is\n already sorted may or may not throw <tt>UnsupportedOperationException</tt>.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.Set",
                "java.util.List",
                "java.util.Map"
            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "EMPTY_SET",
                    "comment_text": "The empty set (immutable).  This set is serializable.",
                    "type": "java.util.Set"
                },
                {
                    "name": "EMPTY_LIST",
                    "comment_text": "The empty list (immutable).  This list is serializable.",
                    "type": "java.util.List"
                },
                {
                    "name": "EMPTY_MAP",
                    "comment_text": "The empty map (immutable).  This map is serializable.",
                    "type": "java.util.Map"
                }
            ],
            "methods": [
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified list into ascending order, according to the\n {@linkplain Comparable natural ordering} of its elements.\n All elements in the list must implement the {@link Comparable}\n interface.  Furthermore, all elements in the list must be\n <i>mutually comparable</i> (that is, {@code e1.compareTo(e2)}\n must not throw a {@code ClassCastException} for any elements\n {@code e1} and {@code e2} in the list).\n\n <p>This sort is guaranteed to be <i>stable</i>:  equal elements will\n not be reordered as a result of the sort.\n\n <p>The specified list must be modifiable, but need not be resizable.\n\n <p>Implementation note: This implementation is a stable, adaptive,\n iterative mergesort that requires far fewer than n lg(n) comparisons\n when the input array is partially sorted, while offering the\n performance of a traditional mergesort when the input array is\n randomly ordered.  If the input array is nearly sorted, the\n implementation requires approximately n comparisons.  Temporary\n storage requirements vary from a small constant for nearly sorted\n input arrays to n/2 object references for randomly ordered input\n arrays.\n\n <p>The implementation takes equal advantage of ascending and\n descending order in its input array, and can take advantage of\n ascending and descending order in different parts of the same\n input array.  It is well-suited to merging two or more sorted arrays:\n simply concatenate the arrays and sort the resulting array.\n\n <p>The implementation was adapted from Tim Peters's list sort for Python\n (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n TimSort</a>).  It uses techiques from Peter McIlroy's \"Optimistic\n Sorting and Information Theoretic Complexity\", in Proceedings of the\n Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n January 1993.\n\n <p>This implementation dumps the specified list into an array, sorts\n the array, and iterates over the list resetting each element\n from the corresponding position in the array.  This avoids the\n n<sup>2</sup> log(n) performance that would result from attempting\n to sort a linked list in place.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be sorted.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified list according to the order induced by the\n specified comparator.  All elements in the list must be <i>mutually\n comparable</i> using the specified comparator (that is,\n {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}\n for any elements {@code e1} and {@code e2} in the list).\n\n <p>This sort is guaranteed to be <i>stable</i>:  equal elements will\n not be reordered as a result of the sort.\n\n <p>The specified list must be modifiable, but need not be resizable.\n\n <p>Implementation note: This implementation is a stable, adaptive,\n iterative mergesort that requires far fewer than n lg(n) comparisons\n when the input array is partially sorted, while offering the\n performance of a traditional mergesort when the input array is\n randomly ordered.  If the input array is nearly sorted, the\n implementation requires approximately n comparisons.  Temporary\n storage requirements vary from a small constant for nearly sorted\n input arrays to n/2 object references for randomly ordered input\n arrays.\n\n <p>The implementation takes equal advantage of ascending and\n descending order in its input array, and can take advantage of\n ascending and descending order in different parts of the same\n input array.  It is well-suited to merging two or more sorted arrays:\n simply concatenate the arrays and sort the resulting array.\n\n <p>The implementation was adapted from Tim Peters's list sort for Python\n (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n TimSort</a>).  It uses techiques from Peter McIlroy's \"Optimistic\n Sorting and Information Theoretic Complexity\", in Proceedings of the\n Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n January 1993.\n\n <p>This implementation dumps the specified list into an array, sorts\n the array, and iterates over the list resetting each element\n from the corresponding position in the array.  This avoids the\n n<sup>2</sup> log(n) performance that would result from attempting\n to sort a linked list in place.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be sorted.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "c",
                            "comment_text": "the comparator to determine the order of the list.  A\n        {@code null} value indicates that the elements' <i>natural\n        ordering</i> should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified list for the specified object using the binary\n search algorithm.  The list must be sorted into ascending order\n according to the {@linkplain Comparable natural ordering} of its\n elements (as by the {@link #sort(List)} method) prior to making this\n call.  If it is not sorted, the results are undefined.  If the list\n contains multiple elements equal to the specified object, there is no\n guarantee which one will be found.\n\n <p>This method runs in log(n) time for a \"random access\" list (which\n provides near-constant-time positional access).  If the specified list\n does not implement the {@link RandomAccess} interface and is large,\n this method will do an iterator-based binary search that performs\n O(n) link traversals and O(log n) element comparisons.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be searched.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "key",
                            "comment_text": "the key to be searched for.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified list for the specified object using the binary\n search algorithm.  The list must be sorted into ascending order\n according to the specified comparator (as by the\n {@link #sort(List, Comparator) sort(List, Comparator)}\n method), prior to making this call.  If it is\n not sorted, the results are undefined.  If the list contains multiple\n elements equal to the specified object, there is no guarantee which one\n will be found.\n\n <p>This method runs in log(n) time for a \"random access\" list (which\n provides near-constant-time positional access).  If the specified list\n does not implement the {@link RandomAccess} interface and is large,\n this method will do an iterator-based binary search that performs\n O(n) link traversals and O(log n) element comparisons.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be searched.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "key",
                            "comment_text": "the key to be searched for.",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "c",
                            "comment_text": "the comparator by which the list is ordered.\n         A <tt>null</tt> value indicates that the elements'\n         {@linkplain Comparable natural ordering} should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reverse",
                    "comment_text": "Reverses the order of the elements in the specified list.<p>\n\n This method runs in linear time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list whose elements are to be reversed.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shuffle",
                    "comment_text": "Randomly permutes the specified list using a default source of\n randomness.  All permutations occur with approximately equal\n likelihood.<p>\n\n The hedge \"approximately\" is used in the foregoing description because\n default source of randomness is only approximately an unbiased source\n of independently chosen bits. If it were a perfect source of randomly\n chosen bits, then the algorithm would choose permutations with perfect\n uniformity.<p>\n\n This implementation traverses the list backwards, from the last element\n up to the second, repeatedly swapping a randomly selected element into\n the \"current position\".  Elements are randomly selected from the\n portion of the list that runs from the first element to the current\n position, inclusive.<p>\n\n This method runs in linear time.  If the specified list does not\n implement the {@link RandomAccess} interface and is large, this\n implementation dumps the specified list into an array before shuffling\n it, and dumps the shuffled array back into the list.  This avoids the\n quadratic behavior that would result from shuffling a \"sequential\n access\" list in place.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be shuffled.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shuffle",
                    "comment_text": "Randomly permute the specified list using the specified source of\n randomness.  All permutations occur with equal likelihood\n assuming that the source of randomness is fair.<p>\n\n This implementation traverses the list backwards, from the last element\n up to the second, repeatedly swapping a randomly selected element into\n the \"current position\".  Elements are randomly selected from the\n portion of the list that runs from the first element to the current\n position, inclusive.<p>\n\n This method runs in linear time.  If the specified list does not\n implement the {@link RandomAccess} interface and is large, this\n implementation dumps the specified list into an array before shuffling\n it, and dumps the shuffled array back into the list.  This avoids the\n quadratic behavior that would result from shuffling a \"sequential\n access\" list in place.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be shuffled.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "rnd",
                            "comment_text": "the source of randomness to use to shuffle the list.",
                            "type": "java.util.Random"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "swap",
                    "comment_text": "Swaps the elements at the specified positions in the specified list.\n (If the specified positions are equal, invoking this method leaves\n the list unchanged.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "The list in which to swap elements.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "i",
                            "comment_text": "the index of one element to be swapped.",
                            "type": "int"
                        },
                        {
                            "name": "j",
                            "comment_text": "the index of the other element to be swapped.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Replaces all of the elements of the specified list with the specified\n element. <p>\n\n This method runs in linear time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be filled with the specified element.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "obj",
                            "comment_text": "The element with which to fill the specified list.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copy",
                    "comment_text": "Copies all of the elements from one list into another.  After the\n operation, the index of each copied element in the destination list\n will be identical to its index in the source list.  The destination\n list must be at least as long as the source list.  If it is longer, the\n remaining elements in the destination list are unaffected. <p>\n\n This method runs in linear time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "dest",
                            "comment_text": "The destination list.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "src",
                            "comment_text": "The source list.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "min",
                    "comment_text": "Returns the minimum element of the given collection, according to the\n <i>natural ordering</i> of its elements.  All elements in the\n collection must implement the <tt>Comparable</tt> interface.\n Furthermore, all elements in the collection must be <i>mutually\n comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a\n <tt>ClassCastException</tt> for any elements <tt>e1</tt> and\n <tt>e2</tt> in the collection).<p>\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "coll",
                            "comment_text": "the collection whose minimum element is to be determined.",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "min",
                    "comment_text": "Returns the minimum element of the given collection, according to the\n order induced by the specified comparator.  All elements in the\n collection must be <i>mutually comparable</i> by the specified\n comparator (that is, <tt>comp.compare(e1, e2)</tt> must not throw a\n <tt>ClassCastException</tt> for any elements <tt>e1</tt> and\n <tt>e2</tt> in the collection).<p>\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "coll",
                            "comment_text": "the collection whose minimum element is to be determined.",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "comp",
                            "comment_text": "the comparator with which to determine the minimum element.\n         A <tt>null</tt> value indicates that the elements' <i>natural\n         ordering</i> should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "max",
                    "comment_text": "Returns the maximum element of the given collection, according to the\n <i>natural ordering</i> of its elements.  All elements in the\n collection must implement the <tt>Comparable</tt> interface.\n Furthermore, all elements in the collection must be <i>mutually\n comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a\n <tt>ClassCastException</tt> for any elements <tt>e1</tt> and\n <tt>e2</tt> in the collection).<p>\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "coll",
                            "comment_text": "the collection whose maximum element is to be determined.",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "max",
                    "comment_text": "Returns the maximum element of the given collection, according to the\n order induced by the specified comparator.  All elements in the\n collection must be <i>mutually comparable</i> by the specified\n comparator (that is, <tt>comp.compare(e1, e2)</tt> must not throw a\n <tt>ClassCastException</tt> for any elements <tt>e1</tt> and\n <tt>e2</tt> in the collection).<p>\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "coll",
                            "comment_text": "the collection whose maximum element is to be determined.",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "comp",
                            "comment_text": "the comparator with which to determine the maximum element.\n         A <tt>null</tt> value indicates that the elements' <i>natural\n        ordering</i> should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "rotate",
                    "comment_text": "Rotates the elements in the specified list by the specified distance.\n After calling this method, the element at index <tt>i</tt> will be\n the element previously at index <tt>(i - distance)</tt> mod\n <tt>list.size()</tt>, for all values of <tt>i</tt> between <tt>0</tt>\n and <tt>list.size()-1</tt>, inclusive.  (This method has no effect on\n the size of the list.)\n\n <p>For example, suppose <tt>list</tt> comprises<tt> [t, a, n, k, s]</tt>.\n After invoking <tt>Collections.rotate(list, 1)</tt> (or\n <tt>Collections.rotate(list, -4)</tt>), <tt>list</tt> will comprise\n <tt>[s, t, a, n, k]</tt>.\n\n <p>Note that this method can usefully be applied to sublists to\n move one or more elements within a list while preserving the\n order of the remaining elements.  For example, the following idiom\n moves the element at index <tt>j</tt> forward to position\n <tt>k</tt> (which must be greater than or equal to <tt>j</tt>):\n <pre>\n     Collections.rotate(list.subList(j, k+1), -1);\n </pre>\n To make this concrete, suppose <tt>list</tt> comprises\n <tt>[a, b, c, d, e]</tt>.  To move the element at index <tt>1</tt>\n (<tt>b</tt>) forward two positions, perform the following invocation:\n <pre>\n     Collections.rotate(l.subList(1, 4), -1);\n </pre>\n The resulting list is <tt>[a, c, d, b, e]</tt>.\n\n <p>To move more than one element forward, increase the absolute value\n of the rotation distance.  To move elements backward, use a positive\n shift distance.\n\n <p>If the specified list is small or implements the {@link\n RandomAccess} interface, this implementation exchanges the first\n element into the location it should go, and then repeatedly exchanges\n the displaced element into the location it should go until a displaced\n element is swapped into the first element.  If necessary, the process\n is repeated on the second and successive elements, until the rotation\n is complete.  If the specified list is large and doesn't implement the\n <tt>RandomAccess</tt> interface, this implementation breaks the\n list into two sublist views around index <tt>-distance mod size</tt>.\n Then the {@link #reverse(List)} method is invoked on each sublist view,\n and finally it is invoked on the entire list.  For a more complete\n description of both algorithms, see Section 2.3 of Jon Bentley's\n <i>Programming Pearls</i> (Addison-Wesley, 1986).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be rotated.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "distance",
                            "comment_text": "the distance to rotate the list.  There are no\n        constraints on this value; it may be zero, negative, or\n        greater than <tt>list.size()</tt>.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replaceAll",
                    "comment_text": "Replaces all occurrences of one specified value in a list with another.\n More formally, replaces with <tt>newVal</tt> each element <tt>e</tt>\n in <tt>list</tt> such that\n <tt>(oldVal==null ? e==null : oldVal.equals(e))</tt>.\n (This method has no effect on the size of the list.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list in which replacement is to occur.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "oldVal",
                            "comment_text": "the old value to be replaced.",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newVal",
                            "comment_text": "the new value with which <tt>oldVal</tt> is to be\n        replaced.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOfSubList",
                    "comment_text": "Returns the starting position of the first occurrence of the specified\n target list within the specified source list, or -1 if there is no\n such occurrence.  More formally, returns the lowest index <tt>i</tt>\n such that <tt>source.subList(i, i+target.size()).equals(target)</tt>,\n or -1 if there is no such index.  (Returns -1 if\n <tt>target.size() > source.size()</tt>.)\n\n <p>This implementation uses the \"brute force\" technique of scanning\n over the source list, looking for a match with the target at each\n location in turn.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "the list in which to search for the first occurrence\n        of <tt>target</tt>.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "target",
                            "comment_text": "the list to search for as a subList of <tt>source</tt>.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOfSubList",
                    "comment_text": "Returns the starting position of the last occurrence of the specified\n target list within the specified source list, or -1 if there is no such\n occurrence.  More formally, returns the highest index <tt>i</tt>\n such that <tt>source.subList(i, i+target.size()).equals(target)</tt>,\n or -1 if there is no such index.  (Returns -1 if\n <tt>target.size() > source.size()</tt>.)\n\n <p>This implementation uses the \"brute force\" technique of iterating\n over the source list, looking for a match with the target at each\n location in turn.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "source",
                            "comment_text": "the list in which to search for the last occurrence\n        of <tt>target</tt>.",
                            "type": "java.util.List"
                        },
                        {
                            "name": "target",
                            "comment_text": "the list to search for as a subList of <tt>source</tt>.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unmodifiableCollection",
                    "comment_text": "Returns an unmodifiable view of the specified collection.  This method\n allows modules to provide users with \"read-only\" access to internal\n collections.  Query operations on the returned collection \"read through\"\n to the specified collection, and attempts to modify the returned\n collection, whether direct or via its iterator, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned collection does <i>not</i> pass the hashCode and equals\n operations through to the backing collection, but relies on\n <tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods.  This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.<p>\n\n The returned collection will be serializable if the specified collection\n is serializable.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection for which an unmodifiable view is to be\n         returned.",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unmodifiableSet",
                    "comment_text": "Returns an unmodifiable view of the specified set.  This method allows\n modules to provide users with \"read-only\" access to internal sets.\n Query operations on the returned set \"read through\" to the specified\n set, and attempts to modify the returned set, whether direct or via its\n iterator, result in an <tt>UnsupportedOperationException</tt>.<p>\n\n The returned set will be serializable if the specified set\n is serializable.",
                    "return_type": "java.util.Set",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the set for which an unmodifiable view is to be returned.",
                            "type": "java.util.Set"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unmodifiableSortedSet",
                    "comment_text": "Returns an unmodifiable view of the specified sorted set.  This method\n allows modules to provide users with \"read-only\" access to internal\n sorted sets.  Query operations on the returned sorted set \"read\n through\" to the specified sorted set.  Attempts to modify the returned\n sorted set, whether direct, via its iterator, or via its\n <tt>subSet</tt>, <tt>headSet</tt>, or <tt>tailSet</tt> views, result in\n an <tt>UnsupportedOperationException</tt>.<p>\n\n The returned sorted set will be serializable if the specified sorted set\n is serializable.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the sorted set for which an unmodifiable view is to be\n        returned.",
                            "type": "java.util.SortedSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unmodifiableList",
                    "comment_text": "Returns an unmodifiable view of the specified list.  This method allows\n modules to provide users with \"read-only\" access to internal\n lists.  Query operations on the returned list \"read through\" to the\n specified list, and attempts to modify the returned list, whether\n direct or via its iterator, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned list will be serializable if the specified list\n is serializable. Similarly, the returned list will implement\n {@link RandomAccess} if the specified list does.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list for which an unmodifiable view is to be returned.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unmodifiableMap",
                    "comment_text": "Returns an unmodifiable view of the specified map.  This method\n allows modules to provide users with \"read-only\" access to internal\n maps.  Query operations on the returned map \"read through\"\n to the specified map, and attempts to modify the returned\n map, whether direct or via its collection views, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned map will be serializable if the specified map\n is serializable.",
                    "return_type": "java.util.Map",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map for which an unmodifiable view is to be returned.",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unmodifiableSortedMap",
                    "comment_text": "Returns an unmodifiable view of the specified sorted map.  This method\n allows modules to provide users with \"read-only\" access to internal\n sorted maps.  Query operations on the returned sorted map \"read through\"\n to the specified sorted map.  Attempts to modify the returned\n sorted map, whether direct, via its collection views, or via its\n <tt>subMap</tt>, <tt>headMap</tt>, or <tt>tailMap</tt> views, result in\n an <tt>UnsupportedOperationException</tt>.<p>\n\n The returned sorted map will be serializable if the specified sorted map\n is serializable.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the sorted map for which an unmodifiable view is to be\n        returned.",
                            "type": "java.util.SortedMap"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "synchronizedCollection",
                    "comment_text": "Returns a synchronized (thread-safe) collection backed by the specified\n collection.  In order to guarantee serial access, it is critical that\n <strong>all</strong> access to the backing collection is accomplished\n through the returned collection.<p>\n\n It is imperative that the user manually synchronize on the returned\n collection when iterating over it:\n <pre>\n  Collection c = Collections.synchronizedCollection(myCollection);\n     ...\n  synchronized (c) {\n      Iterator i = c.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n         foo(i.next());\n  }\n </pre>\n Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned collection does <i>not</i> pass the <tt>hashCode</tt>\n and <tt>equals</tt> operations through to the backing collection, but\n relies on <tt>Object</tt>'s equals and hashCode methods.  This is\n necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.<p>\n\n The returned collection will be serializable if the specified collection\n is serializable.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection to be \"wrapped\" in a synchronized collection.",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "synchronizedSet",
                    "comment_text": "Returns a synchronized (thread-safe) set backed by the specified\n set.  In order to guarantee serial access, it is critical that\n <strong>all</strong> access to the backing set is accomplished\n through the returned set.<p>\n\n It is imperative that the user manually synchronize on the returned\n set when iterating over it:\n <pre>\n  Set s = Collections.synchronizedSet(new HashSet());\n      ...\n  synchronized (s) {\n      Iterator i = s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned set will be serializable if the specified set is\n serializable.",
                    "return_type": "java.util.Set",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the set to be \"wrapped\" in a synchronized set.",
                            "type": "java.util.Set"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "synchronizedSortedSet",
                    "comment_text": "Returns a synchronized (thread-safe) sorted set backed by the specified\n sorted set.  In order to guarantee serial access, it is critical that\n <strong>all</strong> access to the backing sorted set is accomplished\n through the returned sorted set (or its views).<p>\n\n It is imperative that the user manually synchronize on the returned\n sorted set when iterating over it or any of its <tt>subSet</tt>,\n <tt>headSet</tt>, or <tt>tailSet</tt> views.\n <pre>\n  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());\n      ...\n  synchronized (s) {\n      Iterator i = s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n or:\n <pre>\n  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());\n  SortedSet s2 = s.headSet(foo);\n      ...\n  synchronized (s) {  // Note: s, not s2!!!\n      Iterator i = s2.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned sorted set will be serializable if the specified\n sorted set is serializable.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the sorted set to be \"wrapped\" in a synchronized sorted set.",
                            "type": "java.util.SortedSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "synchronizedList",
                    "comment_text": "Returns a synchronized (thread-safe) list backed by the specified\n list.  In order to guarantee serial access, it is critical that\n <strong>all</strong> access to the backing list is accomplished\n through the returned list.<p>\n\n It is imperative that the user manually synchronize on the returned\n list when iterating over it:\n <pre>\n  List list = Collections.synchronizedList(new ArrayList());\n      ...\n  synchronized (list) {\n      Iterator i = list.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned list will be serializable if the specified list is\n serializable.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list to be \"wrapped\" in a synchronized list.",
                            "type": "java.util.List"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "synchronizedMap",
                    "comment_text": "Returns a synchronized (thread-safe) map backed by the specified\n map.  In order to guarantee serial access, it is critical that\n <strong>all</strong> access to the backing map is accomplished\n through the returned map.<p>\n\n It is imperative that the user manually synchronize on the returned\n map when iterating over any of its collection views:\n <pre>\n  Map m = Collections.synchronizedMap(new HashMap());\n      ...\n  Set s = m.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned map will be serializable if the specified map is\n serializable.",
                    "return_type": "java.util.Map",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map to be \"wrapped\" in a synchronized map.",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "synchronizedSortedMap",
                    "comment_text": "Returns a synchronized (thread-safe) sorted map backed by the specified\n sorted map.  In order to guarantee serial access, it is critical that\n <strong>all</strong> access to the backing sorted map is accomplished\n through the returned sorted map (or its views).<p>\n\n It is imperative that the user manually synchronize on the returned\n sorted map when iterating over any of its collection views, or the\n collections views of any of its <tt>subMap</tt>, <tt>headMap</tt> or\n <tt>tailMap</tt> views.\n <pre>\n  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());\n      ...\n  Set s = m.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n or:\n <pre>\n  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());\n  SortedMap m2 = m.subMap(foo, bar);\n      ...\n  Set s2 = m2.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not m2 or s2!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n </pre>\n Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned sorted map will be serializable if the specified\n sorted map is serializable.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the sorted map to be \"wrapped\" in a synchronized sorted map.",
                            "type": "java.util.SortedMap"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkedCollection",
                    "comment_text": "Returns a dynamically typesafe view of the specified collection.\n Any attempt to insert an element of the wrong type will result in an\n immediate {@link ClassCastException}.  Assuming a collection\n contains no incorrectly typed elements prior to the time a\n dynamically typesafe view is generated, and that all subsequent\n access to the collection takes place through the view, it is\n <i>guaranteed</i> that the collection cannot contain an incorrectly\n typed element.\n\n <p>The generics mechanism in the language provides compile-time\n (static) type checking, but it is possible to defeat this mechanism\n with unchecked casts.  Usually this is not a problem, as the compiler\n issues warnings on all such unchecked operations.  There are, however,\n times when static type checking alone is not sufficient.  For example,\n suppose a collection is passed to a third-party library and it is\n imperative that the library code not corrupt the collection by\n inserting an element of the wrong type.\n\n <p>Another use of dynamically typesafe views is debugging.  Suppose a\n program fails with a {@code ClassCastException}, indicating that an\n incorrectly typed element was put into a parameterized collection.\n Unfortunately, the exception can occur at any time after the erroneous\n element is inserted, so it typically provides little or no information\n as to the real source of the problem.  If the problem is reproducible,\n one can quickly determine its source by temporarily modifying the\n program to wrap the collection with a dynamically typesafe view.\n For example, this declaration:\n  <pre> {@code\n     Collection<String> c = new HashSet<String>();\n }</pre>\n may be replaced temporarily by this one:\n  <pre> {@code\n     Collection<String> c = Collections.checkedCollection(\n         new HashSet<String>(), String.class);\n }</pre>\n Running the program again will cause it to fail at the point where\n an incorrectly typed element is inserted into the collection, clearly\n identifying the source of the problem.  Once the problem is fixed, the\n modified declaration may be reverted back to the original.\n\n <p>The returned collection does <i>not</i> pass the hashCode and equals\n operations through to the backing collection, but relies on\n {@code Object}'s {@code equals} and {@code hashCode} methods.  This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.\n\n <p>The returned collection will be serializable if the specified\n collection is serializable.\n\n <p>Since {@code null} is considered to be a value of any reference\n type, the returned collection permits insertion of null elements\n whenever the backing collection does.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection for which a dynamically typesafe view is to be\n          returned",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "type",
                            "comment_text": "the type of element that {@code c} is permitted to hold",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkedSet",
                    "comment_text": "Returns a dynamically typesafe view of the specified set.\n Any attempt to insert an element of the wrong type will result in\n an immediate {@link ClassCastException}.  Assuming a set contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the set\n takes place through the view, it is <i>guaranteed</i> that the\n set cannot contain an incorrectly typed element.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection\n checkedCollection} method.\n\n <p>The returned set will be serializable if the specified set is\n serializable.\n\n <p>Since {@code null} is considered to be a value of any reference\n type, the returned set permits insertion of null elements whenever\n the backing set does.",
                    "return_type": "java.util.Set",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the set for which a dynamically typesafe view is to be\n          returned",
                            "type": "java.util.Set"
                        },
                        {
                            "name": "type",
                            "comment_text": "the type of element that {@code s} is permitted to hold",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkedSortedSet",
                    "comment_text": "Returns a dynamically typesafe view of the specified sorted set.\n Any attempt to insert an element of the wrong type will result in an\n immediate {@link ClassCastException}.  Assuming a sorted set\n contains no incorrectly typed elements prior to the time a\n dynamically typesafe view is generated, and that all subsequent\n access to the sorted set takes place through the view, it is\n <i>guaranteed</i> that the sorted set cannot contain an incorrectly\n typed element.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection\n checkedCollection} method.\n\n <p>The returned sorted set will be serializable if the specified sorted\n set is serializable.\n\n <p>Since {@code null} is considered to be a value of any reference\n type, the returned sorted set permits insertion of null elements\n whenever the backing sorted set does.",
                    "return_type": "java.util.SortedSet",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the sorted set for which a dynamically typesafe view is to be\n          returned",
                            "type": "java.util.SortedSet"
                        },
                        {
                            "name": "type",
                            "comment_text": "the type of element that {@code s} is permitted to hold",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkedList",
                    "comment_text": "Returns a dynamically typesafe view of the specified list.\n Any attempt to insert an element of the wrong type will result in\n an immediate {@link ClassCastException}.  Assuming a list contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the list\n takes place through the view, it is <i>guaranteed</i> that the\n list cannot contain an incorrectly typed element.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection\n checkedCollection} method.\n\n <p>The returned list will be serializable if the specified list\n is serializable.\n\n <p>Since {@code null} is considered to be a value of any reference\n type, the returned list permits insertion of null elements whenever\n the backing list does.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "list",
                            "comment_text": "the list for which a dynamically typesafe view is to be\n             returned",
                            "type": "java.util.List"
                        },
                        {
                            "name": "type",
                            "comment_text": "the type of element that {@code list} is permitted to hold",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkedMap",
                    "comment_text": "Returns a dynamically typesafe view of the specified map.\n Any attempt to insert a mapping whose key or value have the wrong\n type will result in an immediate {@link ClassCastException}.\n Similarly, any attempt to modify the value currently associated with\n a key will result in an immediate {@link ClassCastException},\n whether the modification is attempted directly through the map\n itself, or through a {@link Map.Entry} instance obtained from the\n map's {@link Map#entrySet() entry set} view.\n\n <p>Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is <i>guaranteed</i> that the\n map cannot contain an incorrectly typed key or value.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection\n checkedCollection} method.\n\n <p>The returned map will be serializable if the specified map is\n serializable.\n\n <p>Since {@code null} is considered to be a value of any reference\n type, the returned map permits insertion of null keys or values\n whenever the backing map does.",
                    "return_type": "java.util.Map",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map for which a dynamically typesafe view is to be\n          returned",
                            "type": "java.util.Map"
                        },
                        {
                            "name": "keyType",
                            "comment_text": "the type of key that {@code m} is permitted to hold",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "valueType",
                            "comment_text": "the type of value that {@code m} is permitted to hold",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkedSortedMap",
                    "comment_text": "Returns a dynamically typesafe view of the specified sorted map.\n Any attempt to insert a mapping whose key or value have the wrong\n type will result in an immediate {@link ClassCastException}.\n Similarly, any attempt to modify the value currently associated with\n a key will result in an immediate {@link ClassCastException},\n whether the modification is attempted directly through the map\n itself, or through a {@link Map.Entry} instance obtained from the\n map's {@link Map#entrySet() entry set} view.\n\n <p>Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is <i>guaranteed</i> that the\n map cannot contain an incorrectly typed key or value.\n\n <p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection\n checkedCollection} method.\n\n <p>The returned map will be serializable if the specified map is\n serializable.\n\n <p>Since {@code null} is considered to be a value of any reference\n type, the returned map permits insertion of null keys or values\n whenever the backing map does.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map for which a dynamically typesafe view is to be\n          returned",
                            "type": "java.util.SortedMap"
                        },
                        {
                            "name": "keyType",
                            "comment_text": "the type of key that {@code m} is permitted to hold",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "valueType",
                            "comment_text": "the type of value that {@code m} is permitted to hold",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "emptyIterator",
                    "comment_text": "Returns an iterator that has no elements.  More precisely,\n\n <ul compact>\n\n <li>{@link Iterator#hasNext hasNext} always returns {@code\n false}.\n\n <li>{@link Iterator#next next} always throws {@link\n NoSuchElementException}.\n\n <li>{@link Iterator#remove remove} always throws {@link\n IllegalStateException}.\n\n </ul>\n\n <p>Implementations of this method are permitted, but not\n required, to return the same object from multiple invocations.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "emptyListIterator",
                    "comment_text": "Returns a list iterator that has no elements.  More precisely,\n\n <ul compact>\n\n <li>{@link Iterator#hasNext hasNext} and {@link\n ListIterator#hasPrevious hasPrevious} always return {@code\n false}.\n\n <li>{@link Iterator#next next} and {@link ListIterator#previous\n previous} always throw {@link NoSuchElementException}.\n\n <li>{@link Iterator#remove remove} and {@link ListIterator#set\n set} always throw {@link IllegalStateException}.\n\n <li>{@link ListIterator#add add} always throws {@link\n UnsupportedOperationException}.\n\n <li>{@link ListIterator#nextIndex nextIndex} always returns\n {@code 0} .\n\n <li>{@link ListIterator#previousIndex previousIndex} always\n returns {@code -1}.\n\n </ul>\n\n <p>Implementations of this method are permitted, but not\n required, to return the same object from multiple invocations.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "emptyEnumeration",
                    "comment_text": "Returns an enumeration that has no elements.  More precisely,\n\n <ul compact>\n\n <li>{@link Enumeration#hasMoreElements hasMoreElements} always\n returns {@code false}.\n\n <li> {@link Enumeration#nextElement nextElement} always throws\n {@link NoSuchElementException}.\n\n </ul>\n\n <p>Implementations of this method are permitted, but not\n required, to return the same object from multiple invocations.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "emptySet",
                    "comment_text": "Returns the empty set (immutable).  This set is serializable.\n Unlike the like-named field, this method is parameterized.\n\n <p>This example illustrates the type-safe way to obtain an empty set:\n <pre>\n     Set&lt;String&gt; s = Collections.emptySet();\n </pre>\n Implementation note:  Implementations of this method need not\n create a separate <tt>Set</tt> object for each call.   Using this\n method is likely to have comparable cost to using the like-named\n field.  (Unlike this method, the field does not provide type safety.)",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "emptyList",
                    "comment_text": "Returns the empty list (immutable).  This list is serializable.\n\n <p>This example illustrates the type-safe way to obtain an empty list:\n <pre>\n     List&lt;String&gt; s = Collections.emptyList();\n </pre>\n Implementation note:  Implementations of this method need not\n create a separate <tt>List</tt> object for each call.   Using this\n method is likely to have comparable cost to using the like-named\n field.  (Unlike this method, the field does not provide type safety.)",
                    "return_type": "java.util.List",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "emptyMap",
                    "comment_text": "Returns the empty map (immutable).  This map is serializable.\n\n <p>This example illustrates the type-safe way to obtain an empty set:\n <pre>\n     Map&lt;String, Date&gt; s = Collections.emptyMap();\n </pre>\n Implementation note:  Implementations of this method need not\n create a separate <tt>Map</tt> object for each call.   Using this\n method is likely to have comparable cost to using the like-named\n field.  (Unlike this method, the field does not provide type safety.)",
                    "return_type": "java.util.Map",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "singleton",
                    "comment_text": "Returns an immutable set containing only the specified object.\n The returned set is serializable.",
                    "return_type": "java.util.Set",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the sole object to be stored in the returned set.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "singletonList",
                    "comment_text": "Returns an immutable list containing only the specified object.\n The returned list is serializable.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the sole object to be stored in the returned list.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "singletonMap",
                    "comment_text": "Returns an immutable map, mapping only the specified key to the\n specified value.  The returned map is serializable.",
                    "return_type": "java.util.Map",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the sole key to be stored in the returned map.",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value to which the returned map maps <tt>key</tt>.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nCopies",
                    "comment_text": "Returns an immutable list consisting of <tt>n</tt> copies of the\n specified object.  The newly allocated data object is tiny (it contains\n a single reference to the data object).  This method is useful in\n combination with the <tt>List.addAll</tt> method to grow lists.\n The returned list is serializable.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the number of elements in the returned list.",
                            "type": "int"
                        },
                        {
                            "name": "o",
                            "comment_text": "the element to appear repeatedly in the returned list.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reverseOrder",
                    "comment_text": "Returns a comparator that imposes the reverse of the <em>natural\n ordering</em> on a collection of objects that implement the\n {@code Comparable} interface.  (The natural ordering is the ordering\n imposed by the objects' own {@code compareTo} method.)  This enables a\n simple idiom for sorting (or maintaining) collections (or arrays) of\n objects that implement the {@code Comparable} interface in\n reverse-natural-order.  For example, suppose {@code a} is an array of\n strings. Then: <pre>\n          Arrays.sort(a, Collections.reverseOrder());\n </pre> sorts the array in reverse-lexicographic (alphabetical) order.<p>\n\n The returned comparator is serializable.",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reverseOrder",
                    "comment_text": "Returns a comparator that imposes the reverse ordering of the specified\n comparator.  If the specified comparator is {@code null}, this method is\n equivalent to {@link #reverseOrder()} (in other words, it returns a\n comparator that imposes the reverse of the <em>natural ordering</em> on\n a collection of objects that implement the Comparable interface).\n\n <p>The returned comparator is serializable (assuming the specified\n comparator is also serializable or {@code null}).",
                    "return_type": "java.util.Comparator",
                    "parameters": [
                        {
                            "name": "cmp",
                            "comment_text": "a comparator who's ordering is to be reversed by the returned\n comparator or {@code null}",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "enumeration",
                    "comment_text": "Returns an enumeration over the specified collection.  This provides\n interoperability with legacy APIs that require an enumeration\n as input.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection for which an enumeration is to be returned.",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "list",
                    "comment_text": "Returns an array list containing the elements returned by the\n specified enumeration in the order they are returned by the\n enumeration.  This method provides interoperability between\n legacy APIs that return enumerations and new APIs that require\n collections.",
                    "return_type": "java.util.ArrayList",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "enumeration providing elements for the returned\n          array list",
                            "type": "java.util.Enumeration"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "frequency",
                    "comment_text": "Returns the number of elements in the specified collection equal to the\n specified object.  More formally, returns the number of elements\n <tt>e</tt> in the collection such that\n <tt>(o == null ? e == null : o.equals(e))</tt>.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection in which to determine the frequency\n     of <tt>o</tt>",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "o",
                            "comment_text": "the object whose frequency is to be determined",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "disjoint",
                    "comment_text": "Returns {@code true} if the two specified collections have no\n elements in common.\n\n <p>Care must be exercised if this method is used on collections that\n do not comply with the general contract for {@code Collection}.\n Implementations may elect to iterate over either collection and test\n for containment in the other collection (or to perform any equivalent\n computation).  If either collection uses a nonstandard equality test\n (as does a {@link SortedSet} whose ordering is not <em>compatible with\n equals</em>, or the key set of an {@link IdentityHashMap}), both\n collections must use the same nonstandard equality test, or the\n result of this method is undefined.\n\n <p>Care must also be exercised when using collections that have\n restrictions on the elements that they may contain. Collection\n implementations are allowed to throw exceptions for any operation\n involving elements they deem ineligible. For absolute safety the\n specified collections should contain only elements which are\n eligible elements for both collections.\n\n <p>Note that it is permissible to pass the same collection in both\n parameters, in which case the method will return {@code true} if and\n only if the collection is empty.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c1",
                            "comment_text": "a collection",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "c2",
                            "comment_text": "a collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Adds all of the specified elements to the specified collection.\n Elements to be added may be specified individually or as an array.\n The behavior of this convenience method is identical to that of\n <tt>c.addAll(Arrays.asList(elements))</tt>, but this method is likely\n to run significantly faster under most implementations.\n\n <p>When elements are specified individually, this method provides a\n convenient way to add a few elements to an existing collection:\n <pre>\n     Collections.addAll(flavors, \"Peaches 'n Plutonium\", \"Rocky Racoon\");\n </pre>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection into which <tt>elements</tt> are to be inserted",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "elements",
                            "comment_text": "the elements to insert into <tt>c</tt>",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newSetFromMap",
                    "comment_text": "Returns a set backed by the specified map.  The resulting set displays\n the same ordering, concurrency, and performance characteristics as the\n backing map.  In essence, this factory method provides a {@link Set}\n implementation corresponding to any {@link Map} implementation.  There\n is no need to use this method on a {@link Map} implementation that\n already has a corresponding {@link Set} implementation (such as {@link\n HashMap} or {@link TreeMap}).\n\n <p>Each method invocation on the set returned by this method results in\n exactly one method invocation on the backing map or its <tt>keySet</tt>\n view, with one exception.  The <tt>addAll</tt> method is implemented\n as a sequence of <tt>put</tt> invocations on the backing map.\n\n <p>The specified map must be empty at the time this method is invoked,\n and should not be accessed directly after this method returns.  These\n conditions are ensured if the map is created empty, passed directly\n to this method, and no reference to the map is retained, as illustrated\n in the following code fragment:\n <pre>\n    Set&lt;Object&gt; weakHashSet = Collections.newSetFromMap(\n        new WeakHashMap&lt;Object, Boolean&gt;());\n </pre>",
                    "return_type": "java.util.Set",
                    "parameters": [
                        {
                            "name": "map",
                            "comment_text": "the backing map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "asLifoQueue",
                    "comment_text": "Returns a view of a {@link Deque} as a Last-in-first-out (Lifo)\n {@link Queue}. Method <tt>add</tt> is mapped to <tt>push</tt>,\n <tt>remove</tt> is mapped to <tt>pop</tt> and so on. This\n view can be useful when you would like to use a method\n requiring a <tt>Queue</tt> but you need Lifo ordering.\n\n <p>Each method invocation on the queue returned by this method\n results in exactly one method invocation on the backing deque, with\n one exception.  The {@link Queue#addAll addAll} method is\n implemented as a sequence of {@link Deque#addFirst addFirst}\n invocations on the backing deque.",
                    "return_type": "java.util.Queue",
                    "parameters": [
                        {
                            "name": "deque",
                            "comment_text": "the deque",
                            "type": "java.util.Deque"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Collection",
            "interfaces": [
                "java.lang.Iterable"
            ],
            "superclass": "",
            "comment_text": "The root interface in the <i>collection hierarchy</i>.  A collection\n represents a group of objects, known as its <i>elements</i>.  Some\n collections allow duplicate elements and others do not.  Some are ordered\n and others unordered.  The JDK does not provide any <i>direct</i>\n implementations of this interface: it provides implementations of more\n specific subinterfaces like <tt>Set</tt> and <tt>List</tt>.  This interface\n is typically used to pass collections around and manipulate them where\n maximum generality is desired.\n\n <p><i>Bags</i> or <i>multisets</i> (unordered collections that may contain\n duplicate elements) should implement this interface directly.\n\n <p>All general-purpose <tt>Collection</tt> implementation classes (which\n typically implement <tt>Collection</tt> indirectly through one of its\n subinterfaces) should provide two \"standard\" constructors: a void (no\n arguments) constructor, which creates an empty collection, and a\n constructor with a single argument of type <tt>Collection</tt>, which\n creates a new collection with the same elements as its argument.  In\n effect, the latter constructor allows the user to copy any collection,\n producing an equivalent collection of the desired implementation type.\n There is no way to enforce this convention (as interfaces cannot contain\n constructors) but all of the general-purpose <tt>Collection</tt>\n implementations in the Java platform libraries comply.\n\n <p>The \"destructive\" methods contained in this interface, that is, the\n methods that modify the collection on which they operate, are specified to\n throw <tt>UnsupportedOperationException</tt> if this collection does not\n support the operation.  If this is the case, these methods may, but are not\n required to, throw an <tt>UnsupportedOperationException</tt> if the\n invocation would have no effect on the collection.  For example, invoking\n the {@link #addAll(Collection)} method on an unmodifiable collection may,\n but is not required to, throw the exception if the collection to be added\n is empty.\n\n <p><a name=\"optional-restrictions\"/>\n Some collection implementations have restrictions on the elements that\n they may contain.  For example, some implementations prohibit null elements,\n and some have restrictions on the types of their elements.  Attempting to\n add an ineligible element throws an unchecked exception, typically\n <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting\n to query the presence of an ineligible element may throw an exception,\n or it may simply return false; some implementations will exhibit the former\n behavior and some will exhibit the latter.  More generally, attempting an\n operation on an ineligible element whose completion would not result in\n the insertion of an ineligible element into the collection may throw an\n exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n <p>It is up to each collection to determine its own synchronization\n policy.  In the absence of a stronger guarantee by the\n implementation, undefined behavior may result from the invocation\n of any method on a collection that is being mutated by another\n thread; this includes direct invocations, passing the collection to\n a method that might perform invocations, and using an existing\n iterator to examine the collection.\n\n <p>Many methods in Collections Framework interfaces are defined in\n terms of the {@link Object#equals(Object) equals} method.  For example,\n the specification for the {@link #contains(Object) contains(Object o)}\n method says: \"returns <tt>true</tt> if and only if this collection\n contains at least one element <tt>e</tt> such that\n <tt>(o==null ? e==null : o.equals(e))</tt>.\"  This specification should\n <i>not</i> be construed to imply that invoking <tt>Collection.contains</tt>\n with a non-null argument <tt>o</tt> will cause <tt>o.equals(e)</tt> to be\n invoked for any element <tt>e</tt>.  Implementations are free to implement\n optimizations whereby the <tt>equals</tt> invocation is avoided, for\n example, by first comparing the hash codes of the two elements.  (The\n {@link Object#hashCode()} specification guarantees that two objects with\n unequal hash codes cannot be equal.)  More generally, implementations of\n the various Collections Framework interfaces are free to take advantage of\n the specified behavior of underlying {@link Object} methods wherever the\n implementor deems it appropriate.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Set",
                "java.util.List",
                "java.util.Map",
                "java.util.SortedSet",
                "java.util.SortedMap",
                "java.util.HashSet",
                "java.util.TreeSet",
                "java.util.ArrayList",
                "java.util.LinkedList",
                "java.util.Vector",
                "java.util.Collections",
                "java.util.Arrays",
                "java.util.AbstractCollection"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this collection.  If this collection\n contains more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this collection contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this collection contains the specified element.\n More formally, returns <tt>true</tt> if and only if this collection\n contains at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this collection is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this collection.  There are no\n guarantees concerning the order in which the elements are returned\n (unless this collection is an instance of some class that provides a\n guarantee).",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this collection.\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this collection.  (In other words, this method must\n allocate a new array even if this collection is backed by an array).\n The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this collection;\n the runtime type of the returned array is that of the specified array.\n If the collection fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this collection.\n\n <p>If this collection fits in the specified array with room to spare\n (i.e., the array has more elements than this collection), the element\n in the array immediately following the end of the collection is set to\n <tt>null</tt>.  (This is useful in determining the length of this\n collection <i>only</i> if the caller knows that this collection does\n not contain any <tt>null</tt> elements.)\n\n <p>If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a collection known to contain only strings.\n The following code can be used to dump the collection into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of this collection are to be\n        stored, if it is big enough; otherwise, a new array of the same\n        runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Ensures that this collection contains the specified element (optional\n operation).  Returns <tt>true</tt> if this collection changed as a\n result of the call.  (Returns <tt>false</tt> if this collection does\n not permit duplicates and already contains the specified element.)<p>\n\n Collections that support this operation may place limitations on what\n elements may be added to this collection.  In particular, some\n collections will refuse to add <tt>null</tt> elements, and others will\n impose restrictions on the type of elements that may be added.\n Collection classes should clearly specify in their documentation any\n restrictions on what elements may be added.<p>\n\n If a collection refuses to add a particular element for any reason\n other than that it already contains the element, it <i>must</i> throw\n an exception (rather than returning <tt>false</tt>).  This preserves\n the invariant that a collection always contains the specified element\n after this call returns.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element whose presence in this collection is to be ensured",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this\n collection, if it is present (optional operation).  More formally,\n removes an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if\n this collection contains one or more such elements.  Returns\n <tt>true</tt> if this collection contained the specified element (or\n equivalently, if this collection changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this collection, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns <tt>true</tt> if this collection contains all of the elements\n in the specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection to be checked for containment in this collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Adds all of the elements in the specified collection to this collection\n (optional operation).  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified collection is this collection, and this collection is\n nonempty.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes all of this collection's elements that are also contained in the\n specified collection (optional operation).  After this call returns,\n this collection will contain no elements in common with the specified\n collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this collection that are contained in the\n specified collection (optional operation).  In other words, removes from\n this collection all of its elements that are not contained in the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be retained in this collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this collection (optional operation).\n The collection will be empty after this method returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this collection for equality. <p>\n\n While the <tt>Collection</tt> interface adds no stipulations to the\n general contract for the <tt>Object.equals</tt>, programmers who\n implement the <tt>Collection</tt> interface \"directly\" (in other words,\n create a class that is a <tt>Collection</tt> but is not a <tt>Set</tt>\n or a <tt>List</tt>) must exercise care if they choose to override the\n <tt>Object.equals</tt>.  It is not necessary to do so, and the simplest\n course of action is to rely on <tt>Object</tt>'s implementation, but\n the implementor may wish to implement a \"value comparison\" in place of\n the default \"reference comparison.\"  (The <tt>List</tt> and\n <tt>Set</tt> interfaces mandate such value comparisons.)<p>\n\n The general contract for the <tt>Object.equals</tt> method states that\n equals must be symmetric (in other words, <tt>a.equals(b)</tt> if and\n only if <tt>b.equals(a)</tt>).  The contracts for <tt>List.equals</tt>\n and <tt>Set.equals</tt> state that lists are only equal to other lists,\n and sets to other sets.  Thus, a custom <tt>equals</tt> method for a\n collection class that implements neither the <tt>List</tt> nor\n <tt>Set</tt> interface must return <tt>false</tt> when this collection\n is compared to any list or set.  (By the same logic, it is not possible\n to write a class that correctly implements both the <tt>Set</tt> and\n <tt>List</tt> interfaces.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this collection",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this collection.  While the\n <tt>Collection</tt> interface adds no stipulations to the general\n contract for the <tt>Object.hashCode</tt> method, programmers should\n take note that any class that overrides the <tt>Object.equals</tt>\n method must also override the <tt>Object.hashCode</tt> method in order\n to satisfy the general contract for the <tt>Object.hashCode</tt> method.\n In particular, <tt>c1.equals(c2)</tt> implies that\n <tt>c1.hashCode()==c2.hashCode()</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Calendar",
            "interfaces": [
                "java.io.Serializable",
                "java.lang.Cloneable",
                "java.lang.Comparable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The <code>Calendar</code> class is an abstract class that provides methods\n for converting between a specific instant in time and a set of {@link\n #fields calendar fields} such as <code>YEAR</code>, <code>MONTH</code>,\n <code>DAY_OF_MONTH</code>, <code>HOUR</code>, and so on, and for\n manipulating the calendar fields, such as getting the date of the next\n week. An instant in time can be represented by a millisecond value that is\n an offset from the <a name=\"Epoch\"><em>Epoch</em></a>, January 1, 1970\n 00:00:00.000 GMT (Gregorian).\n\n <p>The class also provides additional fields and methods for\n implementing a concrete calendar system outside the package. Those\n fields and methods are defined as <code>protected</code>.\n\n <p>\n Like other locale-sensitive classes, <code>Calendar</code> provides a\n class method, <code>getInstance</code>, for getting a generally useful\n object of this type. <code>Calendar</code>'s <code>getInstance</code> method\n returns a <code>Calendar</code> object whose\n calendar fields have been initialized with the current date and time:\n <blockquote>\n <pre>\n     Calendar rightNow = Calendar.getInstance();\n </pre>\n </blockquote>\n\n <p>A <code>Calendar</code> object can produce all the calendar field values\n needed to implement the date-time formatting for a particular language and\n calendar style (for example, Japanese-Gregorian, Japanese-Traditional).\n <code>Calendar</code> defines the range of values returned by\n certain calendar fields, as well as their meaning.  For example,\n the first month of the calendar system has value <code>MONTH ==\n JANUARY</code> for all calendars.  Other values are defined by the\n concrete subclass, such as <code>ERA</code>.  See individual field\n documentation and subclass documentation for details.\n\n <h4>Getting and Setting Calendar Field Values</h4>\n\n <p>The calendar field values can be set by calling the <code>set</code>\n methods. Any field values set in a <code>Calendar</code> will not be\n interpreted until it needs to calculate its time value (milliseconds from\n the Epoch) or values of the calendar fields. Calling the\n <code>get</code>, <code>getTimeInMillis</code>, <code>getTime</code>,\n <code>add</code> and <code>roll</code> involves such calculation.\n\n <h4>Leniency</h4>\n\n <p><code>Calendar</code> has two modes for interpreting the calendar\n fields, <em>lenient</em> and <em>non-lenient</em>.  When a\n <code>Calendar</code> is in lenient mode, it accepts a wider range of\n calendar field values than it produces.  When a <code>Calendar</code>\n recomputes calendar field values for return by <code>get()</code>, all of\n the calendar fields are normalized. For example, a lenient\n <code>GregorianCalendar</code> interprets <code>MONTH == JANUARY</code>,\n <code>DAY_OF_MONTH == 32</code> as February 1.\n\n <p>When a <code>Calendar</code> is in non-lenient mode, it throws an\n exception if there is any inconsistency in its calendar fields. For\n example, a <code>GregorianCalendar</code> always produces\n <code>DAY_OF_MONTH</code> values between 1 and the length of the month. A\n non-lenient <code>GregorianCalendar</code> throws an exception upon\n calculating its time or calendar field values if any out-of-range field\n value has been set.\n\n <h4><a name=\"first_week\">First Week</a></h4>\n\n <code>Calendar</code> defines a locale-specific seven day week using two\n parameters: the first day of the week and the minimal days in first week\n (from 1 to 7).  These numbers are taken from the locale resource data when a\n <code>Calendar</code> is constructed.  They may also be specified explicitly\n through the methods for setting their values.\n\n <p>When setting or getting the <code>WEEK_OF_MONTH</code> or\n <code>WEEK_OF_YEAR</code> fields, <code>Calendar</code> must determine the\n first week of the month or year as a reference point.  The first week of a\n month or year is defined as the earliest seven day period beginning on\n <code>getFirstDayOfWeek()</code> and containing at least\n <code>getMinimalDaysInFirstWeek()</code> days of that month or year.  Weeks\n numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow\n it.  Note that the normalized numbering returned by <code>get()</code> may be\n different.  For example, a specific <code>Calendar</code> subclass may\n designate the week before week 1 of a year as week <code><i>n</i></code> of\n the previous year.\n\n <h4>Calendar Fields Resolution</h4>\n\n When computing a date and time from the calendar fields, there\n may be insufficient information for the computation (such as only\n year and month with no day of month), or there may be inconsistent\n information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15,\n 1996 is actually a Monday). <code>Calendar</code> will resolve\n calendar field values to determine the date and time in the\n following way.\n\n <p>If there is any conflict in calendar field values,\n <code>Calendar</code> gives priorities to calendar fields that have been set\n more recently. The following are the default combinations of the\n calendar fields. The most recent combination, as determined by the\n most recently set single field, will be used.\n\n <p><a name=\"date_resolution\">For the date fields</a>:\n <blockquote>\n <pre>\n YEAR + MONTH + DAY_OF_MONTH\n YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK\n YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK\n YEAR + DAY_OF_YEAR\n YEAR + DAY_OF_WEEK + WEEK_OF_YEAR\n </pre></blockquote>\n\n <a name=\"time_resolution\">For the time of day fields</a>:\n <blockquote>\n <pre>\n HOUR_OF_DAY\n AM_PM + HOUR\n </pre></blockquote>\n\n <p>If there are any calendar fields whose values haven't been set in the selected\n field combination, <code>Calendar</code> uses their default values. The default\n value of each field may vary by concrete calendar systems. For example, in\n <code>GregorianCalendar</code>, the default of a field is the same as that\n of the start of the Epoch: i.e., <code>YEAR = 1970</code>, <code>MONTH =\n JANUARY</code>, <code>DAY_OF_MONTH = 1</code>, etc.\n\n <p>\n <strong>Note:</strong> There are certain possible ambiguities in\n interpretation of certain singular times, which are resolved in the\n following ways:\n <ol>\n     <li> 23:59 is the last minute of the day and 00:00 is the first\n          minute of the next day. Thus, 23:59 on Dec 31, 1999 &lt; 00:00 on\n          Jan 1, 2000 &lt; 00:01 on Jan 1, 2000.\n\n     <li> Although historically not precise, midnight also belongs to \"am\",\n          and noon belongs to \"pm\", so on the same day,\n          12:00 am (midnight) &lt; 12:01 am, and 12:00 pm (noon) &lt; 12:01 pm\n </ol>\n\n <p>\n The date or time format strings are not part of the definition of a\n calendar, as those must be modifiable or overridable by the user at\n runtime. Use {@link DateFormat}\n to format dates.\n\n <h4>Field Manipulation</h4>\n\n The calendar fields can be changed using three methods:\n <code>set()</code>, <code>add()</code>, and <code>roll()</code>.</p>\n\n <p><strong><code>set(f, value)</code></strong> changes calendar field\n <code>f</code> to <code>value</code>.  In addition, it sets an\n internal member variable to indicate that calendar field <code>f</code> has\n been changed. Although calendar field <code>f</code> is changed immediately,\n the calendar's time value in milliseconds is not recomputed until the next call to\n <code>get()</code>, <code>getTime()</code>, <code>getTimeInMillis()</code>,\n <code>add()</code>, or <code>roll()</code> is made. Thus, multiple calls to\n <code>set()</code> do not trigger multiple, unnecessary\n computations. As a result of changing a calendar field using\n <code>set()</code>, other calendar fields may also change, depending on the\n calendar field, the calendar field value, and the calendar system. In addition,\n <code>get(f)</code> will not necessarily return <code>value</code> set by\n the call to the <code>set</code> method\n after the calendar fields have been recomputed. The specifics are determined by\n the concrete calendar class.</p>\n\n <p><em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to August 31, 1999. Calling <code>set(Calendar.MONTH,\n Calendar.SEPTEMBER)</code> sets the date to September 31,\n 1999. This is a temporary internal representation that resolves to\n October 1, 1999 if <code>getTime()</code>is then called. However, a\n call to <code>set(Calendar.DAY_OF_MONTH, 30)</code> before the call to\n <code>getTime()</code> sets the date to September 30, 1999, since\n no recomputation occurs after <code>set()</code> itself.</p>\n\n <p><strong><code>add(f, delta)</code></strong> adds <code>delta</code>\n to field <code>f</code>.  This is equivalent to calling <code>set(f,\n get(f) + delta)</code> with two adjustments:</p>\n\n <blockquote>\n   <p><strong>Add rule 1</strong>. The value of field <code>f</code>\n   after the call minus the value of field <code>f</code> before the\n   call is <code>delta</code>, modulo any overflow that has occurred in\n   field <code>f</code>. Overflow occurs when a field value exceeds its\n   range and, as a result, the next larger field is incremented or\n   decremented and the field value is adjusted back into its range.</p>\n\n   <p><strong>Add rule 2</strong>. If a smaller field is expected to be\n   invariant, but it is impossible for it to be equal to its\n   prior value because of changes in its minimum or maximum after field\n   <code>f</code> is changed or other constraints, such as time zone\n   offset changes, then its value is adjusted to be as close\n   as possible to its expected value. A smaller field represents a\n   smaller unit of time. <code>HOUR</code> is a smaller field than\n   <code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields\n   that are not expected to be invariant. The calendar system\n   determines what fields are expected to be invariant.</p>\n </blockquote>\n\n <p>In addition, unlike <code>set()</code>, <code>add()</code> forces\n an immediate recomputation of the calendar's milliseconds and all\n fields.</p>\n\n <p><em>Example</em>: Consider a <code>GregorianCalendar</code>\n originally set to August 31, 1999. Calling <code>add(Calendar.MONTH,\n 13)</code> sets the calendar to September 30, 2000. <strong>Add rule\n 1</strong> sets the <code>MONTH</code> field to September, since\n adding 13 months to August gives September of the next year. Since\n <code>DAY_OF_MONTH</code> cannot be 31 in September in a\n <code>GregorianCalendar</code>, <strong>add rule 2</strong> sets the\n <code>DAY_OF_MONTH</code> to 30, the closest possible value. Although\n it is a smaller field, <code>DAY_OF_WEEK</code> is not adjusted by\n rule 2, since it is expected to change when the month changes in a\n <code>GregorianCalendar</code>.</p>\n\n <p><strong><code>roll(f, delta)</code></strong> adds\n <code>delta</code> to field <code>f</code> without changing larger\n fields. This is equivalent to calling <code>add(f, delta)</code> with\n the following adjustment:</p>\n\n <blockquote>\n   <p><strong>Roll rule</strong>. Larger fields are unchanged after the\n   call. A larger field represents a larger unit of\n   time. <code>DAY_OF_MONTH</code> is a larger field than\n   <code>HOUR</code>.</p>\n </blockquote>\n\n <p><em>Example</em>: See {@link java.util.GregorianCalendar#roll(int, int)}.\n\n <p><strong>Usage model</strong>. To motivate the behavior of\n <code>add()</code> and <code>roll()</code>, consider a user interface\n component with increment and decrement buttons for the month, day, and\n year, and an underlying <code>GregorianCalendar</code>. If the\n interface reads January 31, 1999 and the user presses the month\n increment button, what should it read? If the underlying\n implementation uses <code>set()</code>, it might read March 3, 1999. A\n better result would be February 28, 1999. Furthermore, if the user\n presses the month increment button again, it should read March 31,\n 1999, not March 28, 1999. By saving the original date and using either\n <code>add()</code> or <code>roll()</code>, depending on whether larger\n fields should be affected, the user interface can behave as most users\n will intuitively expect.</p>",
            "since": "JDK1.1",
            "see": [
                "java.lang.System",
                "java.util.Date",
                "java.util.GregorianCalendar",
                "java.util.TimeZone",
                "java.text.DateFormat"
            ],
            "constructors": [
                {
                    "name": "Calendar",
                    "comment_text": "Constructs a Calendar with the default time zone\n and locale.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Calendar",
                    "comment_text": "Constructs a calendar with the specified time zone and locale.",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "the time zone to use",
                            "type": "java.util.TimeZone"
                        },
                        {
                            "name": "aLocale",
                            "comment_text": "the locale for the week data",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "ERA",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n era, e.g., AD or BC in the Julian calendar. This is a calendar-specific\n value; see subclass documentation.",
                    "type": "int"
                },
                {
                    "name": "YEAR",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n year. This is a calendar-specific value; see subclass documentation.",
                    "type": "int"
                },
                {
                    "name": "MONTH",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n month. This is a calendar-specific value. The first month of\n the year in the Gregorian and Julian calendars is\n <code>JANUARY</code> which is 0; the last depends on the number\n of months in a year.",
                    "type": "int"
                },
                {
                    "name": "WEEK_OF_YEAR",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n week number within the current year.  The first week of the year, as\n defined by <code>getFirstDayOfWeek()</code> and\n <code>getMinimalDaysInFirstWeek()</code>, has value 1.  Subclasses define\n the value of <code>WEEK_OF_YEAR</code> for days before the first week of\n the year.",
                    "type": "int"
                },
                {
                    "name": "WEEK_OF_MONTH",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n week number within the current month.  The first week of the month, as\n defined by <code>getFirstDayOfWeek()</code> and\n <code>getMinimalDaysInFirstWeek()</code>, has value 1.  Subclasses define\n the value of <code>WEEK_OF_MONTH</code> for days before the first week of\n the month.",
                    "type": "int"
                },
                {
                    "name": "DATE",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n day of the month. This is a synonym for <code>DAY_OF_MONTH</code>.\n The first day of the month has value 1.",
                    "type": "int"
                },
                {
                    "name": "DAY_OF_MONTH",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n day of the month. This is a synonym for <code>DATE</code>.\n The first day of the month has value 1.",
                    "type": "int"
                },
                {
                    "name": "DAY_OF_YEAR",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the day\n number within the current year.  The first day of the year has value 1.",
                    "type": "int"
                },
                {
                    "name": "DAY_OF_WEEK",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the day\n of the week.  This field takes values <code>SUNDAY</code>,\n <code>MONDAY</code>, <code>TUESDAY</code>, <code>WEDNESDAY</code>,\n <code>THURSDAY</code>, <code>FRIDAY</code>, and <code>SATURDAY</code>.",
                    "type": "int"
                },
                {
                    "name": "DAY_OF_WEEK_IN_MONTH",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n ordinal number of the day of the week within the current month. Together\n with the <code>DAY_OF_WEEK</code> field, this uniquely specifies a day\n within a month.  Unlike <code>WEEK_OF_MONTH</code> and\n <code>WEEK_OF_YEAR</code>, this field's value does <em>not</em> depend on\n <code>getFirstDayOfWeek()</code> or\n <code>getMinimalDaysInFirstWeek()</code>.  <code>DAY_OF_MONTH 1</code>\n through <code>7</code> always correspond to <code>DAY_OF_WEEK_IN_MONTH\n 1</code>; <code>8</code> through <code>14</code> correspond to\n <code>DAY_OF_WEEK_IN_MONTH 2</code>, and so on.\n <code>DAY_OF_WEEK_IN_MONTH 0</code> indicates the week before\n <code>DAY_OF_WEEK_IN_MONTH 1</code>.  Negative values count back from the\n end of the month, so the last Sunday of a month is specified as\n <code>DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1</code>.  Because\n negative values count backward they will usually be aligned differently\n within the month than positive values.  For example, if a month has 31\n days, <code>DAY_OF_WEEK_IN_MONTH -1</code> will overlap\n <code>DAY_OF_WEEK_IN_MONTH 5</code> and the end of <code>4</code>.",
                    "type": "int"
                },
                {
                    "name": "AM_PM",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating\n whether the <code>HOUR</code> is before or after noon.\n E.g., at 10:04:15.250 PM the <code>AM_PM</code> is <code>PM</code>.",
                    "type": "int"
                },
                {
                    "name": "HOUR",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n hour of the morning or afternoon. <code>HOUR</code> is used for the\n 12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.\n E.g., at 10:04:15.250 PM the <code>HOUR</code> is 10.",
                    "type": "int"
                },
                {
                    "name": "HOUR_OF_DAY",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n hour of the day. <code>HOUR_OF_DAY</code> is used for the 24-hour clock.\n E.g., at 10:04:15.250 PM the <code>HOUR_OF_DAY</code> is 22.",
                    "type": "int"
                },
                {
                    "name": "MINUTE",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n minute within the hour.\n E.g., at 10:04:15.250 PM the <code>MINUTE</code> is 4.",
                    "type": "int"
                },
                {
                    "name": "SECOND",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n second within the minute.\n E.g., at 10:04:15.250 PM the <code>SECOND</code> is 15.",
                    "type": "int"
                },
                {
                    "name": "MILLISECOND",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n millisecond within the second.\n E.g., at 10:04:15.250 PM the <code>MILLISECOND</code> is 250.",
                    "type": "int"
                },
                {
                    "name": "ZONE_OFFSET",
                    "comment_text": "Field number for <code>get</code> and <code>set</code>\n indicating the raw offset from GMT in milliseconds.\n <p>\n This field reflects the correct GMT offset value of the time\n zone of this <code>Calendar</code> if the\n <code>TimeZone</code> implementation subclass supports\n historical GMT offset changes.",
                    "type": "int"
                },
                {
                    "name": "DST_OFFSET",
                    "comment_text": "Field number for <code>get</code> and <code>set</code> indicating the\n daylight saving offset in milliseconds.\n <p>\n This field reflects the correct daylight saving offset value of\n the time zone of this <code>Calendar</code> if the\n <code>TimeZone</code> implementation subclass supports\n historical Daylight Saving Time schedule changes.",
                    "type": "int"
                },
                {
                    "name": "FIELD_COUNT",
                    "comment_text": "The number of distinct fields recognized by <code>get</code> and <code>set</code>.\n Field numbers range from <code>0..FIELD_COUNT-1</code>.",
                    "type": "int"
                },
                {
                    "name": "SUNDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Sunday.",
                    "type": "int"
                },
                {
                    "name": "MONDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Monday.",
                    "type": "int"
                },
                {
                    "name": "TUESDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Tuesday.",
                    "type": "int"
                },
                {
                    "name": "WEDNESDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Wednesday.",
                    "type": "int"
                },
                {
                    "name": "THURSDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Thursday.",
                    "type": "int"
                },
                {
                    "name": "FRIDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Friday.",
                    "type": "int"
                },
                {
                    "name": "SATURDAY",
                    "comment_text": "Value of the {@link #DAY_OF_WEEK} field indicating\n Saturday.",
                    "type": "int"
                },
                {
                    "name": "JANUARY",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n first month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "FEBRUARY",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n second month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "MARCH",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n third month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "APRIL",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n fourth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "MAY",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n fifth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "JUNE",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n sixth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "JULY",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n seventh month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "AUGUST",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n eighth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "SEPTEMBER",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n ninth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "OCTOBER",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n tenth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "NOVEMBER",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n eleventh month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "DECEMBER",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n twelfth month of the year in the Gregorian and Julian calendars.",
                    "type": "int"
                },
                {
                    "name": "UNDECIMBER",
                    "comment_text": "Value of the {@link #MONTH} field indicating the\n thirteenth month of the year. Although <code>GregorianCalendar</code>\n does not use this value, lunar calendars do.",
                    "type": "int"
                },
                {
                    "name": "AM",
                    "comment_text": "Value of the {@link #AM_PM} field indicating the\n period of the day from midnight to just before noon.",
                    "type": "int"
                },
                {
                    "name": "PM",
                    "comment_text": "Value of the {@link #AM_PM} field indicating the\n period of the day from noon to just before midnight.",
                    "type": "int"
                },
                {
                    "name": "ALL_STYLES",
                    "comment_text": "A style specifier for {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating names in all styles, such as\n \"January\" and \"Jan\".",
                    "type": "int"
                },
                {
                    "name": "SHORT",
                    "comment_text": "A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a short name, such as \"Jan\".",
                    "type": "int"
                },
                {
                    "name": "LONG",
                    "comment_text": "A style specifier for {@link #getDisplayName(int, int, Locale)\n getDisplayName} and {@link #getDisplayNames(int, int, Locale)\n getDisplayNames} indicating a long name, such as \"January\".",
                    "type": "int"
                },
                {
                    "name": "fields",
                    "comment_text": "The calendar field values for the currently set time for this calendar.\n This is an array of <code>FIELD_COUNT</code> integers, with index values\n <code>ERA</code> through <code>DST_OFFSET</code>.",
                    "type": "int"
                },
                {
                    "name": "isSet",
                    "comment_text": "The flags which tell if a specified calendar field for the calendar is set.\n A new object has no fields set.  After the first call to a method\n which generates the fields, they all remain set after that.\n This is an array of <code>FIELD_COUNT</code> booleans, with index values\n <code>ERA</code> through <code>DST_OFFSET</code>.",
                    "type": "boolean"
                },
                {
                    "name": "time",
                    "comment_text": "The currently set time for this calendar, expressed in milliseconds after\n January 1, 1970, 0:00:00 GMT.",
                    "type": "long"
                },
                {
                    "name": "isTimeSet",
                    "comment_text": "True if then the value of <code>time</code> is valid.\n The time is made invalid by a change to an item of <code>field[]</code>.",
                    "type": "boolean"
                },
                {
                    "name": "areFieldsSet",
                    "comment_text": "True if <code>fields[]</code> are in sync with the currently set time.\n If false, then the next attempt to get the value of a field will\n force a recomputation of all fields from the current value of\n <code>time</code>.",
                    "type": "boolean"
                }
            ],
            "methods": [
                {
                    "name": "getInstance",
                    "comment_text": "Gets a calendar using the default time zone and locale. The\n <code>Calendar</code> returned is based on the current time\n in the default time zone with the default locale.",
                    "return_type": "java.util.Calendar",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInstance",
                    "comment_text": "Gets a calendar using the specified time zone and default locale.\n The <code>Calendar</code> returned is based on the current time\n in the given time zone with the default locale.",
                    "return_type": "java.util.Calendar",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "the time zone to use",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInstance",
                    "comment_text": "Gets a calendar using the default time zone and specified locale.\n The <code>Calendar</code> returned is based on the current time\n in the default time zone with the given locale.",
                    "return_type": "java.util.Calendar",
                    "parameters": [
                        {
                            "name": "aLocale",
                            "comment_text": "the locale for the week data",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInstance",
                    "comment_text": "Gets a calendar with the specified time zone and locale.\n The <code>Calendar</code> returned is based on the current time\n in the given time zone with the given locale.",
                    "return_type": "java.util.Calendar",
                    "parameters": [
                        {
                            "name": "zone",
                            "comment_text": "the time zone to use",
                            "type": "java.util.TimeZone"
                        },
                        {
                            "name": "aLocale",
                            "comment_text": "the locale for the week data",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAvailableLocales",
                    "comment_text": "Returns an array of all locales for which the <code>getInstance</code>\n methods of this class can return localized instances.\n The array returned must contain at least a <code>Locale</code>\n instance equal to {@link java.util.Locale#US Locale.US}.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "computeTime",
                    "comment_text": "Converts the current calendar field values in {@link #fields fields[]}\n to the millisecond time value\n {@link #time}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "computeFields",
                    "comment_text": "Converts the current millisecond time value {@link #time}\n to calendar field values in {@link #fields fields[]}.\n This allows you to sync up the calendar field values with\n a new time that is set for the calendar.  The time is <em>not</em>\n recomputed first; to recompute the time, then the fields, call the\n {@link #complete()} method.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTime",
                    "comment_text": "Returns a <code>Date</code> object representing this\n <code>Calendar</code>'s time value (millisecond offset from the <a\n href=\"#Epoch\">Epoch</a>\").",
                    "return_type": "java.util.Date",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setTime",
                    "comment_text": "Sets this Calendar's time with the given <code>Date</code>.\n <p>\n Note: Calling <code>setTime()</code> with\n <code>Date(Long.MAX_VALUE)</code> or <code>Date(Long.MIN_VALUE)</code>\n may yield incorrect field values from <code>get()</code>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "date",
                            "comment_text": "the given Date.",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTimeInMillis",
                    "comment_text": "Returns this Calendar's time value in milliseconds.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setTimeInMillis",
                    "comment_text": "Sets this Calendar's current time from the given long value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "millis",
                            "comment_text": "the new time in UTC milliseconds from the epoch.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value of the given calendar field. In lenient mode,\n all calendar fields are normalized. In non-lenient mode, all\n calendar fields are validated and this method throws an\n exception if any calendar fields have out-of-range values. The\n normalization and validation are handled by the\n {@link #complete()} method, which process is calendar\n system dependent.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the given calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "internalGet",
                    "comment_text": "Returns the value of the given calendar field. This method does\n not involve normalization or validation of the field value.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the given calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the given calendar field to the given value. The value is not\n interpreted by this method regardless of the leniency mode.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the given calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value to be set for the given calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the values for the calendar fields <code>YEAR</code>,\n <code>MONTH</code>, and <code>DAY_OF_MONTH</code>.\n Previous values of other calendar fields are retained.  If this is not desired,\n call {@link #clear()} first.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the value used to set the <code>YEAR</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the value used to set the <code>MONTH</code> calendar field.\n Month value is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the value used to set the <code>DAY_OF_MONTH</code> calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the values for the calendar fields <code>YEAR</code>,\n <code>MONTH</code>, <code>DAY_OF_MONTH</code>,\n <code>HOUR_OF_DAY</code>, and <code>MINUTE</code>.\n Previous values of other fields are retained.  If this is not desired,\n call {@link #clear()} first.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the value used to set the <code>YEAR</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the value used to set the <code>MONTH</code> calendar field.\n Month value is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the value used to set the <code>DAY_OF_MONTH</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "hourOfDay",
                            "comment_text": "the value used to set the <code>HOUR_OF_DAY</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "minute",
                            "comment_text": "the value used to set the <code>MINUTE</code> calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the values for the fields <code>YEAR</code>, <code>MONTH</code>,\n <code>DAY_OF_MONTH</code>, <code>HOUR</code>, <code>MINUTE</code>, and\n <code>SECOND</code>.\n Previous values of other fields are retained.  If this is not desired,\n call {@link #clear()} first.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "year",
                            "comment_text": "the value used to set the <code>YEAR</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "month",
                            "comment_text": "the value used to set the <code>MONTH</code> calendar field.\n Month value is 0-based. e.g., 0 for January.",
                            "type": "int"
                        },
                        {
                            "name": "date",
                            "comment_text": "the value used to set the <code>DAY_OF_MONTH</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "hourOfDay",
                            "comment_text": "the value used to set the <code>HOUR_OF_DAY</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "minute",
                            "comment_text": "the value used to set the <code>MINUTE</code> calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "second",
                            "comment_text": "the value used to set the <code>SECOND</code> calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Sets all the calendar field values and the time value\n (millisecond offset from the <a href=\"#Epoch\">Epoch</a>) of\n this <code>Calendar</code> undefined. This means that {@link\n #isSet(int) isSet()} will return <code>false</code> for all the\n calendar fields, and the date and time calculations will treat\n the fields as if they had never been set. A\n <code>Calendar</code> implementation class may use its specific\n default field values for date/time calculations. For example,\n <code>GregorianCalendar</code> uses 1970 if the\n <code>YEAR</code> field value is undefined.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Sets the given calendar field value and the time value\n (millisecond offset from the <a href=\"#Epoch\">Epoch</a>) of\n this <code>Calendar</code> undefined. This means that {@link\n #isSet(int) isSet(field)} will return <code>false</code>, and\n the date and time calculations will treat the field as if it\n had never been set. A <code>Calendar</code> implementation\n class may use the field's specific default value for date and\n time calculations.\n\n <p>The {@link #HOUR_OF_DAY}, {@link #HOUR} and {@link #AM_PM}\n fields are handled independently and the <a\n href=\"#time_resolution\">the resolution rule for the time of\n day</a> is applied. Clearing one of the fields doesn't reset\n the hour of day value of this <code>Calendar</code>. Use {@link\n #set(int,int) set(Calendar.HOUR_OF_DAY, 0)} to reset the hour\n value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field to be cleared.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isSet",
                    "comment_text": "Determines if the given calendar field has a value set,\n including cases that the value has been set by internal fields\n calculations triggered by a <code>get</code> method call.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns the string representation of the calendar\n <code>field</code> value in the given <code>style</code> and\n <code>locale</code>.  If no string representation is\n applicable, <code>null</code> is returned. This method calls\n {@link Calendar#get(int) get(field)} to get the calendar\n <code>field</code> value if the string representation is\n applicable to the given calendar <code>field</code>.\n\n <p>For example, if this <code>Calendar</code> is a\n <code>GregorianCalendar</code> and its date is 2005-01-01, then\n the string representation of the {@link #MONTH} field would be\n \"January\" in the long style in an English locale or \"Jan\" in\n the short style. However, no string representation would be\n available for the {@link #DAY_OF_MONTH} field, and this method\n would return <code>null</code>.\n\n <p>The default implementation supports the calendar fields for\n which a {@link DateFormatSymbols} has names in the given\n <code>locale</code>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field for which the string representation\n        is returned",
                            "type": "int"
                        },
                        {
                            "name": "style",
                            "comment_text": "the style applied to the string representation; one of\n        {@link #SHORT} or {@link #LONG}.",
                            "type": "int"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for the string representation",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayNames",
                    "comment_text": "Returns a <code>Map</code> containing all names of the calendar\n <code>field</code> in the given <code>style</code> and\n <code>locale</code> and their corresponding field values. For\n example, if this <code>Calendar</code> is a {@link\n GregorianCalendar}, the returned map would contain \"Jan\" to\n {@link #JANUARY}, \"Feb\" to {@link #FEBRUARY}, and so on, in the\n {@linkplain #SHORT short} style in an English locale.\n\n <p>The values of other calendar fields may be taken into\n account to determine a set of display names. For example, if\n this <code>Calendar</code> is a lunisolar calendar system and\n the year value given by the {@link #YEAR} field has a leap\n month, this method would return month names containing the leap\n month name, and month names are mapped to their values specific\n for the year.\n\n <p>The default implementation supports display names contained in\n a {@link DateFormatSymbols}. For example, if <code>field</code>\n is {@link #MONTH} and <code>style</code> is {@link\n #ALL_STYLES}, this method returns a <code>Map</code> containing\n all strings returned by {@link DateFormatSymbols#getShortMonths()}\n and {@link DateFormatSymbols#getMonths()}.",
                    "return_type": "java.util.Map",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field for which the display names are returned",
                            "type": "int"
                        },
                        {
                            "name": "style",
                            "comment_text": "the style applied to the display names; one of {@link\n        #SHORT}, {@link #LONG}, or {@link #ALL_STYLES}.",
                            "type": "int"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the locale for the display names",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "complete",
                    "comment_text": "Fills in any unset fields in the calendar fields. First, the {@link\n #computeTime()} method is called if the time value (millisecond offset\n from the <a href=\"#Epoch\">Epoch</a>) has not been calculated from\n calendar field values. Then, the {@link #computeFields()} method is\n called to calculate all calendar field values.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares this <code>Calendar</code> to the specified\n <code>Object</code>.  The result is <code>true</code> if and only if\n the argument is a <code>Calendar</code> object of the same calendar\n system that represents the same time value (millisecond offset from the\n <a href=\"#Epoch\">Epoch</a>) under the same\n <code>Calendar</code> parameters as this object.\n\n <p>The <code>Calendar</code> parameters are the values represented\n by the <code>isLenient</code>, <code>getFirstDayOfWeek</code>,\n <code>getMinimalDaysInFirstWeek</code> and <code>getTimeZone</code>\n methods. If there is any difference in those parameters\n between the two <code>Calendar</code>s, this method returns\n <code>false</code>.\n\n <p>Use the {@link #compareTo(Calendar) compareTo} method to\n compare only the time values.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object to compare with.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code for this calendar.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "before",
                    "comment_text": "Returns whether this <code>Calendar</code> represents a time\n before the time represented by the specified\n <code>Object</code>. This method is equivalent to:\n <pre><blockquote>\n         compareTo(when) < 0\n </blockquote></pre>\n if and only if <code>when</code> is a <code>Calendar</code>\n instance. Otherwise, the method returns <code>false</code>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "when",
                            "comment_text": "the <code>Object</code> to be compared",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "after",
                    "comment_text": "Returns whether this <code>Calendar</code> represents a time\n after the time represented by the specified\n <code>Object</code>. This method is equivalent to:\n <pre><blockquote>\n         compareTo(when) > 0\n </blockquote></pre>\n if and only if <code>when</code> is a <code>Calendar</code>\n instance. Otherwise, the method returns <code>false</code>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "when",
                            "comment_text": "the <code>Object</code> to be compared",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareTo",
                    "comment_text": "Compares the time values (millisecond offsets from the <a\n href=\"#Epoch\">Epoch</a>) represented by two\n <code>Calendar</code> objects.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "anotherCalendar",
                            "comment_text": "the <code>Calendar</code> to be compared.",
                            "type": "java.util.Calendar"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds or subtracts the specified amount of time to the given calendar field,\n based on the calendar's rules. For example, to subtract 5 days from\n the current time of the calendar, you can achieve it by calling:\n <p><code>add(Calendar.DAY_OF_MONTH, -5)</code>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "amount",
                            "comment_text": "the amount of date or time to be added to the field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "roll",
                    "comment_text": "Adds or subtracts (up/down) a single unit of time on the given time\n field without changing larger fields. For example, to roll the current\n date up by one day, you can achieve it by calling:\n <p>roll(Calendar.DATE, true).\n When rolling on the year or Calendar.YEAR field, it will roll the year\n value in the range between 1 and the value returned by calling\n <code>getMaximum(Calendar.YEAR)</code>.\n When rolling on the month or Calendar.MONTH field, other fields like\n date might conflict and, need to be changed. For instance,\n rolling the month on the date 01/31/96 will result in 02/29/96.\n When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will\n roll the hour value in the range between 0 and 23, which is zero-based.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the time field.",
                            "type": "int"
                        },
                        {
                            "name": "up",
                            "comment_text": "indicates if the value of the specified time field is to be\n rolled up or rolled down. Use true if rolling up, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "roll",
                    "comment_text": "Adds the specified (signed) amount to the specified calendar field\n without changing larger fields.  A negative amount means to roll\n down.\n\n <p>NOTE:  This default implementation on <code>Calendar</code> just repeatedly calls the\n version of {@link #roll(int,boolean) roll()} that rolls by one unit.  This may not\n always do the right thing.  For example, if the <code>DAY_OF_MONTH</code> field is 31,\n rolling through February will leave it set to 28.  The <code>GregorianCalendar</code>\n version of this function takes care of this problem.  Other subclasses\n should also provide overrides of this function that do the right thing.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        },
                        {
                            "name": "amount",
                            "comment_text": "the signed amount to add to the calendar <code>field</code>.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setTimeZone",
                    "comment_text": "Sets the time zone with the given time zone value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the given time zone.",
                            "type": "java.util.TimeZone"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTimeZone",
                    "comment_text": "Gets the time zone.",
                    "return_type": "java.util.TimeZone",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLenient",
                    "comment_text": "Specifies whether or not date/time interpretation is to be lenient.  With\n lenient interpretation, a date such as \"February 942, 1996\" will be\n treated as being equivalent to the 941st day after February 1, 1996.\n With strict (non-lenient) interpretation, such dates will cause an exception to be\n thrown. The default is lenient.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "lenient",
                            "comment_text": "<code>true</code> if the lenient mode is to be turned\n on; <code>false</code> if it is to be turned off.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLenient",
                    "comment_text": "Tells whether date/time interpretation is to be lenient.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setFirstDayOfWeek",
                    "comment_text": "Sets what the first day of the week is; e.g., <code>SUNDAY</code> in the U.S.,\n <code>MONDAY</code> in France.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the given first day of the week.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFirstDayOfWeek",
                    "comment_text": "Gets what the first day of the week is; e.g., <code>SUNDAY</code> in the U.S.,\n <code>MONDAY</code> in France.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMinimalDaysInFirstWeek",
                    "comment_text": "Sets what the minimal days required in the first week of the year are;\n For example, if the first week is defined as one that contains the first\n day of the first month of a year, call this method with value 1. If it\n must be a full week, use value 7.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the given minimal days required in the first week\n of the year.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMinimalDaysInFirstWeek",
                    "comment_text": "Gets what the minimal days required in the first week of the year are;\n e.g., if the first week is defined as one that contains the first day\n of the first month of a year, this method returns 1. If\n the minimal days required must be a full week, this method\n returns 7.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isWeekDateSupported",
                    "comment_text": "Returns whether this {@code Calendar} supports week dates.\n\n <p>The default implementation of this method returns {@code false}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWeekYear",
                    "comment_text": "Returns the week year represented by this {@code Calendar}. The\n week year is in sync with the week cycle. The {@linkplain\n #getFirstDayOfWeek() first day of the first week} is the first\n day of the week year.\n\n <p>The default implementation of this method throws an\n {@link UnsupportedOperationException}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setWeekDate",
                    "comment_text": "Sets the date of this {@code Calendar} with the the given date\n specifiers - week year, week of year, and day of week.\n\n <p>Unlike the {@code set} method, all of the calendar fields\n and {@code time} values are calculated upon return.\n\n <p>If {@code weekOfYear} is out of the valid week-of-year range\n in {@code weekYear}, the {@code weekYear} and {@code\n weekOfYear} values are adjusted in lenient mode, or an {@code\n IllegalArgumentException} is thrown in non-lenient mode.\n\n <p>The default implementation of this method throws an\n {@code UnsupportedOperationException}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "weekYear",
                            "comment_text": "the week year",
                            "type": "int"
                        },
                        {
                            "name": "weekOfYear",
                            "comment_text": "the week number based on {@code weekYear}",
                            "type": "int"
                        },
                        {
                            "name": "dayOfWeek",
                            "comment_text": "the day of week value: one of the constants\n                   for the {@link #DAY_OF_WEEK} field: {@link\n                   #SUNDAY}, ..., {@link #SATURDAY}.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWeeksInWeekYear",
                    "comment_text": "Returns the number of weeks in the week year represented by this\n {@code Calendar}.\n\n <p>The default implementation of this method throws an\n {@code UnsupportedOperationException}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMinimum",
                    "comment_text": "Returns the minimum value for the given calendar field of this\n <code>Calendar</code> instance. The minimum value is defined as\n the smallest value returned by the {@link #get(int) get} method\n for any possible time value.  The minimum value depends on\n calendar system specific parameters of the instance.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMaximum",
                    "comment_text": "Returns the maximum value for the given calendar field of this\n <code>Calendar</code> instance. The maximum value is defined as\n the largest value returned by the {@link #get(int) get} method\n for any possible time value. The maximum value depends on\n calendar system specific parameters of the instance.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getGreatestMinimum",
                    "comment_text": "Returns the highest minimum value for the given calendar field\n of this <code>Calendar</code> instance. The highest minimum\n value is defined as the largest value returned by {@link\n #getActualMinimum(int)} for any possible time value. The\n greatest minimum value depends on calendar system specific\n parameters of the instance.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLeastMaximum",
                    "comment_text": "Returns the lowest maximum value for the given calendar field\n of this <code>Calendar</code> instance. The lowest maximum\n value is defined as the smallest value returned by {@link\n #getActualMaximum(int)} for any possible time value. The least\n maximum value depends on calendar system specific parameters of\n the instance. For example, a <code>Calendar</code> for the\n Gregorian calendar system returns 28 for the\n <code>DAY_OF_MONTH</code> field, because the 28th is the last\n day of the shortest month of this calendar, February in a\n common year.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActualMinimum",
                    "comment_text": "Returns the minimum value that the specified calendar field\n could have, given the time value of this <code>Calendar</code>.\n\n <p>The default implementation of this method uses an iterative\n algorithm to determine the actual minimum value for the\n calendar field. Subclasses should, if possible, override this\n with a more efficient implementation - in many cases, they can\n simply return <code>getMinimum()</code>.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActualMaximum",
                    "comment_text": "Returns the maximum value that the specified calendar field\n could have, given the time value of this\n <code>Calendar</code>. For example, the actual maximum value of\n the <code>MONTH</code> field is 12 in some years, and 13 in\n other years in the Hebrew calendar system.\n\n <p>The default implementation of this method uses an iterative\n algorithm to determine the actual maximum value for the\n calendar field. Subclasses should, if possible, override this\n with a more efficient implementation.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "field",
                            "comment_text": "the calendar field",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Creates and returns a copy of this object.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Return a string representation of this calendar. This method\n is intended to be used only for debugging purposes, and the\n format of the returned string may vary between implementations.\n The returned string may be empty but may not be <code>null</code>.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.BitSet",
            "interfaces": [
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class implements a vector of bits that grows as needed. Each\n component of the bit set has a {@code boolean} value. The\n bits of a {@code BitSet} are indexed by nonnegative integers.\n Individual indexed bits can be examined, set, or cleared. One\n {@code BitSet} may be used to modify the contents of another\n {@code BitSet} through logical AND, logical inclusive OR, and\n logical exclusive OR operations.\n\n <p>By default, all bits in the set initially have the value\n {@code false}.\n\n <p>Every bit set has a current size, which is the number of bits\n of space currently in use by the bit set. Note that the size is\n related to the implementation of a bit set, so it may change with\n implementation. The length of a bit set relates to logical length\n of a bit set and is defined independently of implementation.\n\n <p>Unless otherwise noted, passing a null parameter to any of the\n methods in a {@code BitSet} will result in a\n {@code NullPointerException}.\n\n <p>A {@code BitSet} is not safe for multithreaded use without\n external synchronization.",
            "since": "JDK1.0",
            "see": [

            ],
            "constructors": [
                {
                    "name": "BitSet",
                    "comment_text": "Creates a new bit set. All bits are initially {@code false}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "BitSet",
                    "comment_text": "Creates a bit set whose initial size is large enough to explicitly\n represent bits with indices in the range {@code 0} through\n {@code nbits-1}. All bits are initially {@code false}.",
                    "parameters": [
                        {
                            "name": "nbits",
                            "comment_text": "the initial size of the bit set",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "valueOf",
                    "comment_text": "Returns a new bit set containing all the bits in the given long array.\n\n <p>More precisely,\n <br>{@code BitSet.valueOf(longs).get(n) == ((longs[n/64] & (1L<<(n%64))) != 0)}\n <br>for all {@code n < 64 * longs.length}.\n\n <p>This method is equivalent to\n {@code BitSet.valueOf(LongBuffer.wrap(longs))}.",
                    "return_type": "java.util.BitSet",
                    "parameters": [
                        {
                            "name": "longs",
                            "comment_text": "a long array containing a little-endian representation\n        of a sequence of bits to be used as the initial bits of the\n        new bit set",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "valueOf",
                    "comment_text": "Returns a new bit set containing all the bits in the given long\n buffer between its position and limit.\n\n <p>More precisely,\n <br>{@code BitSet.valueOf(lb).get(n) == ((lb.get(lb.position()+n/64) & (1L<<(n%64))) != 0)}\n <br>for all {@code n < 64 * lb.remaining()}.\n\n <p>The long buffer is not modified by this method, and no\n reference to the buffer is retained by the bit set.",
                    "return_type": "java.util.BitSet",
                    "parameters": [
                        {
                            "name": "lb",
                            "comment_text": "a long buffer containing a little-endian representation\n        of a sequence of bits between its position and limit, to be\n        used as the initial bits of the new bit set",
                            "type": "java.nio.LongBuffer"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "valueOf",
                    "comment_text": "Returns a new bit set containing all the bits in the given byte array.\n\n <p>More precisely,\n <br>{@code BitSet.valueOf(bytes).get(n) == ((bytes[n/8] & (1<<(n%8))) != 0)}\n <br>for all {@code n <  8 * bytes.length}.\n\n <p>This method is equivalent to\n {@code BitSet.valueOf(ByteBuffer.wrap(bytes))}.",
                    "return_type": "java.util.BitSet",
                    "parameters": [
                        {
                            "name": "bytes",
                            "comment_text": "a byte array containing a little-endian\n        representation of a sequence of bits to be used as the\n        initial bits of the new bit set",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "valueOf",
                    "comment_text": "Returns a new bit set containing all the bits in the given byte\n buffer between its position and limit.\n\n <p>More precisely,\n <br>{@code BitSet.valueOf(bb).get(n) == ((bb.get(bb.position()+n/8) & (1<<(n%8))) != 0)}\n <br>for all {@code n < 8 * bb.remaining()}.\n\n <p>The byte buffer is not modified by this method, and no\n reference to the buffer is retained by the bit set.",
                    "return_type": "java.util.BitSet",
                    "parameters": [
                        {
                            "name": "bb",
                            "comment_text": "a byte buffer containing a little-endian representation\n        of a sequence of bits between its position and limit, to be\n        used as the initial bits of the new bit set",
                            "type": "java.nio.ByteBuffer"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toByteArray",
                    "comment_text": "Returns a new byte array containing all the bits in this bit set.\n\n <p>More precisely, if\n <br>{@code byte[] bytes = s.toByteArray();}\n <br>then {@code bytes.length == (s.length()+7)/8} and\n <br>{@code s.get(n) == ((bytes[n/8] & (1<<(n%8))) != 0)}\n <br>for all {@code n < 8 * bytes.length}.",
                    "return_type": "byte",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toLongArray",
                    "comment_text": "Returns a new long array containing all the bits in this bit set.\n\n <p>More precisely, if\n <br>{@code long[] longs = s.toLongArray();}\n <br>then {@code longs.length == (s.length()+63)/64} and\n <br>{@code s.get(n) == ((longs[n/64] & (1L<<(n%64))) != 0)}\n <br>for all {@code n < 64 * longs.length}.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flip",
                    "comment_text": "Sets the bit at the specified index to the complement of its\n current value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "bitIndex",
                            "comment_text": "the index of the bit to flip",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flip",
                    "comment_text": "Sets each bit from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to the complement of its current\n value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "index of the first bit to flip",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "index after the last bit to flip",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the bit at the specified index to {@code true}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "bitIndex",
                            "comment_text": "a bit index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the bit at the specified index to the specified value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "bitIndex",
                            "comment_text": "a bit index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "comment_text": "a boolean value to set",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the bits from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to {@code true}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "index of the first bit to be set",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "index after the last bit to be set",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the bits from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to the specified value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "index of the first bit to be set",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "index after the last bit to be set",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to set the selected bits to",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Sets the bit specified by the index to {@code false}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "bitIndex",
                            "comment_text": "the index of the bit to be cleared",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Sets the bits from the specified {@code fromIndex} (inclusive) to the\n specified {@code toIndex} (exclusive) to {@code false}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "index of the first bit to be cleared",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "index after the last bit to be cleared",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Sets all of the bits in this BitSet to {@code false}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value of the bit with the specified index. The value\n is {@code true} if the bit with the index {@code bitIndex}\n is currently set in this {@code BitSet}; otherwise, the result\n is {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "bitIndex",
                            "comment_text": "the bit index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns a new {@code BitSet} composed of bits from this {@code BitSet}\n from {@code fromIndex} (inclusive) to {@code toIndex} (exclusive).",
                    "return_type": "java.util.BitSet",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "index of the first bit to include",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "index after the last bit to include",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextSetBit",
                    "comment_text": "Returns the index of the first bit that is set to {@code true}\n that occurs on or after the specified starting index. If no such\n bit exists then {@code -1} is returned.\n\n <p>To iterate over the {@code true} bits in a {@code BitSet},\n use the following loop:\n\n  <pre> {@code\n for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i+1)) {\n     // operate on index i here\n }}</pre>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "the index to start checking from (inclusive)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextClearBit",
                    "comment_text": "Returns the index of the first bit that is set to {@code false}\n that occurs on or after the specified starting index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "the index to start checking from (inclusive)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "previousSetBit",
                    "comment_text": "Returns the index of the nearest bit that is set to {@code true}\n that occurs on or before the specified starting index.\n If no such bit exists, or if {@code -1} is given as the\n starting index, then {@code -1} is returned.\n\n <p>To iterate over the {@code true} bits in a {@code BitSet},\n use the following loop:\n\n  <pre> {@code\n for (int i = bs.length(); (i = bs.previousSetBit(i-1)) >= 0; ) {\n     // operate on index i here\n }}</pre>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "the index to start checking from (inclusive)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "previousClearBit",
                    "comment_text": "Returns the index of the nearest bit that is set to {@code false}\n that occurs on or before the specified starting index.\n If no such bit exists, or if {@code -1} is given as the\n starting index, then {@code -1} is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "the index to start checking from (inclusive)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "length",
                    "comment_text": "Returns the \"logical size\" of this {@code BitSet}: the index of\n the highest set bit in the {@code BitSet} plus one. Returns zero\n if the {@code BitSet} contains no set bits.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns true if this {@code BitSet} contains no bits that are set\n to {@code true}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "intersects",
                    "comment_text": "Returns true if the specified {@code BitSet} has any bits set to\n {@code true} that are also set to {@code true} in this {@code BitSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "set",
                            "comment_text": "{@code BitSet} to intersect with",
                            "type": "java.util.BitSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "cardinality",
                    "comment_text": "Returns the number of bits set to {@code true} in this {@code BitSet}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "and",
                    "comment_text": "Performs a logical <b>AND</b> of this target bit set with the\n argument bit set. This bit set is modified so that each bit in it\n has the value {@code true} if and only if it both initially\n had the value {@code true} and the corresponding bit in the\n bit set argument also had the value {@code true}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "set",
                            "comment_text": "a bit set",
                            "type": "java.util.BitSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "or",
                    "comment_text": "Performs a logical <b>OR</b> of this bit set with the bit set\n argument. This bit set is modified so that a bit in it has the\n value {@code true} if and only if it either already had the\n value {@code true} or the corresponding bit in the bit set\n argument has the value {@code true}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "set",
                            "comment_text": "a bit set",
                            "type": "java.util.BitSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "xor",
                    "comment_text": "Performs a logical <b>XOR</b> of this bit set with the bit set\n argument. This bit set is modified so that a bit in it has the\n value {@code true} if and only if one of the following\n statements holds:\n <ul>\n <li>The bit initially has the value {@code true}, and the\n     corresponding bit in the argument has the value {@code false}.\n <li>The bit initially has the value {@code false}, and the\n     corresponding bit in the argument has the value {@code true}.\n </ul>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "set",
                            "comment_text": "a bit set",
                            "type": "java.util.BitSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "andNot",
                    "comment_text": "Clears all of the bits in this {@code BitSet} whose corresponding\n bit is set in the specified {@code BitSet}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "set",
                            "comment_text": "the {@code BitSet} with which to mask this\n         {@code BitSet}",
                            "type": "java.util.BitSet"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this bit set. The hash code depends\n only on which bits are set within this {@code BitSet}.\n\n <p>The hash code is defined to be the result of the following\n calculation:\n  <pre> {@code\n public int hashCode() {\n     long h = 1234;\n     long[] words = toLongArray();\n     for (int i = words.length; --i >= 0; )\n         h ^= words[i] * (i + 1);\n     return (int)((h >> 32) ^ h);\n }}</pre>\n Note that the hash code changes if the set of bits is altered.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of bits of space actually in use by this\n {@code BitSet} to represent bit values.\n The maximum element in the set is the size - 1st element.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares this object against the specified object.\n The result is {@code true} if and only if the argument is\n not {@code null} and is a {@code Bitset} object that has\n exactly the same set of bits set to {@code true} as this bit\n set. That is, for every nonnegative {@code int} index {@code k},\n <pre>((BitSet)obj).get(k) == this.get(k)</pre>\n must be true. The current sizes of the two bit sets are not compared.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object to compare with",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Cloning this {@code BitSet} produces a new {@code BitSet}\n that is equal to it.\n The clone of the bit set is another bit set that has exactly the\n same bits set to {@code true} as this bit set.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this bit set. For every index\n for which this {@code BitSet} contains a bit in the set\n state, the decimal representation of that index is included in\n the result. Such indices are listed in order from lowest to\n highest, separated by \",&nbsp;\" (a comma and a space) and\n surrounded by braces, resulting in the usual mathematical\n notation for a set of integers.\n\n <p>Example:\n <pre>\n BitSet drPepper = new BitSet();</pre>\n Now {@code drPepper.toString()} returns \"{@code {}}\".<p>\n <pre>\n drPepper.set(2);</pre>\n Now {@code drPepper.toString()} returns \"{@code {2}}\".<p>\n <pre>\n drPepper.set(4);\n drPepper.set(10);</pre>\n Now {@code drPepper.toString()} returns \"{@code {2, 4, 10}}\".",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.Arrays",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class contains various methods for manipulating arrays (such as\n sorting and searching). This class also contains a static factory\n that allows arrays to be viewed as lists.\n\n <p>The methods in this class all throw a {@code NullPointerException},\n if the specified array reference is null, except where noted.\n\n <p>The documentation for the methods contained in this class includes\n briefs description of the <i>implementations</i>. Such descriptions should\n be regarded as <i>implementation notes</i>, rather than parts of the\n <i>specification</i>. Implementors should feel free to substitute other\n algorithms, so long as the specification itself is adhered to. (For\n example, the algorithm used by {@code sort(Object[])} does not have to be\n a MergeSort, but it does have to be <i>stable</i>.)\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "long"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "short"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "char"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "byte"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>The {@code <} relation does not provide a total order on all float\n values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}\n value compares neither less than, greater than, nor equal to any value,\n even itself. This method uses the total order imposed by the method\n {@link Float#compareTo}: {@code -0.0f} is treated as less than value\n {@code 0.0f} and {@code Float.NaN} is considered greater than any\n other value and all {@code Float.NaN} values are considered equal.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>The {@code <} relation does not provide a total order on all float\n values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}\n value compares neither less than, greater than, nor equal to any value,\n even itself. This method uses the total order imposed by the method\n {@link Float#compareTo}: {@code -0.0f} is treated as less than value\n {@code 0.0f} and {@code Float.NaN} is considered greater than any\n other value and all {@code Float.NaN} values are considered equal.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "float"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array into ascending numerical order.\n\n <p>The {@code <} relation does not provide a total order on all double\n values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}\n value compares neither less than, greater than, nor equal to any value,\n even itself. This method uses the total order imposed by the method\n {@link Double#compareTo}: {@code -0.0d} is treated as less than value\n {@code 0.0d} and {@code Double.NaN} is considered greater than any\n other value and all {@code Double.NaN} values are considered equal.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the array into ascending order. The range\n to be sorted extends from the index {@code fromIndex}, inclusive, to\n the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},\n the range to be sorted is empty.\n\n <p>The {@code <} relation does not provide a total order on all double\n values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}\n value compares neither less than, greater than, nor equal to any value,\n even itself. This method uses the total order imposed by the method\n {@link Double#compareTo}: {@code -0.0d} is treated as less than value\n {@code 0.0d} and {@code Double.NaN} is considered greater than any\n other value and all {@code Double.NaN} values are considered equal.\n\n <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort\n by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm\n offers O(n log(n)) performance on many data sets that cause other\n quicksorts to degrade to quadratic performance, and is typically\n faster than traditional (one-pivot) Quicksort implementations.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "double"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element, inclusive, to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element, exclusive, to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array of objects into ascending order, according\n to the {@linkplain Comparable natural ordering} of its elements.\n All elements in the array must implement the {@link Comparable}\n interface.  Furthermore, all elements in the array must be\n <i>mutually comparable</i> (that is, {@code e1.compareTo(e2)} must\n not throw a {@code ClassCastException} for any elements {@code e1}\n and {@code e2} in the array).\n\n <p>This sort is guaranteed to be <i>stable</i>:  equal elements will\n not be reordered as a result of the sort.\n\n <p>Implementation note: This implementation is a stable, adaptive,\n iterative mergesort that requires far fewer than n lg(n) comparisons\n when the input array is partially sorted, while offering the\n performance of a traditional mergesort when the input array is\n randomly ordered.  If the input array is nearly sorted, the\n implementation requires approximately n comparisons.  Temporary\n storage requirements vary from a small constant for nearly sorted\n input arrays to n/2 object references for randomly ordered input\n arrays.\n\n <p>The implementation takes equal advantage of ascending and\n descending order in its input array, and can take advantage of\n ascending and descending order in different parts of the the same\n input array.  It is well-suited to merging two or more sorted arrays:\n simply concatenate the arrays and sort the resulting array.\n\n <p>The implementation was adapted from Tim Peters's list sort for Python\n (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n TimSort</a>).  It uses techiques from Peter McIlroy's \"Optimistic\n Sorting and Information Theoretic Complexity\", in Proceedings of the\n Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n January 1993.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the specified array of objects into\n ascending order, according to the\n {@linkplain Comparable natural ordering} of its\n elements.  The range to be sorted extends from index\n {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive.\n (If {@code fromIndex==toIndex}, the range to be sorted is empty.)  All\n elements in this range must implement the {@link Comparable}\n interface.  Furthermore, all elements in this range must be <i>mutually\n comparable</i> (that is, {@code e1.compareTo(e2)} must not throw a\n {@code ClassCastException} for any elements {@code e1} and\n {@code e2} in the array).\n\n <p>This sort is guaranteed to be <i>stable</i>:  equal elements will\n not be reordered as a result of the sort.\n\n <p>Implementation note: This implementation is a stable, adaptive,\n iterative mergesort that requires far fewer than n lg(n) comparisons\n when the input array is partially sorted, while offering the\n performance of a traditional mergesort when the input array is\n randomly ordered.  If the input array is nearly sorted, the\n implementation requires approximately n comparisons.  Temporary\n storage requirements vary from a small constant for nearly sorted\n input arrays to n/2 object references for randomly ordered input\n arrays.\n\n <p>The implementation takes equal advantage of ascending and\n descending order in its input array, and can take advantage of\n ascending and descending order in different parts of the the same\n input array.  It is well-suited to merging two or more sorted arrays:\n simply concatenate the arrays and sort the resulting array.\n\n <p>The implementation was adapted from Tim Peters's list sort for Python\n (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n TimSort</a>).  It uses techiques from Peter McIlroy's \"Optimistic\n Sorting and Information Theoretic Complexity\", in Proceedings of the\n Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n January 1993.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be sorted",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified array of objects according to the order induced by\n the specified comparator.  All elements in the array must be\n <i>mutually comparable</i> by the specified comparator (that is,\n {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}\n for any elements {@code e1} and {@code e2} in the array).\n\n <p>This sort is guaranteed to be <i>stable</i>:  equal elements will\n not be reordered as a result of the sort.\n\n <p>Implementation note: This implementation is a stable, adaptive,\n iterative mergesort that requires far fewer than n lg(n) comparisons\n when the input array is partially sorted, while offering the\n performance of a traditional mergesort when the input array is\n randomly ordered.  If the input array is nearly sorted, the\n implementation requires approximately n comparisons.  Temporary\n storage requirements vary from a small constant for nearly sorted\n input arrays to n/2 object references for randomly ordered input\n arrays.\n\n <p>The implementation takes equal advantage of ascending and\n descending order in its input array, and can take advantage of\n ascending and descending order in different parts of the the same\n input array.  It is well-suited to merging two or more sorted arrays:\n simply concatenate the arrays and sort the resulting array.\n\n <p>The implementation was adapted from Tim Peters's list sort for Python\n (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n TimSort</a>).  It uses techiques from Peter McIlroy's \"Optimistic\n Sorting and Information Theoretic Complexity\", in Proceedings of the\n Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n January 1993.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "c",
                            "comment_text": "the comparator to determine the order of the array.  A\n        {@code null} value indicates that the elements'\n        {@linkplain Comparable natural ordering} should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sort",
                    "comment_text": "Sorts the specified range of the specified array of objects according\n to the order induced by the specified comparator.  The range to be\n sorted extends from index {@code fromIndex}, inclusive, to index\n {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\n range to be sorted is empty.)  All elements in the range must be\n <i>mutually comparable</i> by the specified comparator (that is,\n {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}\n for any elements {@code e1} and {@code e2} in the range).\n\n <p>This sort is guaranteed to be <i>stable</i>:  equal elements will\n not be reordered as a result of the sort.\n\n <p>Implementation note: This implementation is a stable, adaptive,\n iterative mergesort that requires far fewer than n lg(n) comparisons\n when the input array is partially sorted, while offering the\n performance of a traditional mergesort when the input array is\n randomly ordered.  If the input array is nearly sorted, the\n implementation requires approximately n comparisons.  Temporary\n storage requirements vary from a small constant for nearly sorted\n input arrays to n/2 object references for randomly ordered input\n arrays.\n\n <p>The implementation takes equal advantage of ascending and\n descending order in its input array, and can take advantage of\n ascending and descending order in different parts of the the same\n input array.  It is well-suited to merging two or more sorted arrays:\n simply concatenate the arrays and sort the resulting array.\n\n <p>The implementation was adapted from Tim Peters's list sort for Python\n (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n TimSort</a>).  It uses techiques from Peter McIlroy's \"Optimistic\n Sorting and Information Theoretic Complexity\", in Proceedings of the\n Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n January 1993.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be sorted",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        sorted",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be sorted",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "the comparator to determine the order of the array.  A\n        {@code null} value indicates that the elements'\n        {@linkplain Comparable natural ordering} should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of longs for the specified value using the\n binary search algorithm.  The array must be sorted (as\n by the {@link #sort(long[])} method) prior to making this call.  If it\n is not sorted, the results are undefined.  If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "long"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of longs for the specified value using the\n binary search algorithm.\n The range must be sorted (as\n by the {@link #sort(long[], int, int)} method)\n prior to making this call.  If it\n is not sorted, the results are undefined.  If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "long"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of ints for the specified value using the\n binary search algorithm.  The array must be sorted (as\n by the {@link #sort(int[])} method) prior to making this call.  If it\n is not sorted, the results are undefined.  If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of ints for the specified value using the\n binary search algorithm.\n The range must be sorted (as\n by the {@link #sort(int[], int, int)} method)\n prior to making this call.  If it\n is not sorted, the results are undefined.  If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "int"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of shorts for the specified value using\n the binary search algorithm.  The array must be sorted\n (as by the {@link #sort(short[])} method) prior to making this call.  If\n it is not sorted, the results are undefined.  If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "short"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of shorts for the specified value using\n the binary search algorithm.\n The range must be sorted\n (as by the {@link #sort(short[], int, int)} method)\n prior to making this call.  If\n it is not sorted, the results are undefined.  If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "short"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of chars for the specified value using the\n binary search algorithm.  The array must be sorted (as\n by the {@link #sort(char[])} method) prior to making this call.  If it\n is not sorted, the results are undefined.  If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "char"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of chars for the specified value using the\n binary search algorithm.\n The range must be sorted (as\n by the {@link #sort(char[], int, int)} method)\n prior to making this call.  If it\n is not sorted, the results are undefined.  If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "char"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of bytes for the specified value using the\n binary search algorithm.  The array must be sorted (as\n by the {@link #sort(byte[])} method) prior to making this call.  If it\n is not sorted, the results are undefined.  If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "byte"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of bytes for the specified value using the\n binary search algorithm.\n The range must be sorted (as\n by the {@link #sort(byte[], int, int)} method)\n prior to making this call.  If it\n is not sorted, the results are undefined.  If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "byte"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of doubles for the specified value using\n the binary search algorithm.  The array must be sorted\n (as by the {@link #sort(double[])} method) prior to making this call.\n If it is not sorted, the results are undefined.  If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.  This method considers all NaN values to be\n equivalent and equal.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "double"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of doubles for the specified value using\n the binary search algorithm.\n The range must be sorted\n (as by the {@link #sort(double[], int, int)} method)\n prior to making this call.\n If it is not sorted, the results are undefined.  If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found.  This method considers all NaN values to be\n equivalent and equal.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "double"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array of floats for the specified value using\n the binary search algorithm. The array must be sorted\n (as by the {@link #sort(float[])} method) prior to making this call. If\n it is not sorted, the results are undefined. If the array contains\n multiple elements with the specified value, there is no guarantee which\n one will be found. This method considers all NaN values to be\n equivalent and equal.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "float"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array of floats for the specified value using\n the binary search algorithm.\n The range must be sorted\n (as by the {@link #sort(float[], int, int)} method)\n prior to making this call. If\n it is not sorted, the results are undefined. If the range contains\n multiple elements with the specified value, there is no guarantee which\n one will be found. This method considers all NaN values to be\n equivalent and equal.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "float"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array for the specified object using the binary\n search algorithm. The array must be sorted into ascending order\n according to the\n {@linkplain Comparable natural ordering}\n of its elements (as by the\n {@link #sort(Object[])} method) prior to making this call.\n If it is not sorted, the results are undefined.\n (If the array contains elements that are not mutually comparable (for\n example, strings and integers), it <i>cannot</i> be sorted according\n to the natural ordering of its elements, hence results are undefined.)\n If the array contains multiple\n elements equal to the specified object, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array for the specified object using the binary\n search algorithm.\n The range must be sorted into ascending order\n according to the\n {@linkplain Comparable natural ordering}\n of its elements (as by the\n {@link #sort(Object[], int, int)} method) prior to making this\n call.  If it is not sorted, the results are undefined.\n (If the range contains elements that are not mutually comparable (for\n example, strings and integers), it <i>cannot</i> be sorted according\n to the natural ordering of its elements, hence results are undefined.)\n If the range contains multiple\n elements equal to the specified object, there is no guarantee which\n one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches the specified array for the specified object using the binary\n search algorithm.  The array must be sorted into ascending order\n according to the specified comparator (as by the\n {@link #sort(Object[], Comparator) sort(T[], Comparator)}\n method) prior to making this call.  If it is\n not sorted, the results are undefined.\n If the array contains multiple\n elements equal to the specified object, there is no guarantee which one\n will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "c",
                            "comment_text": "the comparator by which the array is ordered.  A\n        <tt>null</tt> value indicates that the elements'\n        {@linkplain Comparable natural ordering} should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "binarySearch",
                    "comment_text": "Searches a range of\n the specified array for the specified object using the binary\n search algorithm.\n The range must be sorted into ascending order\n according to the specified comparator (as by the\n {@link #sort(Object[], int, int, Comparator)\n sort(T[], int, int, Comparator)}\n method) prior to making this call.\n If it is not sorted, the results are undefined.\n If the range contains multiple elements equal to the specified object,\n there is no guarantee which one will be found.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be searched",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n          searched",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be searched",
                            "type": "int"
                        },
                        {
                            "name": "key",
                            "comment_text": "the value to be searched for",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "c",
                            "comment_text": "the comparator by which the array is ordered.  A\n        <tt>null</tt> value indicates that the elements'\n        {@linkplain Comparable natural ordering} should be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of longs are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "long"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of ints are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "int"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of shorts are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "short"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of chars are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "char"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of bytes are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "byte"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of booleans are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "boolean"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of doubles are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>\n\n Two doubles <tt>d1</tt> and <tt>d2</tt> are considered equal if:\n <pre>    <tt>new Double(d1).equals(new Double(d2))</tt></pre>\n (Unlike the <tt>==</tt> operator, this method considers\n <tt>NaN</tt> equals to itself, and 0.0d unequal to -0.0d.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "double"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of floats are\n <i>equal</i> to one another.  Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  In other words, two arrays\n are equal if they contain the same elements in the same order.  Also,\n two array references are considered equal if both are <tt>null</tt>.<p>\n\n Two floats <tt>f1</tt> and <tt>f2</tt> are considered equal if:\n <pre>    <tt>new Float(f1).equals(new Float(f2))</tt></pre>\n (Unlike the <tt>==</tt> operator, this method considers\n <tt>NaN</tt> equals to itself, and 0.0f unequal to -0.0f.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "float"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays of Objects are\n <i>equal</i> to one another.  The two arrays are considered equal if\n both arrays contain the same number of elements, and all corresponding\n pairs of elements in the two arrays are equal.  Two objects <tt>e1</tt>\n and <tt>e2</tt> are considered <i>equal</i> if <tt>(e1==null ? e2==null\n : e1.equals(e2))</tt>.  In other words, the two arrays are equal if\n they contain the same elements in the same order.  Also, two array\n references are considered equal if both are <tt>null</tt>.<p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "one array to be tested for equality",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified long value to each element of the specified array\n of longs.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "long"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified long value to each element of the specified\n range of the specified array of longs.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "long"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified int value to each element of the specified array\n of ints.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified int value to each element of the specified\n range of the specified array of ints.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "int"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified short value to each element of the specified array\n of shorts.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "short"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified short value to each element of the specified\n range of the specified array of shorts.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "short"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified char value to each element of the specified array\n of chars.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "char"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified char value to each element of the specified\n range of the specified array of chars.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "char"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified byte value to each element of the specified array\n of bytes.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "byte"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified byte value to each element of the specified\n range of the specified array of bytes.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "byte"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified boolean value to each element of the specified\n array of booleans.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "boolean"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified boolean value to each element of the specified\n range of the specified array of booleans.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "boolean"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified double value to each element of the specified\n array of doubles.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "double"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified double value to each element of the specified\n range of the specified array of doubles.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "double"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified float value to each element of the specified array\n of floats.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "float"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified float value to each element of the specified\n range of the specified array of floats.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "float"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified Object reference to each element of the specified\n array of Objects.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Assigns the specified Object reference to each element of the specified\n range of the specified array of Objects.  The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array to be filled",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromIndex",
                            "comment_text": "the index of the first element (inclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "the index of the last element (exclusive) to be\n        filled with the specified value",
                            "type": "int"
                        },
                        {
                            "name": "val",
                            "comment_text": "the value to be stored in all elements of the array",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>null</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n The resulting array is of exactly the same class as the original array.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>null</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.\n The resulting array is of the class <tt>newType</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        },
                        {
                            "name": "newType",
                            "comment_text": "the class of the copy to be returned",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>(byte)0</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "byte",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "byte"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>(short)0</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "short",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "short"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "int"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0L</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "long"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with null characters (if necessary)\n so the copy has the specified length.  For all indices that are valid\n in both the original array and the copy, the two arrays will contain\n identical values.  For any indices that are valid in the copy but not\n the original, the copy will contain <tt>'\\\\u000'</tt>.  Such indices\n will exist if and only if the specified length is greater than that of\n the original array.",
                    "return_type": "char",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "char"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0f</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "float",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "float"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>0d</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "double",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "double"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOf",
                    "comment_text": "Copies the specified array, truncating or padding with <tt>false</tt> (if necessary)\n so the copy has the specified length.  For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  For any indices that are valid in the\n copy but not the original, the copy will contain <tt>false</tt>.\n Such indices will exist if and only if the specified length\n is greater than that of the original array.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array to be copied",
                            "type": "boolean"
                        },
                        {
                            "name": "newLength",
                            "comment_text": "the length of the copy to be returned",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>null</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.\n <p>\n The resulting array is of exactly the same class as the original array.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>null</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.\n The resulting array is of the class <tt>newType</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        },
                        {
                            "name": "newType",
                            "comment_text": "the class of the copy to be returned",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>(byte)0</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "byte",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "byte"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>(short)0</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "short",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "short"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>0</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "int"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>0L</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "long"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>'\\\\u000'</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "char",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "char"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>0f</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "float",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "float"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>0d</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "double",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "double"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "copyOfRange",
                    "comment_text": "Copies the specified range of the specified array into a new array.\n The initial index of the range (<tt>from</tt>) must lie between zero\n and <tt>original.length</tt>, inclusive.  The value at\n <tt>original[from]</tt> is placed into the initial element of the copy\n (unless <tt>from == original.length</tt> or <tt>from == to</tt>).\n Values from subsequent elements in the original array are placed into\n subsequent elements in the copy.  The final index of the range\n (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,\n may be greater than <tt>original.length</tt>, in which case\n <tt>false</tt> is placed in all elements of the copy whose index is\n greater than or equal to <tt>original.length - from</tt>.  The length\n of the returned array will be <tt>to - from</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "original",
                            "comment_text": "the array from which a range is to be copied",
                            "type": "boolean"
                        },
                        {
                            "name": "from",
                            "comment_text": "the initial index of the range to be copied, inclusive",
                            "type": "int"
                        },
                        {
                            "name": "to",
                            "comment_text": "the final index of the range to be copied, exclusive.\n     (This index may lie outside the array.)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "asList",
                    "comment_text": "Returns a fixed-size list backed by the specified array.  (Changes to\n the returned list \"write through\" to the array.)  This method acts\n as bridge between array-based and collection-based APIs, in\n combination with {@link Collection#toArray}.  The returned list is\n serializable and implements {@link RandomAccess}.\n\n <p>This method also provides a convenient way to create a fixed-size\n list initialized to contain several elements:\n <pre>\n     List&lt;String&gt; stooges = Arrays.asList(\"Larry\", \"Moe\", \"Curly\");\n </pre>",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array by which the list will be backed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>long</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Long}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two non-null <tt>int</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Integer}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>short</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Short}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>char</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Character}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>byte</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Byte}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>boolean</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Boolean}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>float</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Float}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.\n For any two <tt>double</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Double}\n instances representing the elements of <tt>a</tt> in the same order.\n If <tt>a</tt> is <tt>null</tt>, this method returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose hash value to compute",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns a hash code based on the contents of the specified array.  If\n the array contains other arrays as elements, the hash code is based on\n their identities rather than their contents.  It is therefore\n acceptable to invoke this method on an array that contains itself as an\n element,  either directly or indirectly through one or more levels of\n arrays.\n\n <p>For any two arrays <tt>a</tt> and <tt>b</tt> such that\n <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n <p>The value returned by this method is equal to the value that would\n be returned by <tt>Arrays.asList(a).hashCode()</tt>, unless <tt>a</tt>\n is <tt>null</tt>, in which case <tt>0</tt> is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose content-based hash code to compute",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deepHashCode",
                    "comment_text": "Returns a hash code based on the \"deep contents\" of the specified\n array.  If the array contains other arrays as elements, the\n hash code is based on their contents and so on, ad infinitum.\n It is therefore unacceptable to invoke this method on an array that\n contains itself as an element, either directly or indirectly through\n one or more levels of arrays.  The behavior of such an invocation is\n undefined.\n\n <p>For any two arrays <tt>a</tt> and <tt>b</tt> such that\n <tt>Arrays.deepEquals(a, b)</tt>, it is also the case that\n <tt>Arrays.deepHashCode(a) == Arrays.deepHashCode(b)</tt>.\n\n <p>The computation of the value returned by this method is similar to\n that of the value returned by {@link List#hashCode()} on a list\n containing the same elements as <tt>a</tt> in the same order, with one\n difference: If an element <tt>e</tt> of <tt>a</tt> is itself an array,\n its hash code is computed not by calling <tt>e.hashCode()</tt>, but as\n by calling the appropriate overloading of <tt>Arrays.hashCode(e)</tt>\n if <tt>e</tt> is an array of a primitive type, or as by calling\n <tt>Arrays.deepHashCode(e)</tt> recursively if <tt>e</tt> is an array\n of a reference type.  If <tt>a</tt> is <tt>null</tt>, this method\n returns 0.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose deep-content-based hash code to compute",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deepEquals",
                    "comment_text": "Returns <tt>true</tt> if the two specified arrays are <i>deeply\n equal</i> to one another.  Unlike the {@link #equals(Object[],Object[])}\n method, this method is appropriate for use with nested arrays of\n arbitrary depth.\n\n <p>Two array references are considered deeply equal if both\n are <tt>null</tt>, or if they refer to arrays that contain the same\n number of elements and all corresponding pairs of elements in the two\n arrays are deeply equal.\n\n <p>Two possibly <tt>null</tt> elements <tt>e1</tt> and <tt>e2</tt> are\n deeply equal if any of the following conditions hold:\n <ul>\n    <li> <tt>e1</tt> and <tt>e2</tt> are both arrays of object reference\n         types, and <tt>Arrays.deepEquals(e1, e2) would return true</tt>\n    <li> <tt>e1</tt> and <tt>e2</tt> are arrays of the same primitive\n         type, and the appropriate overloading of\n         <tt>Arrays.equals(e1, e2)</tt> would return true.\n    <li> <tt>e1 == e2</tt>\n    <li> <tt>e1.equals(e2)</tt> would return true.\n </ul>\n Note that this definition permits <tt>null</tt> elements at any depth.\n\n <p>If either of the specified arrays contain themselves as elements\n either directly or indirectly through one or more levels of arrays,\n the behavior of this method is undefined.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "a1",
                            "comment_text": "one array to be tested for equality",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "a2",
                            "comment_text": "the other array to be tested for equality",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(long)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>\n is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(int)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt> is\n <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(short)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>\n is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "short"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(char)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>\n is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "char"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements\n are separated by the characters <tt>\", \"</tt> (a comma followed\n by a space).  Elements are converted to strings as by\n <tt>String.valueOf(byte)</tt>.  Returns <tt>\"null\"</tt> if\n <tt>a</tt> is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(boolean)</tt>.  Returns <tt>\"null\"</tt> if\n <tt>a</tt> is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(float)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>\n is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  Elements are converted to strings as by\n <tt>String.valueOf(double)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>\n is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the contents of the specified array.\n If the array contains other arrays as elements, they are converted to\n strings by the {@link Object#toString} method inherited from\n <tt>Object</tt>, which describes their <i>identities</i> rather than\n their contents.\n\n <p>The value returned by this method is equal to the value that would\n be returned by <tt>Arrays.asList(a).toString()</tt>, unless <tt>a</tt>\n is <tt>null</tt>, in which case <tt>\"null\"</tt> is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deepToString",
                    "comment_text": "Returns a string representation of the \"deep contents\" of the specified\n array.  If the array contains other arrays as elements, the string\n representation contains their contents and so on.  This method is\n designed for converting multidimensional arrays to strings.\n\n <p>The string representation consists of a list of the array's\n elements, enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent\n elements are separated by the characters <tt>\", \"</tt> (a comma\n followed by a space).  Elements are converted to strings as by\n <tt>String.valueOf(Object)</tt>, unless they are themselves\n arrays.\n\n <p>If an element <tt>e</tt> is an array of a primitive type, it is\n converted to a string as by invoking the appropriate overloading of\n <tt>Arrays.toString(e)</tt>.  If an element <tt>e</tt> is an array of a\n reference type, it is converted to a string as by invoking\n this method recursively.\n\n <p>To avoid infinite recursion, if the specified array contains itself\n as an element, or contains an indirect reference to itself through one\n or more levels of arrays, the self-reference is converted to the string\n <tt>\"[...]\"</tt>.  For example, an array containing only a reference\n to itself would be rendered as <tt>\"[[...]]\"</tt>.\n\n <p>This method returns <tt>\"null\"</tt> if the specified array\n is <tt>null</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array whose string representation to return",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ArrayList",
            "interfaces": [
                "java.util.List",
                "java.util.RandomAccess",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractList",
            "comment_text": "Resizable-array implementation of the <tt>List</tt> interface.  Implements\n all optional list operations, and permits all elements, including\n <tt>null</tt>.  In addition to implementing the <tt>List</tt> interface,\n this class provides methods to manipulate the size of the array that is\n used internally to store the list.  (This class is roughly equivalent to\n <tt>Vector</tt>, except that it is unsynchronized.)\n\n <p>The <tt>size</tt>, <tt>isEmpty</tt>, <tt>get</tt>, <tt>set</tt>,\n <tt>iterator</tt>, and <tt>listIterator</tt> operations run in constant\n time.  The <tt>add</tt> operation runs in <i>amortized constant time</i>,\n that is, adding n elements requires O(n) time.  All of the other operations\n run in linear time (roughly speaking).  The constant factor is low compared\n to that for the <tt>LinkedList</tt> implementation.\n\n <p>Each <tt>ArrayList</tt> instance has a <i>capacity</i>.  The capacity is\n the size of the array used to store the elements in the list.  It is always\n at least as large as the list size.  As elements are added to an ArrayList,\n its capacity grows automatically.  The details of the growth policy are not\n specified beyond the fact that adding an element has constant amortized\n time cost.\n\n <p>An application can increase the capacity of an <tt>ArrayList</tt> instance\n before adding a large number of elements using the <tt>ensureCapacity</tt>\n operation.  This may reduce the amount of incremental reallocation.\n\n <p><strong>Note that this implementation is not synchronized.</strong>\n If multiple threads access an <tt>ArrayList</tt> instance concurrently,\n and at least one of the threads modifies the list structurally, it\n <i>must</i> be synchronized externally.  (A structural modification is\n any operation that adds or deletes one or more elements, or explicitly\n resizes the backing array; merely setting the value of an element is not\n a structural modification.)  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the list.\n\n If no such object exists, the list should be \"wrapped\" using the\n {@link Collections#synchronizedList Collections.synchronizedList}\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the list:<pre>\n   List list = Collections.synchronizedList(new ArrayList(...));</pre>\n\n <p><a name=\"fail-fast\"/>\n The iterators returned by this class's {@link #iterator() iterator} and\n {@link #listIterator(int) listIterator} methods are <em>fail-fast</em>:\n if the list is structurally modified at any time after the iterator is\n created, in any way except through the iterator's own\n {@link ListIterator#remove() remove} or\n {@link ListIterator#add(Object) add} methods, the iterator will throw a\n {@link ConcurrentModificationException}.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw {@code ConcurrentModificationException} on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.List",
                "java.util.LinkedList",
                "java.util.Vector"
            ],
            "constructors": [
                {
                    "name": "ArrayList",
                    "comment_text": "Constructs an empty list with the specified initial capacity.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity of the list",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ArrayList",
                    "comment_text": "Constructs an empty list with an initial capacity of ten.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ArrayList",
                    "comment_text": "Constructs a list containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed into this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "trimToSize",
                    "comment_text": "Trims the capacity of this <tt>ArrayList</tt> instance to be the\n list's current size.  An application can use this operation to minimize\n the storage of an <tt>ArrayList</tt> instance.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ensureCapacity",
                    "comment_text": "Increases the capacity of this <tt>ArrayList</tt> instance, if\n necessary, to ensure that it can hold at least the number of elements\n specified by the minimum capacity argument.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "minCapacity",
                            "comment_text": "the desired minimum capacity",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this list.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this list contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this list is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this <tt>ArrayList</tt> instance.  (The\n elements themselves are not copied.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list in proper\n sequence (from first to last element); the runtime type of the returned\n array is that of the specified array.  If the list fits in the\n specified array, it is returned therein.  Otherwise, a new array is\n allocated with the runtime type of the specified array and the size of\n this list.\n\n <p>If the list fits in the specified array with room to spare\n (i.e., the array has more elements than the list), the element in\n the array immediately following the end of the collection is set to\n <tt>null</tt>.  (This is useful in determining the length of the\n list <i>only</i> if the caller knows that the list does not contain\n any null elements.)",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the element at the specified position in this list.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to return",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the element at the specified position in this list with\n the specified element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of the element to replace",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be stored at the specified position",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Appends the specified element to the end of this list.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be appended to this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which the specified element is to be inserted",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "element to be inserted",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "the index of the element to be removed",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this list,\n if it is present.  If the list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this list, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this list.  The list will\n be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the\n specified collection's Iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the operation\n is in progress.  (This implies that the behavior of this call is\n undefined if the specified collection is this list, and this\n list is nonempty.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in the list in the order that they are returned by the\n specified collection's iterator.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which to insert the first element from the\n              specified collection",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeRange",
                    "comment_text": "Removes from this list all of the elements whose index is between\n {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n Shifts any succeeding elements to the left (reduces their index).\n This call shortens the list by {@code (toIndex - fromIndex)} elements.\n (If {@code toIndex==fromIndex}, this operation has no effect.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this list all of its elements that are contained in the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this list that are contained in the\n specified collection.  In other words, removes from this list all\n of its elements that are not contained in the specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be retained in this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to {@link ListIterator#next next}.\n An initial call to {@link ListIterator#previous previous} would\n return the element with the specified index minus one.\n\n <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence).\n\n <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this list in proper sequence.\n\n <p>The returned iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subList",
                    "comment_text": "Returns a view of the portion of this list between the specified\n {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If\n {@code fromIndex} and {@code toIndex} are equal, the returned list is\n empty.)  The returned list is backed by this list, so non-structural\n changes in the returned list are reflected in this list, and vice-versa.\n The returned list supports all of the optional list operations.\n\n <p>This method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a list can be used as a range operation by passing a subList view\n instead of a whole list.  For example, the following idiom\n removes a range of elements from a list:\n <pre>\n      list.subList(from, to).clear();\n </pre>\n Similar idioms may be constructed for {@link #indexOf(Object)} and\n {@link #lastIndexOf(Object)}, and all of the algorithms in the\n {@link Collections} class can be applied to a subList.\n\n <p>The semantics of the list returned by this method become undefined if\n the backing list (i.e., this list) is <i>structurally modified</i> in\n any way other than via the returned list.  (Structural modifications are\n those that change the size of this list, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.ArrayDeque",
            "interfaces": [
                "java.util.Deque",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractCollection",
            "comment_text": "Resizable-array implementation of the {@link Deque} interface.  Array\n deques have no capacity restrictions; they grow as necessary to support\n usage.  They are not thread-safe; in the absence of external\n synchronization, they do not support concurrent access by multiple threads.\n Null elements are prohibited.  This class is likely to be faster than\n {@link Stack} when used as a stack, and faster than {@link LinkedList}\n when used as a queue.\n\n <p>Most <tt>ArrayDeque</tt> operations run in amortized constant time.\n Exceptions include {@link #remove(Object) remove}, {@link\n #removeFirstOccurrence removeFirstOccurrence}, {@link #removeLastOccurrence\n removeLastOccurrence}, {@link #contains contains}, {@link #iterator\n iterator.remove()}, and the bulk operations, all of which run in linear\n time.\n\n <p>The iterators returned by this class's <tt>iterator</tt> method are\n <i>fail-fast</i>: If the deque is modified at any time after the iterator\n is created, in any way except through the iterator's own <tt>remove</tt>\n method, the iterator will generally throw a {@link\n ConcurrentModificationException}.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the\n future.\n\n <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: <i>the fail-fast behavior of iterators\n should be used only to detect bugs.</i>\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ArrayDeque",
                    "comment_text": "Constructs an empty array deque with an initial capacity\n sufficient to hold 16 elements.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ArrayDeque",
                    "comment_text": "Constructs an empty array deque with an initial capacity\n sufficient to hold the specified number of elements.",
                    "parameters": [
                        {
                            "name": "numElements",
                            "comment_text": "lower bound on initial capacity of the deque",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ArrayDeque",
                    "comment_text": "Constructs a deque containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.  (The first element returned by the collection's\n iterator becomes the first element, or <i>front</i> of the\n deque.)",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed into the deque",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "addFirst",
                    "comment_text": "Inserts the specified element at the front of this deque.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addLast",
                    "comment_text": "Inserts the specified element at the end of this deque.\n\n <p>This method is equivalent to {@link #add}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "Inserts the specified element at the front of this deque.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "Inserts the specified element at the end of this deque.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirstOccurrence",
                    "comment_text": "Removes the first occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLastOccurrence",
                    "comment_text": "Removes the last occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the end of this deque.\n\n <p>This method is equivalent to {@link #addLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the end of this deque.\n\n <p>This method is equivalent to {@link #offerLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque.\n\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n <tt>null</tt> if this deque is empty.\n\n <p>This method is equivalent to {@link #pollFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from {@link #peek peek} only in\n that it throws an exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque, or returns <tt>null</tt> if this deque is empty.\n\n <p>This method is equivalent to {@link #peekFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "Pushes an element onto the stack represented by this deque.  In other\n words, inserts the element at the front of this deque.\n\n <p>This method is equivalent to {@link #addFirst}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to push",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pop",
                    "comment_text": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n <p>This method is equivalent to {@link #removeFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this deque.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this deque contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this deque.  The elements\n will be ordered from first (head) to last (tail).  This is the same\n order that elements would be dequeued (via successive calls to\n {@link #remove} or popped (via successive calls to {@link #pop}).",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this deque",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to {@link #removeFirstOccurrence}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this deque.\n The deque will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this deque\n in proper sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this deque in\n proper sequence (from first to last element); the runtime type of the\n returned array is that of the specified array.  If the deque fits in\n the specified array, it is returned therein.  Otherwise, a new array\n is allocated with the runtime type of the specified array and the\n size of this deque.\n\n <p>If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n <tt>null</tt>.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a copy of this deque.",
                    "return_type": "java.util.ArrayDeque",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractSet",
            "interfaces": [
                "java.util.Set"
            ],
            "superclass": "java.util.AbstractCollection",
            "comment_text": "This class provides a skeletal implementation of the <tt>Set</tt>\n interface to minimize the effort required to implement this\n interface. <p>\n\n The process of implementing a set by extending this class is identical\n to that of implementing a Collection by extending AbstractCollection,\n except that all of the methods and constructors in subclasses of this\n class must obey the additional constraints imposed by the <tt>Set</tt>\n interface (for instance, the add method must not permit addition of\n multiple instances of an object to a set).<p>\n\n Note that this class does not override any of the implementations from\n the <tt>AbstractCollection</tt> class.  It merely adds implementations\n for <tt>equals</tt> and <tt>hashCode</tt>.<p>\n\n This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.AbstractCollection",
                "java.util.Set"
            ],
            "constructors": [
                {
                    "name": "AbstractSet",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this set for equality.  Returns\n <tt>true</tt> if the given object is also a set, the two sets have\n the same size, and every member of the given set is contained in\n this set.  This ensures that the <tt>equals</tt> method works\n properly across different implementations of the <tt>Set</tt>\n interface.<p>\n\n This implementation first checks if the specified object is this\n set; if so it returns <tt>true</tt>.  Then, it checks if the\n specified object is a set whose size is identical to the size of\n this set; if not, it returns false.  If so, it returns\n <tt>containsAll((Collection) o)</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this set.  The hash code of a set is\n defined to be the sum of the hash codes of the elements in the set,\n where the hash code of a <tt>null</tt> element is defined to be zero.\n This ensures that <tt>s1.equals(s2)</tt> implies that\n <tt>s1.hashCode()==s2.hashCode()</tt> for any two sets <tt>s1</tt>\n and <tt>s2</tt>, as required by the general contract of\n {@link Object#hashCode}.\n\n <p>This implementation iterates over the set, calling the\n <tt>hashCode</tt> method on each element in the set, and adding up\n the results.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this set all of its elements that are contained in the\n specified collection (optional operation).  If the specified\n collection is also a set, this operation effectively modifies this\n set so that its value is the <i>asymmetric set difference</i> of\n the two sets.\n\n <p>This implementation determines which is the smaller of this set\n and the specified collection, by invoking the <tt>size</tt>\n method on each.  If this set has fewer elements, then the\n implementation iterates over this set, checking each element\n returned by the iterator in turn to see if it is contained in\n the specified collection.  If it is so contained, it is removed\n from this set with the iterator's <tt>remove</tt> method.  If\n the specified collection has fewer elements, then the\n implementation iterates over the specified collection, removing\n from this set each element returned by the iterator, using this\n set's <tt>remove</tt> method.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by the\n <tt>iterator</tt> method does not implement the <tt>remove</tt> method.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractSequentialList",
            "interfaces": [

            ],
            "superclass": "java.util.AbstractList",
            "comment_text": "This class provides a skeletal implementation of the <tt>List</tt>\n interface to minimize the effort required to implement this interface\n backed by a \"sequential access\" data store (such as a linked list).  For\n random access data (such as an array), <tt>AbstractList</tt> should be used\n in preference to this class.<p>\n\n This class is the opposite of the <tt>AbstractList</tt> class in the sense\n that it implements the \"random access\" methods (<tt>get(int index)</tt>,\n <tt>set(int index, E element)</tt>, <tt>add(int index, E element)</tt> and\n <tt>remove(int index)</tt>) on top of the list's list iterator, instead of\n the other way around.<p>\n\n To implement a list the programmer needs only to extend this class and\n provide implementations for the <tt>listIterator</tt> and <tt>size</tt>\n methods.  For an unmodifiable list, the programmer need only implement the\n list iterator's <tt>hasNext</tt>, <tt>next</tt>, <tt>hasPrevious</tt>,\n <tt>previous</tt> and <tt>index</tt> methods.<p>\n\n For a modifiable list the programmer should additionally implement the list\n iterator's <tt>set</tt> method.  For a variable-size list the programmer\n should additionally implement the list iterator's <tt>remove</tt> and\n <tt>add</tt> methods.<p>\n\n The programmer should generally provide a void (no argument) and collection\n constructor, as per the recommendation in the <tt>Collection</tt> interface\n specification.<p>\n\n This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection",
                "java.util.List",
                "java.util.AbstractList",
                "java.util.AbstractCollection"
            ],
            "constructors": [
                {
                    "name": "AbstractSequentialList",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "get",
                    "comment_text": "Returns the element at the specified position in this list.\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it gets\n the element using <tt>ListIterator.next</tt> and returns it.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the element at the specified position in this list with the\n specified element (optional operation).\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it gets\n the current element using <tt>ListIterator.next</tt> and replaces it\n with <tt>ListIterator.set</tt>.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>set</tt> operation.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the specified position in this list\n (optional operation).  Shifts the element currently at that position\n (if any) and any subsequent elements to the right (adds one to their\n indices).\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it\n inserts the specified element with <tt>ListIterator.add</tt>.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>add</tt> operation.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the element at the specified position in this list (optional\n operation).  Shifts any subsequent elements to the left (subtracts one\n from their indices).  Returns the element that was removed from the\n list.\n\n <p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  Then, it removes\n the element with <tt>ListIterator.remove</tt>.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>remove</tt> operation.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  The new elements\n will appear in this list in the order that they are returned by the\n specified collection's iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  (Note that this will occur if the specified\n collection is this list, and it's nonempty.)\n\n <p>This implementation gets an iterator over the specified collection and\n a list iterator over this list pointing to the indexed element (with\n <tt>listIterator(index)</tt>).  Then, it iterates over the specified\n collection, inserting the elements obtained from the iterator into this\n list, one at a time, using <tt>ListIterator.add</tt> followed by\n <tt>ListIterator.next</tt> (to skip over the added element).\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator returned by\n the <tt>listIterator</tt> method does not implement the <tt>add</tt>\n operation.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this list (in proper\n sequence).<p>\n\n This implementation merely returns a list iterator over the list.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "Returns a list iterator over the elements in this list (in proper\n sequence).",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index of first element to be returned from the list\n         iterator (by a call to the <code>next</code> method)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractQueue",
            "interfaces": [
                "java.util.Queue"
            ],
            "superclass": "java.util.AbstractCollection",
            "comment_text": "This class provides skeletal implementations of some {@link Queue}\n operations. The implementations in this class are appropriate when\n the base implementation does <em>not</em> allow <tt>null</tt>\n elements.  Methods {@link #add add}, {@link #remove remove}, and\n {@link #element element} are based on {@link #offer offer}, {@link\n #poll poll}, and {@link #peek peek}, respectively, but throw\n exceptions instead of indicating failure via <tt>false</tt> or\n <tt>null</tt> returns.\n\n <p>A <tt>Queue</tt> implementation that extends this class must\n minimally define a method {@link Queue#offer} which does not permit\n insertion of <tt>null</tt> elements, along with methods {@link\n Queue#peek}, {@link Queue#poll}, {@link Collection#size}, and\n {@link Collection#iterator}.  Typically, additional methods will be\n overridden as well.  If these requirements cannot be met, consider\n instead subclassing {@link AbstractCollection}.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractQueue",
                    "comment_text": "Constructor for use by subclasses.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt>\n if no space is currently available.\n\n <p>This implementation returns <tt>true</tt> if <tt>offer</tt> succeeds,\n else throws an <tt>IllegalStateException</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head of this queue.  This method differs\n from {@link #poll poll} only in that it throws an exception if this\n queue is empty.\n\n <p>This implementation returns the result of <tt>poll</tt>\n unless the queue is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head of this queue.  This method\n differs from {@link #peek peek} only in that it throws an exception if\n this queue is empty.\n\n <p>This implementation returns the result of <tt>peek</tt>\n unless the queue is empty.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this queue.\n The queue will be empty after this call returns.\n\n <p>This implementation repeatedly invokes {@link #poll poll} until it\n returns <tt>null</tt>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Adds all of the elements in the specified collection to this\n queue.  Attempts to addAll of a queue to itself result in\n <tt>IllegalArgumentException</tt>. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n\n <p>This implementation iterates over the specified collection,\n and adds each element returned by the iterator to this\n queue, in turn.  A runtime exception encountered while\n trying to add an element (including, in particular, a\n <tt>null</tt> element) may result in only some of the elements\n having been successfully added when the associated exception is\n thrown.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this queue",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractMap",
            "interfaces": [
                "java.util.Map"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class provides a skeletal implementation of the <tt>Map</tt>\n interface, to minimize the effort required to implement this interface.\n\n <p>To implement an unmodifiable map, the programmer needs only to extend this\n class and provide an implementation for the <tt>entrySet</tt> method, which\n returns a set-view of the map's mappings.  Typically, the returned set\n will, in turn, be implemented atop <tt>AbstractSet</tt>.  This set should\n not support the <tt>add</tt> or <tt>remove</tt> methods, and its iterator\n should not support the <tt>remove</tt> method.\n\n <p>To implement a modifiable map, the programmer must additionally override\n this class's <tt>put</tt> method (which otherwise throws an\n <tt>UnsupportedOperationException</tt>), and the iterator returned by\n <tt>entrySet().iterator()</tt> must additionally implement its\n <tt>remove</tt> method.\n\n <p>The programmer should generally provide a void (no argument) and map\n constructor, as per the recommendation in the <tt>Map</tt> interface\n specification.\n\n <p>The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if the\n map being implemented admits a more efficient implementation.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Map",
                "java.util.Collection"
            ],
            "constructors": [
                {
                    "name": "AbstractMap",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns <tt>entrySet().size()</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns <tt>size() == 0</tt>.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over <tt>entrySet()</tt> searching\n for an entry with the specified value.  If such an entry is found,\n <tt>true</tt> is returned.  If the iteration terminates without\n finding such an entry, <tt>false</tt> is returned.  Note that this\n implementation requires linear time in the size of the map.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over <tt>entrySet()</tt> searching\n for an entry with the specified key.  If such an entry is found,\n <tt>true</tt> is returned.  If the iteration terminates without\n finding such an entry, <tt>false</tt> is returned.  Note that this\n implementation requires linear time in the size of the map; many\n implementations will override this method.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over <tt>entrySet()</tt> searching\n for an entry with the specified key.  If such an entry is found,\n the entry's value is returned.  If the iteration terminates without\n finding such an entry, <tt>null</tt> is returned.  Note that this\n implementation requires linear time in the size of the map; many\n implementations will override this method.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation always throws an\n <tt>UnsupportedOperationException</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over <tt>entrySet()</tt> searching for an\n entry with the specified key.  If such an entry is found, its value is\n obtained with its <tt>getValue</tt> operation, the entry is removed\n from the collection (and the backing map) with the iterator's\n <tt>remove</tt> operation, and the saved value is returned.  If the\n iteration terminates without finding such an entry, <tt>null</tt> is\n returned.  Note that this implementation requires linear time in the\n size of the map; many implementations will override this method.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt>\n iterator does not support the <tt>remove</tt> method and this map\n contains a mapping for the specified key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over the specified map's\n <tt>entrySet()</tt> collection, and calls this map's <tt>put</tt>\n operation once for each entry returned by the iteration.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if this map does not support\n the <tt>put</tt> operation and the specified map is nonempty.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation calls <tt>entrySet().clear()</tt>.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt>\n does not support the <tt>clear</tt> operation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns a set that subclasses {@link AbstractSet}.\n The subclass's iterator method returns a \"wrapper object\" over this\n map's <tt>entrySet()</tt> iterator.  The <tt>size</tt> method\n delegates to this map's <tt>size</tt> method and the\n <tt>contains</tt> method delegates to this map's\n <tt>containsKey</tt> method.\n\n <p>The set is created the first time this method is called,\n and returned in response to all subsequent calls.  No synchronization\n is performed, so there is a slight chance that multiple calls to this\n method will not all return the same set.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns a collection that subclasses {@link\n AbstractCollection}.  The subclass's iterator method returns a\n \"wrapper object\" over this map's <tt>entrySet()</tt> iterator.\n The <tt>size</tt> method delegates to this map's <tt>size</tt>\n method and the <tt>contains</tt> method delegates to this map's\n <tt>containsValue</tt> method.\n\n <p>The collection is created the first time this method is called, and\n returned in response to all subsequent calls.  No synchronization is\n performed, so there is a slight chance that multiple calls to this\n method will not all return the same collection.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this map for equality.  Returns\n <tt>true</tt> if the given object is also a map and the two maps\n represent the same mappings.  More formally, two maps <tt>m1</tt> and\n <tt>m2</tt> represent the same mappings if\n <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This ensures that the\n <tt>equals</tt> method works properly across different implementations\n of the <tt>Map</tt> interface.\n\n <p>This implementation first checks if the specified object is this map;\n if so it returns <tt>true</tt>.  Then, it checks if the specified\n object is a map whose size is identical to the size of this map; if\n not, it returns <tt>false</tt>.  If so, it iterates over this map's\n <tt>entrySet</tt> collection, and checks that the specified map\n contains each mapping that this map contains.  If the specified map\n fails to contain such a mapping, <tt>false</tt> is returned.  If the\n iteration completes, <tt>true</tt> is returned.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps\n <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of\n {@link Object#hashCode}.\n\n <p>This implementation iterates over <tt>entrySet()</tt>, calling\n {@link Map.Entry#hashCode hashCode()} on each element (entry) in the\n set, and adding up the results.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this map.  The string representation\n consists of a list of key-value mappings in the order returned by the\n map's <tt>entrySet</tt> view's iterator, enclosed in braces\n (<tt>\"{}\"</tt>).  Adjacent mappings are separated by the characters\n <tt>\", \"</tt> (comma and space).  Each key-value mapping is rendered as\n the key followed by an equals sign (<tt>\"=\"</tt>) followed by the\n associated value.  Keys and values are converted to strings as by\n {@link String#valueOf(Object)}.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this <tt>AbstractMap</tt> instance: the keys\n and values themselves are not cloned.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.CloneNotSupportedException",
                            "comment_text": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractMap.SimpleEntry",
            "interfaces": [
                "java.util.Map.Entry",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An Entry maintaining a key and a value.  The value may be\n changed using the <tt>setValue</tt> method.  This class\n facilitates the process of building custom map\n implementations. For example, it may be convenient to return\n arrays of <tt>SimpleEntry</tt> instances in method\n <tt>Map.entrySet().toArray</tt>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractMap.SimpleEntry",
                    "comment_text": "Creates an entry representing a mapping from the specified\n key to the specified value.",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key represented by this entry",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value represented by this entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AbstractMap.SimpleEntry",
                    "comment_text": "Creates an entry representing the same mapping as the\n specified entry.",
                    "parameters": [
                        {
                            "name": "entry",
                            "comment_text": "the entry to copy",
                            "type": "java.util.Map.Entry"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getKey",
                    "comment_text": "Returns the key corresponding to this entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the value corresponding to this entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setValue",
                    "comment_text": "Replaces the value corresponding to this entry with the specified\n value.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "new value to be stored in this entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this entry for equality.\n Returns {@code true} if the given object is also a map entry and\n the two entries represent the same mapping.  More formally, two\n entries {@code e1} and {@code e2} represent the same mapping\n if<pre>\n   (e1.getKey()==null ?\n    e2.getKey()==null :\n    e1.getKey().equals(e2.getKey()))\n   &amp;&amp;\n   (e1.getValue()==null ?\n    e2.getValue()==null :\n    e1.getValue().equals(e2.getValue()))</pre>\n This ensures that the {@code equals} method works properly across\n different implementations of the {@code Map.Entry} interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map entry.  The hash code\n of a map entry {@code e} is defined to be: <pre>\n   (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n   (e.getValue()==null ? 0 : e.getValue().hashCode())</pre>\n This ensures that {@code e1.equals(e2)} implies that\n {@code e1.hashCode()==e2.hashCode()} for any two Entries\n {@code e1} and {@code e2}, as required by the general\n contract of {@link Object#hashCode}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a String representation of this map entry.  This\n implementation returns the string representation of this\n entry's key followed by the equals character (\"<tt>=</tt>\")\n followed by the string representation of this entry's value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractMap.SimpleImmutableEntry",
            "interfaces": [
                "java.util.Map.Entry",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An Entry maintaining an immutable key and value.  This class\n does not support method <tt>setValue</tt>.  This class may be\n convenient in methods that return thread-safe snapshots of\n key-value mappings.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractMap.SimpleImmutableEntry",
                    "comment_text": "Creates an entry representing a mapping from the specified\n key to the specified value.",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key represented by this entry",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the value represented by this entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AbstractMap.SimpleImmutableEntry",
                    "comment_text": "Creates an entry representing the same mapping as the\n specified entry.",
                    "parameters": [
                        {
                            "name": "entry",
                            "comment_text": "the entry to copy",
                            "type": "java.util.Map.Entry"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getKey",
                    "comment_text": "Returns the key corresponding to this entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the value corresponding to this entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setValue",
                    "comment_text": "Replaces the value corresponding to this entry with the specified\n value (optional operation).  This implementation simply throws\n <tt>UnsupportedOperationException</tt>, as this class implements\n an <i>immutable</i> map entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "new value to be stored in this entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this entry for equality.\n Returns {@code true} if the given object is also a map entry and\n the two entries represent the same mapping.  More formally, two\n entries {@code e1} and {@code e2} represent the same mapping\n if<pre>\n   (e1.getKey()==null ?\n    e2.getKey()==null :\n    e1.getKey().equals(e2.getKey()))\n   &amp;&amp;\n   (e1.getValue()==null ?\n    e2.getValue()==null :\n    e1.getValue().equals(e2.getValue()))</pre>\n This ensures that the {@code equals} method works properly across\n different implementations of the {@code Map.Entry} interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map entry",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this map entry.  The hash code\n of a map entry {@code e} is defined to be: <pre>\n   (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n   (e.getValue()==null ? 0 : e.getValue().hashCode())</pre>\n This ensures that {@code e1.equals(e2)} implies that\n {@code e1.hashCode()==e2.hashCode()} for any two Entries\n {@code e1} and {@code e2}, as required by the general\n contract of {@link Object#hashCode}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a String representation of this map entry.  This\n implementation returns the string representation of this\n entry's key followed by the equals character (\"<tt>=</tt>\")\n followed by the string representation of this entry's value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractList",
            "interfaces": [
                "java.util.List"
            ],
            "superclass": "java.util.AbstractCollection",
            "comment_text": "This class provides a skeletal implementation of the {@link List}\n interface to minimize the effort required to implement this interface\n backed by a \"random access\" data store (such as an array).  For sequential\n access data (such as a linked list), {@link AbstractSequentialList} should\n be used in preference to this class.\n\n <p>To implement an unmodifiable list, the programmer needs only to extend\n this class and provide implementations for the {@link #get(int)} and\n {@link List#size() size()} methods.\n\n <p>To implement a modifiable list, the programmer must additionally\n override the {@link #set(int, Object) set(int, E)} method (which otherwise\n throws an {@code UnsupportedOperationException}).  If the list is\n variable-size the programmer must additionally override the\n {@link #add(int, Object) add(int, E)} and {@link #remove(int)} methods.\n\n <p>The programmer should generally provide a void (no argument) and collection\n constructor, as per the recommendation in the {@link Collection} interface\n specification.\n\n <p>Unlike the other abstract collection implementations, the programmer does\n <i>not</i> have to provide an iterator implementation; the iterator and\n list iterator are implemented by this class, on top of the \"random access\"\n methods:\n {@link #get(int)},\n {@link #set(int, Object) set(int, E)},\n {@link #add(int, Object) add(int, E)} and\n {@link #remove(int)}.\n\n <p>The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if the\n collection being implemented admits a more efficient implementation.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractList",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "modCount",
                    "comment_text": "The number of times this list has been <i>structurally modified</i>.\n Structural modifications are those that change the size of the\n list, or otherwise perturb it in such a fashion that iterations in\n progress may yield incorrect results.\n\n <p>This field is used by the iterator and list iterator implementation\n returned by the {@code iterator} and {@code listIterator} methods.\n If the value of this field changes unexpectedly, the iterator (or list\n iterator) will throw a {@code ConcurrentModificationException} in\n response to the {@code next}, {@code remove}, {@code previous},\n {@code set} or {@code add} operations.  This provides\n <i>fail-fast</i> behavior, rather than non-deterministic behavior in\n the face of concurrent modification during iteration.\n\n <p><b>Use of this field by subclasses is optional.</b> If a subclass\n wishes to provide fail-fast iterators (and list iterators), then it\n merely has to increment this field in its {@code add(int, E)} and\n {@code remove(int)} methods (and any other methods that it overrides\n that result in structural modifications to the list).  A single call to\n {@code add(int, E)} or {@code remove(int)} must add no more than\n one to this field, or the iterators (and list iterators) will throw\n bogus {@code ConcurrentModificationExceptions}.  If an implementation\n does not wish to provide fail-fast iterators, this field may be\n ignored.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Appends the specified element to the end of this list (optional\n operation).\n\n <p>Lists that support this operation may place limitations on what\n elements may be added to this list.  In particular, some\n lists will refuse to add null elements, and others will impose\n restrictions on the type of elements that may be added.  List\n classes should clearly specify in their documentation any restrictions\n on what elements may be added.\n\n <p>This implementation calls {@code add(size(), e)}.\n\n <p>Note that this implementation throws an\n {@code UnsupportedOperationException} unless\n {@link #add(int, Object) add(int, E)} is overridden.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be appended to this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation always throws an\n {@code UnsupportedOperationException}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation always throws an\n {@code UnsupportedOperationException}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation always throws an\n {@code UnsupportedOperationException}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation first gets a list iterator (with\n {@code listIterator()}).  Then, it iterates over the list until the\n specified element is found or the end of the list is reached.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation first gets a list iterator that points to the end\n of the list (with {@code listIterator(size())}).  Then, it iterates\n backwards over the list until the specified element is found, or the\n beginning of the list is reached.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this list (optional operation).\n The list will be empty after this call returns.\n\n <p>This implementation calls {@code removeRange(0, size())}.\n\n <p>Note that this implementation throws an\n {@code UnsupportedOperationException} unless {@code remove(int\n index)} or {@code removeRange(int fromIndex, int toIndex)} is\n overridden.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation gets an iterator over the specified collection\n and iterates over it, inserting the elements obtained from the\n iterator into this list at the appropriate position, one at a time,\n using {@code add(int, E)}.\n Many implementations will override this method for efficiency.\n\n <p>Note that this implementation throws an\n {@code UnsupportedOperationException} unless\n {@link #add(int, Object) add(int, E)} is overridden.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this list in proper sequence.\n\n <p>This implementation returns a straightforward implementation of the\n iterator interface, relying on the backing list's {@code size()},\n {@code get(int)}, and {@code remove(int)} methods.\n\n <p>Note that the iterator returned by this method will throw an\n {@link UnsupportedOperationException} in response to its\n {@code remove} method unless the list's {@code remove(int)} method is\n overridden.\n\n <p>This implementation can be made to throw runtime exceptions in the\n face of concurrent modification, as described in the specification\n for the (protected) {@link #modCount} field.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns {@code listIterator(0)}.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns a straightforward implementation of the\n {@code ListIterator} interface that extends the implementation of the\n {@code Iterator} interface returned by the {@code iterator()} method.\n The {@code ListIterator} implementation relies on the backing list's\n {@code get(int)}, {@code set(int, E)}, {@code add(int, E)}\n and {@code remove(int)} methods.\n\n <p>Note that the list iterator returned by this implementation will\n throw an {@link UnsupportedOperationException} in response to its\n {@code remove}, {@code set} and {@code add} methods unless the\n list's {@code remove(int)}, {@code set(int, E)}, and\n {@code add(int, E)} methods are overridden.\n\n <p>This implementation can be made to throw runtime exceptions in the\n face of concurrent modification, as described in the specification for\n the (protected) {@link #modCount} field.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subList",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns a list that subclasses\n {@code AbstractList}.  The subclass stores, in private fields, the\n offset of the subList within the backing list, the size of the subList\n (which can change over its lifetime), and the expected\n {@code modCount} value of the backing list.  There are two variants\n of the subclass, one of which implements {@code RandomAccess}.\n If this list implements {@code RandomAccess} the returned list will\n be an instance of the subclass that implements {@code RandomAccess}.\n\n <p>The subclass's {@code set(int, E)}, {@code get(int)},\n {@code add(int, E)}, {@code remove(int)}, {@code addAll(int,\n Collection)} and {@code removeRange(int, int)} methods all\n delegate to the corresponding methods on the backing abstract list,\n after bounds-checking the index and adjusting for the offset.  The\n {@code addAll(Collection c)} method merely returns {@code addAll(size,\n c)}.\n\n <p>The {@code listIterator(int)} method returns a \"wrapper object\"\n over a list iterator on the backing list, which is created with the\n corresponding method on the backing list.  The {@code iterator} method\n merely returns {@code listIterator()}, and the {@code size} method\n merely returns the subclass's {@code size} field.\n\n <p>All methods first check to see if the actual {@code modCount} of\n the backing list is equal to its expected value, and throw a\n {@code ConcurrentModificationException} if it is not.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this list for equality.  Returns\n {@code true} if and only if the specified object is also a list, both\n lists have the same size, and all corresponding pairs of elements in\n the two lists are <i>equal</i>.  (Two elements {@code e1} and\n {@code e2} are <i>equal</i> if {@code (e1==null ? e2==null :\n e1.equals(e2))}.)  In other words, two lists are defined to be\n equal if they contain the same elements in the same order.<p>\n\n This implementation first checks if the specified object is this\n list. If so, it returns {@code true}; if not, it checks if the\n specified object is a list. If not, it returns {@code false}; if so,\n it iterates over both lists, comparing corresponding pairs of elements.\n If any comparison returns {@code false}, this method returns\n {@code false}.  If either iterator runs out of elements before the\n other it returns {@code false} (as the lists are of unequal length);\n otherwise it returns {@code true} when the iterations complete.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to be compared for equality with this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this list.\n\n <p>This implementation uses exactly the code that is used to define the\n list hash function in the documentation for the {@link List#hashCode}\n method.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeRange",
                    "comment_text": "Removes from this list all of the elements whose index is between\n {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n Shifts any succeeding elements to the left (reduces their index).\n This call shortens the list by {@code (toIndex - fromIndex)} elements.\n (If {@code toIndex==fromIndex}, this operation has no effect.)\n\n <p>This method is called by the {@code clear} operation on this list\n and its subLists.  Overriding this method to take advantage of\n the internals of the list implementation can <i>substantially</i>\n improve the performance of the {@code clear} operation on this list\n and its subLists.\n\n <p>This implementation gets a list iterator positioned before\n {@code fromIndex}, and repeatedly calls {@code ListIterator.next}\n followed by {@code ListIterator.remove} until the entire range has\n been removed.  <b>Note: if {@code ListIterator.remove} requires linear\n time, this implementation requires quadratic time.</b>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "index of first element to be removed",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "index after last element to be removed",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.AbstractCollection",
            "interfaces": [
                "java.util.Collection"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class provides a skeletal implementation of the <tt>Collection</tt>\n interface, to minimize the effort required to implement this interface. <p>\n\n To implement an unmodifiable collection, the programmer needs only to\n extend this class and provide implementations for the <tt>iterator</tt> and\n <tt>size</tt> methods.  (The iterator returned by the <tt>iterator</tt>\n method must implement <tt>hasNext</tt> and <tt>next</tt>.)<p>\n\n To implement a modifiable collection, the programmer must additionally\n override this class's <tt>add</tt> method (which otherwise throws an\n <tt>UnsupportedOperationException</tt>), and the iterator returned by the\n <tt>iterator</tt> method must additionally implement its <tt>remove</tt>\n method.<p>\n\n The programmer should generally provide a void (no argument) and\n <tt>Collection</tt> constructor, as per the recommendation in the\n <tt>Collection</tt> interface specification.<p>\n\n The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if\n the collection being implemented admits a more efficient implementation.<p>\n\n This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.2",
            "see": [
                "java.util.Collection"
            ],
            "constructors": [
                {
                    "name": "AbstractCollection",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements contained in this collection.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns <tt>size() == 0</tt>.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over the elements in the collection,\n checking each element in turn for equality with the specified element.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns an array containing all the elements\n returned by this collection's iterator, in the same order, stored in\n consecutive elements of the array, starting with index {@code 0}.\n The length of the returned array is equal to the number of elements\n returned by the iterator, even if the size of this collection changes\n during iteration, as might happen if the collection permits\n concurrent modification during iteration.  The {@code size} method is\n called only as an optimization hint; the correct result is returned\n even if the iterator returns a different number of elements.\n\n <p>This method is equivalent to:\n\n  <pre> {@code\n List<E> list = new ArrayList<E>(size());\n for (E e : this)\n     list.add(e);\n return list.toArray();\n }</pre>",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation returns an array containing all the elements\n returned by this collection's iterator in the same order, stored in\n consecutive elements of the array, starting with index {@code 0}.\n If the number of elements returned by the iterator is too large to\n fit into the specified array, then the elements are returned in a\n newly allocated array with length equal to the number of elements\n returned by the iterator, even if the size of this collection\n changes during iteration, as might happen if the collection permits\n concurrent modification during iteration.  The {@code size} method is\n called only as an optimization hint; the correct result is returned\n even if the iterator returns a different number of elements.\n\n <p>This method is equivalent to:\n\n  <pre> {@code\n List<E> list = new ArrayList<E>(size());\n for (E e : this)\n     list.add(e);\n return list.toArray(a);\n }</pre>",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation always throws an\n <tt>UnsupportedOperationException</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over the collection looking for the\n specified element.  If it finds the element, it removes the element\n from the collection using the iterator's remove method.\n\n <p>Note that this implementation throws an\n <tt>UnsupportedOperationException</tt> if the iterator returned by this\n collection's iterator method does not implement the <tt>remove</tt>\n method and this collection contains the specified object.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over the specified collection,\n checking each element returned by the iterator in turn to see\n if it's contained in this collection.  If all elements are so\n contained <tt>true</tt> is returned, otherwise <tt>false</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over the specified collection, and adds\n each object returned by the iterator to this collection, in turn.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> unless <tt>add</tt> is\n overridden (assuming the specified collection is non-empty).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over this collection, checking each\n element returned by the iterator in turn to see if it's contained\n in the specified collection.  If it's so contained, it's removed from\n this collection with the iterator's <tt>remove</tt> method.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by the\n <tt>iterator</tt> method does not implement the <tt>remove</tt> method\n and this collection contains one or more elements in common with the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over this collection, checking each\n element returned by the iterator in turn to see if it's contained\n in the specified collection.  If it's not so contained, it's removed\n from this collection with the iterator's <tt>remove</tt> method.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by the\n <tt>iterator</tt> method does not implement the <tt>remove</tt> method\n and this collection contains one or more elements not present in the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "{@inheritDoc}\n\n <p>This implementation iterates over this collection, removing each\n element using the <tt>Iterator.remove</tt> operation.  Most\n implementations will probably choose to override this method for\n efficiency.\n\n <p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the iterator returned by this\n collection's <tt>iterator</tt> method does not implement the\n <tt>remove</tt> method and this collection is non-empty.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (<tt>\"[]\"</tt>).  Adjacent elements are separated by the characters\n <tt>\", \"</tt> (comma and space).  Elements are converted to strings as\n by {@link String#valueOf(Object)}.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.PreferencesFactory",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A factory object that generates Preferences objects.  Providers of\n new {@link Preferences} implementations should provide corresponding\n <tt>PreferencesFactory</tt> implementations so that the new\n <tt>Preferences</tt> implementation can be installed in place of the\n platform-specific default implementation.\n\n <p><strong>This class is for <tt>Preferences</tt> implementers only.\n Normal users of the <tt>Preferences</tt> facility should have no need to\n consult this documentation.</strong>",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "systemRoot",
                    "comment_text": "Returns the system root preference node.  (Multiple calls on this\n method will return the same object reference.)",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "userRoot",
                    "comment_text": "Returns the user root preference node corresponding to the calling\n user.  In a server, the returned value will typically depend on\n some implicit client-context.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.Preferences",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A node in a hierarchical collection of preference data.  This class\n allows applications to store and retrieve user and system\n preference and configuration data.  This data is stored\n persistently in an implementation-dependent backing store.  Typical\n implementations include flat files, OS-specific registries,\n directory servers and SQL databases.  The user of this class needn't\n be concerned with details of the backing store.\n\n <p>There are two separate trees of preference nodes, one for user\n preferences and one for system preferences.  Each user has a separate user\n preference tree, and all users in a given system share the same system\n preference tree.  The precise description of \"user\" and \"system\" will vary\n from implementation to implementation.  Typical information stored in the\n user preference tree might include font choice, color choice, or preferred\n window location and size for a particular application.  Typical information\n stored in the system preference tree might include installation\n configuration data for an application.\n\n <p>Nodes in a preference tree are named in a similar fashion to\n directories in a hierarchical file system.   Every node in a preference\n tree has a <i>node name</i> (which is not necessarily unique),\n a unique <i>absolute path name</i>, and a path name <i>relative</i> to each\n ancestor including itself.\n\n <p>The root node has a node name of the empty string (\"\").  Every other\n node has an arbitrary node name, specified at the time it is created.  The\n only restrictions on this name are that it cannot be the empty string, and\n it cannot contain the slash character ('/').\n\n <p>The root node has an absolute path name of <tt>\"/\"</tt>.  Children of\n the root node have absolute path names of <tt>\"/\" + </tt><i>&lt;node\n name&gt;</i>.  All other nodes have absolute path names of <i>&lt;parent's\n absolute path name&gt;</i><tt> + \"/\" + </tt><i>&lt;node name&gt;</i>.\n Note that all absolute path names begin with the slash character.\n\n <p>A node <i>n</i>'s path name relative to its ancestor <i>a</i>\n is simply the string that must be appended to <i>a</i>'s absolute path name\n in order to form <i>n</i>'s absolute path name, with the initial slash\n character (if present) removed.  Note that:\n <ul>\n <li>No relative path names begin with the slash character.\n <li>Every node's path name relative to itself is the empty string.\n <li>Every node's path name relative to its parent is its node name (except\n for the root node, which does not have a parent).\n <li>Every node's path name relative to the root is its absolute path name\n with the initial slash character removed.\n </ul>\n\n <p>Note finally that:\n <ul>\n <li>No path name contains multiple consecutive slash characters.\n <li>No path name with the exception of the root's absolute path name\n ends in the slash character.\n <li>Any string that conforms to these two rules is a valid path name.\n </ul>\n\n <p>All of the methods that modify preferences data are permitted to operate\n asynchronously; they may return immediately, and changes will eventually\n propagate to the persistent backing store with an implementation-dependent\n delay.  The <tt>flush</tt> method may be used to synchronously force\n updates to the backing store.  Normal termination of the Java Virtual\n Machine will <i>not</i> result in the loss of pending updates -- an explicit\n <tt>flush</tt> invocation is <i>not</i> required upon termination to ensure\n that pending updates are made persistent.\n\n <p>All of the methods that read preferences from a <tt>Preferences</tt>\n object require the invoker to provide a default value.  The default value is\n returned if no value has been previously set <i>or if the backing store is\n unavailable</i>.  The intent is to allow applications to operate, albeit\n with slightly degraded functionality, even if the backing store becomes\n unavailable.  Several methods, like <tt>flush</tt>, have semantics that\n prevent them from operating if the backing store is unavailable.  Ordinary\n applications should have no need to invoke any of these methods, which can\n be identified by the fact that they are declared to throw {@link\n BackingStoreException}.\n\n <p>The methods in this class may be invoked concurrently by multiple threads\n in a single JVM without the need for external synchronization, and the\n results will be equivalent to some serial execution.  If this class is used\n concurrently <i>by multiple JVMs</i> that store their preference data in\n the same backing store, the data store will not be corrupted, but no\n other guarantees are made concerning the consistency of the preference\n data.\n\n <p>This class contains an export/import facility, allowing preferences\n to be \"exported\" to an XML document, and XML documents representing\n preferences to be \"imported\" back into the system.  This facility\n may be used to back up all or part of a preference tree, and\n subsequently restore from the backup.\n\n <p>The XML document has the following DOCTYPE declaration:\n <pre>\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"&gt;\n </pre>\n Note that the system URI (http://java.sun.com/dtd/preferences.dtd) is\n <i>not</i> accessed when exporting or importing preferences; it merely\n serves as a string to uniquely identify the DTD, which is:\n <pre>\n    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n    &lt;!-- DTD for a Preferences tree. --&gt;\n\n    &lt;!-- The preferences element is at the root of an XML document\n         representing a Preferences tree. --&gt;\n    &lt;!ELEMENT preferences (root)&gt;\n\n    &lt;!-- The preferences element contains an optional version attribute,\n          which specifies version of DTD. --&gt;\n    &lt;!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" &gt\n\n    &lt;!-- The root element has a map representing the root's preferences\n         (if any), and one node for each child of the root (if any). --&gt;\n    &lt;!ELEMENT root (map, node*) &gt;\n\n    &lt;!-- Additionally, the root contains a type attribute, which\n         specifies whether it's the system or user root. --&gt;\n    &lt;!ATTLIST root\n              type (system|user) #REQUIRED &gt;\n\n    &lt;!-- Each node has a map representing its preferences (if any),\n         and one node for each child (if any). --&gt;\n    &lt;!ELEMENT node (map, node*) &gt;\n\n    &lt;!-- Additionally, each node has a name attribute --&gt;\n    &lt;!ATTLIST node\n              name CDATA #REQUIRED &gt;\n\n    &lt;!-- A map represents the preferences stored at a node (if any). --&gt;\n    &lt;!ELEMENT map (entry*) &gt;\n\n    &lt;!-- An entry represents a single preference, which is simply\n          a key-value pair. --&gt;\n    &lt;!ELEMENT entry EMPTY &gt;\n    &lt;!ATTLIST entry\n              key   CDATA #REQUIRED\n              value CDATA #REQUIRED &gt;\n </pre>\n\n Every <tt>Preferences</tt> implementation must have an associated {@link\n PreferencesFactory} implementation.  Every Java(TM) SE implementation must provide\n some means of specifying which <tt>PreferencesFactory</tt> implementation\n is used to generate the root preferences nodes.  This allows the\n administrator to replace the default preferences implementation with an\n alternative implementation.\n\n <p>Implementation note: In Sun's JRE, the <tt>PreferencesFactory</tt>\n implementation is located as follows:\n\n <ol>\n\n <li><p>If the system property\n <tt>java.util.prefs.PreferencesFactory</tt> is defined, then it is\n taken to be the fully-qualified name of a class implementing the\n <tt>PreferencesFactory</tt> interface.  The class is loaded and\n instantiated; if this process fails then an unspecified error is\n thrown.</p></li>\n\n <li><p> If a <tt>PreferencesFactory</tt> implementation class file\n has been installed in a jar file that is visible to the\n {@link java.lang.ClassLoader#getSystemClassLoader system class loader},\n and that jar file contains a provider-configuration file named\n <tt>java.util.prefs.PreferencesFactory</tt> in the resource\n directory <tt>META-INF/services</tt>, then the first class name\n specified in that file is taken.  If more than one such jar file is\n provided, the first one found will be used.  The class is loaded\n and instantiated; if this process fails then an unspecified error\n is thrown.  </p></li>\n\n <li><p>Finally, if neither the above-mentioned system property nor\n an extension jar file is provided, then the system-wide default\n <tt>PreferencesFactory</tt> implementation for the underlying\n platform is loaded and instantiated.</p></li>\n\n </ol>",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Preferences",
                    "comment_text": "Sole constructor. (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "MAX_KEY_LENGTH",
                    "comment_text": "Maximum length of string allowed as a key (80 characters).",
                    "type": "int"
                },
                {
                    "name": "MAX_VALUE_LENGTH",
                    "comment_text": "Maximum length of string allowed as a value (8192 characters).",
                    "type": "int"
                },
                {
                    "name": "MAX_NAME_LENGTH",
                    "comment_text": "Maximum length of a node name (80 characters).",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "userNodeForPackage",
                    "comment_text": "Returns the preference node from the calling user's preference tree\n that is associated (by convention) with the specified class's package.\n The convention is as follows: the absolute path name of the node is the\n fully qualified package name, preceded by a slash (<tt>'/'</tt>), and\n with each period (<tt>'.'</tt>) replaced by a slash.  For example the\n absolute path name of the node associated with the class\n <tt>com.acme.widget.Foo</tt> is <tt>/com/acme/widget</tt>.\n\n <p>This convention does not apply to the unnamed package, whose\n associated preference node is <tt>&lt;unnamed&gt;</tt>.  This node\n is not intended for long term use, but for convenience in the early\n development of programs that do not yet belong to a package, and\n for \"throwaway\" programs.  <i>Valuable data should not be stored\n at this node as it is shared by all programs that use it.</i>\n\n <p>A class <tt>Foo</tt> wishing to access preferences pertaining to its\n package can obtain a preference node as follows: <pre>\n    static Preferences prefs = Preferences.userNodeForPackage(Foo.class);\n </pre>\n This idiom obviates the need for using a string to describe the\n preferences node and decreases the likelihood of a run-time failure.\n (If the class name is misspelled, it will typically result in a\n compile-time error.)\n\n <p>Invoking this method will result in the creation of the returned\n node and its ancestors if they do not already exist.  If the returned\n node did not exist prior to this call, this node and any ancestors that\n were created by this call are not guaranteed to become permanent until\n the <tt>flush</tt> method is called on the returned node (or one of its\n ancestors or descendants).",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the class for whose package a user preference node is desired.",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "systemNodeForPackage",
                    "comment_text": "Returns the preference node from the system preference tree that is\n associated (by convention) with the specified class's package.  The\n convention is as follows: the absolute path name of the node is the\n fully qualified package name, preceded by a slash (<tt>'/'</tt>), and\n with each period (<tt>'.'</tt>) replaced by a slash.  For example the\n absolute path name of the node associated with the class\n <tt>com.acme.widget.Foo</tt> is <tt>/com/acme/widget</tt>.\n\n <p>This convention does not apply to the unnamed package, whose\n associated preference node is <tt>&lt;unnamed&gt;</tt>.  This node\n is not intended for long term use, but for convenience in the early\n development of programs that do not yet belong to a package, and\n for \"throwaway\" programs.  <i>Valuable data should not be stored\n at this node as it is shared by all programs that use it.</i>\n\n <p>A class <tt>Foo</tt> wishing to access preferences pertaining to its\n package can obtain a preference node as follows: <pre>\n  static Preferences prefs = Preferences.systemNodeForPackage(Foo.class);\n </pre>\n This idiom obviates the need for using a string to describe the\n preferences node and decreases the likelihood of a run-time failure.\n (If the class name is misspelled, it will typically result in a\n compile-time error.)\n\n <p>Invoking this method will result in the creation of the returned\n node and its ancestors if they do not already exist.  If the returned\n node did not exist prior to this call, this node and any ancestors that\n were created by this call are not guaranteed to become permanent until\n the <tt>flush</tt> method is called on the returned node (or one of its\n ancestors or descendants).",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the class for whose package a system preference node is desired.",
                            "type": "java.lang.Class"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "userRoot",
                    "comment_text": "Returns the root preference node for the calling user.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "systemRoot",
                    "comment_text": "Returns the root preference node for the system.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this\n preference node.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value associated with the specified key in this preference\n node.  Returns the specified default if there is no value associated\n with the key, or the backing store is inaccessible.\n\n <p>Some implementations may store default values in their backing\n stores.  If there is no value associated with the specified key\n but there is such a <i>stored default</i>, it is returned in\n preference to the specified default.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the value associated with the specified key in this preference\n node, if any.\n\n <p>If this implementation supports <i>stored defaults</i>, and there is\n such a default for the specified preference, the stored default will be\n \"exposed\" by this call, in the sense that it will be returned\n by a succeeding call to <tt>get</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose mapping is to be removed from the preference node.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the preferences (key-value associations) in this\n preference node.  This call has no effect on any descendants\n of this node.\n\n <p>If this implementation supports <i>stored defaults</i>, and this\n node in the preferences hierarchy contains any such defaults,\n the stored defaults will be \"exposed\" by this call, in the sense that\n they will be returned by succeeding calls to <tt>get</tt>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "putInt",
                    "comment_text": "Associates a string representing the specified int value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the int value were passed to\n {@link Integer#toString(int)}.  This method is intended for use in\n conjunction with {@link #getInt}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInt",
                    "comment_text": "Returns the int value represented by the string associated with the\n specified key in this preference node.  The string is converted to\n an integer as by {@link Integer#parseInt(String)}.  Returns the\n specified default if there is no value associated with the key,\n the backing store is inaccessible, or if\n <tt>Integer.parseInt(String)</tt> would throw a {@link\n NumberFormatException} if the associated value were passed.  This\n method is intended for use in conjunction with {@link #putInt}.\n\n <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to an int\n with <tt>Integer.parseInt</tt>, this int is returned in preference to\n the specified default.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as an int.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as an int,\n        or the backing store is inaccessible.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putLong",
                    "comment_text": "Associates a string representing the specified long value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the long value were passed to\n {@link Long#toString(long)}.  This method is intended for use in\n conjunction with {@link #getLong}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLong",
                    "comment_text": "Returns the long value represented by the string associated with the\n specified key in this preference node.  The string is converted to\n a long as by {@link Long#parseLong(String)}.  Returns the\n specified default if there is no value associated with the key,\n the backing store is inaccessible, or if\n <tt>Long.parseLong(String)</tt> would throw a {@link\n NumberFormatException} if the associated value were passed.  This\n method is intended for use in conjunction with {@link #putLong}.\n\n <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to a long\n with <tt>Long.parseLong</tt>, this long is returned in preference to\n the specified default.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a long.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a long,\n        or the backing store is inaccessible.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putBoolean",
                    "comment_text": "Associates a string representing the specified boolean value with the\n specified key in this preference node.  The associated string is\n <tt>\"true\"</tt> if the value is true, and <tt>\"false\"</tt> if it is\n false.  This method is intended for use in conjunction with\n {@link #getBoolean}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBoolean",
                    "comment_text": "Returns the boolean value represented by the string associated with the\n specified key in this preference node.  Valid strings\n are <tt>\"true\"</tt>, which represents true, and <tt>\"false\"</tt>, which\n represents false.  Case is ignored, so, for example, <tt>\"TRUE\"</tt>\n and <tt>\"False\"</tt> are also valid.  This method is intended for use in\n conjunction with {@link #putBoolean}.\n\n <p>Returns the specified default if there is no value\n associated with the key, the backing store is inaccessible, or if the\n associated value is something other than <tt>\"true\"</tt> or\n <tt>\"false\"</tt>, ignoring case.\n\n <p>If the implementation supports <i>stored defaults</i> and such a\n default exists and is accessible, it is used in preference to the\n specified default, unless the stored default is something other than\n <tt>\"true\"</tt> or <tt>\"false\"</tt>, ignoring case, in which case the\n specified default is used.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a boolean.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a boolean,\n        or the backing store is inaccessible.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putFloat",
                    "comment_text": "Associates a string representing the specified float value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the float value were passed to\n {@link Float#toString(float)}.  This method is intended for use in\n conjunction with {@link #getFloat}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFloat",
                    "comment_text": "Returns the float value represented by the string associated with the\n specified key in this preference node.  The string is converted to an\n integer as by {@link Float#parseFloat(String)}.  Returns the specified\n default if there is no value associated with the key, the backing store\n is inaccessible, or if <tt>Float.parseFloat(String)</tt> would throw a\n {@link NumberFormatException} if the associated value were passed.\n This method is intended for use in conjunction with {@link #putFloat}.\n\n <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to a float\n with <tt>Float.parseFloat</tt>, this float is returned in preference to\n the specified default.",
                    "return_type": "float",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a float.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a float,\n        or the backing store is inaccessible.",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putDouble",
                    "comment_text": "Associates a string representing the specified double value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the double value were passed to\n {@link Double#toString(double)}.  This method is intended for use in\n conjunction with {@link #getDouble}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDouble",
                    "comment_text": "Returns the double value represented by the string associated with the\n specified key in this preference node.  The string is converted to an\n integer as by {@link Double#parseDouble(String)}.  Returns the specified\n default if there is no value associated with the key, the backing store\n is inaccessible, or if <tt>Double.parseDouble(String)</tt> would throw a\n {@link NumberFormatException} if the associated value were passed.\n This method is intended for use in conjunction with {@link #putDouble}.\n\n <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to a double\n with <tt>Double.parseDouble</tt>, this double is returned in preference\n to the specified default.",
                    "return_type": "double",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a double.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a double,\n        or the backing store is inaccessible.",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putByteArray",
                    "comment_text": "Associates a string representing the specified byte array with the\n specified key in this preference node.  The associated string is\n the <i>Base64</i> encoding of the byte array, as defined in <a\n href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,\n with one minor change: the string will consist solely of characters\n from the <i>Base64 Alphabet</i>; it will not contain any newline\n characters.  Note that the maximum length of the byte array is limited\n to three quarters of <tt>MAX_VALUE_LENGTH</tt> so that the length\n of the Base64 encoded String does not exceed <tt>MAX_VALUE_LENGTH</tt>.\n This method is intended for use in conjunction with\n {@link #getByteArray}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getByteArray",
                    "comment_text": "Returns the byte array value represented by the string associated with\n the specified key in this preference node.  Valid strings are\n <i>Base64</i> encoded binary data, as defined in <a\n href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,\n with one minor change: the string must consist solely of characters\n from the <i>Base64 Alphabet</i>; no newline characters or\n extraneous characters are permitted.  This method is intended for use\n in conjunction with {@link #putByteArray}.\n\n <p>Returns the specified default if there is no value\n associated with the key, the backing store is inaccessible, or if the\n associated value is not a valid Base64 encoded byte array\n (as defined above).\n\n <p>If the implementation supports <i>stored defaults</i> and such a\n default exists and is accessible, it is used in preference to the\n specified default, unless the stored default is not a valid Base64\n encoded byte array (as defined above), in which case the\n specified default is used.",
                    "return_type": "byte",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a byte array.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a byte array,\n        or the backing store is inaccessible.",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keys",
                    "comment_text": "Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)\n\n <p>If the implementation supports <i>stored defaults</i> and there\n are any such defaults at this node that have not been overridden,\n by explicit preferences, the defaults are returned in the array in\n addition to any explicit preferences.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "childrenNames",
                    "comment_text": "Returns the names of the children of this preference node, relative to\n this node.  (The returned array will be of size zero if this node has\n no children.)",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "parent",
                    "comment_text": "Returns the parent of this preference node, or <tt>null</tt> if this is\n the root.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "node",
                    "comment_text": "Returns the named preference node in the same tree as this node,\n creating it and any of its ancestors if they do not already exist.\n Accepts a relative or absolute path name.  Relative path names\n (which do not begin with the slash character <tt>('/')</tt>) are\n interpreted relative to this preference node.\n\n <p>If the returned node did not exist prior to this call, this node and\n any ancestors that were created by this call are not guaranteed\n to become permanent until the <tt>flush</tt> method is called on\n the returned node (or one of its ancestors or descendants).",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [
                        {
                            "name": "pathName",
                            "comment_text": "the path name of the preference node to return.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nodeExists",
                    "comment_text": "Returns true if the named preference node exists in the same tree\n as this node.  Relative path names (which do not begin with the slash\n character <tt>('/')</tt>) are interpreted relative to this preference\n node.\n\n <p>If this node (or an ancestor) has already been removed with the\n {@link #removeNode()} method, it <i>is</i> legal to invoke this method,\n but only with the path name <tt>\"\"</tt>; the invocation will return\n <tt>false</tt>.  Thus, the idiom <tt>p.nodeExists(\"\")</tt> may be\n used to test whether <tt>p</tt> has been removed.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "pathName",
                            "comment_text": "the path name of the node whose existence\n        is to be checked.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "removeNode",
                    "comment_text": "Removes this preference node and all of its descendants, invalidating\n any preferences contained in the removed nodes.  Once a node has been\n removed, attempting any method other than {@link #name()},\n {@link #absolutePath()}, {@link #isUserNode()}, {@link #flush()} or\n {@link #node(String) nodeExists(\"\")} on the corresponding\n <tt>Preferences</tt> instance will fail with an\n <tt>IllegalStateException</tt>.  (The methods defined on {@link Object}\n can still be invoked on a node after it has been removed; they will not\n throw <tt>IllegalStateException</tt>.)\n\n <p>The removal is not guaranteed to be persistent until the\n <tt>flush</tt> method is called on this node (or an ancestor).\n\n <p>If this implementation supports <i>stored defaults</i>, removing a\n node exposes any stored defaults at or below this node.  Thus, a\n subsequent call to <tt>nodeExists</tt> on this node's path name may\n return <tt>true</tt>, and a subsequent call to <tt>node</tt> on this\n path name may return a (different) <tt>Preferences</tt> instance\n representing a non-empty collection of preferences and/or children.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "name",
                    "comment_text": "Returns this preference node's name, relative to its parent.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "absolutePath",
                    "comment_text": "Returns this preference node's absolute path name.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isUserNode",
                    "comment_text": "Returns <tt>true</tt> if this preference node is in the user\n preference tree, <tt>false</tt> if it's in the system preference tree.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this preferences node,\n as if computed by the expression:<tt>(this.isUserNode() ? \"User\" :\n \"System\") + \" Preference Node: \" + this.absolutePath()</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Forces any changes in the contents of this preference node and its\n descendants to the persistent store.  Once this method returns\n successfully, it is safe to assume that all changes made in the\n subtree rooted at this node prior to the method invocation have become\n permanent.\n\n <p>Implementations are free to flush changes into the persistent store\n at any time.  They do not need to wait for this method to be called.\n\n <p>When a flush occurs on a newly created node, it is made persistent,\n as are any ancestors (and descendants) that have yet to be made\n persistent.  Note however that any preference value changes in\n ancestors are <i>not</i> guaranteed to be made persistent.\n\n <p> If this method is invoked on a node that has been removed with\n the {@link #removeNode()} method, flushSpi() is invoked on this node,\n but not on others.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "sync",
                    "comment_text": "Ensures that future reads from this preference node and its\n descendants reflect any changes that were committed to the persistent\n store (from any VM) prior to the <tt>sync</tt> invocation.  As a\n side-effect, forces any changes in the contents of this preference node\n and its descendants to the persistent store, as if the <tt>flush</tt>\n method had been invoked on this node.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "addPreferenceChangeListener",
                    "comment_text": "Registers the specified listener to receive <i>preference change\n events</i> for this preference node.  A preference change event is\n generated when a preference is added to this node, removed from this\n node, or when the value associated with a preference is changed.\n (Preference change events are <i>not</i> generated by the {@link\n #removeNode()} method, which generates a <i>node change event</i>.\n Preference change events <i>are</i> generated by the <tt>clear</tt>\n method.)\n\n <p>Events are only guaranteed for changes made within the same JVM\n as the registered listener, though some implementations may generate\n events for changes made outside this JVM.  Events may be generated\n before the changes have been made persistent.  Events are not generated\n when preferences are modified in descendants of this node; a caller\n desiring such events must register with each descendant.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "pcl",
                            "comment_text": "The preference change listener to add.",
                            "type": "java.util.prefs.PreferenceChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removePreferenceChangeListener",
                    "comment_text": "Removes the specified preference change listener, so it no longer\n receives preference change events.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "pcl",
                            "comment_text": "The preference change listener to remove.",
                            "type": "java.util.prefs.PreferenceChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addNodeChangeListener",
                    "comment_text": "Registers the specified listener to receive <i>node change events</i>\n for this node.  A node change event is generated when a child node is\n added to or removed from this node.  (A single {@link #removeNode()}\n invocation results in multiple <i>node change events</i>, one for every\n node in the subtree rooted at the removed node.)\n\n <p>Events are only guaranteed for changes made within the same JVM\n as the registered listener, though some implementations may generate\n events for changes made outside this JVM.  Events may be generated\n before the changes have become permanent.  Events are not generated\n when indirect descendants of this node are added or removed; a\n caller desiring such events must register with each descendant.\n\n <p>Few guarantees can be made regarding node creation.  Because nodes\n are created implicitly upon access, it may not be feasible for an\n implementation to determine whether a child node existed in the backing\n store prior to access (for example, because the backing store is\n unreachable or cached information is out of date).  Under these\n circumstances, implementations are neither required to generate node\n change events nor prohibited from doing so.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ncl",
                            "comment_text": "The <tt>NodeChangeListener</tt> to add.",
                            "type": "java.util.prefs.NodeChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeNodeChangeListener",
                    "comment_text": "Removes the specified <tt>NodeChangeListener</tt>, so it no longer\n receives change events.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ncl",
                            "comment_text": "The <tt>NodeChangeListener</tt> to remove.",
                            "type": "java.util.prefs.NodeChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exportNode",
                    "comment_text": "Emits on the specified output stream an XML document representing all\n of the preferences contained in this node (but not its descendants).\n This XML document is, in effect, an offline backup of the node.\n\n <p>The XML document will have the following DOCTYPE declaration:\n <pre>\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"&gt;\n </pre>\n The UTF-8 character encoding will be used.\n\n <p>This method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  If the preferences\n at this node are modified concurrently with an invocation of this\n method, the exported preferences comprise a \"fuzzy snapshot\" of the\n preferences contained in the node; some of the concurrent modifications\n may be reflected in the exported data while others may not.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "the output stream on which to emit the XML document.",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing to the specified output stream\n         results in an <tt>IOException</tt>."
                        },
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if preference data cannot be read from\n         backing store."
                        }
                    ]
                },
                {
                    "name": "exportSubtree",
                    "comment_text": "Emits an XML document representing all of the preferences contained\n in this node and all of its descendants.  This XML document is, in\n effect, an offline backup of the subtree rooted at the node.\n\n <p>The XML document will have the following DOCTYPE declaration:\n <pre>\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"&gt;\n </pre>\n The UTF-8 character encoding will be used.\n\n <p>This method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  If the preferences\n or nodes in the subtree rooted at this node are modified concurrently\n with an invocation of this method, the exported preferences comprise a\n \"fuzzy snapshot\" of the subtree; some of the concurrent modifications\n may be reflected in the exported data while others may not.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "the output stream on which to emit the XML document.",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing to the specified output stream\n         results in an <tt>IOException</tt>."
                        },
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if preference data cannot be read from\n         backing store."
                        }
                    ]
                },
                {
                    "name": "importPreferences",
                    "comment_text": "Imports all of the preferences represented by the XML document on the\n specified input stream.  The document may represent user preferences or\n system preferences.  If it represents user preferences, the preferences\n will be imported into the calling user's preference tree (even if they\n originally came from a different user's preference tree).  If any of\n the preferences described by the document inhabit preference nodes that\n do not exist, the nodes will be created.\n\n <p>The XML document must have the following DOCTYPE declaration:\n <pre>\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\"&gt;\n </pre>\n (This method is designed for use in conjunction with\n {@link #exportNode(OutputStream)} and\n {@link #exportSubtree(OutputStream)}.\n\n <p>This method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  The method behaves\n as if implemented on top of the other public methods in this class,\n notably {@link #node(String)} and {@link #put(String, String)}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "is",
                            "comment_text": "the input stream from which to read the XML document.",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if reading from the specified input stream\n         results in an <tt>IOException</tt>."
                        },
                        {
                            "name": "java.util.prefs.InvalidPreferencesFormatException",
                            "comment_text": "Data on input stream does not\n         constitute a valid XML document with the mandated document type."
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.PreferenceChangeListener",
            "interfaces": [
                "java.util.EventListener"
            ],
            "superclass": "",
            "comment_text": "A listener for receiving preference change events.",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences",
                "java.util.prefs.PreferenceChangeEvent",
                "java.util.prefs.NodeChangeListener"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "preferenceChange",
                    "comment_text": "This method gets called when a preference is added, removed or when\n its value is changed.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "evt",
                            "comment_text": "A PreferenceChangeEvent object describing the event source\n          and the preference that has changed.",
                            "type": "java.util.prefs.PreferenceChangeEvent"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.PreferenceChangeEvent",
            "interfaces": [

            ],
            "superclass": "java.util.EventObject",
            "comment_text": "An event emitted by a <tt>Preferences</tt> node to indicate that\n a preference has been added, removed or has had its value changed.<p>\n\n Note, that although PreferenceChangeEvent inherits Serializable interface\n from EventObject, it is not intended to be Serializable. Appropriate\n serialization methods are implemented to throw NotSerializableException.",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences",
                "java.util.prefs.PreferenceChangeListener",
                "java.util.prefs.NodeChangeEvent"
            ],
            "constructors": [
                {
                    "name": "PreferenceChangeEvent",
                    "comment_text": "Constructs a new <code>PreferenceChangeEvent</code> instance.",
                    "parameters": [
                        {
                            "name": "node",
                            "comment_text": "The Preferences node that emitted the event.",
                            "type": "java.util.prefs.Preferences"
                        },
                        {
                            "name": "key",
                            "comment_text": "The key of the preference that was changed.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "The new value of the preference, or <tt>null</tt>\n                  if the preference is being removed.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getNode",
                    "comment_text": "Returns the preference node that emitted the event.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getKey",
                    "comment_text": "Returns the key of the preference that was changed.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getNewValue",
                    "comment_text": "Returns the new value for the preference.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.NodeChangeListener",
            "interfaces": [
                "java.util.EventListener"
            ],
            "superclass": "",
            "comment_text": "A listener for receiving preference node change events.",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences",
                "java.util.prefs.NodeChangeEvent",
                "java.util.prefs.PreferenceChangeListener"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "childAdded",
                    "comment_text": "This method gets called when a child node is added.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "evt",
                            "comment_text": "A node change event object describing the parent\n            and child node.",
                            "type": "java.util.prefs.NodeChangeEvent"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "childRemoved",
                    "comment_text": "This method gets called when a child node is removed.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "evt",
                            "comment_text": "A node change event object describing the parent\n            and child node.",
                            "type": "java.util.prefs.NodeChangeEvent"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.NodeChangeEvent",
            "interfaces": [

            ],
            "superclass": "java.util.EventObject",
            "comment_text": "An event emitted by a <tt>Preferences</tt> node to indicate that\n a child of that node has been added or removed.<p>\n\n Note, that although NodeChangeEvent inherits Serializable interface from\n java.util.EventObject, it is not intended to be Serializable. Appropriate\n serialization methods are implemented to throw NotSerializableException.",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences",
                "java.util.prefs.NodeChangeListener",
                "java.util.prefs.PreferenceChangeEvent"
            ],
            "constructors": [
                {
                    "name": "NodeChangeEvent",
                    "comment_text": "Constructs a new <code>NodeChangeEvent</code> instance.",
                    "parameters": [
                        {
                            "name": "parent",
                            "comment_text": "The parent of the node that was added or removed.",
                            "type": "java.util.prefs.Preferences"
                        },
                        {
                            "name": "child",
                            "comment_text": "The node that was added or removed.",
                            "type": "java.util.prefs.Preferences"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getParent",
                    "comment_text": "Returns the parent of the node that was added or removed.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getChild",
                    "comment_text": "Returns the node that was added or removed.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.prefs.InvalidPreferencesFormatException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "Thrown to indicate that an operation could not complete because\n the input did not conform to the appropriate XML document type\n for a collection of preferences, as per the {@link Preferences}\n specification.",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences"
            ],
            "constructors": [
                {
                    "name": "InvalidPreferencesFormatException",
                    "comment_text": "Constructs an InvalidPreferencesFormatException with the specified\n cause.",
                    "parameters": [
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InvalidPreferencesFormatException",
                    "comment_text": "Constructs an InvalidPreferencesFormatException with the specified\n detail message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message. The detail message is saved for\n          later retrieval by the {@link Throwable#getMessage()} method.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InvalidPreferencesFormatException",
                    "comment_text": "Constructs an InvalidPreferencesFormatException with the specified\n detail message and cause.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message. The detail message is saved for\n         later retrieval by the {@link Throwable#getMessage()} method.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link Throwable#getCause()} method).",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.prefs.BackingStoreException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "Thrown to indicate that a preferences operation could not complete because\n of a failure in the backing store, or a failure to contact the backing\n store.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "BackingStoreException",
                    "comment_text": "Constructs a BackingStoreException with the specified detail message.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "BackingStoreException",
                    "comment_text": "Constructs a BackingStoreException with the specified cause.",
                    "parameters": [
                        {
                            "name": "cause",
                            "comment_text": "the cause",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.prefs.AbstractPreferences",
            "interfaces": [

            ],
            "superclass": "java.util.prefs.Preferences",
            "comment_text": "This class provides a skeletal implementation of the {@link Preferences}\n class, greatly easing the task of implementing it.\n\n <p><strong>This class is for <tt>Preferences</tt> implementers only.\n Normal users of the <tt>Preferences</tt> facility should have no need to\n consult this documentation.  The {@link Preferences} documentation\n should suffice.</strong>\n\n <p>Implementors must override the nine abstract service-provider interface\n (SPI) methods: {@link #getSpi(String)}, {@link #putSpi(String,String)},\n {@link #removeSpi(String)}, {@link #childSpi(String)}, {@link\n #removeNodeSpi()}, {@link #keysSpi()}, {@link #childrenNamesSpi()}, {@link\n #syncSpi()} and {@link #flushSpi()}.  All of the concrete methods specify\n precisely how they are implemented atop these SPI methods.  The implementor\n may, at his discretion, override one or more of the concrete methods if the\n default implementation is unsatisfactory for any reason, such as\n performance.\n\n <p>The SPI methods fall into three groups concerning exception\n behavior. The <tt>getSpi</tt> method should never throw exceptions, but it\n doesn't really matter, as any exception thrown by this method will be\n intercepted by {@link #get(String,String)}, which will return the specified\n default value to the caller.  The <tt>removeNodeSpi, keysSpi,\n childrenNamesSpi, syncSpi</tt> and <tt>flushSpi</tt> methods are specified\n to throw {@link BackingStoreException}, and the implementation is required\n to throw this checked exception if it is unable to perform the operation.\n The exception propagates outward, causing the corresponding API method\n to fail.\n\n <p>The remaining SPI methods {@link #putSpi(String,String)}, {@link\n #removeSpi(String)} and {@link #childSpi(String)} have more complicated\n exception behavior.  They are not specified to throw\n <tt>BackingStoreException</tt>, as they can generally obey their contracts\n even if the backing store is unavailable.  This is true because they return\n no information and their effects are not required to become permanent until\n a subsequent call to {@link Preferences#flush()} or\n {@link Preferences#sync()}. Generally speaking, these SPI methods should not\n throw exceptions.  In some implementations, there may be circumstances\n under which these calls cannot even enqueue the requested operation for\n later processing.  Even under these circumstances it is generally better to\n simply ignore the invocation and return, rather than throwing an\n exception.  Under these circumstances, however, all subsequent invocations\n of <tt>flush()</tt> and <tt>sync</tt> should return <tt>false</tt>, as\n returning <tt>true</tt> would imply that all previous operations had\n successfully been made permanent.\n\n <p>There is one circumstance under which <tt>putSpi, removeSpi and\n childSpi</tt> <i>should</i> throw an exception: if the caller lacks\n sufficient privileges on the underlying operating system to perform the\n requested operation.  This will, for instance, occur on most systems\n if a non-privileged user attempts to modify system preferences.\n (The required privileges will vary from implementation to\n implementation.  On some implementations, they are the right to modify the\n contents of some directory in the file system; on others they are the right\n to modify contents of some key in a registry.)  Under any of these\n circumstances, it would generally be undesirable to let the program\n continue executing as if these operations would become permanent at a later\n time.  While implementations are not required to throw an exception under\n these circumstances, they are encouraged to do so.  A {@link\n SecurityException} would be appropriate.\n\n <p>Most of the SPI methods require the implementation to read or write\n information at a preferences node.  The implementor should beware of the\n fact that another VM may have concurrently deleted this node from the\n backing store.  It is the implementation's responsibility to recreate the\n node if it has been deleted.\n\n <p>Implementation note: In Sun's default <tt>Preferences</tt>\n implementations, the user's identity is inherited from the underlying\n operating system and does not change for the lifetime of the virtual\n machine.  It is recognized that server-side <tt>Preferences</tt>\n implementations may have the user identity change from request to request,\n implicitly passed to <tt>Preferences</tt> methods via the use of a\n static {@link ThreadLocal} instance.  Authors of such implementations are\n <i>strongly</i> encouraged to determine the user at the time preferences\n are accessed (for example by the {@link #get(String,String)} or {@link\n #put(String,String)} method) rather than permanently associating a user\n with each <tt>Preferences</tt> instance.  The latter behavior conflicts\n with normal <tt>Preferences</tt> usage and would lead to great confusion.",
            "since": "1.4",
            "see": [
                "java.util.prefs.Preferences"
            ],
            "constructors": [
                {
                    "name": "AbstractPreferences",
                    "comment_text": "Creates a preference node with the specified parent and the specified\n name relative to its parent.",
                    "parameters": [
                        {
                            "name": "parent",
                            "comment_text": "the parent of this preference node, or null if this\n               is the root.",
                            "type": "java.util.prefs.AbstractPreferences"
                        },
                        {
                            "name": "name",
                            "comment_text": "the name of this preference node, relative to its parent,\n             or <tt>\"\"</tt> if this is the root.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "newNode",
                    "comment_text": "This field should be <tt>true</tt> if this node did not exist in the\n backing store prior to the creation of this object.  The field\n is initialized to false, but may be set to true by a subclass\n constructor (and should not be modified thereafter).  This field\n indicates whether a node change event should be fired when\n creation is complete.",
                    "type": "boolean"
                },
                {
                    "name": "lock",
                    "comment_text": "An object whose monitor is used to lock this node.  This object\n is used in preference to the node itself to reduce the likelihood of\n intentional or unintentional denial of service due to a locked node.\n To avoid deadlock, a node is <i>never</i> locked by a thread that\n holds a lock on a descendant of that node.",
                    "type": "java.lang.Object"
                }
            ],
            "methods": [
                {
                    "name": "put",
                    "comment_text": "Implements the <tt>put</tt> method as per the specification in\n {@link Preferences#put(String,String)}.\n\n <p>This implementation checks that the key and value are legal,\n obtains this preference node's lock, checks that the node\n has not been removed, invokes {@link #putSpi(String,String)}, and if\n there are any preference change listeners, enqueues a notification\n event for processing by the event dispatch thread.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Implements the <tt>get</tt> method as per the specification in\n {@link Preferences#get(String,String)}.\n\n <p>This implementation first checks to see if <tt>key</tt> is\n <tt>null</tt> throwing a <tt>NullPointerException</tt> if this is\n the case.  Then it obtains this preference node's lock,\n checks that the node has not been removed, invokes {@link\n #getSpi(String)}, and returns the result, unless the <tt>getSpi</tt>\n invocation returns <tt>null</tt> or throws an exception, in which case\n this invocation returns <tt>def</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Implements the <tt>remove(String)</tt> method as per the specification\n in {@link Preferences#remove(String)}.\n\n <p>This implementation obtains this preference node's lock,\n checks that the node has not been removed, invokes\n {@link #removeSpi(String)} and if there are any preference\n change listeners, enqueues a notification event for processing by the\n event dispatch thread.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose mapping is to be removed from the preference node.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Implements the <tt>clear</tt> method as per the specification in\n {@link Preferences#clear()}.\n\n <p>This implementation obtains this preference node's lock,\n invokes {@link #keys()} to obtain an array of keys, and\n iterates over the array invoking {@link #remove(String)} on each key.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "putInt",
                    "comment_text": "Implements the <tt>putInt</tt> method as per the specification in\n {@link Preferences#putInt(String,int)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Integer#toString(int)} and invokes {@link #put(String,String)}\n on the result.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInt",
                    "comment_text": "Implements the <tt>getInt</tt> method as per the specification in\n {@link Preferences#getInt(String,int)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to an <tt>int</tt> with\n {@link Integer#parseInt(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as an int.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as an int.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putLong",
                    "comment_text": "Implements the <tt>putLong</tt> method as per the specification in\n {@link Preferences#putLong(String,long)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Long#toString(long)} and invokes {@link #put(String,String)}\n on the result.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLong",
                    "comment_text": "Implements the <tt>getLong</tt> method as per the specification in\n {@link Preferences#getLong(String,long)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to a <tt>long</tt> with\n {@link Long#parseLong(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a long.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a long.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putBoolean",
                    "comment_text": "Implements the <tt>putBoolean</tt> method as per the specification in\n {@link Preferences#putBoolean(String,boolean)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link String#valueOf(boolean)} and invokes {@link #put(String,String)}\n on the result.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBoolean",
                    "comment_text": "Implements the <tt>getBoolean</tt> method as per the specification in\n {@link Preferences#getBoolean(String,boolean)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, it is compared with\n <tt>\"true\"</tt> using {@link String#equalsIgnoreCase(String)}.  If the\n comparison returns <tt>true</tt>, this invocation returns\n <tt>true</tt>.  Otherwise, the original return value is compared with\n <tt>\"false\"</tt>, again using {@link String#equalsIgnoreCase(String)}.\n If the comparison returns <tt>true</tt>, this invocation returns\n <tt>false</tt>.  Otherwise, this invocation returns <tt>def</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a boolean.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a boolean.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putFloat",
                    "comment_text": "Implements the <tt>putFloat</tt> method as per the specification in\n {@link Preferences#putFloat(String,float)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Float#toString(float)} and invokes {@link #put(String,String)}\n on the result.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFloat",
                    "comment_text": "Implements the <tt>getFloat</tt> method as per the specification in\n {@link Preferences#getFloat(String,float)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to an <tt>float</tt> with\n {@link Float#parseFloat(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.",
                    "return_type": "float",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a float.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a float.",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putDouble",
                    "comment_text": "Implements the <tt>putDouble</tt> method as per the specification in\n {@link Preferences#putDouble(String,double)}.\n\n <p>This implementation translates <tt>value</tt> to a string with\n {@link Double#toString(double)} and invokes {@link #put(String,String)}\n on the result.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDouble",
                    "comment_text": "Implements the <tt>getDouble</tt> method as per the specification in\n {@link Preferences#getDouble(String,double)}.\n\n <p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  If the return value is non-null, the implementation\n attempts to translate it to an <tt>double</tt> with\n {@link Double#parseDouble(String)}.  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, <tt>def</tt> is returned.",
                    "return_type": "double",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a double.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a double.",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putByteArray",
                    "comment_text": "Implements the <tt>putByteArray</tt> method as per the specification in\n {@link Preferences#putByteArray(String,byte[])}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the string form of value is to be associated.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "value whose string form is to be associated with key.",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getByteArray",
                    "comment_text": "Implements the <tt>getByteArray</tt> method as per the specification in\n {@link Preferences#getByteArray(String,byte[])}.",
                    "return_type": "byte",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose associated value is to be returned as a byte array.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "def",
                            "comment_text": "the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a byte array.",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keys",
                    "comment_text": "Implements the <tt>keys</tt> method as per the specification in\n {@link Preferences#keys()}.\n\n <p>This implementation obtains this preference node's lock, checks that\n the node has not been removed and invokes {@link #keysSpi()}.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "childrenNames",
                    "comment_text": "Implements the <tt>children</tt> method as per the specification in\n {@link Preferences#childrenNames()}.\n\n <p>This implementation obtains this preference node's lock, checks that\n the node has not been removed, constructs a <tt>TreeSet</tt> initialized\n to the names of children already cached (the children in this node's\n \"child-cache\"), invokes {@link #childrenNamesSpi()}, and adds all of the\n returned child-names into the set.  The elements of the tree set are\n dumped into a <tt>String</tt> array using the <tt>toArray</tt> method,\n and this array is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "cachedChildren",
                    "comment_text": "Returns all known unremoved children of this node.",
                    "return_type": "java.util.prefs.AbstractPreferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parent",
                    "comment_text": "Implements the <tt>parent</tt> method as per the specification in\n {@link Preferences#parent()}.\n\n <p>This implementation obtains this preference node's lock, checks that\n the node has not been removed and returns the parent value that was\n passed to this node's constructor.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "node",
                    "comment_text": "Implements the <tt>node</tt> method as per the specification in\n {@link Preferences#node(String)}.\n\n <p>This implementation obtains this preference node's lock and checks\n that the node has not been removed.  If <tt>path</tt> is <tt>\"\"</tt>,\n this node is returned; if <tt>path</tt> is <tt>\"/\"</tt>, this node's\n root is returned.  If the first character in <tt>path</tt> is\n not <tt>'/'</tt>, the implementation breaks <tt>path</tt> into\n tokens and recursively traverses the path from this node to the\n named node, \"consuming\" a name and a slash from <tt>path</tt> at\n each step of the traversal.  At each step, the current node is locked\n and the node's child-cache is checked for the named node.  If it is\n not found, the name is checked to make sure its length does not\n exceed <tt>MAX_NAME_LENGTH</tt>.  Then the {@link #childSpi(String)}\n method is invoked, and the result stored in this node's child-cache.\n If the newly created <tt>Preferences</tt> object's {@link #newNode}\n field is <tt>true</tt> and there are any node change listeners,\n a notification event is enqueued for processing by the event dispatch\n thread.\n\n <p>When there are no more tokens, the last value found in the\n child-cache or returned by <tt>childSpi</tt> is returned by this\n method.  If during the traversal, two <tt>\"/\"</tt> tokens occur\n consecutively, or the final token is <tt>\"/\"</tt> (rather than a name),\n an appropriate <tt>IllegalArgumentException</tt> is thrown.\n\n <p> If the first character of <tt>path</tt> is <tt>'/'</tt>\n (indicating an absolute path name) this preference node's\n lock is dropped prior to breaking <tt>path</tt> into tokens, and\n this method recursively traverses the path starting from the root\n (rather than starting from this node).  The traversal is otherwise\n identical to the one described for relative path names.  Dropping\n the lock on this node prior to commencing the traversal at the root\n node is essential to avoid the possibility of deadlock, as per the\n {@link #lock locking invariant}.",
                    "return_type": "java.util.prefs.Preferences",
                    "parameters": [
                        {
                            "name": "path",
                            "comment_text": "the path name of the preference node to return.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nodeExists",
                    "comment_text": "Implements the <tt>nodeExists</tt> method as per the specification in\n {@link Preferences#nodeExists(String)}.\n\n <p>This implementation is very similar to {@link #node(String)},\n except that {@link #getChild(String)} is used instead of {@link\n #childSpi(String)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "path",
                            "comment_text": "the path name of the node whose existence is to be checked.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "removeNode",
                    "comment_text": "Implements the <tt>removeNode()</tt> method as per the specification in\n {@link Preferences#removeNode()}.\n\n <p>This implementation checks to see that this node is the root; if so,\n it throws an appropriate exception.  Then, it locks this node's parent,\n and calls a recursive helper method that traverses the subtree rooted at\n this node.  The recursive method locks the node on which it was called,\n checks that it has not already been removed, and then ensures that all\n of its children are cached: The {@link #childrenNamesSpi()} method is\n invoked and each returned child name is checked for containment in the\n child-cache.  If a child is not already cached, the {@link\n #childSpi(String)} method is invoked to create a <tt>Preferences</tt>\n instance for it, and this instance is put into the child-cache.  Then\n the helper method calls itself recursively on each node contained in its\n child-cache.  Next, it invokes {@link #removeNodeSpi()}, marks itself\n as removed, and removes itself from its parent's child-cache.  Finally,\n if there are any node change listeners, it enqueues a notification\n event for processing by the event dispatch thread.\n\n <p>Note that the helper method is always invoked with all ancestors up\n to the \"closest non-removed ancestor\" locked.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "name",
                    "comment_text": "Implements the <tt>name</tt> method as per the specification in\n {@link Preferences#name()}.\n\n <p>This implementation merely returns the name that was\n passed to this node's constructor.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "absolutePath",
                    "comment_text": "Implements the <tt>absolutePath</tt> method as per the specification in\n {@link Preferences#absolutePath()}.\n\n <p>This implementation merely returns the absolute path name that\n was computed at the time that this node was constructed (based on\n the name that was passed to this node's constructor, and the names\n that were passed to this node's ancestors' constructors).",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isUserNode",
                    "comment_text": "Implements the <tt>isUserNode</tt> method as per the specification in\n {@link Preferences#isUserNode()}.\n\n <p>This implementation compares this node's root node (which is stored\n in a private field) with the value returned by\n {@link Preferences#userRoot()}.  If the two object references are\n identical, this method returns true.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addPreferenceChangeListener",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "pcl",
                            "comment_text": "",
                            "type": "java.util.prefs.PreferenceChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removePreferenceChangeListener",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "pcl",
                            "comment_text": "",
                            "type": "java.util.prefs.PreferenceChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addNodeChangeListener",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ncl",
                            "comment_text": "",
                            "type": "java.util.prefs.NodeChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeNodeChangeListener",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ncl",
                            "comment_text": "",
                            "type": "java.util.prefs.NodeChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putSpi",
                    "comment_text": "Put the given key-value association into this preference node.  It is\n guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of\n legal length.  Also, it is guaranteed that this node has not been\n removed.  (The implementor needn't check for any of these things.)\n\n <p>This method is invoked with the lock on this node held.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSpi",
                    "comment_text": "Return the value associated with the specified key at this preference\n node, or <tt>null</tt> if there is no association for this key, or the\n association cannot be determined at this time.  It is guaranteed that\n <tt>key</tt> is non-null.  Also, it is guaranteed that this node has\n not been removed.  (The implementor needn't check for either of these\n things.)\n\n <p> Generally speaking, this method should not throw an exception\n under any circumstances.  If, however, if it does throw an exception,\n the exception will be intercepted and treated as a <tt>null</tt>\n return value.\n\n <p>This method is invoked with the lock on this node held.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeSpi",
                    "comment_text": "Remove the association (if any) for the specified key at this\n preference node.  It is guaranteed that <tt>key</tt> is non-null.\n Also, it is guaranteed that this node has not been removed.\n (The implementor needn't check for either of these things.)\n\n <p>This method is invoked with the lock on this node held.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeNodeSpi",
                    "comment_text": "Removes this preference node, invalidating it and any preferences that\n it contains.  The named child will have no descendants at the time this\n invocation is made (i.e., the {@link Preferences#removeNode()} method\n invokes this method repeatedly in a bottom-up fashion, removing each of\n a node's descendants before removing the node itself).\n\n <p>This method is invoked with the lock held on this node and its\n parent (and all ancestors that are being removed as a\n result of a single invocation to {@link Preferences#removeNode()}).\n\n <p>The removal of a node needn't become persistent until the\n <tt>flush</tt> method is invoked on this node (or an ancestor).\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #removeNode()}\n invocation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "keysSpi",
                    "comment_text": "Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)  It is guaranteed that this node has not\n been removed.\n\n <p>This method is invoked with the lock on this node held.\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #keys()} invocation.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "childrenNamesSpi",
                    "comment_text": "Returns the names of the children of this preference node.  (The\n returned array will be of size zero if this node has no children.)\n This method need not return the names of any nodes already cached,\n but may do so without harm.\n\n <p>This method is invoked with the lock on this node held.\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #childrenNames()}\n invocation.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "getChild",
                    "comment_text": "Returns the named child if it exists, or <tt>null</tt> if it does not.\n It is guaranteed that <tt>nodeName</tt> is non-null, non-empty,\n does not contain the slash character ('/'), and is no longer than\n {@link #MAX_NAME_LENGTH} characters.  Also, it is guaranteed\n that this node has not been removed.  (The implementor needn't check\n for any of these things if he chooses to override this method.)\n\n <p>Finally, it is guaranteed that the named node has not been returned\n by a previous invocation of this method or {@link #childSpi} after the\n last time that it was removed.  In other words, a cached value will\n always be used in preference to invoking this method.  (The implementor\n needn't maintain his own cache of previously returned children if he\n chooses to override this method.)\n\n <p>This implementation obtains this preference node's lock, invokes\n {@link #childrenNames()} to get an array of the names of this node's\n children, and iterates over the array comparing the name of each child\n with the specified node name.  If a child node has the correct name,\n the {@link #childSpi(String)} method is invoked and the resulting\n node is returned.  If the iteration completes without finding the\n specified name, <tt>null</tt> is returned.",
                    "return_type": "java.util.prefs.AbstractPreferences",
                    "parameters": [
                        {
                            "name": "nodeName",
                            "comment_text": "name of the child to be searched for.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "childSpi",
                    "comment_text": "Returns the named child of this preference node, creating it if it does\n not already exist.  It is guaranteed that <tt>name</tt> is non-null,\n non-empty, does not contain the slash character ('/'), and is no longer\n than {@link #MAX_NAME_LENGTH} characters.  Also, it is guaranteed that\n this node has not been removed.  (The implementor needn't check for any\n of these things.)\n\n <p>Finally, it is guaranteed that the named node has not been returned\n by a previous invocation of this method or {@link #getChild(String)}\n after the last time that it was removed.  In other words, a cached\n value will always be used in preference to invoking this method.\n Subclasses need not maintain their own cache of previously returned\n children.\n\n <p>The implementer must ensure that the returned node has not been\n removed.  If a like-named child of this node was previously removed, the\n implementer must return a newly constructed <tt>AbstractPreferences</tt>\n node; once removed, an <tt>AbstractPreferences</tt> node\n cannot be \"resuscitated.\"\n\n <p>If this method causes a node to be created, this node is not\n guaranteed to be persistent until the <tt>flush</tt> method is\n invoked on this node or one of its ancestors (or descendants).\n\n <p>This method is invoked with the lock on this node held.",
                    "return_type": "java.util.prefs.AbstractPreferences",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "The name of the child node to return, relative to\n        this preference node.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the absolute path name of this preferences node.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "sync",
                    "comment_text": "Implements the <tt>sync</tt> method as per the specification in\n {@link Preferences#sync()}.\n\n <p>This implementation calls a recursive helper method that locks this\n node, invokes syncSpi() on it, unlocks this node, and recursively\n invokes this method on each \"cached child.\"  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n \"cached subtree\" rooted at this node, calling syncSpi() on each node in\n the subTree while only that node is locked. Note that syncSpi() is\n invoked top-down.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "syncSpi",
                    "comment_text": "This method is invoked with this node locked.  The contract of this\n method is to synchronize any cached preferences stored at this node\n with any stored in the backing store.  (It is perfectly possible that\n this node does not exist on the backing store, either because it has\n been deleted by another VM, or because it has not yet been created.)\n Note that this method should <i>not</i> synchronize the preferences in\n any subnodes of this node.  If the backing store naturally syncs an\n entire subtree at once, the implementer is encouraged to override\n sync(), rather than merely overriding this method.\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #sync()} invocation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Implements the <tt>flush</tt> method as per the specification in\n {@link Preferences#flush()}.\n\n <p>This implementation calls a recursive helper method that locks this\n node, invokes flushSpi() on it, unlocks this node, and recursively\n invokes this method on each \"cached child.\"  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n \"cached subtree\" rooted at this node, calling flushSpi() on each node in\n the subTree while only that node is locked. Note that flushSpi() is\n invoked top-down.\n\n <p> If this method is invoked on a node that has been removed with\n the {@link #removeNode()} method, flushSpi() is invoked on this node,\n but not on others.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "flushSpi",
                    "comment_text": "This method is invoked with this node locked.  The contract of this\n method is to force any cached changes in the contents of this\n preference node to the backing store, guaranteeing their persistence.\n (It is perfectly possible that this node does not exist on the backing\n store, either because it has been deleted by another VM, or because it\n has not yet been created.)  Note that this method should <i>not</i>\n flush the preferences in any subnodes of this node.  If the backing\n store naturally flushes an entire subtree at once, the implementer is\n encouraged to override flush(), rather than merely overriding this\n method.\n\n <p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #flush()} invocation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it."
                        }
                    ]
                },
                {
                    "name": "isRemoved",
                    "comment_text": "Returns <tt>true</tt> iff this node (or an ancestor) has been\n removed with the {@link #removeNode()} method.  This method\n locks this node prior to returning the contents of the private\n field used to track this state.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exportNode",
                    "comment_text": "Implements the <tt>exportNode</tt> method as per the specification in\n {@link Preferences#exportNode(OutputStream)}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "the output stream on which to emit the XML document.",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing to the specified output stream\n         results in an <tt>IOException</tt>."
                        },
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if preference data cannot be read from\n         backing store."
                        }
                    ]
                },
                {
                    "name": "exportSubtree",
                    "comment_text": "Implements the <tt>exportSubtree</tt> method as per the specification in\n {@link Preferences#exportSubtree(OutputStream)}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "os",
                            "comment_text": "the output stream on which to emit the XML document.",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if writing to the specified output stream\n         results in an <tt>IOException</tt>."
                        },
                        {
                            "name": "java.util.prefs.BackingStoreException",
                            "comment_text": "if preference data cannot be read from\n         backing store."
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.regex.PatternSyntaxException",
            "interfaces": [

            ],
            "superclass": "java.lang.IllegalArgumentException",
            "comment_text": "Unchecked exception thrown to indicate a syntax error in a\n regular-expression pattern.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "PatternSyntaxException",
                    "comment_text": "Constructs a new instance of this class.",
                    "parameters": [
                        {
                            "name": "desc",
                            "comment_text": "A description of the error",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "regex",
                            "comment_text": "The erroneous pattern",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "index",
                            "comment_text": "The approximate index in the pattern of the error,\n         or <tt>-1</tt> if the index is not known",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getIndex",
                    "comment_text": "Retrieves the error index.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDescription",
                    "comment_text": "Retrieves the description of the error.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getPattern",
                    "comment_text": "Retrieves the erroneous regular-expression pattern.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "Returns a multi-line string containing the description of the syntax\n error and its index, the erroneous regular-expression pattern, and a\n visual indication of the error index within the pattern.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.regex.Pattern",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A compiled representation of a regular expression.\n\n <p> A regular expression, specified as a string, must first be compiled into\n an instance of this class.  The resulting pattern can then be used to create\n a {@link Matcher} object that can match arbitrary {@link\n java.lang.CharSequence </code>character sequences<code>} against the regular\n expression.  All of the state involved in performing a match resides in the\n matcher, so many matchers can share the same pattern.\n\n <p> A typical invocation sequence is thus\n\n <blockquote><pre>\n Pattern p = Pattern.{@link #compile compile}(\"a*b\");\n Matcher m = p.{@link #matcher matcher}(\"aaaaab\");\n boolean b = m.{@link Matcher#matches matches}();</pre></blockquote>\n\n <p> A {@link #matches matches} method is defined by this class as a\n convenience for when a regular expression is used just once.  This method\n compiles an expression and matches an input sequence against it in a single\n invocation.  The statement\n\n <blockquote><pre>\n boolean b = Pattern.matches(\"a*b\", \"aaaaab\");</pre></blockquote>\n\n is equivalent to the three statements above, though for repeated matches it\n is less efficient since it does not allow the compiled pattern to be reused.\n\n <p> Instances of this class are immutable and are safe for use by multiple\n concurrent threads.  Instances of the {@link Matcher} class are not safe for\n such use.\n\n\n <a name=\"sum\">\n <h4> Summary of regular-expression constructs </h4>\n\n <table border=\"0\" cellpadding=\"1\" cellspacing=\"0\"\n  summary=\"Regular expression constructs, and what they match\">\n\n <tr align=\"left\">\n <th bgcolor=\"#CCCCFF\" align=\"left\" id=\"construct\">Construct</th>\n <th bgcolor=\"#CCCCFF\" align=\"left\" id=\"matches\">Matches</th>\n </tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"characters\">Characters</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct characters\"><i>x</i></td>\n     <td headers=\"matches\">The character <i>x</i></td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\\\</tt></td>\n     <td headers=\"matches\">The backslash character</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\0</tt><i>n</i></td>\n     <td headers=\"matches\">The character with octal value <tt>0</tt><i>n</i>\n         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\0</tt><i>nn</i></td>\n     <td headers=\"matches\">The character with octal value <tt>0</tt><i>nn</i>\n         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\0</tt><i>mnn</i></td>\n     <td headers=\"matches\">The character with octal value <tt>0</tt><i>mnn</i>\n         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>m</i>&nbsp;<tt>&lt;=</tt>&nbsp;3,\n         0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\x</tt><i>hh</i></td>\n     <td headers=\"matches\">The character with hexadecimal&nbsp;value&nbsp;<tt>0x</tt><i>hh</i></td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>&#92;u</tt><i>hhhh</i></td>\n     <td headers=\"matches\">The character with hexadecimal&nbsp;value&nbsp;<tt>0x</tt><i>hhhh</i></td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>&#92;x</tt><i>{h...h}</i></td>\n     <td headers=\"matches\">The character with hexadecimal&nbsp;value&nbsp;<tt>0x</tt><i>h...h</i>\n         ({@link java.lang.Character#MIN_CODE_POINT Character.MIN_CODE_POINT}\n         &nbsp;&lt;=&nbsp;<tt>0x</tt><i>h...h</i>&nbsp;&lt;=&nbsp\n          {@link java.lang.Character#MAX_CODE_POINT Character.MAX_CODE_POINT})</td></tr>\n <tr><td valign=\"top\" headers=\"matches\"><tt>\\t</tt></td>\n     <td headers=\"matches\">The tab character (<tt>'&#92;u0009'</tt>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\n</tt></td>\n     <td headers=\"matches\">The newline (line feed) character (<tt>'&#92;u000A'</tt>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\r</tt></td>\n     <td headers=\"matches\">The carriage-return character (<tt>'&#92;u000D'</tt>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\f</tt></td>\n     <td headers=\"matches\">The form-feed character (<tt>'&#92;u000C'</tt>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\a</tt></td>\n     <td headers=\"matches\">The alert (bell) character (<tt>'&#92;u0007'</tt>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\e</tt></td>\n     <td headers=\"matches\">The escape character (<tt>'&#92;u001B'</tt>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct characters\"><tt>\\c</tt><i>x</i></td>\n     <td headers=\"matches\">The control character corresponding to <i>x</i></td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"classes\">Character classes</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[abc]</tt></td>\n     <td headers=\"matches\"><tt>a</tt>, <tt>b</tt>, or <tt>c</tt> (simple class)</td></tr>\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[^abc]</tt></td>\n     <td headers=\"matches\">Any character except <tt>a</tt>, <tt>b</tt>, or <tt>c</tt> (negation)</td></tr>\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[a-zA-Z]</tt></td>\n     <td headers=\"matches\"><tt>a</tt> through <tt>z</tt>\n         or <tt>A</tt> through <tt>Z</tt>, inclusive (range)</td></tr>\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[a-d[m-p]]</tt></td>\n     <td headers=\"matches\"><tt>a</tt> through <tt>d</tt>,\n      or <tt>m</tt> through <tt>p</tt>: <tt>[a-dm-p]</tt> (union)</td></tr>\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[a-z&&[def]]</tt></td>\n     <td headers=\"matches\"><tt>d</tt>, <tt>e</tt>, or <tt>f</tt> (intersection)</tr>\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[a-z&&[^bc]]</tt></td>\n     <td headers=\"matches\"><tt>a</tt> through <tt>z</tt>,\n         except for <tt>b</tt> and <tt>c</tt>: <tt>[ad-z]</tt> (subtraction)</td></tr>\n <tr><td valign=\"top\" headers=\"construct classes\"><tt>[a-z&&[^m-p]]</tt></td>\n     <td headers=\"matches\"><tt>a</tt> through <tt>z</tt>,\n          and not <tt>m</tt> through <tt>p</tt>: <tt>[a-lq-z]</tt>(subtraction)</td></tr>\n <tr><th>&nbsp;</th></tr>\n\n <tr align=\"left\"><th colspan=\"2\" id=\"predef\">Predefined character classes</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>.</tt></td>\n     <td headers=\"matches\">Any character (may or may not match <a href=\"#lt\">line terminators</a>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>\\d</tt></td>\n     <td headers=\"matches\">A digit: <tt>[0-9]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>\\D</tt></td>\n     <td headers=\"matches\">A non-digit: <tt>[^0-9]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>\\s</tt></td>\n     <td headers=\"matches\">A whitespace character: <tt>[ \\t\\n\\x0B\\f\\r]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>\\S</tt></td>\n     <td headers=\"matches\">A non-whitespace character: <tt>[^\\s]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>\\w</tt></td>\n     <td headers=\"matches\">A word character: <tt>[a-zA-Z_0-9]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct predef\"><tt>\\W</tt></td>\n     <td headers=\"matches\">A non-word character: <tt>[^\\w]</tt></td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"posix\">POSIX character classes</b> (US-ASCII only)<b></th></tr>\n\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Lower}</tt></td>\n     <td headers=\"matches\">A lower-case alphabetic character: <tt>[a-z]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Upper}</tt></td>\n     <td headers=\"matches\">An upper-case alphabetic character:<tt>[A-Z]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{ASCII}</tt></td>\n     <td headers=\"matches\">All ASCII:<tt>[\\x00-\\x7F]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Alpha}</tt></td>\n     <td headers=\"matches\">An alphabetic character:<tt>[\\p{Lower}\\p{Upper}]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Digit}</tt></td>\n     <td headers=\"matches\">A decimal digit: <tt>[0-9]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Alnum}</tt></td>\n     <td headers=\"matches\">An alphanumeric character:<tt>[\\p{Alpha}\\p{Digit}]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Punct}</tt></td>\n     <td headers=\"matches\">Punctuation: One of <tt>!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~</tt></td></tr>\n     <!-- <tt>[\\!\"#\\$%&'\\(\\)\\*\\+,\\-\\./:;\\<=\\>\\?@\\[\\\\\\]\\^_`\\{\\|\\}~]</tt>\n          <tt>[\\X21-\\X2F\\X31-\\X40\\X5B-\\X60\\X7B-\\X7E]</tt> -->\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Graph}</tt></td>\n     <td headers=\"matches\">A visible character: <tt>[\\p{Alnum}\\p{Punct}]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Print}</tt></td>\n     <td headers=\"matches\">A printable character: <tt>[\\p{Graph}\\x20]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Blank}</tt></td>\n     <td headers=\"matches\">A space or a tab: <tt>[ \\t]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Cntrl}</tt></td>\n     <td headers=\"matches\">A control character: <tt>[\\x00-\\x1F\\x7F]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{XDigit}</tt></td>\n     <td headers=\"matches\">A hexadecimal digit: <tt>[0-9a-fA-F]</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct posix\"><tt>\\p{Space}</tt></td>\n     <td headers=\"matches\">A whitespace character: <tt>[ \\t\\n\\x0B\\f\\r]</tt></td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\">java.lang.Character classes (simple <a href=\"#jcc\">java character type</a>)</th></tr>\n\n <tr><td valign=\"top\"><tt>\\p{javaLowerCase}</tt></td>\n     <td>Equivalent to java.lang.Character.isLowerCase()</td></tr>\n <tr><td valign=\"top\"><tt>\\p{javaUpperCase}</tt></td>\n     <td>Equivalent to java.lang.Character.isUpperCase()</td></tr>\n <tr><td valign=\"top\"><tt>\\p{javaWhitespace}</tt></td>\n     <td>Equivalent to java.lang.Character.isWhitespace()</td></tr>\n <tr><td valign=\"top\"><tt>\\p{javaMirrored}</tt></td>\n     <td>Equivalent to java.lang.Character.isMirrored()</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"unicode\">Classes for Unicode scripts, blocks, categories and binary properties</th></tr>\n * <tr><td valign=\"top\" headers=\"construct unicode\"><tt>\\p{IsLatin}</tt></td>\n     <td headers=\"matches\">A Latin&nbsp;script character (<a href=\"#usc\">script</a>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct unicode\"><tt>\\p{InGreek}</tt></td>\n     <td headers=\"matches\">A character in the Greek&nbsp;block (<a href=\"#ubc\">block</a>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct unicode\"><tt>\\p{Lu}</tt></td>\n     <td headers=\"matches\">An uppercase letter (<a href=\"#ucc\">category</a>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct unicode\"><tt>\\p{IsAlphabetic}</tt></td>\n     <td headers=\"matches\">An alphabetic character (<a href=\"#ubpc\">binary property</a>)</td></tr>\n <tr><td valign=\"top\" headers=\"construct unicode\"><tt>\\p{Sc}</tt></td>\n     <td headers=\"matches\">A currency symbol</td></tr>\n <tr><td valign=\"top\" headers=\"construct unicode\"><tt>\\P{InGreek}</tt></td>\n     <td headers=\"matches\">Any character except one in the Greek block (negation)</td></tr>\n <tr><td valign=\"top\" headers=\"construct unicode\"><tt>[\\p{L}&&[^\\p{Lu}]]&nbsp;</tt></td>\n     <td headers=\"matches\">Any letter except an uppercase letter (subtraction)</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"bounds\">Boundary matchers</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>^</tt></td>\n     <td headers=\"matches\">The beginning of a line</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>$</tt></td>\n     <td headers=\"matches\">The end of a line</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>\\b</tt></td>\n     <td headers=\"matches\">A word boundary</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>\\B</tt></td>\n     <td headers=\"matches\">A non-word boundary</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>\\A</tt></td>\n     <td headers=\"matches\">The beginning of the input</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>\\G</tt></td>\n     <td headers=\"matches\">The end of the previous match</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>\\Z</tt></td>\n     <td headers=\"matches\">The end of the input but for the final\n         <a href=\"#lt\">terminator</a>, if&nbsp;any</td></tr>\n <tr><td valign=\"top\" headers=\"construct bounds\"><tt>\\z</tt></td>\n     <td headers=\"matches\">The end of the input</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"greedy\">Greedy quantifiers</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct greedy\"><i>X</i><tt>?</tt></td>\n     <td headers=\"matches\"><i>X</i>, once or not at all</td></tr>\n <tr><td valign=\"top\" headers=\"construct greedy\"><i>X</i><tt>*</tt></td>\n     <td headers=\"matches\"><i>X</i>, zero or more times</td></tr>\n <tr><td valign=\"top\" headers=\"construct greedy\"><i>X</i><tt>+</tt></td>\n     <td headers=\"matches\"><i>X</i>, one or more times</td></tr>\n <tr><td valign=\"top\" headers=\"construct greedy\"><i>X</i><tt>{</tt><i>n</i><tt>}</tt></td>\n     <td headers=\"matches\"><i>X</i>, exactly <i>n</i> times</td></tr>\n <tr><td valign=\"top\" headers=\"construct greedy\"><i>X</i><tt>{</tt><i>n</i><tt>,}</tt></td>\n     <td headers=\"matches\"><i>X</i>, at least <i>n</i> times</td></tr>\n <tr><td valign=\"top\" headers=\"construct greedy\"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}</tt></td>\n     <td headers=\"matches\"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"reluc\">Reluctant quantifiers</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct reluc\"><i>X</i><tt>??</tt></td>\n     <td headers=\"matches\"><i>X</i>, once or not at all</td></tr>\n <tr><td valign=\"top\" headers=\"construct reluc\"><i>X</i><tt>*?</tt></td>\n     <td headers=\"matches\"><i>X</i>, zero or more times</td></tr>\n <tr><td valign=\"top\" headers=\"construct reluc\"><i>X</i><tt>+?</tt></td>\n     <td headers=\"matches\"><i>X</i>, one or more times</td></tr>\n <tr><td valign=\"top\" headers=\"construct reluc\"><i>X</i><tt>{</tt><i>n</i><tt>}?</tt></td>\n     <td headers=\"matches\"><i>X</i>, exactly <i>n</i> times</td></tr>\n <tr><td valign=\"top\" headers=\"construct reluc\"><i>X</i><tt>{</tt><i>n</i><tt>,}?</tt></td>\n     <td headers=\"matches\"><i>X</i>, at least <i>n</i> times</td></tr>\n <tr><td valign=\"top\" headers=\"construct reluc\"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}?</tt></td>\n     <td headers=\"matches\"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"poss\">Possessive quantifiers</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct poss\"><i>X</i><tt>?+</tt></td>\n     <td headers=\"matches\"><i>X</i>, once or not at all</td></tr>\n <tr><td valign=\"top\" headers=\"construct poss\"><i>X</i><tt>*+</tt></td>\n     <td headers=\"matches\"><i>X</i>, zero or more times</td></tr>\n <tr><td valign=\"top\" headers=\"construct poss\"><i>X</i><tt>++</tt></td>\n     <td headers=\"matches\"><i>X</i>, one or more times</td></tr>\n <tr><td valign=\"top\" headers=\"construct poss\"><i>X</i><tt>{</tt><i>n</i><tt>}+</tt></td>\n     <td headers=\"matches\"><i>X</i>, exactly <i>n</i> times</td></tr>\n <tr><td valign=\"top\" headers=\"construct poss\"><i>X</i><tt>{</tt><i>n</i><tt>,}+</tt></td>\n     <td headers=\"matches\"><i>X</i>, at least <i>n</i> times</td></tr>\n <tr><td valign=\"top\" headers=\"construct poss\"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}+</tt></td>\n     <td headers=\"matches\"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"logical\">Logical operators</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct logical\"><i>XY</i></td>\n     <td headers=\"matches\"><i>X</i> followed by <i>Y</i></td></tr>\n <tr><td valign=\"top\" headers=\"construct logical\"><i>X</i><tt>|</tt><i>Y</i></td>\n     <td headers=\"matches\">Either <i>X</i> or <i>Y</i></td></tr>\n <tr><td valign=\"top\" headers=\"construct logical\"><tt>(</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\">X, as a <a href=\"#cg\">capturing group</a></td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"backref\">Back references</th></tr>\n\n <tr><td valign=\"bottom\" headers=\"construct backref\"><tt>\\</tt><i>n</i></td>\n     <td valign=\"bottom\" headers=\"matches\">Whatever the <i>n</i><sup>th</sup>\n     <a href=\"#cg\">capturing group</a> matched</td></tr>\n\n <tr><td valign=\"bottom\" headers=\"construct backref\"><tt>\\</tt><i>k</i>&lt;<i>name</i>&gt;</td>\n     <td valign=\"bottom\" headers=\"matches\">Whatever the\n     <a href=\"#groupname\">named-capturing group</a> \"name\" matched</td></tr>\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"quot\">Quotation</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct quot\"><tt>\\</tt></td>\n     <td headers=\"matches\">Nothing, but quotes the following character</td></tr>\n <tr><td valign=\"top\" headers=\"construct quot\"><tt>\\Q</tt></td>\n     <td headers=\"matches\">Nothing, but quotes all characters until <tt>\\E</tt></td></tr>\n <tr><td valign=\"top\" headers=\"construct quot\"><tt>\\E</tt></td>\n     <td headers=\"matches\">Nothing, but ends quoting started by <tt>\\Q</tt></td></tr>\n     <!-- Metachars: !$()*+.<>?[\\]^{|} -->\n\n <tr><th>&nbsp;</th></tr>\n <tr align=\"left\"><th colspan=\"2\" id=\"special\">Special constructs (named-capturing and non-capturing)</th></tr>\n\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?&lt;<a href=\"#groupname\">name</a>&gt;</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, as a named-capturing group</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?:</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, as a non-capturing group</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?idmsuxU-idmsuxU)&nbsp;</tt></td>\n     <td headers=\"matches\">Nothing, but turns match flags <a href=\"#CASE_INSENSITIVE\">i</a>\n <a href=\"#UNIX_LINES\">d</a> <a href=\"#MULTILINE\">m</a> <a href=\"#DOTALL\">s</a>\n <a href=\"#UNICODE_CASE\">u</a> <a href=\"#COMMENTS\">x</a> <a href=\"#UNICODE_CHARACTER_CLASS\">U</a>\n on - off</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?idmsux-idmsux:</tt><i>X</i><tt>)</tt>&nbsp;&nbsp;</td>\n     <td headers=\"matches\"><i>X</i>, as a <a href=\"#cg\">non-capturing group</a> with the\n         given flags <a href=\"#CASE_INSENSITIVE\">i</a> <a href=\"#UNIX_LINES\">d</a>\n <a href=\"#MULTILINE\">m</a> <a href=\"#DOTALL\">s</a> <a href=\"#UNICODE_CASE\">u</a >\n <a href=\"#COMMENTS\">x</a> on - off</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?=</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, via zero-width positive lookahead</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?!</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, via zero-width negative lookahead</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?&lt;=</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, via zero-width positive lookbehind</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?&lt;!</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, via zero-width negative lookbehind</td></tr>\n <tr><td valign=\"top\" headers=\"construct special\"><tt>(?&gt;</tt><i>X</i><tt>)</tt></td>\n     <td headers=\"matches\"><i>X</i>, as an independent, non-capturing group</td></tr>\n\n </table>\n\n <hr>\n\n\n <a name=\"bs\">\n <h4> Backslashes, escapes, and quoting </h4>\n\n <p> The backslash character (<tt>'\\'</tt>) serves to introduce escaped\n constructs, as defined in the table above, as well as to quote characters\n that otherwise would be interpreted as unescaped constructs.  Thus the\n expression <tt>\\\\</tt> matches a single backslash and <tt>\\{</tt> matches a\n left brace.\n\n <p> It is an error to use a backslash prior to any alphabetic character that\n does not denote an escaped construct; these are reserved for future\n extensions to the regular-expression language.  A backslash may be used\n prior to a non-alphabetic character regardless of whether that character is\n part of an unescaped construct.\n\n <p> Backslashes within string literals in Java source code are interpreted\n as required by\n <cite>The Java&trade; Language Specification</cite>\n as either Unicode escapes (section 3.3) or other character escapes (section 3.10.6)\n It is therefore necessary to double backslashes in string\n literals that represent regular expressions to protect them from\n interpretation by the Java bytecode compiler.  The string literal\n <tt>\"&#92;b\"</tt>, for example, matches a single backspace character when\n interpreted as a regular expression, while <tt>\"&#92;&#92;b\"</tt> matches a\n word boundary.  The string literal <tt>\"&#92;(hello&#92;)\"</tt> is illegal\n and leads to a compile-time error; in order to match the string\n <tt>(hello)</tt> the string literal <tt>\"&#92;&#92;(hello&#92;&#92;)\"</tt>\n must be used.\n\n <a name=\"cc\">\n <h4> Character Classes </h4>\n\n    <p> Character classes may appear within other character classes, and\n    may be composed by the union operator (implicit) and the intersection\n    operator (<tt>&amp;&amp;</tt>).\n    The union operator denotes a class that contains every character that is\n    in at least one of its operand classes.  The intersection operator\n    denotes a class that contains every character that is in both of its\n    operand classes.\n\n    <p> The precedence of character-class operators is as follows, from\n    highest to lowest:\n\n    <blockquote><table border=\"0\" cellpadding=\"1\" cellspacing=\"0\"\n                 summary=\"Precedence of character class operators.\">\n      <tr><th>1&nbsp;&nbsp;&nbsp;&nbsp;</th>\n        <td>Literal escape&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td><tt>\\x</tt></td></tr>\n     <tr><th>2&nbsp;&nbsp;&nbsp;&nbsp;</th>\n        <td>Grouping</td>\n        <td><tt>[...]</tt></td></tr>\n     <tr><th>3&nbsp;&nbsp;&nbsp;&nbsp;</th>\n        <td>Range</td>\n        <td><tt>a-z</tt></td></tr>\n      <tr><th>4&nbsp;&nbsp;&nbsp;&nbsp;</th>\n        <td>Union</td>\n        <td><tt>[a-e][i-u]</tt></td></tr>\n      <tr><th>5&nbsp;&nbsp;&nbsp;&nbsp;</th>\n        <td>Intersection</td>\n        <td><tt>[a-z&&[aeiou]]</tt></td></tr>\n    </table></blockquote>\n\n    <p> Note that a different set of metacharacters are in effect inside\n    a character class than outside a character class. For instance, the\n    regular expression <tt>.</tt> loses its special meaning inside a\n    character class, while the expression <tt>-</tt> becomes a range\n    forming metacharacter.\n\n <a name=\"lt\">\n <h4> Line terminators </h4>\n\n <p> A <i>line terminator</i> is a one- or two-character sequence that marks\n the end of a line of the input character sequence.  The following are\n recognized as line terminators:\n\n <ul>\n\n   <li> A newline (line feed) character&nbsp;(<tt>'\\n'</tt>),\n\n   <li> A carriage-return character followed immediately by a newline\n   character&nbsp;(<tt>\"\\r\\n\"</tt>),\n\n   <li> A standalone carriage-return character&nbsp;(<tt>'\\r'</tt>),\n\n   <li> A next-line character&nbsp;(<tt>'&#92;u0085'</tt>),\n\n   <li> A line-separator character&nbsp;(<tt>'&#92;u2028'</tt>), or\n\n   <li> A paragraph-separator character&nbsp;(<tt>'&#92;u2029</tt>).\n\n </ul>\n <p>If {@link #UNIX_LINES} mode is activated, then the only line terminators\n recognized are newline characters.\n\n <p> The regular expression <tt>.</tt> matches any character except a line\n terminator unless the {@link #DOTALL} flag is specified.\n\n <p> By default, the regular expressions <tt>^</tt> and <tt>$</tt> ignore\n line terminators and only match at the beginning and the end, respectively,\n of the entire input sequence. If {@link #MULTILINE} mode is activated then\n <tt>^</tt> matches at the beginning of input and after any line terminator\n except at the end of input. When in {@link #MULTILINE} mode <tt>$</tt>\n matches just before a line terminator or the end of the input sequence.\n\n <a name=\"cg\">\n <h4> Groups and capturing </h4>\n\n <a name=\"gnumber\">\n <h5> Group number </h5>\n <p> Capturing groups are numbered by counting their opening parentheses from\n left to right.  In the expression <tt>((A)(B(C)))</tt>, for example, there\n are four such groups: </p>\n\n <blockquote><table cellpadding=1 cellspacing=0 summary=\"Capturing group numberings\">\n <tr><th>1&nbsp;&nbsp;&nbsp;&nbsp;</th>\n     <td><tt>((A)(B(C)))</tt></td></tr>\n <tr><th>2&nbsp;&nbsp;&nbsp;&nbsp;</th>\n     <td><tt>(A)</tt></td></tr>\n <tr><th>3&nbsp;&nbsp;&nbsp;&nbsp;</th>\n     <td><tt>(B(C))</tt></td></tr>\n <tr><th>4&nbsp;&nbsp;&nbsp;&nbsp;</th>\n     <td><tt>(C)</tt></td></tr>\n </table></blockquote>\n\n <p> Group zero always stands for the entire expression.\n\n <p> Capturing groups are so named because, during a match, each subsequence\n of the input sequence that matches such a group is saved.  The captured\n subsequence may be used later in the expression, via a back reference, and\n may also be retrieved from the matcher once the match operation is complete.\n\n <a name=\"groupname\">\n <h5> Group name </h5>\n <p>A capturing group can also be assigned a \"name\", a <tt>named-capturing group</tt>,\n and then be back-referenced later by the \"name\". Group names are composed of\n the following characters. The first character must be a <tt>letter</tt>.\n\n <ul>\n   <li> The uppercase letters <tt>'A'</tt> through <tt>'Z'</tt>\n        (<tt>'&#92;u0041'</tt>&nbsp;through&nbsp;<tt>'&#92;u005a'</tt>),\n   <li> The lowercase letters <tt>'a'</tt> through <tt>'z'</tt>\n        (<tt>'&#92;u0061'</tt>&nbsp;through&nbsp;<tt>'&#92;u007a'</tt>),\n   <li> The digits <tt>'0'</tt> through <tt>'9'</tt>\n        (<tt>'&#92;u0030'</tt>&nbsp;through&nbsp;<tt>'&#92;u0039'</tt>),\n </ul>\n\n <p> A <tt>named-capturing group</tt> is still numbered as described in\n <a href=\"#gnumber\">Group number</a>.\n\n <p> The captured input associated with a group is always the subsequence\n that the group most recently matched.  If a group is evaluated a second time\n because of quantification then its previously-captured value, if any, will\n be retained if the second evaluation fails.  Matching the string\n <tt>\"aba\"</tt> against the expression <tt>(a(b)?)+</tt>, for example, leaves\n group two set to <tt>\"b\"</tt>.  All captured input is discarded at the\n beginning of each match.\n\n <p> Groups beginning with <tt>(?</tt> are either pure, <i>non-capturing</i> groups\n that do not capture text and do not count towards the group total, or\n <i>named-capturing</i> group.\n\n <h4> Unicode support </h4>\n\n <p> This class is in conformance with Level 1 of <a\n href=\"http://www.unicode.org/reports/tr18/\"><i>Unicode Technical\n Standard #18: Unicode Regular Expression</i></a>, plus RL2.1\n Canonical Equivalents.\n <p>\n <b>Unicode escape sequences</b> such as <tt>&#92;u2014</tt> in Java source code\n are processed as described in section 3.3 of\n <cite>The Java&trade; Language Specification</cite>.\n Such escape sequences are also implemented directly by the regular-expression\n parser so that Unicode escapes can be used in expressions that are read from\n files or from the keyboard.  Thus the strings <tt>\"&#92;u2014\"</tt> and\n <tt>\"\\\\u2014\"</tt>, while not equal, compile into the same pattern, which\n matches the character with hexadecimal value <tt>0x2014</tt>.\n <p>\n A Unicode character can also be represented in a regular-expression by\n using its <b>Hex notation</b>(hexadecimal code point value) directly as described in construct\n <tt>&#92;x{...}</tt>, for example a supplementary character U+2011F\n can be specified as <tt>&#92;x{2011F}</tt>, instead of two consecutive\n Unicode escape sequences of the surrogate pair\n <tt>&#92;uD840</tt><tt>&#92;uDD1F</tt>.\n <p>\n Unicode scripts, blocks, categories and binary properties are written with\n the <tt>\\p</tt> and <tt>\\P</tt> constructs as in Perl.\n <tt>\\p{</tt><i>prop</i><tt>}</tt> matches if\n the input has the property <i>prop</i>, while <tt>\\P{</tt><i>prop</i><tt>}</tt>\n does not match if the input has that property.\n <p>\n Scripts, blocks, categories and binary properties can be used both inside\n and outside of a character class.\n <a name=\"usc\">\n <p>\n <b>Scripts</b> are specified either with the prefix {@code Is}, as in\n {@code IsHiragana}, or by using  the {@code script} keyword (or its short\n form {@code sc})as in {@code script=Hiragana} or {@code sc=Hiragana}.\n <p>\n The script names supported by <code>Pattern</code> are the valid script names\n accepted and defined by\n {@link java.lang.Character.UnicodeScript#forName(String) UnicodeScript.forName}.\n <a name=\"ubc\">\n <p>\n <b>Blocks</b> are specified with the prefix {@code In}, as in\n {@code InMongolian}, or by using the keyword {@code block} (or its short\n form {@code blk}) as in {@code block=Mongolian} or {@code blk=Mongolian}.\n <p>\n The block names supported by <code>Pattern</code> are the valid block names\n accepted and defined by\n {@link java.lang.Character.UnicodeBlock#forName(String) UnicodeBlock.forName}.\n <p>\n <a name=\"ucc\">\n <b>Categories</b> may be specified with the optional prefix {@code Is}:\n Both {@code \\p{L}} and {@code \\p{IsL}} denote the category of Unicode\n letters. Same as scripts and blocks, categories can also be specified\n by using the keyword {@code general_category} (or its short form\n {@code gc}) as in {@code general_category=Lu} or {@code gc=Lu}.\n <p>\n The supported categories are those of\n <a href=\"http://www.unicode.org/unicode/standard/standard.html\">\n <i>The Unicode Standard</i></a> in the version specified by the\n {@link java.lang.Character Character} class. The category names are those\n defined in the Standard, both normative and informative.\n <p>\n <a name=\"ubpc\">\n <b>Binary properties</b> are specified with the prefix {@code Is}, as in\n {@code IsAlphabetic}. The supported binary properties by <code>Pattern</code>\n are\n <ul>\n   <li> Alphabetic\n   <li> Ideographic\n   <li> Letter\n   <li> Lowercase\n   <li> Uppercase\n   <li> Titlecase\n   <li> Punctuation\n   <Li> Control\n   <li> White_Space\n   <li> Digit\n   <li> Hex_Digit\n   <li> Noncharacter_Code_Point\n   <li> Assigned\n </ul>\n\n\n <p>\n <b>Predefined Character classes</b> and <b>POSIX character classes</b> are in\n conformance with the recommendation of <i>Annex C: Compatibility Properties</i>\n of <a href=\"http://www.unicode.org/reports/tr18/\"><i>Unicode Regular Expression\n </i></a>, when {@link #UNICODE_CHARACTER_CLASS} flag is specified.\n <p>\n <table border=\"0\" cellpadding=\"1\" cellspacing=\"0\"\n  summary=\"predefined and posix character classes in Unicode mode\">\n <tr align=\"left\">\n <th bgcolor=\"#CCCCFF\" align=\"left\" id=\"classes\">Classes</th>\n <th bgcolor=\"#CCCCFF\" align=\"left\" id=\"matches\">Matches</th>\n</tr>\n <tr><td><tt>\\p{Lower}</tt></td>\n     <td>A lowercase character:<tt>\\p{IsLowercase}</tt></td></tr>\n <tr><td><tt>\\p{Upper}</tt></td>\n     <td>An uppercase character:<tt>\\p{IsUppercase}</tt></td></tr>\n <tr><td><tt>\\p{ASCII}</tt></td>\n     <td>All ASCII:<tt>[\\x00-\\x7F]</tt></td></tr>\n <tr><td><tt>\\p{Alpha}</tt></td>\n     <td>An alphabetic character:<tt>\\p{IsAlphabetic}</tt></td></tr>\n <tr><td><tt>\\p{Digit}</tt></td>\n     <td>A decimal digit character:<tt>p{IsDigit}</tt></td></tr>\n <tr><td><tt>\\p{Alnum}</tt></td>\n     <td>An alphanumeric character:<tt>[\\p{IsAlphabetic}\\p{IsDigit}]</tt></td></tr>\n <tr><td><tt>\\p{Punct}</tt></td>\n     <td>A punctuation character:<tt>p{IsPunctuation}</tt></td></tr>\n <tr><td><tt>\\p{Graph}</tt></td>\n     <td>A visible character: <tt>[^\\p{IsWhite_Space}\\p{gc=Cc}\\p{gc=Cs}\\p{gc=Cn}]</tt></td></tr>\n <tr><td><tt>\\p{Print}</tt></td>\n     <td>A printable character: <tt>[\\p{Graph}\\p{Blank}&&[^\\p{Cntrl}]]</tt></td></tr>\n <tr><td><tt>\\p{Blank}</tt></td>\n     <td>A space or a tab: <tt>[\\p{IsWhite_Space}&&[^\\p{gc=Zl}\\p{gc=Zp}\\x0a\\x0b\\x0c\\x0d\\x85]]</tt></td></tr>\n <tr><td><tt>\\p{Cntrl}</tt></td>\n     <td>A control character: <tt>\\p{gc=Cc}</tt></td></tr>\n <tr><td><tt>\\p{XDigit}</tt></td>\n     <td>A hexadecimal digit: <tt>[\\p{gc=Nd}\\p{IsHex_Digit}]</tt></td></tr>\n <tr><td><tt>\\p{Space}</tt></td>\n     <td>A whitespace character:<tt>\\p{IsWhite_Space}</tt></td></tr>\n <tr><td><tt>\\d</tt></td>\n     <td>A digit: <tt>\\p{IsDigit}</tt></td></tr>\n <tr><td><tt>\\D</tt></td>\n     <td>A non-digit: <tt>[^\\d]</tt></td></tr>\n <tr><td><tt>\\s</tt></td>\n     <td>A whitespace character: <tt>\\p{IsWhite_Space}</tt></td></tr>\n <tr><td><tt>\\S</tt></td>\n     <td>A non-whitespace character: <tt>[^\\s]</tt></td></tr>\n <tr><td><tt>\\w</tt></td>\n     <td>A word character: <tt>[\\p{Alpha}\\p{gc=Mn}\\p{gc=Me}\\p{gc=Mc}\\p{Digit}\\p{gc=Pc}]</tt></td></tr>\n <tr><td><tt>\\W</tt></td>\n     <td>A non-word character: <tt>[^\\w]</tt></td></tr>\n </table>\n <p>\n <a name=\"jcc\">\n Categories that behave like the java.lang.Character\n boolean is<i>methodname</i> methods (except for the deprecated ones) are\n available through the same <tt>\\p{</tt><i>prop</i><tt>}</tt> syntax where\n the specified property has the name <tt>java<i>methodname</i></tt>.\n\n <h4> Comparison to Perl 5 </h4>\n\n <p>The <code>Pattern</code> engine performs traditional NFA-based matching\n with ordered alternation as occurs in Perl 5.\n\n <p> Perl constructs not supported by this class: </p>\n\n <ul>\n    <li><p> Predefined character classes (Unicode character)\n    <p><tt>\\h&nbsp;&nbsp;&nbsp;&nbsp;</tt>A horizontal whitespace\n    <p><tt>\\H&nbsp;&nbsp;&nbsp;&nbsp;</tt>A non horizontal whitespace\n    <p><tt>\\v&nbsp;&nbsp;&nbsp;&nbsp;</tt>A vertical whitespace\n    <p><tt>\\V&nbsp;&nbsp;&nbsp;&nbsp;</tt>A non vertical whitespace\n    <p><tt>\\R&nbsp;&nbsp;&nbsp;&nbsp;</tt>Any Unicode linebreak sequence\n    <tt>\\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029]</tt>\n    <p><tt>\\X&nbsp;&nbsp;&nbsp;&nbsp;</tt>Match Unicode\n    <a href=\"http://www.unicode.org/reports/tr18/#Default_Grapheme_Clusters\">\n    <i>extended grapheme cluster</i></a>\n    </p></li>\n\n    <li><p> The backreference constructs, <tt>\\g{</tt><i>n</i><tt>}</tt> for\n    the <i>n</i><sup>th</sup><a href=\"#cg\">capturing group</a> and\n    <tt>\\g{</tt><i>name</i><tt>}</tt> for\n    <a href=\"#groupname\">named-capturing group</a>.\n    </p></li>\n\n    <li><p> The named character construct, <tt>\\N{</tt><i>name</i><tt>}</tt>\n    for a Unicode character by its name.\n    </p></li>\n\n    <li><p> The conditional constructs\n    <tt>(?(</tt><i>condition</i><tt>)</tt><i>X</i><tt>)</tt> and\n    <tt>(?(</tt><i>condition</i><tt>)</tt><i>X</i><tt>|</tt><i>Y</i><tt>)</tt>,\n    </p></li>\n\n    <li><p> The embedded code constructs <tt>(?{</tt><i>code</i><tt>})</tt>\n    and <tt>(??{</tt><i>code</i><tt>})</tt>,</p></li>\n\n    <li><p> The embedded comment syntax <tt>(?#comment)</tt>, and </p></li>\n\n    <li><p> The preprocessing operations <tt>\\l</tt> <tt>&#92;u</tt>,\n    <tt>\\L</tt>, and <tt>\\U</tt>.  </p></li>\n\n </ul>\n\n <p> Constructs supported by this class but not by Perl: </p>\n\n <ul>\n\n    <li><p> Character-class union and intersection as described\n    <a href=\"#cc\">above</a>.</p></li>\n\n </ul>\n\n <p> Notable differences from Perl: </p>\n\n <ul>\n\n    <li><p> In Perl, <tt>\\1</tt> through <tt>\\9</tt> are always interpreted\n    as back references; a backslash-escaped number greater than <tt>9</tt> is\n    treated as a back reference if at least that many subexpressions exist,\n    otherwise it is interpreted, if possible, as an octal escape.  In this\n    class octal escapes must always begin with a zero. In this class,\n    <tt>\\1</tt> through <tt>\\9</tt> are always interpreted as back\n    references, and a larger number is accepted as a back reference if at\n    least that many subexpressions exist at that point in the regular\n    expression, otherwise the parser will drop digits until the number is\n    smaller or equal to the existing number of groups or it is one digit.\n    </p></li>\n\n    <li><p> Perl uses the <tt>g</tt> flag to request a match that resumes\n    where the last match left off.  This functionality is provided implicitly\n    by the {@link Matcher} class: Repeated invocations of the {@link\n    Matcher#find find} method will resume where the last match left off,\n    unless the matcher is reset.  </p></li>\n\n    <li><p> In Perl, embedded flags at the top level of an expression affect\n    the whole expression.  In this class, embedded flags always take effect\n    at the point at which they appear, whether they are at the top level or\n    within a group; in the latter case, flags are restored at the end of the\n    group just as in Perl.  </p></li>\n\n </ul>\n\n\n <p> For a more precise description of the behavior of regular expression\n constructs, please see <a href=\"http://www.oreilly.com/catalog/regex3/\">\n <i>Mastering Regular Expressions, 3nd Edition</i>, Jeffrey E. F. Friedl,\n O'Reilly and Associates, 2006.</a>\n </p>",
            "since": "1.4",
            "see": [
                "java.lang.String",
                "java.lang.String"
            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "UNIX_LINES",
                    "comment_text": "Enables Unix lines mode.\n\n <p> In this mode, only the <tt>'\\n'</tt> line terminator is recognized\n in the behavior of <tt>.</tt>, <tt>^</tt>, and <tt>$</tt>.\n\n <p> Unix lines mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?d)</tt>.",
                    "type": "int"
                },
                {
                    "name": "CASE_INSENSITIVE",
                    "comment_text": "Enables case-insensitive matching.\n\n <p> By default, case-insensitive matching assumes that only characters\n in the US-ASCII charset are being matched.  Unicode-aware\n case-insensitive matching can be enabled by specifying the {@link\n #UNICODE_CASE} flag in conjunction with this flag.\n\n <p> Case-insensitive matching can also be enabled via the embedded flag\n expression&nbsp;<tt>(?i)</tt>.\n\n <p> Specifying this flag may impose a slight performance penalty.  </p>",
                    "type": "int"
                },
                {
                    "name": "COMMENTS",
                    "comment_text": "Permits whitespace and comments in pattern.\n\n <p> In this mode, whitespace is ignored, and embedded comments starting\n with <tt>#</tt> are ignored until the end of a line.\n\n <p> Comments mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?x)</tt>.",
                    "type": "int"
                },
                {
                    "name": "MULTILINE",
                    "comment_text": "Enables multiline mode.\n\n <p> In multiline mode the expressions <tt>^</tt> and <tt>$</tt> match\n just after or just before, respectively, a line terminator or the end of\n the input sequence.  By default these expressions only match at the\n beginning and the end of the entire input sequence.\n\n <p> Multiline mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?m)</tt>.  </p>",
                    "type": "int"
                },
                {
                    "name": "LITERAL",
                    "comment_text": "Enables literal parsing of the pattern.\n\n <p> When this flag is specified then the input string that specifies\n the pattern is treated as a sequence of literal characters.\n Metacharacters or escape sequences in the input sequence will be\n given no special meaning.\n\n <p>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on\n matching when used in conjunction with this flag. The other flags\n become superfluous.\n\n <p> There is no embedded flag character for enabling literal parsing.",
                    "type": "int"
                },
                {
                    "name": "DOTALL",
                    "comment_text": "Enables dotall mode.\n\n <p> In dotall mode, the expression <tt>.</tt> matches any character,\n including a line terminator.  By default this expression does not match\n line terminators.\n\n <p> Dotall mode can also be enabled via the embedded flag\n expression&nbsp;<tt>(?s)</tt>.  (The <tt>s</tt> is a mnemonic for\n \"single-line\" mode, which is what this is called in Perl.)  </p>",
                    "type": "int"
                },
                {
                    "name": "UNICODE_CASE",
                    "comment_text": "Enables Unicode-aware case folding.\n\n <p> When this flag is specified then case-insensitive matching, when\n enabled by the {@link #CASE_INSENSITIVE} flag, is done in a manner\n consistent with the Unicode Standard.  By default, case-insensitive\n matching assumes that only characters in the US-ASCII charset are being\n matched.\n\n <p> Unicode-aware case folding can also be enabled via the embedded flag\n expression&nbsp;<tt>(?u)</tt>.\n\n <p> Specifying this flag may impose a performance penalty.  </p>",
                    "type": "int"
                },
                {
                    "name": "CANON_EQ",
                    "comment_text": "Enables canonical equivalence.\n\n <p> When this flag is specified then two characters will be considered\n to match if, and only if, their full canonical decompositions match.\n The expression <tt>\"a&#92;u030A\"</tt>, for example, will match the\n string <tt>\"&#92;u00E5\"</tt> when this flag is specified.  By default,\n matching does not take canonical equivalence into account.\n\n <p> There is no embedded flag character for enabling canonical\n equivalence.\n\n <p> Specifying this flag may impose a performance penalty.  </p>",
                    "type": "int"
                },
                {
                    "name": "UNICODE_CHARACTER_CLASS",
                    "comment_text": "Enables the Unicode version of <i>Predefined character classes</i> and\n <i>POSIX character classes</i>.\n\n <p> When this flag is specified then the (US-ASCII only)\n <i>Predefined character classes</i> and <i>POSIX character classes</i>\n are in conformance with\n <a href=\"http://www.unicode.org/reports/tr18/\"><i>Unicode Technical\n Standard #18: Unicode Regular Expression</i></a>\n <i>Annex C: Compatibility Properties</i>.\n <p>\n The UNICODE_CHARACTER_CLASS mode can also be enabled via the embedded\n flag expression&nbsp;<tt>(?U)</tt>.\n <p>\n The flag implies UNICODE_CASE, that is, it enables Unicode-aware case\n folding.\n <p>\n Specifying this flag may impose a performance penalty.  </p>",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "compile",
                    "comment_text": "Compiles the given regular expression into a pattern.  </p>",
                    "return_type": "java.util.regex.Pattern",
                    "parameters": [
                        {
                            "name": "regex",
                            "comment_text": "The expression to be compiled",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compile",
                    "comment_text": "Compiles the given regular expression into a pattern with the given\n flags.  </p>",
                    "return_type": "java.util.regex.Pattern",
                    "parameters": [
                        {
                            "name": "regex",
                            "comment_text": "The expression to be compiled",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "flags",
                            "comment_text": "Match flags, a bit mask that may include\n         {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL},\n         {@link #UNICODE_CASE}, {@link #CANON_EQ}, {@link #UNIX_LINES},\n         {@link #LITERAL}, {@link #UNICODE_CHARACTER_CLASS}\n         and {@link #COMMENTS}",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pattern",
                    "comment_text": "Returns the regular expression from which this pattern was compiled.\n </p>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "<p>Returns the string representation of this pattern. This\n is the regular expression from which this pattern was\n compiled.</p>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "matcher",
                    "comment_text": "Creates a matcher that will match the given input against this pattern.\n </p>",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "input",
                            "comment_text": "The character sequence to be matched",
                            "type": "java.lang.CharSequence"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flags",
                    "comment_text": "Returns this pattern's match flags.  </p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "matches",
                    "comment_text": "Compiles the given regular expression and attempts to match the given\n input against it.\n\n <p> An invocation of this convenience method of the form\n\n <blockquote><pre>\n Pattern.matches(regex, input);</pre></blockquote>\n\n behaves in exactly the same way as the expression\n\n <blockquote><pre>\n Pattern.compile(regex).matcher(input).matches()</pre></blockquote>\n\n <p> If a pattern is to be used multiple times, compiling it once and reusing\n it will be more efficient than invoking this method each time.  </p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "regex",
                            "comment_text": "The expression to be compiled",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "input",
                            "comment_text": "The character sequence to be matched",
                            "type": "java.lang.CharSequence"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "split",
                    "comment_text": "Splits the given input sequence around matches of this pattern.\n\n <p> The array returned by this method contains each substring of the\n input sequence that is terminated by another subsequence that matches\n this pattern or is terminated by the end of the input sequence.  The\n substrings in the array are in the order in which they occur in the\n input.  If this pattern does not match any subsequence of the input then\n the resulting array has just one element, namely the input sequence in\n string form.\n\n <p> The <tt>limit</tt> parameter controls the number of times the\n pattern is applied and therefore affects the length of the resulting\n array.  If the limit <i>n</i> is greater than zero then the pattern\n will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's\n length will be no greater than <i>n</i>, and the array's last entry\n will contain all input beyond the last matched delimiter.  If <i>n</i>\n is non-positive then the pattern will be applied as many times as\n possible and the array can have any length.  If <i>n</i> is zero then\n the pattern will be applied as many times as possible, the array can\n have any length, and trailing empty strings will be discarded.\n\n <p> The input <tt>\"boo:and:foo\"</tt>, for example, yields the following\n results with these parameters:\n\n <blockquote><table cellpadding=1 cellspacing=0\n              summary=\"Split examples showing regex, limit, and result\">\n <tr><th><P align=\"left\"><i>Regex&nbsp;&nbsp;&nbsp;&nbsp;</i></th>\n     <th><P align=\"left\"><i>Limit&nbsp;&nbsp;&nbsp;&nbsp;</i></th>\n     <th><P align=\"left\"><i>Result&nbsp;&nbsp;&nbsp;&nbsp;</i></th></tr>\n <tr><td align=center>:</td>\n     <td align=center>2</td>\n     <td><tt>{ \"boo\", \"and:foo\" }</tt></td></tr>\n <tr><td align=center>:</td>\n     <td align=center>5</td>\n     <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>\n <tr><td align=center>:</td>\n     <td align=center>-2</td>\n     <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td align=center>5</td>\n     <td><tt>{ \"b\", \"\", \":and:f\", \"\", \"\" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td align=center>-2</td>\n     <td><tt>{ \"b\", \"\", \":and:f\", \"\", \"\" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td align=center>0</td>\n     <td><tt>{ \"b\", \"\", \":and:f\" }</tt></td></tr>\n </table></blockquote>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "input",
                            "comment_text": "The character sequence to be split",
                            "type": "java.lang.CharSequence"
                        },
                        {
                            "name": "limit",
                            "comment_text": "The result threshold, as described above",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "split",
                    "comment_text": "Splits the given input sequence around matches of this pattern.\n\n <p> This method works as if by invoking the two-argument {@link\n #split(java.lang.CharSequence, int) split} method with the given input\n sequence and a limit argument of zero.  Trailing empty strings are\n therefore not included in the resulting array. </p>\n\n <p> The input <tt>\"boo:and:foo\"</tt>, for example, yields the following\n results with these expressions:\n\n <blockquote><table cellpadding=1 cellspacing=0\n              summary=\"Split examples showing regex and result\">\n <tr><th><P align=\"left\"><i>Regex&nbsp;&nbsp;&nbsp;&nbsp;</i></th>\n     <th><P align=\"left\"><i>Result</i></th></tr>\n <tr><td align=center>:</td>\n     <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>\n <tr><td align=center>o</td>\n     <td><tt>{ \"b\", \"\", \":and:f\" }</tt></td></tr>\n </table></blockquote>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "input",
                            "comment_text": "The character sequence to be split",
                            "type": "java.lang.CharSequence"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "quote",
                    "comment_text": "Returns a literal pattern <code>String</code> for the specified\n <code>String</code>.\n\n <p>This method produces a <code>String</code> that can be used to\n create a <code>Pattern</code> that would match the string\n <code>s</code> as if it were a literal pattern.</p> Metacharacters\n or escape sequences in the input sequence will be given no special\n meaning.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "The string to be literalized",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.regex.Matcher",
            "interfaces": [
                "java.util.regex.MatchResult"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An engine that performs match operations on a {@link java.lang.CharSequence\n </code>character sequence<code>} by interpreting a {@link Pattern}.\n\n <p> A matcher is created from a pattern by invoking the pattern's {@link\n Pattern#matcher matcher} method.  Once created, a matcher can be used to\n perform three different kinds of match operations:\n\n <ul>\n\n   <li><p> The {@link #matches matches} method attempts to match the entire\n   input sequence against the pattern.  </p></li>\n\n   <li><p> The {@link #lookingAt lookingAt} method attempts to match the\n   input sequence, starting at the beginning, against the pattern.  </p></li>\n\n   <li><p> The {@link #find find} method scans the input sequence looking for\n   the next subsequence that matches the pattern.  </p></li>\n\n </ul>\n\n <p> Each of these methods returns a boolean indicating success or failure.\n More information about a successful match can be obtained by querying the\n state of the matcher.\n\n <p> A matcher finds matches in a subset of its input called the\n <i>region</i>. By default, the region contains all of the matcher's input.\n The region can be modified via the{@link #region region} method and queried\n via the {@link #regionStart regionStart} and {@link #regionEnd regionEnd}\n methods. The way that the region boundaries interact with some pattern\n constructs can be changed. See {@link #useAnchoringBounds\n useAnchoringBounds} and {@link #useTransparentBounds useTransparentBounds}\n for more details.\n\n <p> This class also defines methods for replacing matched subsequences with\n new strings whose contents can, if desired, be computed from the match\n result.  The {@link #appendReplacement appendReplacement} and {@link\n #appendTail appendTail} methods can be used in tandem in order to collect\n the result into an existing string buffer, or the more convenient {@link\n #replaceAll replaceAll} method can be used to create a string in which every\n matching subsequence in the input sequence is replaced.\n\n <p> The explicit state of a matcher includes the start and end indices of\n the most recent successful match.  It also includes the start and end\n indices of the input subsequence captured by each <a\n href=\"Pattern.html#cg\">capturing group</a> in the pattern as well as a total\n count of such subsequences.  As a convenience, methods are also provided for\n returning these captured subsequences in string form.\n\n <p> The explicit state of a matcher is initially undefined; attempting to\n query any part of it before a successful match will cause an {@link\n IllegalStateException} to be thrown.  The explicit state of a matcher is\n recomputed by every match operation.\n\n <p> The implicit state of a matcher includes the input character sequence as\n well as the <i>append position</i>, which is initially zero and is updated\n by the {@link #appendReplacement appendReplacement} method.\n\n <p> A matcher may be reset explicitly by invoking its {@link #reset()}\n method or, if a new input sequence is desired, its {@link\n #reset(java.lang.CharSequence) reset(CharSequence)} method.  Resetting a\n matcher discards its explicit state information and sets the append position\n to zero.\n\n <p> Instances of this class are not safe for use by multiple concurrent\n threads. </p>",
            "since": "1.4",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "pattern",
                    "comment_text": "Returns the pattern that is interpreted by this matcher.",
                    "return_type": "java.util.regex.Pattern",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toMatchResult",
                    "comment_text": "Returns the match state of this matcher as a {@link MatchResult}.\n The result is unaffected by subsequent operations performed upon this\n matcher.",
                    "return_type": "java.util.regex.MatchResult",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "usePattern",
                    "comment_text": "Changes the <tt>Pattern</tt> that this <tt>Matcher</tt> uses to\n find matches with.\n\n <p> This method causes this matcher to lose information\n about the groups of the last match that occurred. The\n matcher's position in the input is maintained and its\n last append position is unaffected.</p>",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "newPattern",
                            "comment_text": "The new pattern used by this matcher",
                            "type": "java.util.regex.Pattern"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets this matcher.\n\n <p> Resetting a matcher discards all of its explicit state information\n and sets its append position to zero. The matcher's region is set to the\n default region, which is its entire character sequence. The anchoring\n and transparency of this matcher's region boundaries are unaffected.",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets this matcher with a new input sequence.\n\n <p> Resetting a matcher discards all of its explicit state information\n and sets its append position to zero.  The matcher's region is set to\n the default region, which is its entire character sequence.  The\n anchoring and transparency of this matcher's region boundaries are\n unaffected.",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "input",
                            "comment_text": "The new input character sequence",
                            "type": "java.lang.CharSequence"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "start",
                    "comment_text": "Returns the start index of the previous match.  </p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "start",
                    "comment_text": "Returns the start index of the subsequence captured by the given group\n during the previous match operation.\n\n <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <i>m.</i><tt>start(0)</tt> is equivalent to\n <i>m.</i><tt>start()</tt>.  </p>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "group",
                            "comment_text": "The index of a capturing group in this matcher's pattern",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "end",
                    "comment_text": "Returns the offset after the last character matched.  </p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "end",
                    "comment_text": "Returns the offset after the last character of the subsequence\n captured by the given group during the previous match operation.\n\n <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <i>m.</i><tt>end(0)</tt> is equivalent to\n <i>m.</i><tt>end()</tt>.  </p>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "group",
                            "comment_text": "The index of a capturing group in this matcher's pattern",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "group",
                    "comment_text": "Returns the input subsequence matched by the previous match.\n\n <p> For a matcher <i>m</i> with input sequence <i>s</i>,\n the expressions <i>m.</i><tt>group()</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(),</tt>&nbsp;<i>m.</i><tt>end())</tt>\n are equivalent.  </p>\n\n <p> Note that some patterns, for example <tt>a*</tt>, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "group",
                    "comment_text": "Returns the input subsequence captured by the given group during the\n previous match operation.\n\n <p> For a matcher <i>m</i>, input sequence <i>s</i>, and group index\n <i>g</i>, the expressions <i>m.</i><tt>group(</tt><i>g</i><tt>)</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(</tt><i>g</i><tt>),</tt>&nbsp;<i>m.</i><tt>end(</tt><i>g</i><tt>))</tt>\n are equivalent.  </p>\n\n <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <tt>m.group(0)</tt> is equivalent to <tt>m.group()</tt>.\n </p>\n\n <p> If the match was successful but the group specified failed to match\n any part of the input sequence, then <tt>null</tt> is returned. Note\n that some groups, for example <tt>(a*)</tt>, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "group",
                            "comment_text": "The index of a capturing group in this matcher's pattern",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "group",
                    "comment_text": "Returns the input subsequence captured by the given\n <a href=\"Pattern.html#groupname\">named-capturing group</a> during the previous\n match operation.\n\n <p> If the match was successful but the group specified failed to match\n any part of the input sequence, then <tt>null</tt> is returned. Note\n that some groups, for example <tt>(a*)</tt>, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "The name of a named-capturing group in this matcher's pattern",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "groupCount",
                    "comment_text": "Returns the number of capturing groups in this matcher's pattern.\n\n <p> Group zero denotes the entire pattern by convention. It is not\n included in this count.\n\n <p> Any non-negative integer smaller than or equal to the value\n returned by this method is guaranteed to be a valid group index for\n this matcher.  </p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "matches",
                    "comment_text": "Attempts to match the entire region against the pattern.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods.  </p>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "find",
                    "comment_text": "Attempts to find the next subsequence of the input sequence that matches\n the pattern.\n\n <p> This method starts at the beginning of this matcher's region, or, if\n a previous invocation of the method was successful and the matcher has\n not since been reset, at the first character not matched by the previous\n match.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods.  </p>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "find",
                    "comment_text": "Resets this matcher and then attempts to find the next subsequence of\n the input sequence that matches the pattern, starting at the specified\n index.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods, and subsequent\n invocations of the {@link #find()} method will start at the first\n character not matched by this match.  </p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "start",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lookingAt",
                    "comment_text": "Attempts to match the input sequence, starting at the beginning of the\n region, against the pattern.\n\n <p> Like the {@link #matches matches} method, this method always starts\n at the beginning of the region; unlike that method, it does not\n require that the entire region be matched.\n\n <p> If the match succeeds then more information can be obtained via the\n <tt>start</tt>, <tt>end</tt>, and <tt>group</tt> methods.  </p>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "quoteReplacement",
                    "comment_text": "Returns a literal replacement <code>String</code> for the specified\n <code>String</code>.\n\n This method produces a <code>String</code> that will work\n as a literal replacement <code>s</code> in the\n <code>appendReplacement</code> method of the {@link Matcher} class.\n The <code>String</code> produced will match the sequence of characters\n in <code>s</code> treated as a literal sequence. Slashes ('\\') and\n dollar signs ('$') will be given no special meaning.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "The string to be literalized",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "appendReplacement",
                    "comment_text": "Implements a non-terminal append-and-replace step.\n\n <p> This method performs the following actions: </p>\n\n <ol>\n\n   <li><p> It reads characters from the input sequence, starting at the\n   append position, and appends them to the given string buffer.  It\n   stops after reading the last character preceding the previous match,\n   that is, the character at index {@link\n   #start()}&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>.  </p></li>\n\n   <li><p> It appends the given replacement string to the string buffer.\n   </p></li>\n\n   <li><p> It sets the append position of this matcher to the index of\n   the last character matched, plus one, that is, to {@link #end()}.\n   </p></li>\n\n </ol>\n\n <p> The replacement string may contain references to subsequences\n captured during the previous match: Each occurrence of\n <tt>${</tt><i>name</i><tt>}</tt> or <tt>$</tt><i>g</i>\n will be replaced by the result of evaluating the corresponding\n {@link #group(String) group(name)} or {@link #group(int) group(g)</tt>}\n respectively. For  <tt>$</tt><i>g</i><tt></tt>,\n the first number after the <tt>$</tt> is always treated as part of\n the group reference. Subsequent numbers are incorporated into g if\n they would form a legal group reference. Only the numerals '0'\n through '9' are considered as potential components of the group\n reference. If the second group matched the string <tt>\"foo\"</tt>, for\n example, then passing the replacement string <tt>\"$2bar\"</tt> would\n cause <tt>\"foobar\"</tt> to be appended to the string buffer. A dollar\n sign (<tt>$</tt>) may be included as a literal in the replacement\n string by preceding it with a backslash (<tt>\\$</tt>).\n\n <p> Note that backslashes (<tt>\\</tt>) and dollar signs (<tt>$</tt>) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n <p> This method is intended to be used in a loop together with the\n {@link #appendTail appendTail} and {@link #find find} methods.  The\n following code, for example, writes <tt>one dog two dogs in the\n yard</tt> to the standard-output stream: </p>\n\n <blockquote><pre>\n Pattern p = Pattern.compile(\"cat\");\n Matcher m = p.matcher(\"one cat two cats in the yard\");\n StringBuffer sb = new StringBuffer();\n while (m.find()) {\n     m.appendReplacement(sb, \"dog\");\n }\n m.appendTail(sb);\n System.out.println(sb.toString());</pre></blockquote>",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "sb",
                            "comment_text": "The target string buffer",
                            "type": "java.lang.StringBuffer"
                        },
                        {
                            "name": "replacement",
                            "comment_text": "The replacement string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "appendTail",
                    "comment_text": "Implements a terminal append-and-replace step.\n\n <p> This method reads characters from the input sequence, starting at\n the append position, and appends them to the given string buffer.  It is\n intended to be invoked after one or more invocations of the {@link\n #appendReplacement appendReplacement} method in order to copy the\n remainder of the input sequence.  </p>",
                    "return_type": "java.lang.StringBuffer",
                    "parameters": [
                        {
                            "name": "sb",
                            "comment_text": "The target string buffer",
                            "type": "java.lang.StringBuffer"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replaceAll",
                    "comment_text": "Replaces every subsequence of the input sequence that matches the\n pattern with the given replacement string.\n\n <p> This method first resets this matcher.  It then scans the input\n sequence looking for matches of the pattern.  Characters that are not\n part of any match are appended directly to the result string; each match\n is replaced in the result by the replacement string.  The replacement\n string may contain references to captured subsequences as in the {@link\n #appendReplacement appendReplacement} method.\n\n <p> Note that backslashes (<tt>\\</tt>) and dollar signs (<tt>$</tt>) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n <p> Given the regular expression <tt>a*b</tt>, the input\n <tt>\"aabfooaabfooabfoob\"</tt>, and the replacement string\n <tt>\"-\"</tt>, an invocation of this method on a matcher for that\n expression would yield the string <tt>\"-foo-foo-foo-\"</tt>.\n\n <p> Invoking this method changes this matcher's state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "replacement",
                            "comment_text": "The replacement string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replaceFirst",
                    "comment_text": "Replaces the first subsequence of the input sequence that matches the\n pattern with the given replacement string.\n\n <p> This method first resets this matcher.  It then scans the input\n sequence looking for a match of the pattern.  Characters that are not\n part of the match are appended directly to the result string; the match\n is replaced in the result by the replacement string.  The replacement\n string may contain references to captured subsequences as in the {@link\n #appendReplacement appendReplacement} method.\n\n <p>Note that backslashes (<tt>\\</tt>) and dollar signs (<tt>$</tt>) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n <p> Given the regular expression <tt>dog</tt>, the input\n <tt>\"zzzdogzzzdogzzz\"</tt>, and the replacement string\n <tt>\"cat\"</tt>, an invocation of this method on a matcher for that\n expression would yield the string <tt>\"zzzcatzzzdogzzz\"</tt>.  </p>\n\n <p> Invoking this method changes this matcher's state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "replacement",
                            "comment_text": "The replacement string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "region",
                    "comment_text": "Sets the limits of this matcher's region. The region is the part of the\n input sequence that will be searched to find a match. Invoking this\n method resets the matcher, and then sets the region to start at the\n index specified by the <code>start</code> parameter and end at the\n index specified by the <code>end</code> parameter.\n\n <p>Depending on the transparency and anchoring being used (see\n {@link #useTransparentBounds useTransparentBounds} and\n {@link #useAnchoringBounds useAnchoringBounds}), certain constructs such\n as anchors may behave differently at or around the boundaries of the\n region.",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "start",
                            "comment_text": "The index to start searching at (inclusive)",
                            "type": "int"
                        },
                        {
                            "name": "end",
                            "comment_text": "The index to end searching at (exclusive)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "regionStart",
                    "comment_text": "Reports the start index of this matcher's region. The\n searches this matcher conducts are limited to finding matches\n within {@link #regionStart regionStart} (inclusive) and\n {@link #regionEnd regionEnd} (exclusive).",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "regionEnd",
                    "comment_text": "Reports the end index (exclusive) of this matcher's region.\n The searches this matcher conducts are limited to finding matches\n within {@link #regionStart regionStart} (inclusive) and\n {@link #regionEnd regionEnd} (exclusive).",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasTransparentBounds",
                    "comment_text": "Queries the transparency of region bounds for this matcher.\n\n <p> This method returns <tt>true</tt> if this matcher uses\n <i>transparent</i> bounds, <tt>false</tt> if it uses <i>opaque</i>\n bounds.\n\n <p> See {@link #useTransparentBounds useTransparentBounds} for a\n description of transparent and opaque bounds.\n\n <p> By default, a matcher uses opaque region boundaries.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useTransparentBounds",
                    "comment_text": "Sets the transparency of region bounds for this matcher.\n\n <p> Invoking this method with an argument of <tt>true</tt> will set this\n matcher to use <i>transparent</i> bounds. If the boolean\n argument is <tt>false</tt>, then <i>opaque</i> bounds will be used.\n\n <p> Using transparent bounds, the boundaries of this\n matcher's region are transparent to lookahead, lookbehind,\n and boundary matching constructs. Those constructs can see beyond the\n boundaries of the region to see if a match is appropriate.\n\n <p> Using opaque bounds, the boundaries of this matcher's\n region are opaque to lookahead, lookbehind, and boundary matching\n constructs that may try to see beyond them. Those constructs cannot\n look past the boundaries so they will fail to match anything outside\n of the region.\n\n <p> By default, a matcher uses opaque bounds.",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "a boolean indicating whether to use opaque or transparent\n         regions",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasAnchoringBounds",
                    "comment_text": "Queries the anchoring of region bounds for this matcher.\n\n <p> This method returns <tt>true</tt> if this matcher uses\n <i>anchoring</i> bounds, <tt>false</tt> otherwise.\n\n <p> See {@link #useAnchoringBounds useAnchoringBounds} for a\n description of anchoring bounds.\n\n <p> By default, a matcher uses anchoring region boundaries.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "useAnchoringBounds",
                    "comment_text": "Sets the anchoring of region bounds for this matcher.\n\n <p> Invoking this method with an argument of <tt>true</tt> will set this\n matcher to use <i>anchoring</i> bounds. If the boolean\n argument is <tt>false</tt>, then <i>non-anchoring</i> bounds will be\n used.\n\n <p> Using anchoring bounds, the boundaries of this\n matcher's region match anchors such as ^ and $.\n\n <p> Without anchoring bounds, the boundaries of this\n matcher's region will not match anchors such as ^ and $.\n\n <p> By default, a matcher uses anchoring region boundaries.",
                    "return_type": "java.util.regex.Matcher",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "a boolean indicating whether or not to use anchoring bounds.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "<p>Returns the string representation of this matcher. The\n string representation of a <code>Matcher</code> contains information\n that may be useful for debugging. The exact format is unspecified.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hitEnd",
                    "comment_text": "<p>Returns true if the end of input was hit by the search engine in\n the last match operation performed by this matcher.\n\n <p>When this method returns true, then it is possible that more input\n would have changed the result of the last search.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "requireEnd",
                    "comment_text": "<p>Returns true if more input could change a positive match into a\n negative one.\n\n <p>If this method returns true, and a match was found, then more\n input could cause the match to be lost. If this method returns false\n and a match was found, then more input might change the match but the\n match won't be lost. If a match was not found, then requireEnd has no\n meaning.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.regex.MatchResult",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "The result of a match operation.\n\n <p>This interface contains query methods used to determine the\n results of a match against a regular expression. The match boundaries,\n groups and group boundaries can be seen but not modified through\n a <code>MatchResult</code>.",
            "since": "1.5",
            "see": [
                "java.util.regex.Matcher"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "start",
                    "comment_text": "Returns the start index of the match.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "start",
                    "comment_text": "Returns the start index of the subsequence captured by the given group\n during this match.\n\n <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <i>m.</i><tt>start(0)</tt> is equivalent to\n <i>m.</i><tt>start()</tt>.  </p>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "group",
                            "comment_text": "The index of a capturing group in this matcher's pattern",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "end",
                    "comment_text": "Returns the offset after the last character matched.  </p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "end",
                    "comment_text": "Returns the offset after the last character of the subsequence\n captured by the given group during this match.\n\n <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <i>m.</i><tt>end(0)</tt> is equivalent to\n <i>m.</i><tt>end()</tt>.  </p>",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "group",
                            "comment_text": "The index of a capturing group in this matcher's pattern",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "group",
                    "comment_text": "Returns the input subsequence matched by the previous match.\n\n <p> For a matcher <i>m</i> with input sequence <i>s</i>,\n the expressions <i>m.</i><tt>group()</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(),</tt>&nbsp;<i>m.</i><tt>end())</tt>\n are equivalent.  </p>\n\n <p> Note that some patterns, for example <tt>a*</tt>, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "group",
                    "comment_text": "Returns the input subsequence captured by the given group during the\n previous match operation.\n\n <p> For a matcher <i>m</i>, input sequence <i>s</i>, and group index\n <i>g</i>, the expressions <i>m.</i><tt>group(</tt><i>g</i><tt>)</tt> and\n <i>s.</i><tt>substring(</tt><i>m.</i><tt>start(</tt><i>g</i><tt>),</tt>&nbsp;<i>m.</i><tt>end(</tt><i>g</i><tt>))</tt>\n are equivalent.  </p>\n\n <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression <tt>m.group(0)</tt> is equivalent to <tt>m.group()</tt>.\n </p>\n\n <p> If the match was successful but the group specified failed to match\n any part of the input sequence, then <tt>null</tt> is returned. Note\n that some groups, for example <tt>(a*)</tt>, match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  </p>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "group",
                            "comment_text": "The index of a capturing group in this matcher's pattern",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "groupCount",
                    "comment_text": "Returns the number of capturing groups in this match result's pattern.\n\n <p> Group zero denotes the entire pattern by convention. It is not\n included in this count.\n\n <p> Any non-negative integer smaller than or equal to the value\n returned by this method is guaranteed to be a valid group index for\n this matcher.  </p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.Pack200",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "Transforms a JAR file to or from a packed stream in Pack200 format.\n Please refer to Network Transfer Format JSR 200 Specification at\n <a href=http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html>http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html</a>\n <p>\n Typically the packer engine is used by application developers\n to deploy or host JAR files on a website.\n The unpacker  engine is used by deployment applications to\n transform the byte-stream back to JAR format.\n <p>\n Here is an example using  packer and unpacker:<p>\n <blockquote><pre>\n    import java.util.jar.Pack200;\n    import java.util.jar.Pack200.*;\n    ...\n    // Create the Packer object\n    Packer packer = Pack200.newPacker();\n\n    // Initialize the state by setting the desired properties\n    Map p = packer.properties();\n    // take more time choosing codings for better compression\n    p.put(Packer.EFFORT, \"7\");  // default is \"5\"\n    // use largest-possible archive segments (>10% better compression).\n    p.put(Packer.SEGMENT_LIMIT, \"-1\");\n    // reorder files for better compression.\n    p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);\n    // smear modification times to a single value.\n    p.put(Packer.MODIFICATION_TIME, Packer.LATEST);\n    // ignore all JAR deflation requests,\n    // transmitting a single request to use \"store\" mode.\n    p.put(Packer.DEFLATE_HINT, Packer.FALSE);\n    // discard debug attributes\n    p.put(Packer.CODE_ATTRIBUTE_PFX+\"LineNumberTable\", Packer.STRIP);\n    // throw an error if an attribute is unrecognized\n    p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);\n    // pass one class file uncompressed:\n    p.put(Packer.PASS_FILE_PFX+0, \"mutants/Rogue.class\");\n    try {\n        JarFile jarFile = new JarFile(\"/tmp/testref.jar\");\n        FileOutputStream fos = new FileOutputStream(\"/tmp/test.pack\");\n        // Call the packer\n        packer.pack(jarFile, fos);\n        jarFile.close();\n        fos.close();\n\n        File f = new File(\"/tmp/test.pack\");\n        FileOutputStream fostream = new FileOutputStream(\"/tmp/test.jar\");\n        JarOutputStream jostream = new JarOutputStream(fostream);\n        Unpacker unpacker = Pack200.newUnpacker();\n        // Call the unpacker\n        unpacker.unpack(f, jostream);\n        // Must explicitly close the output.\n        jostream.close();\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n    }\n </pre></blockquote>\n <p>\n A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.\n The deployment applications can use \"Accept-Encoding=pack200-gzip\". This\n indicates to the server that the client application desires a version of\n the file encoded with Pack200 and further compressed with gzip. Please\n refer to  <a href=\"{@docRoot}/../technotes/guides/deployment/deployment-guide/pack200.html\">Java Deployment Guide</a> for more details and\n techniques.\n <p>\n Unless otherwise noted, passing a <tt>null</tt> argument to a constructor or\n method in this class will cause a {@link NullPointerException} to be thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newPacker",
                    "comment_text": "Obtain new instance of a class that implements Packer.\n\n <li><p>If the system property <tt>java.util.jar.Pack200.Packer</tt>\n is defined, then the value is taken to be the fully-qualified name\n of a concrete implementation class, which must implement Packer.\n This class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.</p></li>\n\n <li><p>If an implementation has not been specified with the system\n property, then the system-default implementation class is instantiated,\n and the result is returned.</p></li>\n\n <p>Note:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n packer engines, or else serialize use of one engine with a lock.",
                    "return_type": "java.util.jar.Pack200.Packer",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newUnpacker",
                    "comment_text": "Obtain new instance of a class that implements Unpacker.\n\n <li><p>If the system property <tt>java.util.jar.Pack200.Unpacker</tt>\n is defined, then the value is taken to be the fully-qualified\n name of a concrete implementation class, which must implement Unpacker.\n The class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.</p></li>\n\n <li><p>If an implementation has not been specified with the\n system property, then the system-default implementation class\n is instantiated, and the result is returned.</p></li>\n\n <p>Note:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n unpacker engines, or else serialize use of one engine with a lock.",
                    "return_type": "java.util.jar.Pack200.Unpacker",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.Pack200.Packer",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "The packer engine applies various transformations to the input JAR file,\n making the pack stream highly compressible by a compressor such as\n gzip or zip. An instance of the engine can be obtained\n using {@link #newPacker}.\n\n The high degree of compression is achieved\n by using a number of techniques described in the JSR 200 specification.\n Some of the techniques are sorting, re-ordering and co-location of the\n constant pool.\n <p>\n The pack engine is initialized to an initial state as described\n by their properties below.\n The initial state can be manipulated by getting the\n engine properties (using {@link #properties}) and storing\n the modified properties on the map.\n The resource files will be passed through with no changes at all.\n The class files will not contain identical bytes, since the unpacker\n is free to change minor class file features such as constant pool order.\n However, the class files will be semantically identical,\n as specified in\n <cite>The Java&trade; Virtual Machine Specification</cite>.\n <p>\n By default, the packer does not change the order of JAR elements.\n Also, the modification time and deflation hint of each\n JAR element is passed unchanged.\n (Any other ZIP-archive information, such as extra attributes\n giving Unix file permissions, are lost.)\n <p>\n Note that packing and unpacking a JAR will in general alter the\n bytewise contents of classfiles in the JAR.  This means that packing\n and unpacking will in general invalidate any digital signatures\n which rely on bytewise images of JAR elements.  In order both to sign\n and to pack a JAR, you must first pack and unpack the JAR to\n \"normalize\" it, then compute signatures on the unpacked JAR elements,\n and finally repack the signed JAR.\n Both packing steps should\n use precisely the same options, and the segment limit may also\n need to be set to \"-1\", to prevent accidental variation of segment\n boundaries as class file sizes change slightly.\n <p>\n (Here's why this works:  Any reordering the packer does\n of any classfile structures is idempotent, so the second packing\n does not change the orderings produced by the first packing.\n Also, the unpacker is guaranteed by the JSR 200 specification\n to produce a specific bytewise image for any given transmission\n ordering of archive elements.)\n <p>\n In order to maintain backward compatibility, the pack file's version is\n set to accommodate the class files present in the input JAR file. In\n other words, the pack file version will be the latest, if the class files\n are the latest and conversely the pack file version will be the oldest\n if the class file versions are also the oldest. For intermediate class\n file versions the corresponding pack file version will be used.\n For example:\n    If the input JAR-files are solely comprised of 1.5  (or  lesser)\n class files, a 1.5 compatible pack file is  produced. This will also be\n the case for archives that have no class files.\n    If the input JAR-files contains a 1.6 class file, then the pack file\n version will be set to 1.6.\n <p>\n Note: Unless otherwise noted, passing a <tt>null</tt> argument to a\n constructor or method in this class will cause a {@link NullPointerException}\n to be thrown.\n <p>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "SEGMENT_LIMIT",
                    "comment_text": "This property is a numeral giving the estimated target size N\n (in bytes) of each archive segment.\n If a single input file requires more than N bytes,\n it will be given its own archive segment.\n <p>\n As a special case, a value of -1 will produce a single large\n segment with all input files, while a value of 0 will\n produce one segment for each class.\n Larger archive segments result in less fragmentation and\n better compression, but processing them requires more memory.\n <p>\n The size of each segment is estimated by counting the size of each\n input file to be transmitted in the segment, along with the size\n of its name and other transmitted properties.\n <p>\n The default is -1, which means the packer will always create a single\n segment output file. In cases where extremely large output files are\n generated, users are strongly encouraged to use segmenting or break\n up the input file into smaller JARs.\n <p>\n A 10Mb JAR packed without this limit will\n typically pack about 10% smaller, but the packer may require\n a larger Java heap (about ten times the segment limit).",
                    "type": "java.lang.String"
                },
                {
                    "name": "KEEP_FILE_ORDER",
                    "comment_text": "If this property is set to {@link #TRUE}, the packer will transmit\n all elements in their original order within the source archive.\n <p>\n If it is set to {@link #FALSE}, the packer may reorder elements,\n and also remove JAR directory entries, which carry no useful\n information for Java applications.\n (Typically this enables better compression.)\n <p>\n The default is {@link #TRUE}, which preserves the input information,\n but may cause the transmitted archive to be larger than necessary.",
                    "type": "java.lang.String"
                },
                {
                    "name": "EFFORT",
                    "comment_text": "If this property is set to a single decimal digit, the packer will\n use the indicated amount of effort in compressing the archive.\n Level 1 may produce somewhat larger size and faster compression speed,\n while level 9 will take much longer but may produce better compression.\n <p>\n The special value 0 instructs the packer to copy through the\n original JAR file directly, with no compression.  The JSR 200\n standard requires any unpacker to understand this special case\n as a pass-through of the entire archive.\n <p>\n The default is 5, investing a modest amount of time to\n produce reasonable compression.",
                    "type": "java.lang.String"
                },
                {
                    "name": "DEFLATE_HINT",
                    "comment_text": "If this property is set to {@link #TRUE} or {@link #FALSE}, the packer\n will set the deflation hint accordingly in the output archive, and\n will not transmit the individual deflation hints of archive elements.\n <p>\n If this property is set to the special string {@link #KEEP}, the packer\n will attempt to determine an independent deflation hint for each\n available element of the input archive, and transmit this hint separately.\n <p>\n The default is {@link #KEEP}, which preserves the input information,\n but may cause the transmitted archive to be larger than necessary.\n <p>\n It is up to the unpacker implementation\n to take action upon the hint to suitably compress the elements of\n the resulting unpacked jar.\n <p>\n The deflation hint of a ZIP or JAR element indicates\n whether the element was deflated or stored directly.",
                    "type": "java.lang.String"
                },
                {
                    "name": "MODIFICATION_TIME",
                    "comment_text": "If this property is set to the special string {@link #LATEST},\n the packer will attempt to determine the latest modification time,\n among all the available entries in the original archive or the latest\n modification time of all the available entries in each segment.\n This single value will be transmitted as part of the segment and applied\n to all the entries in each segment, {@link #SEGMENT_LIMIT}.\n <p>\n This can marginally decrease the transmitted size of the\n archive, at the expense of setting all installed files to a single\n date.\n <p>\n If this property is set to the special string {@link #KEEP},\n the packer transmits a separate modification time for each input\n element.\n <p>\n The default is {@link #KEEP}, which preserves the input information,\n but may cause the transmitted archive to be larger than necessary.\n <p>\n It is up to the unpacker implementation to take action to suitably\n set the modification time of each element of its output file.",
                    "type": "java.lang.String"
                },
                {
                    "name": "PASS_FILE_PFX",
                    "comment_text": "Indicates that a file should be passed through bytewise, with no\n compression.  Multiple files may be specified by specifying\n additional properties with distinct strings appended, to\n make a family of properties with the common prefix.\n <p>\n There is no pathname transformation, except\n that the system file separator is replaced by the JAR file\n separator '/'.\n <p>\n The resulting file names must match exactly as strings with their\n occurrences in the JAR file.\n <p>\n If a property value is a directory name, all files under that\n directory will be passed also.\n <p>\n Examples:\n <pre><code>\n     Map p = packer.properties();\n     p.put(PASS_FILE_PFX+0, \"mutants/Rogue.class\");\n     p.put(PASS_FILE_PFX+1, \"mutants/Wolverine.class\");\n     p.put(PASS_FILE_PFX+2, \"mutants/Storm.class\");\n     # Pass all files in an entire directory hierarchy:\n     p.put(PASS_FILE_PFX+3, \"police/\");\n </pre></code>.",
                    "type": "java.lang.String"
                },
                {
                    "name": "UNKNOWN_ATTRIBUTE",
                    "comment_text": "Indicates the action to take when a class-file containing an unknown\n attribute is encountered.  Possible values are the strings {@link #ERROR},\n {@link #STRIP}, and {@link #PASS}.\n <p>\n The string {@link #ERROR} means that the pack operation\n as a whole will fail, with an exception of type <code>IOException</code>.\n The string\n {@link #STRIP} means that the attribute will be dropped.\n The string\n {@link #PASS} means that the whole class-file will be passed through\n (as if it were a resource file) without compression, with  a suitable warning.\n This is the default value for this property.\n <p>\n Examples:\n <pre><code>\n     Map p = pack200.getProperties();\n     p.put(UNKNOWN_ATTRIBUTE, ERROR);\n     p.put(UNKNOWN_ATTRIBUTE, STRIP);\n     p.put(UNKNOWN_ATTRIBUTE, PASS);\n </pre></code>",
                    "type": "java.lang.String"
                },
                {
                    "name": "CLASS_ATTRIBUTE_PFX",
                    "comment_text": "When concatenated with a class attribute name,\n indicates the format of that attribute,\n using the layout language specified in the JSR 200 specification.\n <p>\n For example, the effect of this option is built in:\n <code>pack.class.attribute.SourceFile=RUH</code>.\n <p>\n The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS} are\n also allowed, with the same meaning as {@link #UNKNOWN_ATTRIBUTE}.\n This provides a way for users to request that specific attributes be\n refused, stripped, or passed bitwise (with no class compression).\n <p>\n Code like this might be used to support attributes for JCOV:\n <pre><code>\n     Map p = packer.properties();\n     p.put(CODE_ATTRIBUTE_PFX+\"CoverageTable\",       \"NH[PHHII]\");\n     p.put(CODE_ATTRIBUTE_PFX+\"CharacterRangeTable\", \"NH[PHPOHIIH]\");\n     p.put(CLASS_ATTRIBUTE_PFX+\"SourceID\",           \"RUH\");\n     p.put(CLASS_ATTRIBUTE_PFX+\"CompilationID\",      \"RUH\");\n </code></pre>\n <p>\n Code like this might be used to strip debugging attributes:\n <pre><code>\n     Map p = packer.properties();\n     p.put(CODE_ATTRIBUTE_PFX+\"LineNumberTable\",    STRIP);\n     p.put(CODE_ATTRIBUTE_PFX+\"LocalVariableTable\", STRIP);\n     p.put(CLASS_ATTRIBUTE_PFX+\"SourceFile\",        STRIP);\n </code></pre>",
                    "type": "java.lang.String"
                },
                {
                    "name": "FIELD_ATTRIBUTE_PFX",
                    "comment_text": "When concatenated with a field attribute name,\n indicates the format of that attribute.\n For example, the effect of this option is built in:\n <code>pack.field.attribute.Deprecated=</code>.\n The special strings {@link #ERROR}, {@link #STRIP}, and\n {@link #PASS} are also allowed.",
                    "type": "java.lang.String"
                },
                {
                    "name": "METHOD_ATTRIBUTE_PFX",
                    "comment_text": "When concatenated with a method attribute name,\n indicates the format of that attribute.\n For example, the effect of this option is built in:\n <code>pack.method.attribute.Exceptions=NH[RCH]</code>.\n The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}\n are also allowed.",
                    "type": "java.lang.String"
                },
                {
                    "name": "CODE_ATTRIBUTE_PFX",
                    "comment_text": "When concatenated with a code attribute name,\n indicates the format of that attribute.\n For example, the effect of this option is built in:\n <code>pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]</code>.\n The special strings {@link #ERROR}, {@link #STRIP}, and {@link #PASS}\n are also allowed.",
                    "type": "java.lang.String"
                },
                {
                    "name": "PROGRESS",
                    "comment_text": "The unpacker's progress as a percentage, as periodically\n updated by the unpacker.\n Values of 0 - 100 are normal, and -1 indicates a stall.\n Observe this property with a {@link PropertyChangeListener}.\n <p>\n At a minimum, the unpacker must set progress to 0\n at the beginning of a packing operation, and to 100\n at the end.",
                    "type": "java.lang.String"
                },
                {
                    "name": "KEEP",
                    "comment_text": "The string \"keep\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "PASS",
                    "comment_text": "The string \"pass\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "STRIP",
                    "comment_text": "The string \"strip\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "ERROR",
                    "comment_text": "The string \"error\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "TRUE",
                    "comment_text": "The string \"true\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "FALSE",
                    "comment_text": "The string \"false\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "LATEST",
                    "comment_text": "The string \"latest\", a possible value for certain properties.",
                    "type": "java.lang.String"
                }
            ],
            "methods": [
                {
                    "name": "properties",
                    "comment_text": "Get the set of this engine's properties.\n This set is a \"live view\", so that changing its\n contents immediately affects the Packer engine, and\n changes from the engine (such as progress indications)\n are immediately visible in the map.\n\n <p>The property map may contain pre-defined implementation\n specific and default properties.  Users are encouraged to\n read the information and fully understand the implications,\n before modifying pre-existing properties.\n <p>\n Implementation specific properties are prefixed with a\n package name associated with the implementor, beginning\n with <tt>com.</tt> or a similar prefix.\n All property names beginning with <tt>pack.</tt> and\n <tt>unpack.</tt> are reserved for use by this API.\n <p>\n Unknown properties may be ignored or rejected with an\n unspecified error, and invalid entries may cause an\n unspecified error to be thrown.\n\n <p>\n The returned map implements all optional {@link SortedMap} operations",
                    "return_type": "java.util.SortedMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pack",
                    "comment_text": "Takes a JarFile and converts it into a Pack200 archive.\n <p>\n Closes its input but not its output.  (Pack200 archives are appendable.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "a JarFile",
                            "type": "java.util.jar.JarFile"
                        },
                        {
                            "name": "out",
                            "comment_text": "an OutputStream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error is encountered."
                        }
                    ]
                },
                {
                    "name": "pack",
                    "comment_text": "Takes a JarInputStream and converts it into a Pack200 archive.\n <p>\n Closes its input but not its output.  (Pack200 archives are appendable.)\n <p>\n The modification time and deflation hint attributes are not available,\n for the JAR manifest file and its containing directory.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "a JarInputStream",
                            "type": "java.util.jar.JarInputStream"
                        },
                        {
                            "name": "out",
                            "comment_text": "an OutputStream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error is encountered."
                        }
                    ]
                },
                {
                    "name": "addPropertyChangeListener",
                    "comment_text": "Registers a listener for PropertyChange events on the properties map.\n This is typically used by applications to update a progress bar.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "listener",
                            "comment_text": "An object to be invoked when a property is changed.",
                            "type": "java.beans.PropertyChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removePropertyChangeListener",
                    "comment_text": "Remove a listener for PropertyChange events, added by\n the {@link #addPropertyChangeListener}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "listener",
                            "comment_text": "The PropertyChange listener to be removed.",
                            "type": "java.beans.PropertyChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.Pack200.Unpacker",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "The unpacker engine converts the packed stream to a JAR file.\n An instance of the engine can be obtained\n using {@link #newUnpacker}.\n <p>\n Every JAR file produced by this engine will include the string\n \"<tt>PACK200</tt>\" as a zip file comment.\n This allows a deployer to detect if a JAR archive was packed and unpacked.\n <p>\n Note: Unless otherwise noted, passing a <tt>null</tt> argument to a\n constructor or method in this class will cause a {@link NullPointerException}\n to be thrown.\n <p>\n This version of the unpacker is compatible with all previous versions.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "KEEP",
                    "comment_text": "The string \"keep\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "TRUE",
                    "comment_text": "The string \"true\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "FALSE",
                    "comment_text": "The string \"false\", a possible value for certain properties.",
                    "type": "java.lang.String"
                },
                {
                    "name": "DEFLATE_HINT",
                    "comment_text": "Property indicating that the unpacker should\n ignore all transmitted values for DEFLATE_HINT,\n replacing them by the given value, {@link #TRUE} or {@link #FALSE}.\n The default value is the special string {@link #KEEP},\n which asks the unpacker to preserve all transmitted\n deflation hints.",
                    "type": "java.lang.String"
                },
                {
                    "name": "PROGRESS",
                    "comment_text": "The unpacker's progress as a percentage, as periodically\n updated by the unpacker.\n Values of 0 - 100 are normal, and -1 indicates a stall.\n Observe this property with a {@link PropertyChangeListener}.\n <p>\n At a minimum, the unpacker must set progress to 0\n at the beginning of a packing operation, and to 100\n at the end.",
                    "type": "java.lang.String"
                }
            ],
            "methods": [
                {
                    "name": "properties",
                    "comment_text": "Get the set of this engine's properties. This set is\n a \"live view\", so that changing its\n contents immediately affects the Packer engine, and\n changes from the engine (such as progress indications)\n are immediately visible in the map.\n\n <p>The property map may contain pre-defined implementation\n specific and default properties.  Users are encouraged to\n read the information and fully understand the implications,\n before modifying pre-existing properties.\n <p>\n Implementation specific properties are prefixed with a\n package name associated with the implementor, beginning\n with <tt>com.</tt> or a similar prefix.\n All property names beginning with <tt>pack.</tt> and\n <tt>unpack.</tt> are reserved for use by this API.\n <p>\n Unknown properties may be ignored or rejected with an\n unspecified error, and invalid entries may cause an\n unspecified error to be thrown.",
                    "return_type": "java.util.SortedMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unpack",
                    "comment_text": "Read a Pack200 archive, and write the encoded JAR to\n a JarOutputStream.\n The entire contents of the input stream will be read.\n It may be more efficient to read the Pack200 archive\n to a file and pass the File object, using the alternate\n method described below.\n <p>\n Closes its input but not its output.  (The output can accumulate more elements.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "an InputStream.",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "out",
                            "comment_text": "a JarOutputStream.",
                            "type": "java.util.jar.JarOutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error is encountered."
                        }
                    ]
                },
                {
                    "name": "unpack",
                    "comment_text": "Read a Pack200 archive, and write the encoded JAR to\n a JarOutputStream.\n <p>\n Does not close its output.  (The output can accumulate more elements.)",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "a File.",
                            "type": "java.io.File"
                        },
                        {
                            "name": "out",
                            "comment_text": "a JarOutputStream.",
                            "type": "java.util.jar.JarOutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an error is encountered."
                        }
                    ]
                },
                {
                    "name": "addPropertyChangeListener",
                    "comment_text": "Registers a listener for PropertyChange events on the properties map.\n This is typically used by applications to update a progress bar.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "listener",
                            "comment_text": "An object to be invoked when a property is changed.",
                            "type": "java.beans.PropertyChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removePropertyChangeListener",
                    "comment_text": "Remove a listener for PropertyChange events, added by\n the {@link #addPropertyChangeListener}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "listener",
                            "comment_text": "The PropertyChange listener to be removed.",
                            "type": "java.beans.PropertyChangeListener"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.Manifest",
            "interfaces": [
                "java.lang.Cloneable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The Manifest class is used to maintain Manifest entry names and their\n associated Attributes. There are main Manifest Attributes as well as\n per-entry Attributes. For information on the Manifest format, please\n see the\n <a href=\"../../../../technotes/guides/jar/jar.html\">\n Manifest format specification</a>.",
            "since": "1.2",
            "see": [
                "java.util.jar.Attributes"
            ],
            "constructors": [
                {
                    "name": "Manifest",
                    "comment_text": "Constructs a new, empty Manifest.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Manifest",
                    "comment_text": "Constructs a new Manifest from the specified input stream.",
                    "parameters": [
                        {
                            "name": "is",
                            "comment_text": "the input stream containing manifest data",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occured"
                        }
                    ]
                },
                {
                    "name": "Manifest",
                    "comment_text": "Constructs a new Manifest that is a copy of the specified Manifest.",
                    "parameters": [
                        {
                            "name": "man",
                            "comment_text": "the Manifest to copy",
                            "type": "java.util.jar.Manifest"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getMainAttributes",
                    "comment_text": "Returns the main Attributes for the Manifest.",
                    "return_type": "java.util.jar.Attributes",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getEntries",
                    "comment_text": "Returns a Map of the entries contained in this Manifest. Each entry\n is represented by a String name (key) and associated Attributes (value).\n The Map permits the {@code null} key, but no entry with a null key is\n created by {@link #read}, nor is such an entry written by using {@link\n #write}.",
                    "return_type": "java.util.Map",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAttributes",
                    "comment_text": "Returns the Attributes for the specified entry name.\n This method is defined as:\n <pre>\n      return (Attributes)getEntries().get(name)\n </pre>\n Though {@code null} is a valid {@code name}, when\n {@code getAttributes(null)} is invoked on a {@code Manifest}\n obtained from a jar file, {@code null} will be returned.  While jar\n files themselves do not allow {@code null}-named attributes, it is\n possible to invoke {@link #getEntries} on a {@code Manifest}, and\n on that result, invoke {@code put} with a null key and an\n arbitrary value.  Subsequent invocations of\n {@code getAttributes(null)} will return the just-{@code put}\n value.\n <p>\n Note that this method does not return the manifest's main attributes;\n see {@link #getMainAttributes}.",
                    "return_type": "java.util.jar.Attributes",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "entry name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Clears the main Attributes as well as the entries in this Manifest.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "write",
                    "comment_text": "Writes the Manifest to the specified OutputStream.\n Attributes.Name.MANIFEST_VERSION must be set in\n MainAttributes prior to invoking this method.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads the Manifest from the specified InputStream. The entry\n names and attributes read will be merged in with the current\n manifest entries.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "is",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Returns true if the specified Object is also a Manifest and has\n the same main Attributes and entries.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to be compared",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code for this Manifest.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this Manifest.  The shallow copy is\n implemented as follows:\n <pre>\n     public Object clone() { return new Manifest(this); }\n </pre>",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.JarOutputStream",
            "interfaces": [

            ],
            "superclass": "java.util.zip.ZipOutputStream",
            "comment_text": "The <code>JarOutputStream</code> class is used to write the contents\n of a JAR file to any output stream. It extends the class\n <code>java.util.zip.ZipOutputStream</code> with support\n for writing an optional <code>Manifest</code> entry. The\n <code>Manifest</code> can be used to specify meta-information about\n the JAR file and its entries.",
            "since": "1.2",
            "see": [
                "java.util.jar.Manifest",
                "java.util.zip.ZipOutputStream"
            ],
            "constructors": [
                {
                    "name": "JarOutputStream",
                    "comment_text": "Creates a new <code>JarOutputStream</code> with the specified\n <code>Manifest</code>. The manifest is written as the first\n entry to the output stream.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the actual output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "man",
                            "comment_text": "the optional <code>Manifest</code>",
                            "type": "java.util.jar.Manifest"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "JarOutputStream",
                    "comment_text": "Creates a new <code>JarOutputStream</code> with no manifest.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the actual output stream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "putNextEntry",
                    "comment_text": "Begins writing a new JAR file entry and positions the stream\n to the start of the entry data. This method will also close\n any previous entry. The default compression method will be\n used if no compression method was specified for the entry.\n The current time will be used if the entry has no set modification\n time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ze",
                            "comment_text": "the ZIP/JAR entry to be written",
                            "type": "java.util.zip.ZipEntry"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.JarInputStream",
            "interfaces": [

            ],
            "superclass": "java.util.zip.ZipInputStream",
            "comment_text": "The <code>JarInputStream</code> class is used to read the contents of\n a JAR file from any input stream. It extends the class\n <code>java.util.zip.ZipInputStream</code> with support for reading\n an optional <code>Manifest</code> entry. The <code>Manifest</code>\n can be used to store meta-information about the JAR file and its entries.",
            "since": "1.2",
            "see": [
                "java.util.jar.Manifest",
                "java.util.zip.ZipInputStream"
            ],
            "constructors": [
                {
                    "name": "JarInputStream",
                    "comment_text": "Creates a new <code>JarInputStream</code> and reads the optional\n manifest. If a manifest is present, also attempts to verify\n the signatures if the JarInputStream is signed.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the actual input stream",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "JarInputStream",
                    "comment_text": "Creates a new <code>JarInputStream</code> and reads the optional\n manifest. If a manifest is present and verify is true, also attempts\n to verify the signatures if the JarInputStream is signed.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the actual input stream",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "verify",
                            "comment_text": "whether or not to verify the JarInputStream if\n it is signed.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getManifest",
                    "comment_text": "Returns the <code>Manifest</code> for this JAR file, or\n <code>null</code> if none.",
                    "return_type": "java.util.jar.Manifest",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getNextEntry",
                    "comment_text": "Reads the next ZIP file entry and positions the stream at the\n beginning of the entry data. If verification has been enabled,\n any invalid signature detected while positioning the stream for\n the next entry will result in an exception.",
                    "return_type": "java.util.zip.ZipEntry",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "getNextJarEntry",
                    "comment_text": "Reads the next JAR file entry and positions the stream at the\n beginning of the entry data. If verification has been enabled,\n any invalid signature detected while positioning the stream for\n the next entry will result in an exception.",
                    "return_type": "java.util.jar.JarEntry",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads from the current JAR file entry into an array of bytes.\n If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n If verification has been enabled, any invalid signature\n on the current entry will be reported at some point before the\n end of the entry is reached.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer into which the data is read",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset in the destination array <code>b</code>",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes to read",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "createZipEntry",
                    "comment_text": "Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the\n specified JAR file entry name. The manifest attributes of\n the specified JAR file entry name will be copied to the new\n <CODE>JarEntry</CODE>.",
                    "return_type": "java.util.zip.ZipEntry",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the JAR/ZIP file entry",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.JarFile",
            "interfaces": [

            ],
            "superclass": "java.util.zip.ZipFile",
            "comment_text": "The <code>JarFile</code> class is used to read the contents of a jar file\n from any file that can be opened with <code>java.io.RandomAccessFile</code>.\n It extends the class <code>java.util.zip.ZipFile</code> with support\n for reading an optional <code>Manifest</code> entry. The\n <code>Manifest</code> can be used to specify meta-information about the\n jar file and its entries.\n\n <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\n or method in this class will cause a {@link NullPointerException} to be\n thrown.",
            "since": "1.2",
            "see": [
                "java.util.jar.Manifest",
                "java.util.zip.ZipFile",
                "java.util.jar.JarEntry"
            ],
            "constructors": [
                {
                    "name": "JarFile",
                    "comment_text": "Creates a new <code>JarFile</code> to read from the specified\n file <code>name</code>. The <code>JarFile</code> will be verified if\n it is signed.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the jar file to be opened for reading",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "JarFile",
                    "comment_text": "Creates a new <code>JarFile</code> to read from the specified\n file <code>name</code>.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the jar file to be opened for reading",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "verify",
                            "comment_text": "whether or not to verify the jar file if\n it is signed.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "JarFile",
                    "comment_text": "Creates a new <code>JarFile</code> to read from the specified\n <code>File</code> object. The <code>JarFile</code> will be verified if\n it is signed.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the jar file to be opened for reading",
                            "type": "java.io.File"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "JarFile",
                    "comment_text": "Creates a new <code>JarFile</code> to read from the specified\n <code>File</code> object.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the jar file to be opened for reading",
                            "type": "java.io.File"
                        },
                        {
                            "name": "verify",
                            "comment_text": "whether or not to verify the jar file if\n it is signed.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "JarFile",
                    "comment_text": "Creates a new <code>JarFile</code> to read from the specified\n <code>File</code> object in the specified mode.  The mode argument\n must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the jar file to be opened for reading",
                            "type": "java.io.File"
                        },
                        {
                            "name": "verify",
                            "comment_text": "whether or not to verify the jar file if\n it is signed.",
                            "type": "boolean"
                        },
                        {
                            "name": "mode",
                            "comment_text": "the mode in which the file is to be opened",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ],
            "fields": [
                {
                    "name": "MANIFEST_NAME",
                    "comment_text": "The JAR manifest file name.",
                    "type": "java.lang.String"
                }
            ],
            "methods": [
                {
                    "name": "getManifest",
                    "comment_text": "Returns the jar file manifest, or <code>null</code> if none.",
                    "return_type": "java.util.jar.Manifest",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "getJarEntry",
                    "comment_text": "Returns the <code>JarEntry</code> for the given entry name or\n <code>null</code> if not found.",
                    "return_type": "java.util.jar.JarEntry",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the jar file entry name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getEntry",
                    "comment_text": "Returns the <code>ZipEntry</code> for the given entry name or\n <code>null</code> if not found.",
                    "return_type": "java.util.zip.ZipEntry",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the jar file entry name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entries",
                    "comment_text": "Returns an enumeration of the zip file entries.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInputStream",
                    "comment_text": "Returns an input stream for reading the contents of the specified\n zip file entry.",
                    "return_type": "java.io.InputStream",
                    "parameters": [
                        {
                            "name": "ze",
                            "comment_text": "the zip file entry",
                            "type": "java.util.zip.ZipEntry"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.JarException",
            "interfaces": [

            ],
            "superclass": "java.util.zip.ZipException",
            "comment_text": "Signals that an error of some sort has occurred while reading from\n or writing to a JAR file.",
            "since": "1.2",
            "see": [

            ],
            "constructors": [
                {
                    "name": "JarException",
                    "comment_text": "Constructs a JarException with no detail message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "JarException",
                    "comment_text": "Constructs a JarException with the specified detail message.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.jar.JarEntry",
            "interfaces": [

            ],
            "superclass": "java.util.zip.ZipEntry",
            "comment_text": "This class is used to represent a JAR file entry.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "JarEntry",
                    "comment_text": "Creates a new <code>JarEntry</code> for the specified JAR file\n entry name.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the JAR file entry name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "JarEntry",
                    "comment_text": "Creates a new <code>JarEntry</code> with fields taken from the\n specified <code>ZipEntry</code> object.",
                    "parameters": [
                        {
                            "name": "ze",
                            "comment_text": "the <code>ZipEntry</code> object to create the\n           <code>JarEntry</code> from",
                            "type": "java.util.zip.ZipEntry"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "JarEntry",
                    "comment_text": "Creates a new <code>JarEntry</code> with fields taken from the\n specified <code>JarEntry</code> object.",
                    "parameters": [
                        {
                            "name": "je",
                            "comment_text": "the <code>JarEntry</code> to copy",
                            "type": "java.util.jar.JarEntry"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getAttributes",
                    "comment_text": "Returns the <code>Manifest</code> <code>Attributes</code> for this\n entry, or <code>null</code> if none.",
                    "return_type": "java.util.jar.Attributes",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "getCertificates",
                    "comment_text": "Returns the <code>Certificate</code> objects for this entry, or\n <code>null</code> if none. This method can only be called once\n the <code>JarEntry</code> has been completely verified by reading\n from the entry input stream until the end of the stream has been\n reached. Otherwise, this method will return <code>null</code>.\n\n <p>The returned certificate array comprises all the signer certificates\n that were used to verify this entry. Each signer certificate is\n followed by its supporting certificate chain (which may be empty).\n Each signer certificate and its supporting certificate chain are ordered\n bottom-to-top (i.e., with the signer certificate first and the (root)\n certificate authority last).",
                    "return_type": "java.security.cert.Certificate",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCodeSigners",
                    "comment_text": "Returns the <code>CodeSigner</code> objects for this entry, or\n <code>null</code> if none. This method can only be called once\n the <code>JarEntry</code> has been completely verified by reading\n from the entry input stream until the end of the stream has been\n reached. Otherwise, this method will return <code>null</code>.\n\n <p>The returned array comprises all the code signers that have signed\n this entry.",
                    "return_type": "java.security.CodeSigner",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.Attributes",
            "interfaces": [
                "java.util.Map",
                "java.lang.Cloneable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The Attributes class maps Manifest attribute names to associated string\n values. Valid attribute names are case-insensitive, are restricted to\n the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70\n characters in length. Attribute values can contain any characters and\n will be UTF8-encoded when written to the output stream.  See the\n <a href=\"../../../../technotes/guides/jar/jar.html\">JAR File Specification</a>\n for more information about valid attribute names and values.",
            "since": "1.2",
            "see": [
                "java.util.jar.Manifest"
            ],
            "constructors": [
                {
                    "name": "Attributes",
                    "comment_text": "Constructs a new, empty Attributes object with default size.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Attributes",
                    "comment_text": "Constructs a new, empty Attributes object with the specified\n initial size.",
                    "parameters": [
                        {
                            "name": "size",
                            "comment_text": "the initial number of attributes",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Attributes",
                    "comment_text": "Constructs a new Attributes object with the same attribute name-value\n mappings as in the specified Attributes.",
                    "parameters": [
                        {
                            "name": "attr",
                            "comment_text": "the specified Attributes",
                            "type": "java.util.jar.Attributes"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "map",
                    "comment_text": "The attribute name-value mappings.",
                    "type": "java.util.Map"
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "comment_text": "Returns the value of the specified attribute name, or null if the\n attribute name was not found.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the attribute name",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the value of the specified attribute name, specified as\n a string, or null if the attribute was not found. The attribute\n name is case-insensitive.\n <p>\n This method is defined as:\n <pre>\n      return (String)get(new Attributes.Name((String)name));\n </pre>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the attribute name as a string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the value of the specified Attributes.Name, or null if the\n attribute was not found.\n <p>\n This method is defined as:\n <pre>\n     return (String)get(name);\n </pre>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the Attributes.Name object",
                            "type": "java.util.jar.Attributes.Name"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified attribute name\n (key) in this Map. If the Map previously contained a mapping for\n the attribute name, the old value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the attribute name",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "the attribute value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putValue",
                    "comment_text": "Associates the specified value with the specified attribute name,\n specified as a String. The attributes name is case-insensitive.\n If the Map previously contained a mapping for the attribute name,\n the old value is replaced.\n <p>\n This method is defined as:\n <pre>\n      return (String)put(new Attributes.Name(name), value);\n </pre>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the attribute name as a string",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "the attribute value",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the attribute with the specified name (key) from this Map.\n Returns the previous attribute value, or null if none.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "attribute name",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns true if this Map maps one or more attribute names (keys)\n to the specified value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the attribute value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns true if this Map contains the specified attribute name (key).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the attribute name",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the attribute name-value mappings from the specified\n Attributes to this Map. Duplicate mappings will be replaced.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "attr",
                            "comment_text": "the Attributes to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all attributes from this Map.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of attributes in this Map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns true if this Map contains no attributes.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a Set view of the attribute names (keys) contained in this Map.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a Collection view of the attribute values contained in this Map.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a Collection view of the attribute name-value mappings\n contained in this Map.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified Attributes object with this Map for equality.\n Returns true if the given object is also an instance of Attributes\n and the two Attributes objects represent the same mappings.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the Object to be compared",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this Map.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a copy of the Attributes, implemented as follows:\n <pre>\n     public Object clone() { return new Attributes(this); }\n </pre>\n Since the attribute names and values are themselves immutable,\n the Attributes returned can be safely modified without affecting\n the original.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.jar.Attributes.Name",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "The Attributes.Name class represents an attribute name stored in\n this Map. Valid attribute names are case-insensitive, are restricted\n to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed\n 70 characters in length. Attribute values can contain any characters\n and will be UTF8-encoded when written to the output stream.  See the\n <a href=\"../../../../technotes/guides/jar/jar.html\">JAR File Specification</a>\n for more information about valid attribute names and values.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Attributes.Name",
                    "comment_text": "Constructs a new attribute name using the given string name.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the attribute string name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "MANIFEST_VERSION",
                    "comment_text": "<code>Name</code> object for <code>Manifest-Version</code>\n manifest attribute. This attribute indicates the version number\n of the manifest standard to which a JAR file's manifest conforms.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "SIGNATURE_VERSION",
                    "comment_text": "<code>Name</code> object for <code>Signature-Version</code>\n manifest attribute used when signing JAR files.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "CONTENT_TYPE",
                    "comment_text": "<code>Name</code> object for <code>Content-Type</code>\n manifest attribute.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "CLASS_PATH",
                    "comment_text": "<code>Name</code> object for <code>Class-Path</code>\n manifest attribute. Bundled extensions can use this attribute\n to find other JAR files containing needed classes.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "MAIN_CLASS",
                    "comment_text": "<code>Name</code> object for <code>Main-Class</code> manifest\n attribute used for launching applications packaged in JAR files.\n The <code>Main-Class</code> attribute is used in conjunction\n with the <code>-jar</code> command-line option of the\n <tt>java</tt> application launcher.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "SEALED",
                    "comment_text": "<code>Name</code> object for <code>Sealed</code> manifest attribute\n used for sealing.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "EXTENSION_LIST",
                    "comment_text": "<code>Name</code> object for <code>Extension-List</code> manifest attribute\n used for declaring dependencies on installed extensions.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "EXTENSION_NAME",
                    "comment_text": "<code>Name</code> object for <code>Extension-Name</code> manifest attribute\n used for declaring dependencies on installed extensions.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "EXTENSION_INSTALLATION",
                    "comment_text": "<code>Name</code> object for <code>Extension-Name</code> manifest attribute\n used for declaring dependencies on installed extensions.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "IMPLEMENTATION_TITLE",
                    "comment_text": "<code>Name</code> object for <code>Implementation-Title</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "IMPLEMENTATION_VERSION",
                    "comment_text": "<code>Name</code> object for <code>Implementation-Version</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "IMPLEMENTATION_VENDOR",
                    "comment_text": "<code>Name</code> object for <code>Implementation-Vendor</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "IMPLEMENTATION_VENDOR_ID",
                    "comment_text": "<code>Name</code> object for <code>Implementation-Vendor-Id</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "IMPLEMENTATION_URL",
                    "comment_text": "<code>Name</code> object for <code>Implementation-Vendor-URL</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "SPECIFICATION_TITLE",
                    "comment_text": "<code>Name</code> object for <code>Specification-Title</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "SPECIFICATION_VERSION",
                    "comment_text": "<code>Name</code> object for <code>Specification-Version</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                },
                {
                    "name": "SPECIFICATION_VENDOR",
                    "comment_text": "<code>Name</code> object for <code>Specification-Vendor</code>\n manifest attribute used for package versioning.",
                    "type": "java.util.jar.Attributes.Name"
                }
            ],
            "methods": [
                {
                    "name": "equals",
                    "comment_text": "Compares this attribute name to another for equality.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to compare",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Computes the hash value for this attribute name.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the attribute name as a String.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.spi.TimeZoneNameProvider",
            "interfaces": [

            ],
            "superclass": "java.util.spi.LocaleServiceProvider",
            "comment_text": "An abstract class for service providers that\n provide localized time zone names for the\n {@link java.util.TimeZone TimeZone} class.\n The localized time zone names available from the implementations of\n this class are also the source for the\n {@link java.text.DateFormatSymbols#getZoneStrings()\n DateFormatSymbols.getZoneStrings()} method.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "TimeZoneNameProvider",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a name for the given time zone ID that's suitable for\n presentation to the user in the specified locale. The given time\n zone ID is \"GMT\" or one of the names defined using \"Zone\" entries\n in the \"tz database\", a public domain time zone database at\n <a href=\"ftp://elsie.nci.nih.gov/pub/\">ftp://elsie.nci.nih.gov/pub/</a>.\n The data of this database is contained in a file whose name starts with\n \"tzdata\", and the specification of the data format is part of the zic.8\n man page, which is contained in a file whose name starts with \"tzcode\".\n <p>\n If <code>daylight</code> is true, the method should return a name\n appropriate for daylight saving time even if the specified time zone\n has not observed daylight saving time in the past.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "ID",
                            "comment_text": "a time zone ID string",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "daylight",
                            "comment_text": "if true, return the daylight saving name.",
                            "type": "boolean"
                        },
                        {
                            "name": "style",
                            "comment_text": "either {@link java.util.TimeZone#LONG TimeZone.LONG} or\n    {@link java.util.TimeZone#SHORT TimeZone.SHORT}",
                            "type": "int"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.spi.LocaleServiceProvider",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "<p>\n This is the super class of all the locale sensitive service provider\n interfaces (SPIs).\n <p>\n Locale sensitive  service provider interfaces are interfaces that\n correspond to locale sensitive classes in the <code>java.text</code>\n and <code>java.util</code> packages. The interfaces enable the\n construction of locale sensitive objects and the retrieval of\n localized names for these packages. Locale sensitive factory methods\n and methods for name retrieval in the <code>java.text</code> and\n <code>java.util</code> packages use implementations of the provider\n interfaces to offer support for locales beyond the set of locales\n supported by the Java runtime environment itself.\n <p>\n <h4>Packaging of Locale Sensitive Service Provider Implementations</h4>\n Implementations of these locale sensitive services are packaged using the\n <a href=\"../../../../technotes/guides/extensions/index.html\">Java Extension Mechanism</a>\n as installed extensions.  A provider identifies itself with a\n provider-configuration file in the resource directory META-INF/services,\n using the fully qualified provider interface class name as the file name.\n The file should contain a list of fully-qualified concrete provider class names,\n one per line. A line is terminated by any one of a line feed ('\\n'), a carriage\n return ('\\r'), or a carriage return followed immediately by a line feed. Space\n and tab characters surrounding each name, as well as blank lines, are ignored.\n The comment character is '#' ('#'); on each line all characters following\n the first comment character are ignored. The file must be encoded in UTF-8.\n <p>\n If a particular concrete provider class is named in more than one configuration\n file, or is named in the same configuration file more than once, then the\n duplicates will be ignored. The configuration file naming a particular provider\n need not be in the same jar file or other distribution unit as the provider itself.\n The provider must be accessible from the same class loader that was initially\n queried to locate the configuration file; this is not necessarily the class loader\n that loaded the file.\n <p>\n For example, an implementation of the\n {@link java.text.spi.DateFormatProvider DateFormatProvider} class should\n take the form of a jar file which contains the file:\n <pre>\n META-INF/services/java.text.spi.DateFormatProvider\n </pre>\n And the file <code>java.text.spi.DateFormatProvider</code> should have\n a line such as:\n <pre>\n <code>com.foo.DateFormatProviderImpl</code>\n </pre>\n which is the fully qualified class name of the class implementing\n <code>DateFormatProvider</code>.\n <h4>Invocation of Locale Sensitive Services</h4>\n <p>\n Locale sensitive factory methods and methods for name retrieval in the\n <code>java.text</code> and <code>java.util</code> packages invoke\n service provider methods when needed to support the requested locale.\n The methods first check whether the Java runtime environment itself\n supports the requested locale, and use its support if available.\n Otherwise, they call the <code>getAvailableLocales()</code> methods of\n installed providers for the appropriate interface to find one that\n supports the requested locale. If such a provider is found, its other\n methods are called to obtain the requested object or name.  When checking\n whether a locale is supported, the locale's extensions are ignored.\n If neither the Java runtime environment itself nor an installed provider\n supports the requested locale, the methods go through a list of candidate\n locales and repeat the availability check for each until a match is found.\n The algorithm used for creating a list of candidate locales is same as\n the one used by <code>ResourceBunlde</code> by default (see\n {@link java.util.ResourceBundle.Control#getCandidateLocales getCandidateLocales}\n for the details).  Even if a locale is resolved from the candidate list,\n methods that return requested objects or names are invoked with the original\n requested locale including extensions.  The Java runtime environment must\n support the root locale for all locale sensitive services in order to\n guarantee that this process terminates.\n <p>\n Providers of names (but not providers of other objects) are allowed to\n return null for some name requests even for locales that they claim to\n support by including them in their return value for\n <code>getAvailableLocales</code>. Similarly, the Java runtime\n environment itself may not have all names for all locales that it\n supports. This is because the sets of objects for which names are\n requested can be large and vary over time, so that it's not always\n feasible to cover them completely. If the Java runtime environment or a\n provider returns null instead of a name, the lookup will proceed as\n described above as if the locale was not supported.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LocaleServiceProvider",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getAvailableLocales",
                    "comment_text": "Returns an array of all locales for which this locale service provider\n can provide localized objects or names.\n <p>\n <b>Note:</b> Extensions in a <code>Locale</code> are ignored during\n service provider lookup.  So the array returned by this method should\n not include two or more <code>Locale</code> objects only differing in\n their extensions.",
                    "return_type": "java.util.Locale",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.spi.LocaleNameProvider",
            "interfaces": [

            ],
            "superclass": "java.util.spi.LocaleServiceProvider",
            "comment_text": "An abstract class for service providers that\n provide localized names for the\n {@link java.util.Locale Locale} class.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LocaleNameProvider",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getDisplayLanguage",
                    "comment_text": "Returns a localized name for the given <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">\n IETF BCP47</a> language code and the given locale that is appropriate for\n display to the user.\n For example, if <code>languageCode</code> is \"fr\" and <code>locale</code>\n is en_US, getDisplayLanguage() will return \"French\"; if <code>languageCode</code>\n is \"en\" and <code>locale</code> is fr_FR, getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized according to <code>locale</code>,\n (say, the provider does not have a Japanese name for Croatian),\n this method returns null.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "languageCode",
                            "comment_text": "the language code string in the form of two to eight\n     lower-case letters between 'a' (U+0061) and 'z' (U+007A)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayScript",
                    "comment_text": "Returns a localized name for the given <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">\n IETF BCP47</a> script code and the given locale that is appropriate for\n display to the user.\n For example, if <code>scriptCode</code> is \"Latn\" and <code>locale</code>\n is en_US, getDisplayScript() will return \"Latin\"; if <code>scriptCode</code>\n is \"Cyrl\" and <code>locale</code> is fr_FR, getDisplayScript() will return \"cyrillique\".\n If the name returned cannot be localized according to <code>locale</code>,\n (say, the provider does not have a Japanese name for Cyrillic),\n this method returns null. The default implementation returns null.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "scriptCode",
                            "comment_text": "the four letter script code string in the form of title-case\n     letters (the first letter is upper-case character between 'A' (U+0041) and\n     'Z' (U+005A) followed by three lower-case character between 'a' (U+0061)\n     and 'z' (U+007A)).",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayCountry",
                    "comment_text": "Returns a localized name for the given <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">\n IETF BCP47</a> region code (either ISO 3166 country code or UN M.49 area\n codes) and the given locale that is appropriate for display to the user.\n For example, if <code>countryCode</code> is \"FR\" and <code>locale</code>\n is en_US, getDisplayCountry() will return \"France\"; if <code>countryCode</code>\n is \"US\" and <code>locale</code> is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized according to <code>locale</code>,\n (say, the provider does not have a Japanese name for Croatia),\n this method returns null.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "countryCode",
                            "comment_text": "the country(region) code string in the form of two\n     upper-case letters between 'A' (U+0041) and 'Z' (U+005A) or the UN M.49 area code\n     in the form of three digit letters between '0' (U+0030) and '9' (U+0039).",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayVariant",
                    "comment_text": "Returns a localized name for the given variant code and the given locale that\n is appropriate for display to the user.\n If the name returned cannot be localized according to <code>locale</code>,\n this method returns null.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "variant",
                            "comment_text": "the variant string",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.spi.CurrencyNameProvider",
            "interfaces": [

            ],
            "superclass": "java.util.spi.LocaleServiceProvider",
            "comment_text": "An abstract class for service providers that\n provide localized currency symbols and display names for the\n {@link java.util.Currency Currency} class.\n Note that currency symbols are considered names when determining\n behaviors described in the\n {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider}\n specification.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "CurrencyNameProvider",
                    "comment_text": "Sole constructor.  (For invocation by subclass constructors, typically\n implicit.)",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getSymbol",
                    "comment_text": "Gets the symbol of the given currency code for the specified locale.\n For example, for \"USD\" (US Dollar), the symbol is \"$\" if the specified\n locale is the US, while for other locales it may be \"US$\". If no\n symbol can be determined, null should be returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "currencyCode",
                            "comment_text": "the ISO 4217 currency code, which\n     consists of three upper-case letters between 'A' (U+0041) and\n     'Z' (U+005A)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getDisplayName",
                    "comment_text": "Returns a name for the currency that is appropriate for display to the\n user.  The default implementation returns null.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "currencyCode",
                            "comment_text": "the ISO 4217 currency code, which\n     consists of three upper-case letters between 'A' (U+0041) and\n     'Z' (U+005A)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "locale",
                            "comment_text": "the desired locale",
                            "type": "java.util.Locale"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.ZipOutputStream",
            "interfaces": [
                "java.util.zip.ZipConstants"
            ],
            "superclass": "java.util.zip.DeflaterOutputStream",
            "comment_text": "This class implements an output stream filter for writing files in the\n ZIP file format. Includes support for both compressed and uncompressed\n entries.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ZipOutputStream",
                    "comment_text": "Creates a new ZIP output stream.\n\n <p>The UTF-8 {@link java.nio.charset.Charset charset} is used\n to encode the entry names and comments.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the actual output stream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ZipOutputStream",
                    "comment_text": "Creates a new ZIP output stream.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the actual output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "charset",
                            "comment_text": "the {@linkplain java.nio.charset.Charset charset}\n                to be used to encode the entry names and comments",
                            "type": "java.nio.charset.Charset"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "STORED",
                    "comment_text": "Compression method for uncompressed (STORED) entries.",
                    "type": "int"
                },
                {
                    "name": "DEFLATED",
                    "comment_text": "Compression method for compressed (DEFLATED) entries.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "setComment",
                    "comment_text": "Sets the ZIP file comment.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "comment",
                            "comment_text": "the comment string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMethod",
                    "comment_text": "Sets the default compression method for subsequent entries. This\n default will be used whenever the compression method is not specified\n for an individual ZIP file entry, and is initially set to DEFLATED.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "method",
                            "comment_text": "the default compression method",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLevel",
                    "comment_text": "Sets the compression level for subsequent entries which are DEFLATED.\n The default setting is DEFAULT_COMPRESSION.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "the compression level (0-9)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putNextEntry",
                    "comment_text": "Begins writing a new ZIP file entry and positions the stream to the\n start of the entry data. Closes the current entry if still active.\n The default compression method will be used if no compression method\n was specified for the entry, and the current time will be used if\n the entry has no set modification time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the ZIP entry to be written",
                            "type": "java.util.zip.ZipEntry"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "closeEntry",
                    "comment_text": "Closes the current ZIP entry and positions the stream for writing\n the next entry.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "write",
                    "comment_text": "Writes an array of bytes to the current ZIP entry data. This method\n will block until all the bytes are written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the data to be written",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset in the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the number of bytes that are written",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "finish",
                    "comment_text": "Finishes writing the contents of the ZIP output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O exception has occurred"
                        }
                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Closes the ZIP output stream as well as the stream being filtered.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.ZipInputStream",
            "interfaces": [
                "java.util.zip.ZipConstants"
            ],
            "superclass": "java.util.zip.InflaterInputStream",
            "comment_text": "This class implements an input stream filter for reading files in the\n ZIP file format. Includes support for both compressed and uncompressed\n entries.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ZipInputStream",
                    "comment_text": "Creates a new ZIP input stream.\n\n <p>The UTF-8 {@link java.nio.charset.Charset charset} is used to\n decode the entry names.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the actual input stream",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ZipInputStream",
                    "comment_text": "Creates a new ZIP input stream.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the actual input stream",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "charset",
                            "comment_text": "The {@linkplain java.nio.charset.Charset charset} to be\n        used to decode the ZIP entry name (ignored if the\n        <a href=\"package-summary.html#lang_encoding\"> language\n        encoding bit</a> of the ZIP entry's general purpose bit\n        flag is set).",
                            "type": "java.nio.charset.Charset"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getNextEntry",
                    "comment_text": "Reads the next ZIP file entry and positions the stream at the\n beginning of the entry data.",
                    "return_type": "java.util.zip.ZipEntry",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "closeEntry",
                    "comment_text": "Closes the current ZIP entry and positions the stream for reading the\n next entry.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "available",
                    "comment_text": "Returns 0 after EOF has reached for the current entry data,\n otherwise always return 1.\n <p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs."
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads from the current ZIP entry into an array of bytes.\n If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer into which the data is read",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset in the destination array <code>b</code>",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes read",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "skip",
                    "comment_text": "Skips specified number of bytes in the current ZIP entry.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the number of bytes to skip",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Closes this input stream and releases any system resources associated\n with the stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "createZipEntry",
                    "comment_text": "Creates a new <code>ZipEntry</code> object for the specified\n entry name.",
                    "return_type": "java.util.zip.ZipEntry",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the ZIP file entry name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.ZipFile",
            "interfaces": [
                "java.util.zip.ZipConstants",
                "java.io.Closeable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class is used to read entries from a zip file.\n\n <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\n or method in this class will cause a {@link NullPointerException} to be\n thrown.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ZipFile",
                    "comment_text": "Opens a zip file for reading.\n\n <p>First, if there is a security manager, its <code>checkRead</code>\n method is called with the <code>name</code> argument as its argument\n to ensure the read is allowed.\n\n <p>The UTF-8 {@link java.nio.charset.Charset charset} is used to\n decode the entry names and comments.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the zip file",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "ZipFile",
                    "comment_text": "Opens a new <code>ZipFile</code> to read from the specified\n <code>File</code> object in the specified mode.  The mode argument\n must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.\n\n <p>First, if there is a security manager, its <code>checkRead</code>\n method is called with the <code>name</code> argument as its argument to\n ensure the read is allowed.\n\n <p>The UTF-8 {@link java.nio.charset.Charset charset} is used to\n decode the entry names and comments",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the ZIP file to be opened for reading",
                            "type": "java.io.File"
                        },
                        {
                            "name": "mode",
                            "comment_text": "the mode in which the file is to be opened",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "ZipFile",
                    "comment_text": "Opens a ZIP file for reading given the specified File object.\n\n <p>The UTF-8 {@link java.nio.charset.Charset charset} is used to\n decode the entry names and comments.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the ZIP file to be opened for reading",
                            "type": "java.io.File"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.util.zip.ZipException",
                            "comment_text": "if a ZIP format error has occurred"
                        },
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "ZipFile",
                    "comment_text": "Opens a new <code>ZipFile</code> to read from the specified\n <code>File</code> object in the specified mode.  The mode argument\n must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.\n\n <p>First, if there is a security manager, its <code>checkRead</code>\n method is called with the <code>name</code> argument as its argument to\n ensure the read is allowed.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the ZIP file to be opened for reading",
                            "type": "java.io.File"
                        },
                        {
                            "name": "mode",
                            "comment_text": "the mode in which the file is to be opened",
                            "type": "int"
                        },
                        {
                            "name": "charset",
                            "comment_text": "the {@linkplain java.nio.charset.Charset charset} to\n        be used to decode the ZIP entry name and comment that are not\n        encoded by using UTF-8 encoding (indicated by entry's general\n        purpose flag).",
                            "type": "java.nio.charset.Charset"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "ZipFile",
                    "comment_text": "Opens a zip file for reading.\n\n <p>First, if there is a security manager, its <code>checkRead</code>\n method is called with the <code>name</code> argument as its argument\n to ensure the read is allowed.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the zip file",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "charset",
                            "comment_text": "the {@linkplain java.nio.charset.Charset charset} to\n        be used to decode the ZIP entry name and comment that are not\n        encoded by using UTF-8 encoding (indicated by entry's general\n        purpose flag).",
                            "type": "java.nio.charset.Charset"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "ZipFile",
                    "comment_text": "Opens a ZIP file for reading given the specified File object.",
                    "parameters": [
                        {
                            "name": "file",
                            "comment_text": "the ZIP file to be opened for reading",
                            "type": "java.io.File"
                        },
                        {
                            "name": "charset",
                            "comment_text": "The {@linkplain java.nio.charset.Charset charset} to be\n        used to decode the ZIP entry name and comment (ignored if\n        the <a href=\"package-summary.html#lang_encoding\"> language\n        encoding bit</a> of the ZIP entry's general purpose bit\n        flag is set).",
                            "type": "java.nio.charset.Charset"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ],
            "fields": [
                {
                    "name": "OPEN_READ",
                    "comment_text": "Mode flag to open a zip file for reading.",
                    "type": "int"
                },
                {
                    "name": "OPEN_DELETE",
                    "comment_text": "Mode flag to open a zip file and mark it for deletion.  The file will be\n deleted some time between the moment that it is opened and the moment\n that it is closed, but its contents will remain accessible via the\n <tt>ZipFile</tt> object until either the close method is invoked or the\n virtual machine exits.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "getComment",
                    "comment_text": "Returns the zip file comment, or null if none.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getEntry",
                    "comment_text": "Returns the zip file entry for the specified name, or null\n if not found.",
                    "return_type": "java.util.zip.ZipEntry",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the entry",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getInputStream",
                    "comment_text": "Returns an input stream for reading the contents of the specified\n zip file entry.\n\n <p> Closing this ZIP file will, in turn, close all input\n streams that have been returned by invocations of this method.",
                    "return_type": "java.io.InputStream",
                    "parameters": [
                        {
                            "name": "entry",
                            "comment_text": "the zip file entry",
                            "type": "java.util.zip.ZipEntry"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "getName",
                    "comment_text": "Returns the path name of the ZIP file.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entries",
                    "comment_text": "Returns an enumeration of the ZIP file entries.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of entries in the ZIP file.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Closes the ZIP file.\n <p> Closing this ZIP file will close all of the input streams\n previously returned by invocations of the {@link #getInputStream\n getInputStream} method.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "finalize",
                    "comment_text": "Ensures that the system resources held by this ZipFile object are\n released when there are no more references to it.\n\n <p>\n Since the time when GC would invoke this method is undetermined,\n it is strongly recommended that applications invoke the <code>close</code>\n method as soon they have finished accessing this <code>ZipFile</code>.\n This will prevent holding up system resources for an undetermined\n length of time.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.ZipException",
            "interfaces": [

            ],
            "superclass": "java.io.IOException",
            "comment_text": "Signals that a Zip exception of some sort has occurred.",
            "since": "JDK1.0",
            "see": [
                "java.io.IOException"
            ],
            "constructors": [
                {
                    "name": "ZipException",
                    "comment_text": "Constructs a <code>ZipException</code> with <code>null</code>\n as its error detail message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ZipException",
                    "comment_text": "Constructs a <code>ZipException</code> with the specified detail\n message.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the detail message.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.zip.ZipError",
            "interfaces": [

            ],
            "superclass": "java.lang.InternalError",
            "comment_text": "Signals that an unrecoverable error has occurred.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ZipError",
                    "comment_text": "Constructs a ZipError with the given detail message.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the {@code String} containing a detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.zip.ZipEntry",
            "interfaces": [
                "java.util.zip.ZipConstants",
                "java.lang.Cloneable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class is used to represent a ZIP file entry.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ZipEntry",
                    "comment_text": "Creates a new zip entry with the specified name.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the entry name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ZipEntry",
                    "comment_text": "Creates a new zip entry with fields taken from the specified\n zip entry.",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "a zip Entry object",
                            "type": "java.util.zip.ZipEntry"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "STORED",
                    "comment_text": "Compression method for uncompressed entries.",
                    "type": "int"
                },
                {
                    "name": "DEFLATED",
                    "comment_text": "Compression method for compressed (deflated) entries.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "getName",
                    "comment_text": "Returns the name of the entry.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setTime",
                    "comment_text": "Sets the modification time of the entry.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "the entry modification time in number of milliseconds\n             since the epoch",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTime",
                    "comment_text": "Returns the modification time of the entry, or -1 if not specified.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSize",
                    "comment_text": "Sets the uncompressed size of the entry data.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "size",
                            "comment_text": "the uncompressed size in bytes",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSize",
                    "comment_text": "Returns the uncompressed size of the entry data, or -1 if not known.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCompressedSize",
                    "comment_text": "Returns the size of the compressed entry data, or -1 if not known.\n In the case of a stored entry, the compressed size will be the same\n as the uncompressed size of the entry.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setCompressedSize",
                    "comment_text": "Sets the size of the compressed entry data.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "csize",
                            "comment_text": "the compressed size to set to",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setCrc",
                    "comment_text": "Sets the CRC-32 checksum of the uncompressed entry data.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "crc",
                            "comment_text": "the CRC-32 value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCrc",
                    "comment_text": "Returns the CRC-32 checksum of the uncompressed entry data, or -1 if\n not known.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMethod",
                    "comment_text": "Sets the compression method for the entry.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "method",
                            "comment_text": "the compression method, either STORED or DEFLATED",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMethod",
                    "comment_text": "Returns the compression method of the entry, or -1 if not specified.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setExtra",
                    "comment_text": "Sets the optional extra field data for the entry.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "extra",
                            "comment_text": "the extra field data bytes",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExtra",
                    "comment_text": "Returns the extra field data for the entry, or null if none.",
                    "return_type": "byte",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setComment",
                    "comment_text": "Sets the optional comment string for the entry.\n\n <p>ZIP entry comments have maximum length of 0xffff. If the length of the\n specified comment string is greater than 0xFFFF bytes after encoding, only\n the first 0xFFFF bytes are output to the ZIP file entry.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "comment",
                            "comment_text": "the comment string",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getComment",
                    "comment_text": "Returns the comment string for the entry, or null if none.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isDirectory",
                    "comment_text": "Returns true if this is a directory entry. A directory entry is\n defined to be one whose name ends with a '/'.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of the ZIP entry.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this entry.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a copy of this entry.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.InflaterOutputStream",
            "interfaces": [

            ],
            "superclass": "java.io.FilterOutputStream",
            "comment_text": "Implements an output stream filter for uncompressing data stored in the\n \"deflate\" compression format.",
            "since": "1.6",
            "see": [
                "java.util.zip.InflaterInputStream",
                "java.util.zip.DeflaterInputStream",
                "java.util.zip.DeflaterOutputStream"
            ],
            "constructors": [
                {
                    "name": "InflaterOutputStream",
                    "comment_text": "Creates a new output stream with a default decompressor and buffer\n size.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "output stream to write the uncompressed data to",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InflaterOutputStream",
                    "comment_text": "Creates a new output stream with the specified decompressor and a\n default buffer size.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "output stream to write the uncompressed data to",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "infl",
                            "comment_text": "decompressor (\"inflater\") for this stream",
                            "type": "java.util.zip.Inflater"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InflaterOutputStream",
                    "comment_text": "Creates a new output stream with the specified decompressor and\n buffer size.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "output stream to write the uncompressed data to",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "infl",
                            "comment_text": "decompressor (\"inflater\") for this stream",
                            "type": "java.util.zip.Inflater"
                        },
                        {
                            "name": "bufLen",
                            "comment_text": "decompression buffer size",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "inf",
                    "comment_text": "Decompressor for this stream.",
                    "type": "java.util.zip.Inflater"
                },
                {
                    "name": "buf",
                    "comment_text": "Output buffer for writing uncompressed data.",
                    "type": "byte"
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "comment_text": "Writes any remaining uncompressed data to the output stream and closes\n the underlying output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs"
                        }
                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Flushes this output stream, forcing any pending buffered output bytes to be\n written.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or this stream is already\n closed"
                        }
                    ]
                },
                {
                    "name": "finish",
                    "comment_text": "Finishes writing uncompressed data to the output stream without closing\n the underlying stream.  Use this method when applying multiple filters in\n succession to the same output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or this stream is already\n closed"
                        }
                    ]
                },
                {
                    "name": "write",
                    "comment_text": "Writes a byte to the uncompressed output stream.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "a single byte of compressed data to decompress and write to\n the output stream",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or this stream is already\n closed"
                        }
                    ]
                },
                {
                    "name": "write",
                    "comment_text": "Writes an array of bytes to the uncompressed output stream.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "buffer containing compressed data to decompress and write to\n the output stream",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "starting offset of the compressed data within {@code b}",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "number of bytes to decompress from {@code b}",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or this stream is already\n closed"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.InflaterInputStream",
            "interfaces": [

            ],
            "superclass": "java.io.FilterInputStream",
            "comment_text": "This class implements a stream filter for uncompressing data in the\n \"deflate\" compression format. It is also used as the basis for other\n decompression filters, such as GZIPInputStream.",
            "since": "",
            "see": [
                "java.util.zip.Inflater"
            ],
            "constructors": [
                {
                    "name": "InflaterInputStream",
                    "comment_text": "Creates a new input stream with the specified decompressor and\n buffer size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "inf",
                            "comment_text": "the decompressor (\"inflater\")",
                            "type": "java.util.zip.Inflater"
                        },
                        {
                            "name": "size",
                            "comment_text": "the input buffer size",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InflaterInputStream",
                    "comment_text": "Creates a new input stream with the specified decompressor and a\n default buffer size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "inf",
                            "comment_text": "the decompressor (\"inflater\")",
                            "type": "java.util.zip.Inflater"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "InflaterInputStream",
                    "comment_text": "Creates a new input stream with a default decompressor and buffer size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "inf",
                    "comment_text": "Decompressor for this stream.",
                    "type": "java.util.zip.Inflater"
                },
                {
                    "name": "buf",
                    "comment_text": "Input buffer for decompression.",
                    "type": "byte"
                },
                {
                    "name": "len",
                    "comment_text": "Length of input buffer.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "read",
                    "comment_text": "Reads a byte of uncompressed data. This method will block until\n enough input is available for decompression.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads uncompressed data into an array of bytes. If <code>len</code> is not\n zero, the method will block until some input can be decompressed; otherwise,\n no bytes are read and <code>0</code> is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer into which the data is read",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset in the destination array <code>b</code>",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes read",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "available",
                    "comment_text": "Returns 0 after EOF has been reached, otherwise always return 1.\n <p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs."
                        }
                    ]
                },
                {
                    "name": "skip",
                    "comment_text": "Skips specified number of bytes of uncompressed data.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the number of bytes to skip",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Closes this input stream and releases any system resources associated\n with the stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "fill",
                    "comment_text": "Fills input buffer with more data to decompress.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "markSupported",
                    "comment_text": "Tests if this input stream supports the <code>mark</code> and\n <code>reset</code> methods. The <code>markSupported</code>\n method of <code>InflaterInputStream</code> returns\n <code>false</code>.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "mark",
                    "comment_text": "Marks the current position in this input stream.\n\n <p> The <code>mark</code> method of <code>InflaterInputStream</code>\n does nothing.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "readlimit",
                            "comment_text": "the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.\n\n <p> The method <code>reset</code> for class\n <code>InflaterInputStream</code> does nothing except throw an\n <code>IOException</code>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if this method is invoked."
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.Inflater",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class provides support for general purpose decompression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the <a href=\"package-summary.html#package_description\">java.util.zip\n package description</a>.\n\n <p>The following code fragment demonstrates a trivial compression\n and decompression of a string using <tt>Deflater</tt> and\n <tt>Inflater</tt>.\n\n <blockquote><pre>\n try {\n     // Encode a String into bytes\n     String inputString = \"blahblahblah€€\";\n     byte[] input = inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output = new byte[100];\n     Deflater compresser = new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength = compresser.deflate(output);\n\n     // Decompress the bytes\n     Inflater decompresser = new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result = new byte[100];\n     int resultLength = decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n } catch(java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n </pre></blockquote>",
            "since": "",
            "see": [
                "java.util.zip.Deflater"
            ],
            "constructors": [
                {
                    "name": "Inflater",
                    "comment_text": "Creates a new decompressor. If the parameter 'nowrap' is true then\n the ZLIB header and checksum fields will not be used. This provides\n compatibility with the compression format used by both GZIP and PKZIP.\n <p>\n Note: When using the 'nowrap' option it is also necessary to provide\n an extra \"dummy\" byte as input. This is required by the ZLIB native\n library in order to support certain optimizations.",
                    "parameters": [
                        {
                            "name": "nowrap",
                            "comment_text": "if true then support GZIP compatible compression",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Inflater",
                    "comment_text": "Creates a new decompressor.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "setInput",
                    "comment_text": "Sets input data for decompression. Should be called whenever\n needsInput() returns true indicating that more input data is\n required.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the input data bytes",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the input data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the length of the input data",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setInput",
                    "comment_text": "Sets input data for decompression. Should be called whenever\n needsInput() returns true indicating that more input data is\n required.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the input data bytes",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDictionary",
                    "comment_text": "Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the dictionary data bytes",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the length of the data",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDictionary",
                    "comment_text": "Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the dictionary data bytes",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRemaining",
                    "comment_text": "Returns the total number of bytes remaining in the input buffer.\n This can be used to find out what bytes still remain in the input\n buffer after decompression has finished.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "needsInput",
                    "comment_text": "Returns true if no data remains in the input buffer. This can\n be used to determine if #setInput should be called in order\n to provide more input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "needsDictionary",
                    "comment_text": "Returns true if a preset dictionary is needed for decompression.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finished",
                    "comment_text": "Returns true if the end of the compressed data stream has been\n reached.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "inflate",
                    "comment_text": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer for the uncompressed data",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of uncompressed bytes",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.util.zip.DataFormatException",
                            "comment_text": "if the compressed data format is invalid"
                        }
                    ]
                },
                {
                    "name": "inflate",
                    "comment_text": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer for the uncompressed data",
                            "type": "byte"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.util.zip.DataFormatException",
                            "comment_text": "if the compressed data format is invalid"
                        }
                    ]
                },
                {
                    "name": "getAdler",
                    "comment_text": "Returns the ADLER-32 value of the uncompressed data.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTotalIn",
                    "comment_text": "Returns the total number of compressed bytes input so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n the preferred means of obtaining this information.</p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBytesRead",
                    "comment_text": "Returns the total number of compressed bytes input so far.</p>",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTotalOut",
                    "comment_text": "Returns the total number of uncompressed bytes output so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n the preferred means of obtaining this information.</p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBytesWritten",
                    "comment_text": "Returns the total number of uncompressed bytes output so far.</p>",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets inflater so that a new set of input data can be processed.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "end",
                    "comment_text": "Closes the decompressor and discards any unprocessed input.\n This method should be called when the decompressor is no longer\n being used, but will also be called automatically by the finalize()\n method. Once this method is called, the behavior of the Inflater\n object is undefined.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finalize",
                    "comment_text": "Closes the decompressor when garbage is collected.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.GZIPOutputStream",
            "interfaces": [

            ],
            "superclass": "java.util.zip.DeflaterOutputStream",
            "comment_text": "This class implements a stream filter for writing compressed data in\n the GZIP file format.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "GZIPOutputStream",
                    "comment_text": "Creates a new output stream with the specified buffer size.\n\n <p>The new output stream instance is created as if by invoking\n the 3-argument constructor GZIPOutputStream(out, size, false).",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "size",
                            "comment_text": "the output buffer size",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "If an I/O error has occurred."
                        }
                    ]
                },
                {
                    "name": "GZIPOutputStream",
                    "comment_text": "Creates a new output stream with the specified buffer size and\n flush mode.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "size",
                            "comment_text": "the output buffer size",
                            "type": "int"
                        },
                        {
                            "name": "syncFlush",
                            "comment_text": "if {@code true} invocation of the inherited\n        {@link DeflaterOutputStream#flush() flush()} method of\n        this instance flushes the compressor with flush mode\n        {@link Deflater#SYNC_FLUSH} before flushing the output\n        stream, otherwise only flushes the output stream",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "If an I/O error has occurred."
                        }
                    ]
                },
                {
                    "name": "GZIPOutputStream",
                    "comment_text": "Creates a new output stream with a default buffer size.\n\n <p>The new output stream instance is created as if by invoking\n the 2-argument constructor GZIPOutputStream(out, false).",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "If an I/O error has occurred."
                        }
                    ]
                },
                {
                    "name": "GZIPOutputStream",
                    "comment_text": "Creates a new output stream with a default buffer size and\n the specified flush mode.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "syncFlush",
                            "comment_text": "if {@code true} invocation of the inherited\n        {@link DeflaterOutputStream#flush() flush()} method of\n        this instance flushes the compressor with flush mode\n        {@link Deflater#SYNC_FLUSH} before flushing the output\n        stream, otherwise only flushes the output stream",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "If an I/O error has occurred."
                        }
                    ]
                }
            ],
            "fields": [
                {
                    "name": "crc",
                    "comment_text": "CRC-32 of uncompressed data.",
                    "type": "java.util.zip.CRC32"
                }
            ],
            "methods": [
                {
                    "name": "write",
                    "comment_text": "Writes array of bytes to the compressed output stream. This method\n will block until all the bytes are written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "buf",
                            "comment_text": "the data to be written",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the length of the data",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "If an I/O error has occurred."
                        }
                    ]
                },
                {
                    "name": "finish",
                    "comment_text": "Finishes writing compressed data to the output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.GZIPInputStream",
            "interfaces": [

            ],
            "superclass": "java.util.zip.InflaterInputStream",
            "comment_text": "This class implements a stream filter for reading compressed data in\n the GZIP file format.",
            "since": "",
            "see": [
                "java.util.zip.InflaterInputStream"
            ],
            "constructors": [
                {
                    "name": "GZIPInputStream",
                    "comment_text": "Creates a new input stream with the specified buffer size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "size",
                            "comment_text": "the input buffer size",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "GZIPInputStream",
                    "comment_text": "Creates a new input stream with a default buffer size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ],
            "fields": [
                {
                    "name": "crc",
                    "comment_text": "CRC-32 for uncompressed data.",
                    "type": "java.util.zip.CRC32"
                },
                {
                    "name": "eos",
                    "comment_text": "Indicates end of input stream.",
                    "type": "boolean"
                },
                {
                    "name": "GZIP_MAGIC",
                    "comment_text": "GZIP header magic number.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "read",
                    "comment_text": "Reads uncompressed data into an array of bytes. If <code>len</code> is not\n zero, the method will block until some input can be decompressed; otherwise,\n no bytes are read and <code>0</code> is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "buf",
                            "comment_text": "the buffer into which the data is read",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset in the destination array <code>b</code>",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes read",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred."
                        }
                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Closes this input stream and releases any system resources associated\n with the stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.DeflaterOutputStream",
            "interfaces": [

            ],
            "superclass": "java.io.FilterOutputStream",
            "comment_text": "This class implements an output stream filter for compressing data in\n the \"deflate\" compression format. It is also used as the basis for other\n types of compression filters, such as GZIPOutputStream.",
            "since": "",
            "see": [
                "java.util.zip.Deflater"
            ],
            "constructors": [
                {
                    "name": "DeflaterOutputStream",
                    "comment_text": "Creates a new output stream with the specified compressor,\n buffer size and flush mode.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "def",
                            "comment_text": "the compressor (\"deflater\")",
                            "type": "java.util.zip.Deflater"
                        },
                        {
                            "name": "size",
                            "comment_text": "the output buffer size",
                            "type": "int"
                        },
                        {
                            "name": "syncFlush",
                            "comment_text": "if {@code true} the {@link #flush()} method of this\n        instance flushes the compressor with flush mode\n        {@link Deflater#SYNC_FLUSH} before flushing the output\n        stream, otherwise only flushes the output stream",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterOutputStream",
                    "comment_text": "Creates a new output stream with the specified compressor and\n buffer size.\n\n <p>The new output stream instance is created as if by invoking\n the 4-argument constructor DeflaterOutputStream(out, def, size, false).",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "def",
                            "comment_text": "the compressor (\"deflater\")",
                            "type": "java.util.zip.Deflater"
                        },
                        {
                            "name": "size",
                            "comment_text": "the output buffer size",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterOutputStream",
                    "comment_text": "Creates a new output stream with the specified compressor, flush\n mode and a default buffer size.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "def",
                            "comment_text": "the compressor (\"deflater\")",
                            "type": "java.util.zip.Deflater"
                        },
                        {
                            "name": "syncFlush",
                            "comment_text": "if {@code true} the {@link #flush()} method of this\n        instance flushes the compressor with flush mode\n        {@link Deflater#SYNC_FLUSH} before flushing the output\n        stream, otherwise only flushes the output stream",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterOutputStream",
                    "comment_text": "Creates a new output stream with the specified compressor and\n a default buffer size.\n\n <p>The new output stream instance is created as if by invoking\n the 3-argument constructor DeflaterOutputStream(out, def, false).",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "def",
                            "comment_text": "the compressor (\"deflater\")",
                            "type": "java.util.zip.Deflater"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterOutputStream",
                    "comment_text": "Creates a new output stream with a default compressor, a default\n buffer size and the specified flush mode.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "syncFlush",
                            "comment_text": "if {@code true} the {@link #flush()} method of this\n        instance flushes the compressor with flush mode\n        {@link Deflater#SYNC_FLUSH} before flushing the output\n        stream, otherwise only flushes the output stream",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterOutputStream",
                    "comment_text": "Creates a new output stream with a default compressor and buffer size.\n\n <p>The new output stream instance is created as if by invoking\n the 2-argument constructor DeflaterOutputStream(out, false).",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "def",
                    "comment_text": "Compressor for this stream.",
                    "type": "java.util.zip.Deflater"
                },
                {
                    "name": "buf",
                    "comment_text": "Output buffer for writing compressed data.",
                    "type": "byte"
                }
            ],
            "methods": [
                {
                    "name": "write",
                    "comment_text": "Writes a byte to the compressed output stream. This method will\n block until the byte can be written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte to be written",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "write",
                    "comment_text": "Writes an array of bytes to the compressed output stream. This\n method will block until all the bytes are written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the data to be written",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the length of the data",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "finish",
                    "comment_text": "Finishes writing compressed data to the output stream without closing\n the underlying stream. Use this method when applying multiple filters\n in succession to the same output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Writes remaining compressed data to the output stream and closes the\n underlying stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "deflate",
                    "comment_text": "Writes next block of compressed data to the output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Flushes the compressed output stream.\n\n If {@link #DeflaterOutputStream(OutputStream, Deflater, int, boolean)\n syncFlush} is {@code true} when this compressed output stream is\n constructed, this method first flushes the underlying {@code compressor}\n with the flush mode {@link Deflater#SYNC_FLUSH} to force\n all pending data to be flushed out to the output stream and then\n flushes the output stream. Otherwise this method only flushes the\n output stream without flushing the {@code compressor}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.DeflaterInputStream",
            "interfaces": [

            ],
            "superclass": "java.io.FilterInputStream",
            "comment_text": "Implements an input stream filter for compressing data in the \"deflate\"\n compression format.",
            "since": "1.6",
            "see": [
                "java.util.zip.DeflaterOutputStream",
                "java.util.zip.InflaterOutputStream",
                "java.util.zip.InflaterInputStream"
            ],
            "constructors": [
                {
                    "name": "DeflaterInputStream",
                    "comment_text": "Creates a new input stream with a default compressor and buffer\n size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "input stream to read the uncompressed data to",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterInputStream",
                    "comment_text": "Creates a new input stream with the specified compressor and a\n default buffer size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "input stream to read the uncompressed data to",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "defl",
                            "comment_text": "compressor (\"deflater\") for this stream",
                            "type": "java.util.zip.Deflater"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DeflaterInputStream",
                    "comment_text": "Creates a new input stream with the specified compressor and buffer\n size.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "input stream to read the uncompressed data to",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "defl",
                            "comment_text": "compressor (\"deflater\") for this stream",
                            "type": "java.util.zip.Deflater"
                        },
                        {
                            "name": "bufLen",
                            "comment_text": "compression buffer size",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "def",
                    "comment_text": "Compressor for this stream.",
                    "type": "java.util.zip.Deflater"
                },
                {
                    "name": "buf",
                    "comment_text": "Input buffer for reading compressed data.",
                    "type": "byte"
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "comment_text": "Closes this input stream and its underlying input stream, discarding\n any pending uncompressed data.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs"
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads a single byte of compressed data from the input stream.\n This method will block until some input can be read and compressed.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or if this stream is\n already closed"
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads compressed data into a byte array.\n This method will block until some input can be read and compressed.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "buffer into which the data is read",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "starting offset of the data within {@code b}",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "maximum number of compressed bytes to read into {@code b}",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or if this input stream is\n already closed"
                        }
                    ]
                },
                {
                    "name": "skip",
                    "comment_text": "Skips over and discards data from the input stream.\n This method may block until the specified number of bytes are read and\n skipped. <em>Note:</em> While {@code n} is given as a {@code long},\n the maximum number of bytes which can be skipped is\n {@code Integer.MAX_VALUE}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "number of bytes to be skipped",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or if this stream is\n already closed"
                        }
                    ]
                },
                {
                    "name": "available",
                    "comment_text": "Returns 0 after EOF has been reached, otherwise always return 1.\n <p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error occurs or if this stream is\n already closed"
                        }
                    ]
                },
                {
                    "name": "markSupported",
                    "comment_text": "Always returns {@code false} because this input stream does not support\n the {@link #mark mark()} and {@link #reset reset()} methods.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "mark",
                    "comment_text": "<i>This operation is not supported</i>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "limit",
                            "comment_text": "maximum bytes that can be read before invalidating the position marker",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "<i>This operation is not supported</i>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "always thrown"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.Deflater",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "This class provides support for general purpose compression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the <a href=\"package-summary.html#package_description\">java.util.zip\n package description</a>.\n\n <p>The following code fragment demonstrates a trivial compression\n and decompression of a string using <tt>Deflater</tt> and\n <tt>Inflater</tt>.\n\n <blockquote><pre>\n try {\n     // Encode a String into bytes\n     String inputString = \"blahblahblah\";\n     byte[] input = inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output = new byte[100];\n     Deflater compresser = new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength = compresser.deflate(output);\n     compresser.end();\n\n     // Decompress the bytes\n     Inflater decompresser = new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result = new byte[100];\n     int resultLength = decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n } catch(java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n </pre></blockquote>",
            "since": "",
            "see": [
                "java.util.zip.Inflater"
            ],
            "constructors": [
                {
                    "name": "Deflater",
                    "comment_text": "Creates a new compressor using the specified compression level.\n If 'nowrap' is true then the ZLIB header and checksum fields will\n not be used in order to support the compression format used in\n both GZIP and PKZIP.",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "the compression level (0-9)",
                            "type": "int"
                        },
                        {
                            "name": "nowrap",
                            "comment_text": "if true then use GZIP compatible compression",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Deflater",
                    "comment_text": "Creates a new compressor using the specified compression level.\n Compressed data will be generated in ZLIB format.",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "the compression level (0-9)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Deflater",
                    "comment_text": "Creates a new compressor with the default compression level.\n Compressed data will be generated in ZLIB format.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "DEFLATED",
                    "comment_text": "Compression method for the deflate algorithm (the only one currently\n supported).",
                    "type": "int"
                },
                {
                    "name": "NO_COMPRESSION",
                    "comment_text": "Compression level for no compression.",
                    "type": "int"
                },
                {
                    "name": "BEST_SPEED",
                    "comment_text": "Compression level for fastest compression.",
                    "type": "int"
                },
                {
                    "name": "BEST_COMPRESSION",
                    "comment_text": "Compression level for best compression.",
                    "type": "int"
                },
                {
                    "name": "DEFAULT_COMPRESSION",
                    "comment_text": "Default compression level.",
                    "type": "int"
                },
                {
                    "name": "FILTERED",
                    "comment_text": "Compression strategy best used for data consisting mostly of small\n values with a somewhat random distribution. Forces more Huffman coding\n and less string matching.",
                    "type": "int"
                },
                {
                    "name": "HUFFMAN_ONLY",
                    "comment_text": "Compression strategy for Huffman coding only.",
                    "type": "int"
                },
                {
                    "name": "DEFAULT_STRATEGY",
                    "comment_text": "Default compression strategy.",
                    "type": "int"
                },
                {
                    "name": "NO_FLUSH",
                    "comment_text": "Compression flush mode used to achieve best compression result.",
                    "type": "int"
                },
                {
                    "name": "SYNC_FLUSH",
                    "comment_text": "Compression flush mode used to flush out all pending output; may\n degrade compression for some compression algorithms.",
                    "type": "int"
                },
                {
                    "name": "FULL_FLUSH",
                    "comment_text": "Compression flush mode used to flush out all pending output and\n reset the deflater. Using this mode too often can seriously degrade\n compression.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "setInput",
                    "comment_text": "Sets input data for compression. This should be called whenever\n needsInput() returns true indicating that more input data is required.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the input data bytes",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the length of the data",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setInput",
                    "comment_text": "Sets input data for compression. This should be called whenever\n needsInput() returns true indicating that more input data is required.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the input data bytes",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDictionary",
                    "comment_text": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the dictionary data bytes",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the length of the data",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setDictionary",
                    "comment_text": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the dictionary data bytes",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setStrategy",
                    "comment_text": "Sets the compression strategy to the specified value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "strategy",
                            "comment_text": "the new compression strategy",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLevel",
                    "comment_text": "Sets the current compression level to the specified value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "the new compression level (0-9)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "needsInput",
                    "comment_text": "Returns true if the input data buffer is empty and setInput()\n should be called in order to provide more input.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finish",
                    "comment_text": "When called, indicates that compression should end with the current\n contents of the input buffer.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finished",
                    "comment_text": "Returns true if the end of the compressed data output stream has\n been reached.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deflate",
                    "comment_text": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that {@link #needsInput() needsInput} should be called\n in order to determine if more input data is required.\n\n <p>This method uses {@link #NO_FLUSH} as its compression flush mode.\n An invocation of this method of the form {@code deflater.deflate(b, off, len)}\n yields the same result as the invocation of\n {@code deflater.deflate(b, off, len, Deflater.NO_FLUSH)}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer for the compressed data",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes of compressed data",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deflate",
                    "comment_text": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that {@link #needsInput() needsInput} should be called\n in order to determine if more input data is required.\n\n <p>This method uses {@link #NO_FLUSH} as its compression flush mode.\n An invocation of this method of the form {@code deflater.deflate(b)}\n yields the same result as the invocation of\n {@code deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH)}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer for the compressed data",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "deflate",
                    "comment_text": "Compresses the input data and fills the specified buffer with compressed\n data. Returns actual number of bytes of data compressed.\n\n <p>Compression flush mode is one of the following three modes:\n\n <ul>\n <li>{@link #NO_FLUSH}: allows the deflater to decide how much data\n to accumulate, before producing output, in order to achieve the best\n compression (should be used in normal use scenario). A return value\n of 0 in this flush mode indicates that {@link #needsInput()} should\n be called in order to determine if more input data is required.\n\n <li>{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,\n to the specified output buffer, so that an inflater that works on\n compressed data can get all input data available so far (In particular\n the {@link #needsInput()} returns {@code true} after this invocation\n if enough output space is provided). Flushing with {@link #SYNC_FLUSH}\n may degrade compression for some compression algorithms and so it\n should be used only when necessary.\n\n <li>{@link #FULL_FLUSH}: all pending output is flushed out as with\n {@link #SYNC_FLUSH}. The compression state is reset so that the inflater\n that works on the compressed output data can restart from this point\n if previous compressed data has been damaged or if random access is\n desired. Using {@link #FULL_FLUSH} too often can seriously degrade\n compression.\n </ul>\n\n <p>In the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if\n the return value is {@code len}, the space available in output\n buffer {@code b}, this method should be invoked again with the same\n {@code flush} parameter and more output space.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the buffer for the compressed data",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes of compressed data",
                            "type": "int"
                        },
                        {
                            "name": "flush",
                            "comment_text": "the compression flush mode",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAdler",
                    "comment_text": "Returns the ADLER-32 value of the uncompressed data.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTotalIn",
                    "comment_text": "Returns the total number of uncompressed bytes input so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n the preferred means of obtaining this information.</p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBytesRead",
                    "comment_text": "Returns the total number of uncompressed bytes input so far.</p>",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTotalOut",
                    "comment_text": "Returns the total number of compressed bytes output so far.\n\n <p>Since the number of bytes may be greater than\n Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n the preferred means of obtaining this information.</p>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBytesWritten",
                    "comment_text": "Returns the total number of compressed bytes output so far.</p>",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets deflater so that a new set of input data can be processed.\n Keeps current compression level and strategy settings.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "end",
                    "comment_text": "Closes the compressor and discards any unprocessed input.\n This method should be called when the compressor is no longer\n being used, but will also be called automatically by the\n finalize() method. Once this method is called, the behavior\n of the Deflater object is undefined.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finalize",
                    "comment_text": "Closes the compressor when garbage is collected.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.DataFormatException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "Signals that a data format error has occurred.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "DataFormatException",
                    "comment_text": "Constructs a DataFormatException with no detail message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DataFormatException",
                    "comment_text": "Constructs a DataFormatException with the specified detail message.\n A detail message is a String that describes this particular exception.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "the String containing a detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.zip.Checksum",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "An interface representing a data checksum.",
            "since": "",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "update",
                    "comment_text": "Updates the current checksum with the specified byte.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte to update the checksum with",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "update",
                    "comment_text": "Updates the current checksum with the specified array of bytes.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte array to update the checksum with",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the number of bytes to use for the update",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the current checksum value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets the checksum to its initial value.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.CheckedOutputStream",
            "interfaces": [

            ],
            "superclass": "java.io.FilterOutputStream",
            "comment_text": "An output stream that also maintains a checksum of the data being\n written. The checksum can then be used to verify the integrity of\n the output data.",
            "since": "",
            "see": [
                "java.util.zip.Checksum"
            ],
            "constructors": [
                {
                    "name": "CheckedOutputStream",
                    "comment_text": "Creates an output stream with the specified Checksum.",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "cksum",
                            "comment_text": "the checksum",
                            "type": "java.util.zip.Checksum"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "write",
                    "comment_text": "Writes a byte. Will block until the byte is actually written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte to be written",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "write",
                    "comment_text": "Writes an array of bytes. Will block until the bytes are\n actually written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the data to be written",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset of the data",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the number of bytes to be written",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "getChecksum",
                    "comment_text": "Returns the Checksum for this output stream.",
                    "return_type": "java.util.zip.Checksum",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.CheckedInputStream",
            "interfaces": [

            ],
            "superclass": "java.io.FilterInputStream",
            "comment_text": "An input stream that also maintains a checksum of the data being read.\n The checksum can then be used to verify the integrity of the input data.",
            "since": "",
            "see": [
                "java.util.zip.Checksum"
            ],
            "constructors": [
                {
                    "name": "CheckedInputStream",
                    "comment_text": "Creates an input stream using the specified Checksum.",
                    "parameters": [
                        {
                            "name": "in",
                            "comment_text": "the input stream",
                            "type": "java.io.InputStream"
                        },
                        {
                            "name": "cksum",
                            "comment_text": "the Checksum",
                            "type": "java.util.zip.Checksum"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "read",
                    "comment_text": "Reads a byte. Will block if no input is available.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "read",
                    "comment_text": "Reads into an array of bytes. If <code>len</code> is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and <code>0</code> is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "buf",
                            "comment_text": "the buffer into which the data is read",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "the start offset in the destination array <code>b</code>",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "the maximum number of bytes read",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "skip",
                    "comment_text": "Skips specified number of bytes of input.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the number of bytes to skip",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if an I/O error has occurred"
                        }
                    ]
                },
                {
                    "name": "getChecksum",
                    "comment_text": "Returns the Checksum for this input stream.",
                    "return_type": "java.util.zip.Checksum",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.CRC32",
            "interfaces": [
                "java.util.zip.Checksum"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A class that can be used to compute the CRC-32 of a data stream.",
            "since": "",
            "see": [
                "java.util.zip.Checksum"
            ],
            "constructors": [
                {
                    "name": "CRC32",
                    "comment_text": "Creates a new CRC32 object.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "update",
                    "comment_text": "Updates the CRC-32 checksum with the specified byte (the low\n eight bits of the argument b).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte to update the checksum with",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "update",
                    "comment_text": "Updates the CRC-32 checksum with the specified array of bytes.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "update",
                    "comment_text": "Updates the CRC-32 checksum with the specified array of bytes.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the array of bytes to update the checksum with",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets CRC-32 to initial value.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns CRC-32 value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.zip.Adler32",
            "interfaces": [
                "java.util.zip.Checksum"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A class that can be used to compute the Adler-32 checksum of a data\n stream. An Adler-32 checksum is almost as reliable as a CRC-32 but\n can be computed much faster.",
            "since": "",
            "see": [
                "java.util.zip.Checksum"
            ],
            "constructors": [
                {
                    "name": "Adler32",
                    "comment_text": "Creates a new Adler32 object.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "update",
                    "comment_text": "Updates the checksum with the specified byte (the low eight\n bits of the argument b).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte to update the checksum with",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "update",
                    "comment_text": "Updates the checksum with the specified array of bytes.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "",
                            "type": "byte"
                        },
                        {
                            "name": "off",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "len",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "update",
                    "comment_text": "Updates the checksum with the specified array of bytes.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "b",
                            "comment_text": "the byte array to update the checksum with",
                            "type": "byte"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets the checksum to initial value.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getValue",
                    "comment_text": "Returns the checksum value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.XMLFormatter",
            "interfaces": [

            ],
            "superclass": "java.util.logging.Formatter",
            "comment_text": "Format a LogRecord into a standard XML format.\n <p>\n The DTD specification is provided as Appendix A to the\n Java Logging APIs specification.\n <p>\n The XMLFormatter can be used with arbitrary character encodings,\n but it is recommended that it normally be used with UTF-8.  The\n character encoding can be set on the output Handler.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "XMLFormatter",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "format",
                    "comment_text": "Format the given message to XML.\n <p>\n This method can be overridden in a subclass.\n It is recommended to use the {@link Formatter#formatMessage}\n convenience method to localize and format the message field.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "the log record to be formatted.",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getHead",
                    "comment_text": "Return the header string for a set of XML formatted records.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "h",
                            "comment_text": "The target handler (can be null)",
                            "type": "java.util.logging.Handler"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTail",
                    "comment_text": "Return the tail string for a set of XML formatted records.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "h",
                            "comment_text": "The target handler (can be null)",
                            "type": "java.util.logging.Handler"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.StreamHandler",
            "interfaces": [

            ],
            "superclass": "java.util.logging.Handler",
            "comment_text": "Stream based logging <tt>Handler</tt>.\n <p>\n This is primarily intended as a base class or support class to\n be used in implementing other logging <tt>Handlers</tt>.\n <p>\n <tt>LogRecords</tt> are published to a given <tt>java.io.OutputStream</tt>.\n <p>\n <b>Configuration:</b>\n By default each <tt>StreamHandler</tt> is initialized using the following\n <tt>LogManager</tt> configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n <ul>\n <li>   java.util.logging.StreamHandler.level\n        specifies the default level for the <tt>Handler</tt>\n        (defaults to <tt>Level.INFO</tt>).\n <li>   java.util.logging.StreamHandler.filter\n        specifies the name of a <tt>Filter</tt> class to use\n         (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.StreamHandler.formatter\n        specifies the name of a <tt>Formatter</tt> class to use\n        (defaults to <tt>java.util.logging.SimpleFormatter</tt>).\n <li>   java.util.logging.StreamHandler.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding).\n </ul>",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "StreamHandler",
                    "comment_text": "Create a <tt>StreamHandler</tt>, with no current output stream.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "StreamHandler",
                    "comment_text": "Create a <tt>StreamHandler</tt> with a given <tt>Formatter</tt>\n and output stream.\n <p>",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "the target output stream",
                            "type": "java.io.OutputStream"
                        },
                        {
                            "name": "formatter",
                            "comment_text": "Formatter to be used to format output",
                            "type": "java.util.logging.Formatter"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "setOutputStream",
                    "comment_text": "Change the output stream.\n <P>\n If there is a current output stream then the <tt>Formatter</tt>'s\n tail string is written and the stream is flushed and closed.\n Then the output stream is replaced with the new output stream.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "out",
                            "comment_text": "New output stream.  May not be null.",
                            "type": "java.io.OutputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "setEncoding",
                    "comment_text": "Set (or change) the character encoding used by this <tt>Handler</tt>.\n <p>\n The encoding should be set before any <tt>LogRecords</tt> are written\n to the <tt>Handler</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "encoding",
                            "comment_text": "The name of a supported character encoding.\n        May be null, to indicate the default platform encoding.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        },
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "if the named encoding is\n          not supported."
                        }
                    ]
                },
                {
                    "name": "publish",
                    "comment_text": "Format and publish a <tt>LogRecord</tt>.\n <p>\n The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>\n and if the given <tt>LogRecord</tt> has at least the required log level.\n If not it silently returns.  If so, it calls any associated\n <tt>Filter</tt> to check if the record should be published.  If so,\n it calls its <tt>Formatter</tt> to format the record and then writes\n the result to the current output stream.\n <p>\n If this is the first <tt>LogRecord</tt> to be written to a given\n <tt>OutputStream</tt>, the <tt>Formatter</tt>'s \"head\" string is\n written to the stream before the <tt>LogRecord</tt> is written.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "description of the log event. A null record is\n                 silently ignored and is not published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLoggable",
                    "comment_text": "Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.\n <p>\n This method checks if the <tt>LogRecord</tt> has an appropriate level and\n whether it satisfies any <tt>Filter</tt>.  It will also return false if\n no output stream has been assigned yet or the LogRecord is null.\n <p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "a <tt>LogRecord</tt>",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Flush any buffered messages.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Close the current output stream.\n <p>\n The <tt>Formatter</tt>'s \"tail\" string is written to the stream before it\n is closed.  In addition, if the <tt>Formatter</tt>'s \"head\" string has not\n yet been written to the stream, it will be written before the\n \"tail\" string.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.SocketHandler",
            "interfaces": [

            ],
            "superclass": "java.util.logging.StreamHandler",
            "comment_text": "Simple network logging <tt>Handler</tt>.\n <p>\n <tt>LogRecords</tt> are published to a network stream connection.  By default\n the <tt>XMLFormatter</tt> class is used for formatting.\n <p>\n <b>Configuration:</b>\n By default each <tt>SocketHandler</tt> is initialized using the following\n <tt>LogManager</tt> configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n <ul>\n <li>   java.util.logging.SocketHandler.level\n        specifies the default level for the <tt>Handler</tt>\n        (defaults to <tt>Level.ALL</tt>).\n <li>   java.util.logging.SocketHandler.filter\n        specifies the name of a <tt>Filter</tt> class to use\n        (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.SocketHandler.formatter\n        specifies the name of a <tt>Formatter</tt> class to use\n        (defaults to <tt>java.util.logging.XMLFormatter</tt>).\n <li>   java.util.logging.SocketHandler.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding).\n <li>   java.util.logging.SocketHandler.host\n        specifies the target host name to connect to (no default).\n <li>   java.util.logging.SocketHandler.port\n        specifies the target TCP port to use (no default).\n </ul>\n <p>\n The output IO stream is buffered, but is flushed after each\n <tt>LogRecord</tt> is written.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "SocketHandler",
                    "comment_text": "Create a <tt>SocketHandler</tt>, using only <tt>LogManager</tt> properties\n (or their defaults).",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if we are unable to connect to the target\n         host and port."
                        }
                    ]
                },
                {
                    "name": "SocketHandler",
                    "comment_text": "Construct a <tt>SocketHandler</tt> using a specified host and port.\n\n The <tt>SocketHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given target host\n and port arguments are used. If the host argument is empty, but not\n null String then the localhost is used.",
                    "parameters": [
                        {
                            "name": "host",
                            "comment_text": "target host.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "port",
                            "comment_text": "target port.",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if we are unable to connect to the target\n         host and port."
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "close",
                    "comment_text": "Close this output stream.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "publish",
                    "comment_text": "Format and publish a <tt>LogRecord</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "description of the log event. A null record is\n                 silently ignored and is not published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.SimpleFormatter",
            "interfaces": [

            ],
            "superclass": "java.util.logging.Formatter",
            "comment_text": "Print a brief summary of the {@code LogRecord} in a human readable\n format.  The summary will typically be 1 or 2 lines.\n\n <p>\n <a name=\"formatting\">\n <b>Configuration:</b></a>\n The {@code SimpleFormatter} is initialized with the\n <a href=\"../Formatter.html#syntax\">format string</a>\n specified in the {@code java.util.logging.SimpleFormatter.format}\n property to {@linkplain #format format} the log messages.\n This property can be defined\n in the {@linkplain LogManager#getProperty logging properties}\n configuration file\n or as a system property.  If this property is set in both\n the logging properties and system properties,\n the format string specified in the system property will be used.\n If this property is not defined or the given format string\n is {@linkplain java.util.IllegalFormatException illegal},\n the default format is implementation-specific.",
            "since": "1.4",
            "see": [
                "java.util.Formatter"
            ],
            "constructors": [
                {
                    "name": "SimpleFormatter",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "format",
                    "comment_text": "Format the given LogRecord.\n <p>\n The formatting can be customized by specifying the\n <a href=\"../Formatter.html#syntax\">format string</a>\n in the <a href=\"#formatting\">\n {@code java.util.logging.SimpleFormatter.format}</a> property.\n The given {@code LogRecord} will be formatted as if by calling:\n <pre>\n    {@link String#format String.format}(format, date, source, logger, level, message, thrown);\n </pre>\n where the arguments are:<br>\n <ol>\n <li>{@code format} - the {@link java.util.Formatter\n     java.util.Formatter} format string specified in the\n     {@code java.util.logging.SimpleFormatter.format} property\n     or the default format.</li>\n <li>{@code date} - a {@link Date} object representing\n     {@linkplain LogRecord#getMillis event time} of the log record.</li>\n <li>{@code source} - a string representing the caller, if available;\n     otherwise, the logger's name.</li>\n <li>{@code logger} - the logger's name.</li>\n <li>{@code level} - the {@linkplain Level#getLocalizedName\n     log level}.</li>\n <li>{@code message} - the formatted log message\n     returned from the {@link Formatter#formatMessage(LogRecord)}\n     method.  It uses {@link java.text.MessageFormat java.text}\n     formatting and does not use the {@code java.util.Formatter\n     format} argument.</li>\n <li>{@code thrown} - a string representing\n     the {@linkplain LogRecord#getThrown throwable}\n     associated with the log record and its backtrace\n     beginning with a newline character, if any;\n     otherwise, an empty string.</li>\n </ol>\n\n <p>Some example formats:<br>\n <ul>\n <li> {@code java.util.logging.SimpleFormatter.format=\"%4$s: %5$s [%1$tc]%n\"}\n     <p>This prints 1 line with the log level ({@code 4$}),\n     the log message ({@code 5$}) and the timestamp ({@code 1$}) in\n     a square bracket.\n     <pre>\n     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]\n     </pre></li>\n <li> {@code java.util.logging.SimpleFormatter.format=\"%1$tc %2$s%n%4$s: %5$s%6$s%n\"}\n     <p>This prints 2 lines where the first line includes\n     the timestamp ({@code 1$}) and the source ({@code 2$});\n     the second line includes the log level ({@code 4$}) and\n     the log message ({@code 5$}) followed with the throwable\n     and its backtrace ({@code 6$}), if any:\n     <pre>\n     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal\n     SEVERE: several message with an exception\n     java.lang.IllegalArgumentException: invalid argument\n             at MyClass.mash(MyClass.java:9)\n             at MyClass.crunch(MyClass.java:6)\n             at MyClass.main(MyClass.java:3)\n     </pre></li>\n <li> {@code java.util.logging.SimpleFormatter.format=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\"}\n      <p>This prints 2 lines similar to the example above\n         with a different date/time formatting and does not print\n         the throwable and its backtrace:\n     <pre>\n     Mar 22, 2011 1:11:31 PM MyClass fatal\n     SEVERE: several message with an exception\n     </pre></li>\n </ul>\n <p>This method can also be overridden in a subclass.\n It is recommended to use the {@link Formatter#formatMessage}\n convenience method to localize and format the message field.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "the log record to be formatted.",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.MemoryHandler",
            "interfaces": [

            ],
            "superclass": "java.util.logging.Handler",
            "comment_text": "<tt>Handler</tt> that buffers requests in a circular buffer in memory.\n <p>\n Normally this <tt>Handler</tt> simply stores incoming <tt>LogRecords</tt>\n into its memory buffer and discards earlier records.  This buffering\n is very cheap and avoids formatting costs.  On certain trigger\n conditions, the <tt>MemoryHandler</tt> will push out its current buffer\n contents to a target <tt>Handler</tt>, which will typically publish\n them to the outside world.\n <p>\n There are three main models for triggering a push of the buffer:\n <ul>\n <li>\n An incoming <tt>LogRecord</tt> has a type that is greater than\n a pre-defined level, the <tt>pushLevel</tt>.\n <li>\n An external class calls the <tt>push</tt> method explicitly.\n <li>\n A subclass overrides the <tt>log</tt> method and scans each incoming\n <tt>LogRecord</tt> and calls <tt>push</tt> if a record matches some\n desired criteria.\n </ul>\n <p>\n <b>Configuration:</b>\n By default each <tt>MemoryHandler</tt> is initialized using the following\n LogManager configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n If no default value is defined then a RuntimeException is thrown.\n <ul>\n <li>   java.util.logging.MemoryHandler.level\n        specifies the level for the <tt>Handler</tt>\n        (defaults to <tt>Level.ALL</tt>).\n <li>   java.util.logging.MemoryHandler.filter\n        specifies the name of a <tt>Filter</tt> class to use\n        (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.MemoryHandler.size\n        defines the buffer size (defaults to 1000).\n <li>   java.util.logging.MemoryHandler.push\n        defines the <tt>pushLevel</tt> (defaults to <tt>level.SEVERE</tt>).\n <li>   java.util.logging.MemoryHandler.target\n        specifies the name of the target <tt>Handler </tt> class.\n        (no default).\n </ul>",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "MemoryHandler",
                    "comment_text": "Create a <tt>MemoryHandler</tt> and configure it based on\n <tt>LogManager</tt> configuration properties.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "MemoryHandler",
                    "comment_text": "Create a <tt>MemoryHandler</tt>.\n <p>\n The <tt>MemoryHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given <tt>pushLevel</tt>\n argument and buffer size argument are used.",
                    "parameters": [
                        {
                            "name": "target",
                            "comment_text": "the Handler to which to publish output.",
                            "type": "java.util.logging.Handler"
                        },
                        {
                            "name": "size",
                            "comment_text": "the number of log records to buffer (must be greater than zero)",
                            "type": "int"
                        },
                        {
                            "name": "pushLevel",
                            "comment_text": "message level to push on",
                            "type": "java.util.logging.Level"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "publish",
                    "comment_text": "Store a <tt>LogRecord</tt> in an internal buffer.\n <p>\n If there is a <tt>Filter</tt>, its <tt>isLoggable</tt>\n method is called to check if the given log record is loggable.\n If not we return.  Otherwise the given record is copied into\n an internal circular buffer.  Then the record's level property is\n compared with the <tt>pushLevel</tt>. If the given level is\n greater than or equal to the <tt>pushLevel</tt> then <tt>push</tt>\n is called to write all buffered records to the target output\n <tt>Handler</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "description of the log event. A null record is\n                 silently ignored and is not published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "Push any buffered output to the target <tt>Handler</tt>.\n <p>\n The buffer is then cleared.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Causes a flush on the target <tt>Handler</tt>.\n <p>\n Note that the current contents of the <tt>MemoryHandler</tt>\n buffer are <b>not</b> written out.  That requires a \"push\".",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Close the <tt>Handler</tt> and free all associated resources.\n This will also close the target <tt>Handler</tt>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "setPushLevel",
                    "comment_text": "Set the <tt>pushLevel</tt>.  After a <tt>LogRecord</tt> is copied\n into our internal buffer, if its level is greater than or equal to\n the <tt>pushLevel</tt>, then <tt>push</tt> will be called.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newLevel",
                            "comment_text": "the new value of the <tt>pushLevel</tt>",
                            "type": "java.util.logging.Level"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "getPushLevel",
                    "comment_text": "Get the <tt>pushLevel</tt>.",
                    "return_type": "java.util.logging.Level",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLoggable",
                    "comment_text": "Check if this <tt>Handler</tt> would actually log a given\n <tt>LogRecord</tt> into its internal buffer.\n <p>\n This method checks if the <tt>LogRecord</tt> has an appropriate level and\n whether it satisfies any <tt>Filter</tt>.  However it does <b>not</b>\n check whether the <tt>LogRecord</tt> would result in a \"push\" of the\n buffer contents. It will return false if the <tt>LogRecord</tt> is null.\n <p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "a <tt>LogRecord</tt>",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.LoggingPermission",
            "interfaces": [

            ],
            "superclass": "java.security.BasicPermission",
            "comment_text": "The permission which the SecurityManager will check when code\n that is running with a SecurityManager calls one of the logging\n control methods (such as Logger.setLevel).\n <p>\n Currently there is only one named LoggingPermission.  This is \"control\"\n and it grants the ability to control the logging configuration, for\n example by adding or removing Handlers, by adding or removing Filters,\n or by changing logging levels.\n <p>\n Programmers do not normally create LoggingPermission objects directly.\n Instead they are created by the security policy code based on reading\n the security policy file.",
            "since": "1.4",
            "see": [
                "java.security.BasicPermission",
                "java.security.Permission",
                "java.security.Permissions",
                "java.security.PermissionCollection",
                "java.lang.SecurityManager"
            ],
            "constructors": [
                {
                    "name": "LoggingPermission",
                    "comment_text": "Creates a new LoggingPermission object.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "Permission name.  Must be \"control\".",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "actions",
                            "comment_text": "Must be either null or the empty string.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.IllegalArgumentException",
                            "comment_text": "if <code>name</code> is empty or if\n arguments are invalid."
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.logging.LoggingMXBean",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "The management interface for the logging facility. It is recommended\n to use the {@link java.lang.management.PlatformLoggingMXBean} management\n interface that implements all attributes defined in this\n {@code LoggingMXBean}.  The\n {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n ManagementFactory.getPlatformMXBean} method can be used to obtain\n the {@code PlatformLoggingMXBean} object representing the management\n interface for logging.\n\n <p>There is a single global instance of the <tt>LoggingMXBean</tt>.\n This instance is an {@link javax.management.MXBean MXBean} that\n can be obtained by calling the {@link LogManager#getLoggingMXBean}\n method or from the\n {@linkplain java.lang.management.ManagementFactory#getPlatformMBeanServer\n platform <tt>MBeanServer</tt>}.\n <p>\n The {@link javax.management.ObjectName ObjectName} that uniquely identifies\n the management interface for logging within the {@code MBeanServer} is:\n <pre>\n    {@link LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging}\n </pre>\n <p>\n The instance registered in the platform {@code MBeanServer}\n is also a {@link java.lang.management.PlatformLoggingMXBean}.",
            "since": "1.5",
            "see": [
                "java.lang.management.PlatformLoggingMXBean"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getLoggerNames",
                    "comment_text": "Returns the list of currently registered logger names. This method\n calls {@link LogManager#getLoggerNames} and returns a list\n of the logger names.",
                    "return_type": "java.util.List",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLoggerLevel",
                    "comment_text": "Gets the name of the log level associated with the specified logger.\n If the specified logger does not exist, <tt>null</tt>\n is returned.\n This method first finds the logger of the given name and\n then returns the name of the log level by calling:\n <blockquote>\n   {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};\n </blockquote>\n\n <p>\n If the <tt>Level</tt> of the specified logger is <tt>null</tt>,\n which means that this logger's effective level is inherited\n from its parent, an empty string will be returned.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "loggerName",
                            "comment_text": "The name of the <tt>Logger</tt> to be retrieved.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLoggerLevel",
                    "comment_text": "Sets the specified logger to the specified new level.\n If the <tt>levelName</tt> is not <tt>null</tt>, the level\n of the specified logger is set to the parsed <tt>Level</tt>\n matching the <tt>levelName</tt>.\n If the <tt>levelName</tt> is <tt>null</tt>, the level\n of the specified logger is set to <tt>null</tt> and\n the effective level of the logger is inherited from\n its nearest ancestor with a specific (non-null) level value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "loggerName",
                            "comment_text": "The name of the <tt>Logger</tt> to be set.\n                   Must be non-null.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "levelName",
                            "comment_text": "The name of the level to set on the specified logger,\n                 or <tt>null</tt> if setting the level to inherit\n                 from its nearest ancestor.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getParentLoggerName",
                    "comment_text": "Returns the name of the parent for the specified logger.\n If the specified logger does not exist, <tt>null</tt> is returned.\n If the specified logger is the root <tt>Logger</tt> in the namespace,\n the result will be an empty string.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "loggerName",
                            "comment_text": "The name of a <tt>Logger</tt>.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.Logger",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A Logger object is used to log messages for a specific\n system or application component.  Loggers are normally named,\n using a hierarchical dot-separated namespace.  Logger names\n can be arbitrary strings, but they should normally be based on\n the package name or class name of the logged component, such\n as java.net or javax.swing.  In addition it is possible to create\n \"anonymous\" Loggers that are not stored in the Logger namespace.\n <p>\n Logger objects may be obtained by calls on one of the getLogger\n factory methods.  These will either create a new Logger or\n return a suitable existing Logger. It is important to note that\n the Logger returned by one of the {@code getLogger} factory methods\n may be garbage collected at any time if a strong reference to the\n Logger is not kept.\n <p>\n Logging messages will be forwarded to registered Handler\n objects, which can forward the messages to a variety of\n destinations, including consoles, files, OS logs, etc.\n <p>\n Each Logger keeps track of a \"parent\" Logger, which is its\n nearest existing ancestor in the Logger namespace.\n <p>\n Each Logger has a \"Level\" associated with it.  This reflects\n a minimum Level that this logger cares about.  If a Logger's\n level is set to <tt>null</tt>, then its effective level is inherited\n from its parent, which may in turn obtain it recursively from its\n parent, and so on up the tree.\n <p>\n The log level can be configured based on the properties from the\n logging configuration file, as described in the description\n of the LogManager class.  However it may also be dynamically changed\n by calls on the Logger.setLevel method.  If a logger's level is\n changed the change may also affect child loggers, since any child\n logger that has <tt>null</tt> as its level will inherit its\n effective level from its parent.\n <p>\n On each logging call the Logger initially performs a cheap\n check of the request level (e.g., SEVERE or FINE) against the\n effective log level of the logger.  If the request level is\n lower than the log level, the logging call returns immediately.\n <p>\n After passing this initial (cheap) test, the Logger will allocate\n a LogRecord to describe the logging message.  It will then call a\n Filter (if present) to do a more detailed check on whether the\n record should be published.  If that passes it will then publish\n the LogRecord to its output Handlers.  By default, loggers also\n publish to their parent's Handlers, recursively up the tree.\n <p>\n Each Logger may have a ResourceBundle name associated with it.\n The named bundle will be used for localizing logging messages.\n If a Logger does not have its own ResourceBundle name, then\n it will inherit the ResourceBundle name from its parent,\n recursively up the tree.\n <p>\n Most of the logger output methods take a \"msg\" argument.  This\n msg argument may be either a raw value or a localization key.\n During formatting, if the logger has (or inherits) a localization\n ResourceBundle and if the ResourceBundle has a mapping for the msg\n string, then the msg string is replaced by the localized value.\n Otherwise the original msg string is used.  Typically, formatters use\n java.text.MessageFormat style formatting to format parameters, so\n for example a format string \"{0} {1}\" would format two parameters\n as strings.\n <p>\n When mapping ResourceBundle names to ResourceBundles, the Logger\n will first try to use the Thread's ContextClassLoader.  If that\n is null it will try the SystemClassLoader instead.  As a temporary\n transition feature in the initial implementation, if the Logger is\n unable to locate a ResourceBundle from the ContextClassLoader or\n SystemClassLoader the Logger will also search up the class stack\n and use successive calling ClassLoaders to try to locate a ResourceBundle.\n (This call stack search is to allow containers to transition to\n using ContextClassLoaders and is likely to be removed in future\n versions.)\n <p>\n Formatting (including localization) is the responsibility of\n the output Handler, which will typically call a Formatter.\n <p>\n Note that formatting need not occur synchronously.  It may be delayed\n until a LogRecord is actually written to an external sink.\n <p>\n The logging methods are grouped in five main categories:\n <ul>\n <li><p>\n     There are a set of \"log\" methods that take a log level, a message\n     string, and optionally some parameters to the message string.\n <li><p>\n     There are a set of \"logp\" methods (for \"log precise\") that are\n     like the \"log\" methods, but also take an explicit source class name\n     and method name.\n <li><p>\n     There are a set of \"logrb\" method (for \"log with resource bundle\")\n     that are like the \"logp\" method, but also take an explicit resource\n     bundle name for use in localizing the log message.\n <li><p>\n     There are convenience methods for tracing method entries (the\n     \"entering\" methods), method returns (the \"exiting\" methods) and\n     throwing exceptions (the \"throwing\" methods).\n <li><p>\n     Finally, there are a set of convenience methods for use in the\n     very simplest cases, when a developer simply wants to log a\n     simple string at a given log level.  These methods are named\n     after the standard Level names (\"severe\", \"warning\", \"info\", etc.)\n     and take a single argument, a message string.\n </ul>\n <p>\n For the methods that do not take an explicit source name and\n method name, the Logging framework will make a \"best effort\"\n to determine which class and method called into the logging method.\n However, it is important to realize that this automatically inferred\n information may only be approximate (or may even be quite wrong!).\n Virtual machines are allowed to do extensive optimizations when\n JITing and may entirely remove stack frames, making it impossible\n to reliably locate the calling class and method.\n <P>\n All methods on Logger are multi-thread safe.\n <p>\n <b>Subclassing Information:</b> Note that a LogManager class may\n provide its own implementation of named Loggers for any point in\n the namespace.  Therefore, any subclasses of Logger (unless they\n are implemented in conjunction with a new LogManager class) should\n take care to obtain a Logger instance from the LogManager class and\n should delegate operations such as \"isLoggable\" and \"log(LogRecord)\"\n to that instance.  Note that in order to intercept all logging\n output, subclasses need only override the log(LogRecord) method.\n All the other logging methods are implemented as calls on this\n log(LogRecord) method.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Logger",
                    "comment_text": "Protected method to construct a logger for a named subsystem.\n <p>\n The logger will be initially configured with a null Level\n and with useParentHandlers set to true.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "A name for the logger.  This should\n                          be a dot-separated name and should normally\n                          be based on the package name or class name\n                          of the subsystem, such as java.net\n                          or javax.swing.  It may be null for anonymous Loggers.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "resourceBundleName",
                            "comment_text": "name of ResourceBundle to be used for localizing\n                          messages for this logger.  May be null if none\n                          of the messages require localization.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "GLOBAL_LOGGER_NAME",
                    "comment_text": "GLOBAL_LOGGER_NAME is a name for the global logger.",
                    "type": "java.lang.String"
                },
                {
                    "name": "global",
                    "comment_text": "The \"global\" Logger object is provided as a convenience to developers\n who are making casual use of the Logging package.  Developers\n who are making serious use of the logging package (for example\n in products) should create and use their own Logger objects,\n with appropriate names, so that logging can be controlled on a\n suitable per-Logger granularity. Developers also need to keep a\n strong reference to their Logger objects to prevent them from\n being garbage collected.\n <p>",
                    "type": "java.util.logging.Logger"
                }
            ],
            "methods": [
                {
                    "name": "getGlobal",
                    "comment_text": "Return global logger object with the name Logger.GLOBAL_LOGGER_NAME.",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLogger",
                    "comment_text": "Find or create a logger for a named subsystem.  If a logger has\n already been created with the given name it is returned.  Otherwise\n a new logger is created.\n <p>\n If a new logger is created its log level will be configured\n based on the LogManager configuration and it will configured\n to also send logging output to its parent's Handlers.  It will\n be registered in the LogManager global namespace.\n <p>\n Note: The LogManager may only retain a weak reference to the newly\n created Logger. It is important to understand that a previously\n created Logger with the given name may be garbage collected at any\n time if there is no strong reference to the Logger. In particular,\n this means that two back-to-back calls like\n {@code getLogger(\"MyLogger\").log(...)} may use different Logger\n objects named \"MyLogger\" if there is no strong reference to the\n Logger named \"MyLogger\" elsewhere in the program.",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "A name for the logger.  This should\n                          be a dot-separated name and should normally\n                          be based on the package name or class name\n                          of the subsystem, such as java.net\n                          or javax.swing",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLogger",
                    "comment_text": "Find or create a logger for a named subsystem.  If a logger has\n already been created with the given name it is returned.  Otherwise\n a new logger is created.\n <p>\n If a new logger is created its log level will be configured\n based on the LogManager and it will configured to also send logging\n output to its parent's Handlers.  It will be registered in\n the LogManager global namespace.\n <p>\n Note: The LogManager may only retain a weak reference to the newly\n created Logger. It is important to understand that a previously\n created Logger with the given name may be garbage collected at any\n time if there is no strong reference to the Logger. In particular,\n this means that two back-to-back calls like\n {@code getLogger(\"MyLogger\", ...).log(...)} may use different Logger\n objects named \"MyLogger\" if there is no strong reference to the\n Logger named \"MyLogger\" elsewhere in the program.\n <p>\n If the named Logger already exists and does not yet have a\n localization resource bundle then the given resource bundle\n name is used.  If the named Logger already exists and has\n a different resource bundle name then an IllegalArgumentException\n is thrown.\n <p>",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "A name for the logger.  This should\n                          be a dot-separated name and should normally\n                          be based on the package name or class name\n                          of the subsystem, such as java.net\n                          or javax.swing",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "resourceBundleName",
                            "comment_text": "name of ResourceBundle to be used for localizing\n                          messages for this logger. May be <CODE>null</CODE> if none of\n                          the messages require localization.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAnonymousLogger",
                    "comment_text": "Create an anonymous Logger.  The newly created Logger is not\n registered in the LogManager namespace.  There will be no\n access checks on updates to the logger.\n <p>\n This factory method is primarily intended for use from applets.\n Because the resulting Logger is anonymous it can be kept private\n by the creating class.  This removes the need for normal security\n checks, which in turn allows untrusted applet code to update\n the control state of the Logger.  For example an applet can do\n a setLevel or an addHandler on an anonymous Logger.\n <p>\n Even although the new logger is anonymous, it is configured\n to have the root logger (\"\") as its parent.  This means that\n by default it inherits its effective level and handlers\n from the root logger.\n <p>",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAnonymousLogger",
                    "comment_text": "Create an anonymous Logger.  The newly created Logger is not\n registered in the LogManager namespace.  There will be no\n access checks on updates to the logger.\n <p>\n This factory method is primarily intended for use from applets.\n Because the resulting Logger is anonymous it can be kept private\n by the creating class.  This removes the need for normal security\n checks, which in turn allows untrusted applet code to update\n the control state of the Logger.  For example an applet can do\n a setLevel or an addHandler on an anonymous Logger.\n <p>\n Even although the new logger is anonymous, it is configured\n to have the root logger (\"\") as its parent.  This means that\n by default it inherits its effective level and handlers\n from the root logger.\n <p>",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [
                        {
                            "name": "resourceBundleName",
                            "comment_text": "name of ResourceBundle to be used for localizing\n                          messages for this logger.\n          May be null if none of the messages require localization.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getResourceBundle",
                    "comment_text": "Retrieve the localization resource bundle for this\n logger for the current default locale.  Note that if\n the result is null, then the Logger will use a resource\n bundle inherited from its parent.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getResourceBundleName",
                    "comment_text": "Retrieve the localization resource bundle name for this\n logger.  Note that if the result is null, then the Logger\n will use a resource bundle name inherited from its parent.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setFilter",
                    "comment_text": "Set a filter to control output on this Logger.\n <P>\n After passing the initial \"level\" check, the Logger will\n call this Filter to check if a log record should really\n be published.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newFilter",
                            "comment_text": "a filter object (may be null)",
                            "type": "java.util.logging.Filter"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "getFilter",
                    "comment_text": "Get the current filter for this Logger.",
                    "return_type": "java.util.logging.Filter",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "log",
                    "comment_text": "Log a LogRecord.\n <p>\n All the other logging methods in this class call through\n this method to actually perform any logging.  Subclasses can\n override this single method to capture all log activity.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "the LogRecord to be published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "log",
                    "comment_text": "Log a message, with no arguments.\n <p>\n If the logger is currently enabled for the given message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "log",
                    "comment_text": "Log a message, with one object parameter.\n <p>\n If the logger is currently enabled for the given message\n level then a corresponding LogRecord is created and forwarded\n to all the registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "param1",
                            "comment_text": "parameter to the message",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "log",
                    "comment_text": "Log a message, with an array of object arguments.\n <p>\n If the logger is currently enabled for the given message\n level then a corresponding LogRecord is created and forwarded\n to all the registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "params",
                            "comment_text": "array of parameters to the message",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "log",
                    "comment_text": "Log a message, with associated Throwable information.\n <p>\n If the logger is currently enabled for the given message\n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "thrown",
                            "comment_text": "Throwable associated with log message.",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logp",
                    "comment_text": "Log a message, specifying source class and method,\n with no arguments.\n <p>\n If the logger is currently enabled for the given message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logp",
                    "comment_text": "Log a message, specifying source class and method,\n with a single object parameter to the log message.\n <p>\n If the logger is currently enabled for the given message\n level then a corresponding LogRecord is created and forwarded\n to all the registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "param1",
                            "comment_text": "Parameter to the log message.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logp",
                    "comment_text": "Log a message, specifying source class and method,\n with an array of object arguments.\n <p>\n If the logger is currently enabled for the given message\n level then a corresponding LogRecord is created and forwarded\n to all the registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "params",
                            "comment_text": "Array of parameters to the message",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logp",
                    "comment_text": "Log a message, specifying source class and method,\n with associated Throwable information.\n <p>\n If the logger is currently enabled for the given message\n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "thrown",
                            "comment_text": "Throwable associated with log message.",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logrb",
                    "comment_text": "Log a message, specifying source class, method, and resource bundle name\n with no arguments.\n <p>\n If the logger is currently enabled for the given message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>\n The msg string is localized using the named resource bundle.  If the\n resource bundle name is null, or an empty String or invalid\n then the msg string is not localized.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "bundleName",
                            "comment_text": "name of resource bundle to localize msg,\n                         can be null",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logrb",
                    "comment_text": "Log a message, specifying source class, method, and resource bundle name,\n with a single object parameter to the log message.\n <p>\n If the logger is currently enabled for the given message\n level then a corresponding LogRecord is created and forwarded\n to all the registered output Handler objects.\n <p>\n The msg string is localized using the named resource bundle.  If the\n resource bundle name is null, or an empty String or invalid\n then the msg string is not localized.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "bundleName",
                            "comment_text": "name of resource bundle to localize msg,\n                         can be null",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "param1",
                            "comment_text": "Parameter to the log message.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logrb",
                    "comment_text": "Log a message, specifying source class, method, and resource bundle name,\n with an array of object arguments.\n <p>\n If the logger is currently enabled for the given message\n level then a corresponding LogRecord is created and forwarded\n to all the registered output Handler objects.\n <p>\n The msg string is localized using the named resource bundle.  If the\n resource bundle name is null, or an empty String or invalid\n then the msg string is not localized.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "bundleName",
                            "comment_text": "name of resource bundle to localize msg,\n                         can be null.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "params",
                            "comment_text": "Array of parameters to the message",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "logrb",
                    "comment_text": "Log a message, specifying source class, method, and resource bundle name,\n with associated Throwable information.\n <p>\n If the logger is currently enabled for the given message\n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n <p>\n The msg string is localized using the named resource bundle.  If the\n resource bundle name is null, or an empty String or invalid\n then the msg string is not localized.\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "One of the message level identifiers, e.g., SEVERE",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "bundleName",
                            "comment_text": "name of resource bundle to localize msg,\n                         can be null",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "thrown",
                            "comment_text": "Throwable associated with log message.",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entering",
                    "comment_text": "Log a method entry.\n <p>\n This is a convenience method that can be used to log entry\n to a method.  A LogRecord with message \"ENTRY\", log level\n FINER, and the given sourceMethod and sourceClass is logged.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that is being entered",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entering",
                    "comment_text": "Log a method entry, with one parameter.\n <p>\n This is a convenience method that can be used to log entry\n to a method.  A LogRecord with message \"ENTRY {0}\", log level\n FINER, and the given sourceMethod, sourceClass, and parameter\n is logged.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that is being entered",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "param1",
                            "comment_text": "parameter to the method being entered",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entering",
                    "comment_text": "Log a method entry, with an array of parameters.\n <p>\n This is a convenience method that can be used to log entry\n to a method.  A LogRecord with message \"ENTRY\" (followed by a\n format {N} indicator for each entry in the parameter array),\n log level FINER, and the given sourceMethod, sourceClass, and\n parameters is logged.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of method that is being entered",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "params",
                            "comment_text": "array of parameters to the method being entered",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exiting",
                    "comment_text": "Log a method return.\n <p>\n This is a convenience method that can be used to log returning\n from a method.  A LogRecord with message \"RETURN\", log level\n FINER, and the given sourceMethod and sourceClass is logged.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of the method",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exiting",
                    "comment_text": "Log a method return, with result object.\n <p>\n This is a convenience method that can be used to log returning\n from a method.  A LogRecord with message \"RETURN {0}\", log level\n FINER, and the gives sourceMethod, sourceClass, and result\n object is logged.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of the method",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "result",
                            "comment_text": "Object that is being returned",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "throwing",
                    "comment_text": "Log throwing an exception.\n <p>\n This is a convenience method to log that a method is\n terminating by throwing an exception.  The logging is done\n using the FINER level.\n <p>\n If the logger is currently enabled for the given message\n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.  The\n LogRecord's message is set to \"THROW\".\n <p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClass",
                            "comment_text": "name of class that issued the logging request",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "sourceMethod",
                            "comment_text": "name of the method.",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "thrown",
                            "comment_text": "The Throwable that is being thrown.",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "severe",
                    "comment_text": "Log a SEVERE message.\n <p>\n If the logger is currently enabled for the SEVERE message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "warning",
                    "comment_text": "Log a WARNING message.\n <p>\n If the logger is currently enabled for the WARNING message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "info",
                    "comment_text": "Log an INFO message.\n <p>\n If the logger is currently enabled for the INFO message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "config",
                    "comment_text": "Log a CONFIG message.\n <p>\n If the logger is currently enabled for the CONFIG message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "fine",
                    "comment_text": "Log a FINE message.\n <p>\n If the logger is currently enabled for the FINE message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finer",
                    "comment_text": "Log a FINER message.\n <p>\n If the logger is currently enabled for the FINER message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "finest",
                    "comment_text": "Log a FINEST message.\n <p>\n If the logger is currently enabled for the FINEST message\n level then the given message is forwarded to all the\n registered output Handler objects.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "The string message (or a key in the message catalog)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLevel",
                    "comment_text": "Set the log level specifying which message levels will be\n logged by this logger.  Message levels lower than this\n value will be discarded.  The level value Level.OFF\n can be used to turn off logging.\n <p>\n If the new level is null, it means that this node should\n inherit its level from its nearest ancestor with a specific\n (non-null) level value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newLevel",
                            "comment_text": "the new value for the log level (may be null)",
                            "type": "java.util.logging.Level"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "getLevel",
                    "comment_text": "Get the log Level that has been specified for this Logger.\n The result may be null, which means that this logger's\n effective level will be inherited from its parent.",
                    "return_type": "java.util.logging.Level",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLoggable",
                    "comment_text": "Check if a message of the given level would actually be logged\n by this logger.  This check is based on the Loggers effective level,\n which may be inherited from its parent.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "a message logging level",
                            "type": "java.util.logging.Level"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getName",
                    "comment_text": "Get the name for this logger.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addHandler",
                    "comment_text": "Add a log Handler to receive logging messages.\n <p>\n By default, Loggers also send their output to their parent logger.\n Typically the root Logger is configured with a set of Handlers\n that essentially act as default handlers for all loggers.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "handler",
                            "comment_text": "a logging Handler",
                            "type": "java.util.logging.Handler"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "removeHandler",
                    "comment_text": "Remove a log Handler.\n <P>\n Returns silently if the given Handler is not found or is null",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "handler",
                            "comment_text": "a logging Handler",
                            "type": "java.util.logging.Handler"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "getHandlers",
                    "comment_text": "Get the Handlers associated with this logger.\n <p>",
                    "return_type": "java.util.logging.Handler",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setUseParentHandlers",
                    "comment_text": "Specify whether or not this logger should send its output\n to its parent Logger.  This means that any LogRecords will\n also be written to the parent's Handlers, and potentially\n to its parent, recursively up the namespace.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "useParentHandlers",
                            "comment_text": "true if output is to be sent to the\n          logger's parent.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getUseParentHandlers",
                    "comment_text": "Discover whether or not this logger is sending its output\n to its parent logger.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getParent",
                    "comment_text": "Return the parent for this Logger.\n <p>\n This method returns the nearest extant parent in the namespace.\n Thus if a Logger is called \"a.b.c.d\", and a Logger called \"a.b\"\n has been created but no logger \"a.b.c\" exists, then a call of\n getParent on the Logger \"a.b.c.d\" will return the Logger \"a.b\".\n <p>\n The result will be null if it is called on the root Logger\n in the namespace.",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setParent",
                    "comment_text": "Set the parent for this Logger.  This method is used by\n the LogManager to update a Logger when the namespace changes.\n <p>\n It should not be called from application code.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "parent",
                            "comment_text": "the new parent logger",
                            "type": "java.util.logging.Logger"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.LogRecord",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "LogRecord objects are used to pass logging requests between\n the logging framework and individual log Handlers.\n <p>\n When a LogRecord is passed into the logging framework it\n logically belongs to the framework and should no longer be\n used or updated by the client application.\n <p>\n Note that if the client application has not specified an\n explicit source method name and source class name, then the\n LogRecord class will infer them automatically when they are\n first accessed (due to a call on getSourceMethodName or\n getSourceClassName) by analyzing the call stack.  Therefore,\n if a logging Handler wants to pass off a LogRecord to another\n thread, or to transmit it over RMI, and if it wishes to subsequently\n obtain method name or class name information it should call\n one of getSourceClassName or getSourceMethodName to force\n the values to be filled in.\n <p>\n <b> Serialization notes:</b>\n <ul>\n <li>The LogRecord class is serializable.\n\n <li> Because objects in the parameters array may not be serializable,\n during serialization all objects in the parameters array are\n written as the corresponding Strings (using Object.toString).\n\n <li> The ResourceBundle is not transmitted as part of the serialized\n form, but the resource bundle name is, and the recipient object's\n readObject method will attempt to locate a suitable resource bundle.\n\n </ul>",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LogRecord",
                    "comment_text": "Construct a LogRecord with the given level and message values.\n <p>\n The sequence property will be initialized with a new unique value.\n These sequence values are allocated in increasing order within a VM.\n <p>\n The millis property will be initialized to the current time.\n <p>\n The thread ID property will be initialized with a unique ID for\n the current thread.\n <p>\n All other properties will be initialized to \"null\".",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "a logging level value",
                            "type": "java.util.logging.Level"
                        },
                        {
                            "name": "msg",
                            "comment_text": "the raw non-localized logging message (may be null)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getLoggerName",
                    "comment_text": "Get the source Logger's name.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLoggerName",
                    "comment_text": "Set the source Logger's name.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the source logger name (may be null)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getResourceBundle",
                    "comment_text": "Get the localization resource bundle\n <p>\n This is the ResourceBundle that should be used to localize\n the message string before formatting it.  The result may\n be null if the message is not localizable, or if no suitable\n ResourceBundle is available.",
                    "return_type": "java.util.ResourceBundle",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setResourceBundle",
                    "comment_text": "Set the localization resource bundle.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "bundle",
                            "comment_text": "localization bundle (may be null)",
                            "type": "java.util.ResourceBundle"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getResourceBundleName",
                    "comment_text": "Get the localization resource bundle name\n <p>\n This is the name for the ResourceBundle that should be\n used to localize the message string before formatting it.\n The result may be null if the message is not localizable.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setResourceBundleName",
                    "comment_text": "Set the localization resource bundle name.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "localization bundle name (may be null)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLevel",
                    "comment_text": "Get the logging message level, for example Level.SEVERE.",
                    "return_type": "java.util.logging.Level",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLevel",
                    "comment_text": "Set the logging message level, for example Level.SEVERE.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "level",
                            "comment_text": "the logging message level",
                            "type": "java.util.logging.Level"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSequenceNumber",
                    "comment_text": "Get the sequence number.\n <p>\n Sequence numbers are normally assigned in the LogRecord\n constructor, which assigns unique sequence numbers to\n each new LogRecord in increasing order.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSequenceNumber",
                    "comment_text": "Set the sequence number.\n <p>\n Sequence numbers are normally assigned in the LogRecord constructor,\n so it should not normally be necessary to use this method.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "seq",
                            "comment_text": "",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSourceClassName",
                    "comment_text": "Get the  name of the class that (allegedly) issued the logging request.\n <p>\n Note that this sourceClassName is not verified and may be spoofed.\n This information may either have been provided as part of the\n logging call, or it may have been inferred automatically by the\n logging framework.  In the latter case, the information may only\n be approximate and may in fact describe an earlier call on the\n stack frame.\n <p>\n May be null if no information could be obtained.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSourceClassName",
                    "comment_text": "Set the name of the class that (allegedly) issued the logging request.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceClassName",
                            "comment_text": "the source class name (may be null)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSourceMethodName",
                    "comment_text": "Get the  name of the method that (allegedly) issued the logging request.\n <p>\n Note that this sourceMethodName is not verified and may be spoofed.\n This information may either have been provided as part of the\n logging call, or it may have been inferred automatically by the\n logging framework.  In the latter case, the information may only\n be approximate and may in fact describe an earlier call on the\n stack frame.\n <p>\n May be null if no information could be obtained.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSourceMethodName",
                    "comment_text": "Set the name of the method that (allegedly) issued the logging request.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "sourceMethodName",
                            "comment_text": "the source method name (may be null)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMessage",
                    "comment_text": "Get the \"raw\" log message, before localization or formatting.\n <p>\n May be null, which is equivalent to the empty string \"\".\n <p>\n This message may be either the final text or a localization key.\n <p>\n During formatting, if the source logger has a localization\n ResourceBundle and if that ResourceBundle has an entry for\n this message string, then the message string is replaced\n with the localized value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMessage",
                    "comment_text": "Set the \"raw\" log message, before localization or formatting.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the raw message string (may be null)",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getParameters",
                    "comment_text": "Get the parameters to the log message.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setParameters",
                    "comment_text": "Set the parameters to the log message.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "parameters",
                            "comment_text": "the log message parameters. (may be null)",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getThreadID",
                    "comment_text": "Get an identifier for the thread where the message originated.\n <p>\n This is a thread identifier within the Java VM and may or\n may not map to any operating system ID.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setThreadID",
                    "comment_text": "Set an identifier for the thread where the message originated.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "threadID",
                            "comment_text": "the thread ID",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMillis",
                    "comment_text": "Get event time in milliseconds since 1970.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMillis",
                    "comment_text": "Set event time.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "millis",
                            "comment_text": "event time in millis since 1970",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getThrown",
                    "comment_text": "Get any throwable associated with the log record.\n <p>\n If the event involved an exception, this will be the\n exception object. Otherwise null.",
                    "return_type": "java.lang.Throwable",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setThrown",
                    "comment_text": "Set a throwable associated with the log event.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "thrown",
                            "comment_text": "a throwable (may be null)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.LogManager",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "There is a single global LogManager object that is used to\n maintain a set of shared state about Loggers and log services.\n <p>\n This LogManager object:\n <ul>\n <li> Manages a hierarchical namespace of Logger objects.  All\n      named Loggers are stored in this namespace.\n <li> Manages a set of logging control properties.  These are\n      simple key-value pairs that can be used by Handlers and\n      other logging objects to configure themselves.\n </ul>\n <p>\n The global LogManager object can be retrieved using LogManager.getLogManager().\n The LogManager object is created during class initialization and\n cannot subsequently be changed.\n <p>\n At startup the LogManager class is located using the\n java.util.logging.manager system property.\n <p>\n By default, the LogManager reads its initial configuration from\n a properties file \"lib/logging.properties\" in the JRE directory.\n If you edit that property file you can change the default logging\n configuration for all uses of that JRE.\n <p>\n In addition, the LogManager uses two optional system properties that\n allow more control over reading the initial configuration:\n <ul>\n <li>\"java.util.logging.config.class\"\n <li>\"java.util.logging.config.file\"\n </ul>\n These two properties may be set via the Preferences API, or as\n command line property definitions to the \"java\" command, or as\n system property definitions passed to JNI_CreateJavaVM.\n <p>\n If the \"java.util.logging.config.class\" property is set, then the\n property value is treated as a class name.  The given class will be\n loaded, an object will be instantiated, and that object's constructor\n is responsible for reading in the initial configuration.  (That object\n may use other system properties to control its configuration.)  The\n alternate configuration class can use <tt>readConfiguration(InputStream)</tt>\n to define properties in the LogManager.\n <p>\n If \"java.util.logging.config.class\" property is <b>not</b> set,\n then the \"java.util.logging.config.file\" system property can be used\n to specify a properties file (in java.util.Properties format). The\n initial logging configuration will be read from this file.\n <p>\n If neither of these properties is defined then, as described\n above, the LogManager will read its initial configuration from\n a properties file \"lib/logging.properties\" in the JRE directory.\n <p>\n The properties for loggers and Handlers will have names starting\n with the dot-separated name for the handler or logger.\n <p>\n The global logging properties may include:\n <ul>\n <li>A property \"handlers\".  This defines a whitespace or comma separated\n list of class names for handler classes to load and register as\n handlers on the root Logger (the Logger named \"\").  Each class\n name must be for a Handler class which has a default constructor.\n Note that these Handlers may be created lazily, when they are\n first used.\n\n <li>A property \"&lt;logger&gt;.handlers\". This defines a whitespace or\n comma separated list of class names for handlers classes to\n load and register as handlers to the specified logger. Each class\n name must be for a Handler class which has a default constructor.\n Note that these Handlers may be created lazily, when they are\n first used.\n\n <li>A property \"&lt;logger&gt;.useParentHandlers\". This defines a boolean\n value. By default every logger calls its parent in addition to\n handling the logging message itself, this often result in messages\n being handled by the root logger as well. When setting this property\n to false a Handler needs to be configured for this logger otherwise\n no logging messages are delivered.\n\n <li>A property \"config\".  This property is intended to allow\n arbitrary configuration code to be run.  The property defines a\n whitespace or comma separated list of class names.  A new instance will be\n created for each named class.  The default constructor of each class\n may execute arbitrary code to update the logging configuration, such as\n setting logger levels, adding handlers, adding filters, etc.\n </ul>\n <p>\n Note that all classes loaded during LogManager configuration are\n first searched on the system class path before any user class path.\n That includes the LogManager class, any config classes, and any\n handler classes.\n <p>\n Loggers are organized into a naming hierarchy based on their\n dot separated names.  Thus \"a.b.c\" is a child of \"a.b\", but\n \"a.b1\" and a.b2\" are peers.\n <p>\n All properties whose names end with \".level\" are assumed to define\n log levels for Loggers.  Thus \"foo.level\" defines a log level for\n the logger called \"foo\" and (recursively) for any of its children\n in the naming hierarchy.  Log Levels are applied in the order they\n are defined in the properties file.  Thus level settings for child\n nodes in the tree should come after settings for their parents.\n The property name \".level\" can be used to set the level for the\n root of the tree.\n <p>\n All methods on the LogManager object are multi-thread safe.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LogManager",
                    "comment_text": "Protected constructor.  This is protected so that container applications\n (such as J2EE containers) can subclass the object.  It is non-public as\n it is intended that there only be one LogManager object, whose value is\n retrieved by calling Logmanager.getLogManager.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "LOGGING_MXBEAN_NAME",
                    "comment_text": "String representation of the\n {@link javax.management.ObjectName} for the management interface\n for the logging facility.",
                    "type": "java.lang.String"
                }
            ],
            "methods": [
                {
                    "name": "getLogManager",
                    "comment_text": "Return the global LogManager object.",
                    "return_type": "java.util.logging.LogManager",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addPropertyChangeListener",
                    "comment_text": "Adds an event listener to be invoked when the logging\n properties are re-read. Adding multiple instances of\n the same event Listener results in multiple entries\n in the property event listener table.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "l",
                            "comment_text": "event listener",
                            "type": "java.beans.PropertyChangeListener"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "removePropertyChangeListener",
                    "comment_text": "Removes an event listener for property change events.\n If the same listener instance has been added to the listener table\n through multiple invocations of <CODE>addPropertyChangeListener</CODE>,\n then an equivalent number of\n <CODE>removePropertyChangeListener</CODE> invocations are required to remove\n all instances of that listener from the listener table.\n <P>\n Returns silently if the given listener is not found.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "l",
                            "comment_text": "event listener (can be null)",
                            "type": "java.beans.PropertyChangeListener"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "addLogger",
                    "comment_text": "Add a named logger.  This does nothing and returns false if a logger\n with the same name is already registered.\n <p>\n The Logger factory methods call this method to register each\n newly created Logger.\n <p>\n The application should retain its own reference to the Logger\n object to avoid it being garbage collected.  The LogManager\n may only retain a weak reference.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "logger",
                            "comment_text": "the new logger.",
                            "type": "java.util.logging.Logger"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLogger",
                    "comment_text": "Method to find a named logger.\n <p>\n Note that since untrusted code may create loggers with\n arbitrary names this method should not be relied on to\n find Loggers for security sensitive logging.\n It is also important to note that the Logger associated with the\n String {@code name} may be garbage collected at any time if there\n is no strong reference to the Logger. The caller of this method\n must check the return value for null in order to properly handle\n the case where the Logger has been garbage collected.\n <p>",
                    "return_type": "java.util.logging.Logger",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "name of the logger",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLoggerNames",
                    "comment_text": "Get an enumeration of known logger names.\n <p>\n Note:  Loggers may be added dynamically as new classes are loaded.\n This method only reports on the loggers that are currently registered.\n It is also important to note that this method only returns the name\n of a Logger, not a strong reference to the Logger itself.\n The returned String does nothing to prevent the Logger from being\n garbage collected. In particular, if the returned name is passed\n to {@code LogManager.getLogger()}, then the caller must check the\n return value from {@code LogManager.getLogger()} for null to properly\n handle the case where the Logger has been garbage collected in the\n time since its name was returned by this method.\n <p>",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "readConfiguration",
                    "comment_text": "Reinitialize the logging properties and reread the logging configuration.\n <p>\n The same rules are used for locating the configuration properties\n as are used at startup.  So normally the logging properties will\n be re-read from the same file that was used at startup.\n <P>\n Any log level definitions in the new configuration file will be\n applied using Logger.setLevel(), if the target Logger exists.\n <p>\n A PropertyChangeEvent will be fired after the properties are read.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are IO problems reading the configuration."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Reset the logging configuration.\n <p>\n For all named loggers, the reset operation removes and closes\n all Handlers and (except for the root logger) sets the level\n to null.  The root logger's level is set to Level.INFO.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "readConfiguration",
                    "comment_text": "Reinitialize the logging properties and reread the logging configuration\n from the given stream, which should be in java.util.Properties format.\n A PropertyChangeEvent will be fired after the properties are read.\n <p>\n Any log level definitions in the new configuration file will be\n applied using Logger.setLevel(), if the target Logger exists.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ins",
                            "comment_text": "stream to read properties from",
                            "type": "java.io.InputStream"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are problems reading from the stream."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "getProperty",
                    "comment_text": "Get the value of a logging property.\n The method returns null if the property is not found.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "property name",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "checkAccess",
                    "comment_text": "Check that the current context is trusted to modify the logging\n configuration.  This requires LoggingPermission(\"control\").\n <p>\n If the check fails we throw a SecurityException, otherwise\n we return normally.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\")."
                        }
                    ]
                },
                {
                    "name": "getLoggingMXBean",
                    "comment_text": "Returns <tt>LoggingMXBean</tt> for managing loggers.\n An alternative way to manage loggers is through the\n {@link java.lang.management.PlatformLoggingMXBean} interface\n that can be obtained by calling:\n <pre>\n     PlatformLoggingMXBean logging = {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n         ManagementFactory.getPlatformMXBean}(PlatformLoggingMXBean.class);\n </pre>",
                    "return_type": "java.util.logging.LoggingMXBean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.Level",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The Level class defines a set of standard logging levels that\n can be used to control logging output.  The logging Level objects\n are ordered and are specified by ordered integers.  Enabling logging\n at a given level also enables logging at all higher levels.\n <p>\n Clients should normally use the predefined Level constants such\n as Level.SEVERE.\n <p>\n The levels in descending order are:\n <ul>\n <li>SEVERE (highest value)\n <li>WARNING\n <li>INFO\n <li>CONFIG\n <li>FINE\n <li>FINER\n <li>FINEST  (lowest value)\n </ul>\n In addition there is a level OFF that can be used to turn\n off logging, and a level ALL that can be used to enable\n logging of all messages.\n <p>\n It is possible for third parties to define additional logging\n levels by subclassing Level.  In such cases subclasses should\n take care to chose unique integer level values and to ensure that\n they maintain the Object uniqueness property across serialization\n by defining a suitable readResolve method.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Level",
                    "comment_text": "Create a named Level with a given integer value.\n <p>\n Note that this constructor is \"protected\" to allow subclassing.\n In general clients of logging should use one of the constant Level\n objects such as SEVERE or FINEST.  However, if clients need to\n add new logging levels, they may subclass Level and define new\n constants.",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the Level, for example \"SEVERE\".",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "an integer value for the level.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Level",
                    "comment_text": "Create a named Level with a given integer value and a\n given localization resource name.\n <p>",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "the name of the Level, for example \"SEVERE\".",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "comment_text": "an integer value for the level.",
                            "type": "int"
                        },
                        {
                            "name": "resourceBundleName",
                            "comment_text": "name of a resource bundle to use in\n    localizing the given name. If the resourceBundleName is null\n    or an empty string, it is ignored.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "OFF",
                    "comment_text": "OFF is a special level that can be used to turn off logging.\n This level is initialized to <CODE>Integer.MAX_VALUE</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "SEVERE",
                    "comment_text": "SEVERE is a message level indicating a serious failure.\n <p>\n In general SEVERE messages should describe events that are\n of considerable importance and which will prevent normal\n program execution.   They should be reasonably intelligible\n to end users and to system administrators.\n This level is initialized to <CODE>1000</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "WARNING",
                    "comment_text": "WARNING is a message level indicating a potential problem.\n <p>\n In general WARNING messages should describe events that will\n be of interest to end users or system managers, or which\n indicate potential problems.\n This level is initialized to <CODE>900</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "INFO",
                    "comment_text": "INFO is a message level for informational messages.\n <p>\n Typically INFO messages will be written to the console\n or its equivalent.  So the INFO level should only be\n used for reasonably significant messages that will\n make sense to end users and system administrators.\n This level is initialized to <CODE>800</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "CONFIG",
                    "comment_text": "CONFIG is a message level for static configuration messages.\n <p>\n CONFIG messages are intended to provide a variety of static\n configuration information, to assist in debugging problems\n that may be associated with particular configurations.\n For example, CONFIG message might include the CPU type,\n the graphics depth, the GUI look-and-feel, etc.\n This level is initialized to <CODE>700</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "FINE",
                    "comment_text": "FINE is a message level providing tracing information.\n <p>\n All of FINE, FINER, and FINEST are intended for relatively\n detailed tracing.  The exact meaning of the three levels will\n vary between subsystems, but in general, FINEST should be used\n for the most voluminous detailed output, FINER for somewhat\n less detailed output, and FINE for the  lowest volume (and\n most important) messages.\n <p>\n In general the FINE level should be used for information\n that will be broadly interesting to developers who do not have\n a specialized interest in the specific subsystem.\n <p>\n FINE messages might include things like minor (recoverable)\n failures.  Issues indicating potential performance problems\n are also worth logging as FINE.\n This level is initialized to <CODE>500</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "FINER",
                    "comment_text": "FINER indicates a fairly detailed tracing message.\n By default logging calls for entering, returning, or throwing\n an exception are traced at this level.\n This level is initialized to <CODE>400</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "FINEST",
                    "comment_text": "FINEST indicates a highly detailed tracing message.\n This level is initialized to <CODE>300</CODE>.",
                    "type": "java.util.logging.Level"
                },
                {
                    "name": "ALL",
                    "comment_text": "ALL indicates that all messages should be logged.\n This level is initialized to <CODE>Integer.MIN_VALUE</CODE>.",
                    "type": "java.util.logging.Level"
                }
            ],
            "methods": [
                {
                    "name": "getResourceBundleName",
                    "comment_text": "Return the level's localization resource bundle name, or\n null if no localization bundle is defined.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getName",
                    "comment_text": "Return the non-localized string name of the Level.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLocalizedName",
                    "comment_text": "Return the localized string name of the Level, for\n the current default locale.\n <p>\n If no localization information is available, the\n non-localized name is returned.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this Level.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "intValue",
                    "comment_text": "Get the integer value for this level.  This integer value\n can be used for efficient ordering comparisons between\n Level objects.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parse",
                    "comment_text": "Parse a level name string into a Level.\n <p>\n The argument string may consist of either a level name\n or an integer value.\n <p>\n For example:\n <ul>\n <li>     \"SEVERE\"\n <li>     \"1000\"\n </ul>",
                    "return_type": "java.util.logging.Level",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "string to be parsed",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.IllegalArgumentException",
                            "comment_text": "if the value is not valid.\n Valid values are integers between <CODE>Integer.MIN_VALUE</CODE>\n and <CODE>Integer.MAX_VALUE</CODE>, and all known level names.\n Known names are the levels defined by this class (e.g., <CODE>FINE</CODE>,\n <CODE>FINER</CODE>, <CODE>FINEST</CODE>), or created by this class with\n appropriate package access, or new levels defined or created\n by subclasses."
                        }
                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compare two objects for value equality.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "ox",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Generate a hashcode.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.Handler",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A <tt>Handler</tt> object takes log messages from a <tt>Logger</tt> and\n exports them.  It might for example, write them to a console\n or write them to a file, or send them to a network logging service,\n or forward them to an OS log, or whatever.\n <p>\n A <tt>Handler</tt> can be disabled by doing a <tt>setLevel(Level.OFF)</tt>\n and can  be re-enabled by doing a <tt>setLevel</tt> with an appropriate level.\n <p>\n <tt>Handler</tt> classes typically use <tt>LogManager</tt> properties to set\n default values for the <tt>Handler</tt>'s <tt>Filter</tt>, <tt>Formatter</tt>,\n and <tt>Level</tt>.  See the specific documentation for each concrete\n <tt>Handler</tt> class.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Handler",
                    "comment_text": "Default constructor.  The resulting <tt>Handler</tt> has a log\n level of <tt>Level.ALL</tt>, no <tt>Formatter</tt>, and no\n <tt>Filter</tt>.  A default <tt>ErrorManager</tt> instance is installed\n as the <tt>ErrorManager</tt>.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "publish",
                    "comment_text": "Publish a <tt>LogRecord</tt>.\n <p>\n The logging request was made initially to a <tt>Logger</tt> object,\n which initialized the <tt>LogRecord</tt> and forwarded it here.\n <p>\n The <tt>Handler</tt>  is responsible for formatting the message, when and\n if necessary.  The formatting should include localization.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "description of the log event. A null record is\n                 silently ignored and is not published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "flush",
                    "comment_text": "Flush any buffered output.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Close the <tt>Handler</tt> and free all associated resources.\n <p>\n The close method will perform a <tt>flush</tt> and then close the\n <tt>Handler</tt>.   After close has been called this <tt>Handler</tt>\n should no longer be used.  Method calls may either be silently\n ignored or may throw runtime exceptions.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "setFormatter",
                    "comment_text": "Set a <tt>Formatter</tt>.  This <tt>Formatter</tt> will be used\n to format <tt>LogRecords</tt> for this <tt>Handler</tt>.\n <p>\n Some <tt>Handlers</tt> may not use <tt>Formatters</tt>, in\n which case the <tt>Formatter</tt> will be remembered, but not used.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newFormatter",
                            "comment_text": "the <tt>Formatter</tt> to use (may not be null)",
                            "type": "java.util.logging.Formatter"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "getFormatter",
                    "comment_text": "Return the <tt>Formatter</tt> for this <tt>Handler</tt>.",
                    "return_type": "java.util.logging.Formatter",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setEncoding",
                    "comment_text": "Set the character encoding used by this <tt>Handler</tt>.\n <p>\n The encoding should be set before any <tt>LogRecords</tt> are written\n to the <tt>Handler</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "encoding",
                            "comment_text": "The name of a supported character encoding.\n        May be null, to indicate the default platform encoding.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        },
                        {
                            "name": "java.io.UnsupportedEncodingException",
                            "comment_text": "if the named encoding is\n          not supported."
                        }
                    ]
                },
                {
                    "name": "getEncoding",
                    "comment_text": "Return the character encoding for this <tt>Handler</tt>.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setFilter",
                    "comment_text": "Set a <tt>Filter</tt> to control output on this <tt>Handler</tt>.\n <P>\n For each call of <tt>publish</tt> the <tt>Handler</tt> will call\n this <tt>Filter</tt> (if it is non-null) to check if the\n <tt>LogRecord</tt> should be published or discarded.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newFilter",
                            "comment_text": "a <tt>Filter</tt> object (may be null)",
                            "type": "java.util.logging.Filter"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "getFilter",
                    "comment_text": "Get the current <tt>Filter</tt> for this <tt>Handler</tt>.",
                    "return_type": "java.util.logging.Filter",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setErrorManager",
                    "comment_text": "Define an ErrorManager for this Handler.\n <p>\n The ErrorManager's \"error\" method will be invoked if any\n errors occur while using this Handler.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "em",
                            "comment_text": "the new ErrorManager",
                            "type": "java.util.logging.ErrorManager"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getErrorManager",
                    "comment_text": "Retrieves the ErrorManager for this Handler.",
                    "return_type": "java.util.logging.ErrorManager",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reportError",
                    "comment_text": "Protected convenience method to report an error to this Handler's\n ErrorManager.  Note that this method retrieves and uses the ErrorManager\n without doing a security check.  It can therefore be used in\n environments where the caller may be non-privileged.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "a descriptive string (may be null)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "ex",
                            "comment_text": "an exception (may be null)",
                            "type": "java.lang.Exception"
                        },
                        {
                            "name": "code",
                            "comment_text": "an error code defined in ErrorManager",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setLevel",
                    "comment_text": "Set the log level specifying which message levels will be\n logged by this <tt>Handler</tt>.  Message levels lower than this\n value will be discarded.\n <p>\n The intention is to allow developers to turn on voluminous\n logging, but to limit the messages that are sent to certain\n <tt>Handlers</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newLevel",
                            "comment_text": "the new value for the log level",
                            "type": "java.util.logging.Level"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "getLevel",
                    "comment_text": "Get the log level specifying which messages will be\n logged by this <tt>Handler</tt>.  Message levels lower\n than this level will be discarded.",
                    "return_type": "java.util.logging.Level",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLoggable",
                    "comment_text": "Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.\n <p>\n This method checks if the <tt>LogRecord</tt> has an appropriate\n <tt>Level</tt> and  whether it satisfies any <tt>Filter</tt>.  It also\n may make other <tt>Handler</tt> specific checks that might prevent a\n handler from logging the <tt>LogRecord</tt>. It will return false if\n the <tt>LogRecord</tt> is null.\n <p>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "a <tt>LogRecord</tt>",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.Formatter",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A Formatter provides support for formatting LogRecords.\n <p>\n Typically each logging Handler will have a Formatter associated\n with it.  The Formatter takes a LogRecord and converts it to\n a string.\n <p>\n Some formatters (such as the XMLFormatter) need to wrap head\n and tail strings around a set of formatted records. The getHeader\n and getTail methods can be used to obtain these strings.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Formatter",
                    "comment_text": "Construct a new formatter.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "format",
                    "comment_text": "Format the given log record and return the formatted string.\n <p>\n The resulting formatted String will normally include a\n localized and formatted version of the LogRecord's message field.\n It is recommended to use the {@link Formatter#formatMessage}\n convenience method to localize and format the message field.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "the log record to be formatted.",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getHead",
                    "comment_text": "Return the header string for a set of formatted records.\n <p>\n This base class returns an empty string, but this may be\n overridden by subclasses.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "h",
                            "comment_text": "The target handler (can be null)",
                            "type": "java.util.logging.Handler"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTail",
                    "comment_text": "Return the tail string for a set of formatted records.\n <p>\n This base class returns an empty string, but this may be\n overridden by subclasses.",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "h",
                            "comment_text": "The target handler (can be null)",
                            "type": "java.util.logging.Handler"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "formatMessage",
                    "comment_text": "Localize and format the message string from a log record.  This\n method is provided as a convenience for Formatter subclasses to\n use when they are performing formatting.\n <p>\n The message string is first localized to a format string using\n the record's ResourceBundle.  (If there is no ResourceBundle,\n or if the message key is not found, then the key is used as the\n format string.)  The format String uses java.text style\n formatting.\n <ul>\n <li>If there are no parameters, no formatter is used.\n <li>Otherwise, if the string contains \"{0\" then\n     java.text.MessageFormat  is used to format the string.\n <li>Otherwise no formatting is performed.\n </ul>\n <p>",
                    "return_type": "java.lang.String",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "the log record containing the raw message",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.Filter",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A Filter can be used to provide fine grain control over\n what is logged, beyond the control provided by log levels.\n <p>\n Each Logger and each Handler can have a filter associated with it.\n The Logger or Handler will call the isLoggable method to check\n if a given LogRecord should be published.  If isLoggable returns\n false, the LogRecord will be discarded.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "isLoggable",
                    "comment_text": "Check if a given log record should be published.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "a LogRecord",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.FileHandler",
            "interfaces": [

            ],
            "superclass": "java.util.logging.StreamHandler",
            "comment_text": "Simple file logging <tt>Handler</tt>.\n <p>\n The <tt>FileHandler</tt> can either write to a specified file,\n or it can write to a rotating set of files.\n <p>\n For a rotating set of files, as each file reaches a given size\n limit, it is closed, rotated out, and a new file opened.\n Successively older files are named by adding \"0\", \"1\", \"2\",\n etc. into the base filename.\n <p>\n By default buffering is enabled in the IO libraries but each log\n record is flushed out when it is complete.\n <p>\n By default the <tt>XMLFormatter</tt> class is used for formatting.\n <p>\n <b>Configuration:</b>\n By default each <tt>FileHandler</tt> is initialized using the following\n <tt>LogManager</tt> configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n <ul>\n <li>   java.util.logging.FileHandler.level\n        specifies the default level for the <tt>Handler</tt>\n        (defaults to <tt>Level.ALL</tt>).\n <li>   java.util.logging.FileHandler.filter\n        specifies the name of a <tt>Filter</tt> class to use\n        (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.FileHandler.formatter\n        specifies the name of a <tt>Formatter</tt> class to use\n        (defaults to <tt>java.util.logging.XMLFormatter</tt>)\n <li>   java.util.logging.FileHandler.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding).\n <li>   java.util.logging.FileHandler.limit\n        specifies an approximate maximum amount to write (in bytes)\n        to any one file.  If this is zero, then there is no limit.\n        (Defaults to no limit).\n <li>   java.util.logging.FileHandler.count\n        specifies how many output files to cycle through (defaults to 1).\n <li>   java.util.logging.FileHandler.pattern\n        specifies a pattern for generating the output file name.  See\n        below for details. (Defaults to \"%h/java%u.log\").\n <li>   java.util.logging.FileHandler.append\n        specifies whether the FileHandler should append onto\n        any existing files (defaults to false).\n </ul>\n <p>\n <p>\n A pattern consists of a string that includes the following special\n components that will be replaced at runtime:\n <ul>\n <li>    \"/\"    the local pathname separator\n <li>     \"%t\"   the system temporary directory\n <li>     \"%h\"   the value of the \"user.home\" system property\n <li>     \"%g\"   the generation number to distinguish rotated logs\n <li>     \"%u\"   a unique number to resolve conflicts\n <li>     \"%%\"   translates to a single percent sign \"%\"\n </ul>\n If no \"%g\" field has been specified and the file count is greater\n than one, then the generation number will be added to the end of\n the generated filename, after a dot.\n <p>\n Thus for example a pattern of \"%t/java%g.log\" with a count of 2\n would typically cause log files to be written on Solaris to\n /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they\n would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log\n <p>\n Generation numbers follow the sequence 0, 1, 2, etc.\n <p>\n Normally the \"%u\" unique field is set to 0.  However, if the <tt>FileHandler</tt>\n tries to open the filename and finds the file is currently in use by\n another process it will increment the unique number field and try\n again.  This will be repeated until <tt>FileHandler</tt> finds a file name that\n is  not currently in use. If there is a conflict and no \"%u\" field has\n been specified, it will be added at the end of the filename after a dot.\n (This will be after any automatically added generation number.)\n <p>\n Thus if three processes were all trying to log to fred%u.%g.txt then\n they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as\n the first file in their rotating sequences.\n <p>\n Note that the use of unique ids to avoid conflicts is only guaranteed\n to work reliably when using a local disk file system.",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "FileHandler",
                    "comment_text": "Construct a default <tt>FileHandler</tt>.  This will be configured\n entirely from <tt>LogManager</tt> properties (or their default values).\n <p>",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are IO problems opening the files."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\"))</tt>."
                        }
                    ]
                },
                {
                    "name": "FileHandler",
                    "comment_text": "Initialize a <tt>FileHandler</tt> to write to the given filename.\n <p>\n The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to no limit, and the file count is set to one.\n <p>\n There is no limit on the amount of data that may be written,\n so use this with care.",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the name of the output file",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are IO problems opening the files."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "FileHandler",
                    "comment_text": "Initialize a <tt>FileHandler</tt> to write to the given filename,\n with optional append.\n <p>\n The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to no limit, the file count is set to one, and the append\n mode is set to the given <tt>append</tt> argument.\n <p>\n There is no limit on the amount of data that may be written,\n so use this with care.",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the name of the output file",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "append",
                            "comment_text": "specifies append mode",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are IO problems opening the files."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "FileHandler",
                    "comment_text": "Initialize a <tt>FileHandler</tt> to write to a set of files.  When\n (approximately) the given limit has been written to one file,\n another file will be opened.  The output will cycle through a set\n of count files.\n <p>\n The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to the limit argument, and the file count is set to the\n given count argument.\n <p>\n The count must be at least 1.",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the pattern for naming the output file",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "limit",
                            "comment_text": "the maximum number of bytes to write to any one file",
                            "type": "int"
                        },
                        {
                            "name": "count",
                            "comment_text": "the number of files to use",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are IO problems opening the files."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                },
                {
                    "name": "FileHandler",
                    "comment_text": "Initialize a <tt>FileHandler</tt> to write to a set of files\n with optional append.  When (approximately) the given limit has\n been written to one file, another file will be opened.  The\n output will cycle through a set of count files.\n <p>\n The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>\n properties (or their default values) except that the given pattern\n argument is used as the filename pattern, the file limit is\n set to the limit argument, and the file count is set to the\n given count argument, and the append mode is set to the given\n <tt>append</tt> argument.\n <p>\n The count must be at least 1.",
                    "parameters": [
                        {
                            "name": "pattern",
                            "comment_text": "the pattern for naming the output file",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "limit",
                            "comment_text": "the maximum number of bytes to write to any one file",
                            "type": "int"
                        },
                        {
                            "name": "count",
                            "comment_text": "the number of files to use",
                            "type": "int"
                        },
                        {
                            "name": "append",
                            "comment_text": "specifies append mode",
                            "type": "boolean"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.io.IOException",
                            "comment_text": "if there are IO problems opening the files."
                        },
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "publish",
                    "comment_text": "Format and publish a <tt>LogRecord</tt>.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "description of the log event. A null record is\n                 silently ignored and is not published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Close all the files.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.SecurityException",
                            "comment_text": "if a security manager exists and if\n             the caller does not have <tt>LoggingPermission(\"control\")</tt>."
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.ErrorManager",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "ErrorManager objects can be attached to Handlers to process\n any error that occurs on a Handler during Logging.\n <p>\n When processing logging output, if a Handler encounters problems\n then rather than throwing an Exception back to the issuer of\n the logging call (who is unlikely to be interested) the Handler\n should call its associated ErrorManager.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ErrorManager",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "GENERIC_FAILURE",
                    "comment_text": "GENERIC_FAILURE is used for failure that don't fit\n into one of the other categories.",
                    "type": "int"
                },
                {
                    "name": "WRITE_FAILURE",
                    "comment_text": "WRITE_FAILURE is used when a write to an output stream fails.",
                    "type": "int"
                },
                {
                    "name": "FLUSH_FAILURE",
                    "comment_text": "FLUSH_FAILURE is used when a flush to an output stream fails.",
                    "type": "int"
                },
                {
                    "name": "CLOSE_FAILURE",
                    "comment_text": "CLOSE_FAILURE is used when a close of an output stream fails.",
                    "type": "int"
                },
                {
                    "name": "OPEN_FAILURE",
                    "comment_text": "OPEN_FAILURE is used when an open of an output stream fails.",
                    "type": "int"
                },
                {
                    "name": "FORMAT_FAILURE",
                    "comment_text": "FORMAT_FAILURE is used when formatting fails for any reason.",
                    "type": "int"
                }
            ],
            "methods": [
                {
                    "name": "error",
                    "comment_text": "The error method is called when a Handler failure occurs.\n <p>\n This method may be overridden in subclasses.  The default\n behavior in this base class is that the first call is\n reported to System.err, and subsequent calls are ignored.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "msg",
                            "comment_text": "a descriptive string (may be null)",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "ex",
                            "comment_text": "an exception (may be null)",
                            "type": "java.lang.Exception"
                        },
                        {
                            "name": "code",
                            "comment_text": "an error code defined in ErrorManager",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.logging.ConsoleHandler",
            "interfaces": [

            ],
            "superclass": "java.util.logging.StreamHandler",
            "comment_text": "This <tt>Handler</tt> publishes log records to <tt>System.err</tt>.\n By default the <tt>SimpleFormatter</tt> is used to generate brief summaries.\n <p>\n <b>Configuration:</b>\n By default each <tt>ConsoleHandler</tt> is initialized using the following\n <tt>LogManager</tt> configuration properties.  If properties are not defined\n (or have invalid values) then the specified default values are used.\n <ul>\n <li>   java.util.logging.ConsoleHandler.level\n        specifies the default level for the <tt>Handler</tt>\n        (defaults to <tt>Level.INFO</tt>).\n <li>   java.util.logging.ConsoleHandler.filter\n        specifies the name of a <tt>Filter</tt> class to use\n        (defaults to no <tt>Filter</tt>).\n <li>   java.util.logging.ConsoleHandler.formatter\n        specifies the name of a <tt>Formatter</tt> class to use\n        (defaults to <tt>java.util.logging.SimpleFormatter</tt>).\n <li>   java.util.logging.ConsoleHandler.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding).\n </ul>\n <p>",
            "since": "1.4",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ConsoleHandler",
                    "comment_text": "Create a <tt>ConsoleHandler</tt> for <tt>System.err</tt>.\n <p>\n The <tt>ConsoleHandler</tt> is configured based on\n <tt>LogManager</tt> properties (or their default values).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "publish",
                    "comment_text": "Publish a <tt>LogRecord</tt>.\n <p>\n The logging request was made initially to a <tt>Logger</tt> object,\n which initialized the <tt>LogRecord</tt> and forwarded it here.\n <p>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "record",
                            "comment_text": "description of the log event. A null record is\n                 silently ignored and is not published",
                            "type": "java.util.logging.LogRecord"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "close",
                    "comment_text": "Override <tt>StreamHandler.close</tt> to do a flush but not\n to close the output stream.  That is, we do <b>not</b>\n close <tt>System.err</tt>.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.TransferQueue",
            "interfaces": [
                "java.util.concurrent.BlockingQueue"
            ],
            "superclass": "",
            "comment_text": "A {@link BlockingQueue} in which producers may wait for consumers\n to receive elements.  A {@code TransferQueue} may be useful for\n example in message passing applications in which producers\n sometimes (using method {@link #transfer}) await receipt of\n elements by consumers invoking {@code take} or {@code poll}, while\n at other times enqueue elements (via method {@code put}) without\n waiting for receipt.\n {@linkplain #tryTransfer(Object) Non-blocking} and\n {@linkplain #tryTransfer(Object,long,TimeUnit) time-out} versions of\n {@code tryTransfer} are also available.\n A {@code TransferQueue} may also be queried, via {@link\n #hasWaitingConsumer}, whether there are any threads waiting for\n items, which is a converse analogy to a {@code peek} operation.\n\n <p>Like other blocking queues, a {@code TransferQueue} may be\n capacity bounded.  If so, an attempted transfer operation may\n initially block waiting for available space, and/or subsequently\n block waiting for reception by a consumer.  Note that in a queue\n with zero capacity, such as {@link SynchronousQueue}, {@code put}\n and {@code transfer} are effectively synonymous.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "tryTransfer",
                    "comment_text": "Transfers the element to a waiting consumer immediately, if possible.\n\n <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n otherwise returning {@code false} without enqueuing the element.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to transfer",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "transfer",
                    "comment_text": "Transfers the element to a consumer, waiting if necessary to do so.\n\n <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n else waits until the element is received by a consumer.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to transfer",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting,\n         in which case the element is not left enqueued"
                        }
                    ]
                },
                {
                    "name": "tryTransfer",
                    "comment_text": "Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.\n\n <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n else waits until the element is received by a consumer,\n returning {@code false} if the specified wait time elapses\n before the element can be transferred.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to transfer",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        {@code unit}",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting,\n         in which case the element is not left enqueued"
                        }
                    ]
                },
                {
                    "name": "hasWaitingConsumer",
                    "comment_text": "Returns {@code true} if there is at least one consumer waiting\n to receive an element via {@link #take} or\n timed {@link #poll(long,TimeUnit) poll}.\n The return value represents a momentary state of affairs.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingConsumerCount",
                    "comment_text": "Returns an estimate of the number of consumers waiting to\n receive elements via {@link #take} or timed\n {@link #poll(long,TimeUnit) poll}.  The return value is an\n approximation of a momentary state of affairs, that may be\n inaccurate if consumers have completed or given up waiting.\n The value may be useful for monitoring and heuristics, but\n not for synchronization control.  Implementations of this\n method are likely to be noticeably slower than those for\n {@link #hasWaitingConsumer}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.TimeoutException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "Exception thrown when a blocking operation times out.  Blocking\n operations for which a timeout is specified need a means to\n indicate that the timeout has occurred. For many such operations it\n is possible to return a value that indicates timeout; when that is\n not possible or desirable then <tt>TimeoutException</tt> should be\n declared and thrown.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "TimeoutException",
                    "comment_text": "Constructs a <tt>TimeoutException</tt> with no specified detail\n message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "TimeoutException",
                    "comment_text": "Constructs a <tt>TimeoutException</tt> with the specified detail\n message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.concurrent.TimeUnit",
            "interfaces": [

            ],
            "superclass": "java.lang.Enum",
            "comment_text": "A <tt>TimeUnit</tt> represents time durations at a given unit of\n granularity and provides utility methods to convert across units,\n and to perform timing and delay operations in these units.  A\n <tt>TimeUnit</tt> does not maintain time information, but only\n helps organize and use time representations that may be maintained\n separately across various contexts.  A nanosecond is defined as one\n thousandth of a microsecond, a microsecond as one thousandth of a\n millisecond, a millisecond as one thousandth of a second, a minute\n as sixty seconds, an hour as sixty minutes, and a day as twenty four\n hours.\n\n <p>A <tt>TimeUnit</tt> is mainly used to inform time-based methods\n how a given timing parameter should be interpreted. For example,\n the following code will timeout in 50 milliseconds if the {@link\n java.util.concurrent.locks.Lock lock} is not available:\n\n <pre>  Lock lock = ...;\n  if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...\n </pre>\n while this code will timeout in 50 seconds:\n <pre>\n  Lock lock = ...;\n  if (lock.tryLock(50L, TimeUnit.SECONDS)) ...\n </pre>\n\n Note however, that there is no guarantee that a particular timeout\n implementation will be able to notice the passage of time at the\n same granularity as the given <tt>TimeUnit</tt>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [
                {
                    "name": "NANOSECONDS",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                },
                {
                    "name": "MICROSECONDS",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                },
                {
                    "name": "MILLISECONDS",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                },
                {
                    "name": "SECONDS",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                },
                {
                    "name": "MINUTES",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                },
                {
                    "name": "HOURS",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                },
                {
                    "name": "DAYS",
                    "comment_text": "",
                    "type": "java.util.concurrent.TimeUnit"
                }
            ],
            "methods": [
                {
                    "name": "values",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.TimeUnit",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "valueOf",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.TimeUnit",
                    "parameters": [
                        {
                            "name": "name",
                            "comment_text": "",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "convert",
                    "comment_text": "Convert the given time duration in the given unit to this\n unit.  Conversions from finer to coarser granularities\n truncate, so lose precision. For example converting\n <tt>999</tt> milliseconds to seconds results in\n <tt>0</tt>. Conversions from coarser to finer granularities\n with arguments that would numerically overflow saturate to\n <tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt>\n if positive.\n\n <p>For example, to convert 10 minutes to milliseconds, use:\n <tt>TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)</tt>",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "sourceDuration",
                            "comment_text": "the time duration in the given <tt>sourceUnit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "sourceUnit",
                            "comment_text": "the unit of the <tt>sourceDuration</tt> argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toNanos",
                    "comment_text": "Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toMicros",
                    "comment_text": "Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toMillis",
                    "comment_text": "Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toSeconds",
                    "comment_text": "Equivalent to <tt>SECONDS.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toMinutes",
                    "comment_text": "Equivalent to <tt>MINUTES.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toHours",
                    "comment_text": "Equivalent to <tt>HOURS.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toDays",
                    "comment_text": "Equivalent to <tt>DAYS.convert(duration, this)</tt>.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "duration",
                            "comment_text": "the duration",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "timedWait",
                    "comment_text": "Performs a timed {@link Object#wait(long, int) Object.wait}\n using this time unit.\n This is a convenience method that converts timeout arguments\n into the form required by the <tt>Object.wait</tt> method.\n\n <p>For example, you could implement a blocking <tt>poll</tt>\n method (see {@link BlockingQueue#poll BlockingQueue.poll})\n using:\n\n  <pre> {@code\n public synchronized Object poll(long timeout, TimeUnit unit)\n     throws InterruptedException {\n   while (empty) {\n     unit.timedWait(this, timeout);\n     ...\n   }\n }}</pre>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "the object to wait on",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait. If less than\n or equal to zero, do not wait at all.",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "timedJoin",
                    "comment_text": "Performs a timed {@link Thread#join(long, int) Thread.join}\n using this time unit.\n This is a convenience method that converts time arguments into the\n form required by the <tt>Thread.join</tt> method.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "thread",
                            "comment_text": "the thread to wait for",
                            "type": "java.lang.Thread"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait. If less than\n or equal to zero, do not wait at all.",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "sleep",
                    "comment_text": "Performs a {@link Thread#sleep(long, int) Thread.sleep} using\n this time unit.\n This is a convenience method that converts time arguments into the\n form required by the <tt>Thread.sleep</tt> method.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the minimum time to sleep. If less than\n or equal to zero, do not sleep at all.",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while sleeping"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadPoolExecutor",
            "interfaces": [

            ],
            "superclass": "java.util.concurrent.AbstractExecutorService",
            "comment_text": "An {@link ExecutorService} that executes each submitted task using\n one of possibly several pooled threads, normally configured\n using {@link Executors} factory methods.\n\n <p>Thread pools address two different problems: they usually\n provide improved performance when executing large numbers of\n asynchronous tasks, due to reduced per-task invocation overhead,\n and they provide a means of bounding and managing the resources,\n including threads, consumed when executing a collection of tasks.\n Each {@code ThreadPoolExecutor} also maintains some basic\n statistics, such as the number of completed tasks.\n\n <p>To be useful across a wide range of contexts, this class\n provides many adjustable parameters and extensibility\n hooks. However, programmers are urged to use the more convenient\n {@link Executors} factory methods {@link\n Executors#newCachedThreadPool} (unbounded thread pool, with\n automatic thread reclamation), {@link Executors#newFixedThreadPool}\n (fixed size thread pool) and {@link\n Executors#newSingleThreadExecutor} (single background thread), that\n preconfigure settings for the most common usage\n scenarios. Otherwise, use the following guide when manually\n configuring and tuning this class:\n\n <dl>\n\n <dt>Core and maximum pool sizes</dt>\n\n <dd>A {@code ThreadPoolExecutor} will automatically adjust the\n pool size (see {@link #getPoolSize})\n according to the bounds set by\n corePoolSize (see {@link #getCorePoolSize}) and\n maximumPoolSize (see {@link #getMaximumPoolSize}).\n\n When a new task is submitted in method {@link #execute}, and fewer\n than corePoolSize threads are running, a new thread is created to\n handle the request, even if other worker threads are idle.  If\n there are more than corePoolSize but less than maximumPoolSize\n threads running, a new thread will be created only if the queue is\n full.  By setting corePoolSize and maximumPoolSize the same, you\n create a fixed-size thread pool. By setting maximumPoolSize to an\n essentially unbounded value such as {@code Integer.MAX_VALUE}, you\n allow the pool to accommodate an arbitrary number of concurrent\n tasks. Most typically, core and maximum pool sizes are set only\n upon construction, but they may also be changed dynamically using\n {@link #setCorePoolSize} and {@link #setMaximumPoolSize}. </dd>\n\n <dt>On-demand construction</dt>\n\n <dd> By default, even core threads are initially created and\n started only when new tasks arrive, but this can be overridden\n dynamically using method {@link #prestartCoreThread} or {@link\n #prestartAllCoreThreads}.  You probably want to prestart threads if\n you construct the pool with a non-empty queue. </dd>\n\n <dt>Creating new threads</dt>\n\n <dd>New threads are created using a {@link ThreadFactory}.  If not\n otherwise specified, a {@link Executors#defaultThreadFactory} is\n used, that creates threads to all be in the same {@link\n ThreadGroup} and with the same {@code NORM_PRIORITY} priority and\n non-daemon status. By supplying a different ThreadFactory, you can\n alter the thread's name, thread group, priority, daemon status,\n etc. If a {@code ThreadFactory} fails to create a thread when asked\n by returning null from {@code newThread}, the executor will\n continue, but might not be able to execute any tasks. Threads\n should possess the \"modifyThread\" {@code RuntimePermission}. If\n worker threads or other threads using the pool do not possess this\n permission, service may be degraded: configuration changes may not\n take effect in a timely manner, and a shutdown pool may remain in a\n state in which termination is possible but not completed.</dd>\n\n <dt>Keep-alive times</dt>\n\n <dd>If the pool currently has more than corePoolSize threads,\n excess threads will be terminated if they have been idle for more\n than the keepAliveTime (see {@link #getKeepAliveTime}). This\n provides a means of reducing resource consumption when the pool is\n not being actively used. If the pool becomes more active later, new\n threads will be constructed. This parameter can also be changed\n dynamically using method {@link #setKeepAliveTime}. Using a value\n of {@code Long.MAX_VALUE} {@link TimeUnit#NANOSECONDS} effectively\n disables idle threads from ever terminating prior to shut down. By\n default, the keep-alive policy applies only when there are more\n than corePoolSizeThreads. But method {@link\n #allowCoreThreadTimeOut(boolean)} can be used to apply this\n time-out policy to core threads as well, so long as the\n keepAliveTime value is non-zero. </dd>\n\n <dt>Queuing</dt>\n\n <dd>Any {@link BlockingQueue} may be used to transfer and hold\n submitted tasks.  The use of this queue interacts with pool sizing:\n\n <ul>\n\n <li> If fewer than corePoolSize threads are running, the Executor\n always prefers adding a new thread\n rather than queuing.</li>\n\n <li> If corePoolSize or more threads are running, the Executor\n always prefers queuing a request rather than adding a new\n thread.</li>\n\n <li> If a request cannot be queued, a new thread is created unless\n this would exceed maximumPoolSize, in which case, the task will be\n rejected.</li>\n\n </ul>\n\n There are three general strategies for queuing:\n <ol>\n\n <li> <em> Direct handoffs.</em> A good default choice for a work\n queue is a {@link SynchronousQueue} that hands off tasks to threads\n without otherwise holding them. Here, an attempt to queue a task\n will fail if no threads are immediately available to run it, so a\n new thread will be constructed. This policy avoids lockups when\n handling sets of requests that might have internal dependencies.\n Direct handoffs generally require unbounded maximumPoolSizes to\n avoid rejection of new submitted tasks. This in turn admits the\n possibility of unbounded thread growth when commands continue to\n arrive on average faster than they can be processed.  </li>\n\n <li><em> Unbounded queues.</em> Using an unbounded queue (for\n example a {@link LinkedBlockingQueue} without a predefined\n capacity) will cause new tasks to wait in the queue when all\n corePoolSize threads are busy. Thus, no more than corePoolSize\n threads will ever be created. (And the value of the maximumPoolSize\n therefore doesn't have any effect.)  This may be appropriate when\n each task is completely independent of others, so tasks cannot\n affect each others execution; for example, in a web page server.\n While this style of queuing can be useful in smoothing out\n transient bursts of requests, it admits the possibility of\n unbounded work queue growth when commands continue to arrive on\n average faster than they can be processed.  </li>\n\n <li><em>Bounded queues.</em> A bounded queue (for example, an\n {@link ArrayBlockingQueue}) helps prevent resource exhaustion when\n used with finite maximumPoolSizes, but can be more difficult to\n tune and control.  Queue sizes and maximum pool sizes may be traded\n off for each other: Using large queues and small pools minimizes\n CPU usage, OS resources, and context-switching overhead, but can\n lead to artificially low throughput.  If tasks frequently block (for\n example if they are I/O bound), a system may be able to schedule\n time for more threads than you otherwise allow. Use of small queues\n generally requires larger pool sizes, which keeps CPUs busier but\n may encounter unacceptable scheduling overhead, which also\n decreases throughput.  </li>\n\n </ol>\n\n </dd>\n\n <dt>Rejected tasks</dt>\n\n <dd> New tasks submitted in method {@link #execute} will be\n <em>rejected</em> when the Executor has been shut down, and also\n when the Executor uses finite bounds for both maximum threads and\n work queue capacity, and is saturated.  In either case, the {@code\n execute} method invokes the {@link\n RejectedExecutionHandler#rejectedExecution} method of its {@link\n RejectedExecutionHandler}.  Four predefined handler policies are\n provided:\n\n <ol>\n\n <li> In the default {@link ThreadPoolExecutor.AbortPolicy}, the\n handler throws a runtime {@link RejectedExecutionException} upon\n rejection. </li>\n\n <li> In {@link ThreadPoolExecutor.CallerRunsPolicy}, the thread\n that invokes {@code execute} itself runs the task. This provides a\n simple feedback control mechanism that will slow down the rate that\n new tasks are submitted. </li>\n\n <li> In {@link ThreadPoolExecutor.DiscardPolicy}, a task that\n cannot be executed is simply dropped.  </li>\n\n <li>In {@link ThreadPoolExecutor.DiscardOldestPolicy}, if the\n executor is not shut down, the task at the head of the work queue\n is dropped, and then execution is retried (which can fail again,\n causing this to be repeated.) </li>\n\n </ol>\n\n It is possible to define and use other kinds of {@link\n RejectedExecutionHandler} classes. Doing so requires some care\n especially when policies are designed to work only under particular\n capacity or queuing policies. </dd>\n\n <dt>Hook methods</dt>\n\n <dd>This class provides {@code protected} overridable {@link\n #beforeExecute} and {@link #afterExecute} methods that are called\n before and after execution of each task.  These can be used to\n manipulate the execution environment; for example, reinitializing\n ThreadLocals, gathering statistics, or adding log\n entries. Additionally, method {@link #terminated} can be overridden\n to perform any special processing that needs to be done once the\n Executor has fully terminated.\n\n <p>If hook or callback methods throw exceptions, internal worker\n threads may in turn fail and abruptly terminate.</dd>\n\n <dt>Queue maintenance</dt>\n\n <dd> Method {@link #getQueue} allows access to the work queue for\n purposes of monitoring and debugging.  Use of this method for any\n other purpose is strongly discouraged.  Two supplied methods,\n {@link #remove} and {@link #purge} are available to assist in\n storage reclamation when large numbers of queued tasks become\n cancelled.</dd>\n\n <dt>Finalization</dt>\n\n <dd> A pool that is no longer referenced in a program <em>AND</em>\n has no remaining threads will be {@code shutdown} automatically. If\n you would like to ensure that unreferenced pools are reclaimed even\n if users forget to call {@link #shutdown}, then you must arrange\n that unused threads eventually die, by setting appropriate\n keep-alive times, using a lower bound of zero core threads and/or\n setting {@link #allowCoreThreadTimeOut(boolean)}.  </dd>\n\n </dl>\n\n <p> <b>Extension example</b>. Most extensions of this class\n override one or more of the protected hook methods. For example,\n here is a subclass that adds a simple pause/resume feature:\n\n  <pre> {@code\n class PausableThreadPoolExecutor extends ThreadPoolExecutor {\n   private boolean isPaused;\n   private ReentrantLock pauseLock = new ReentrantLock();\n   private Condition unpaused = pauseLock.newCondition();\n\n   public PausableThreadPoolExecutor(...) { super(...); }\n\n   protected void beforeExecute(Thread t, Runnable r) {\n     super.beforeExecute(t, r);\n     pauseLock.lock();\n     try {\n       while (isPaused) unpaused.await();\n     } catch (InterruptedException ie) {\n       t.interrupt();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n\n   public void pause() {\n     pauseLock.lock();\n     try {\n       isPaused = true;\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n\n   public void resume() {\n     pauseLock.lock();\n     try {\n       isPaused = false;\n       unpaused.signalAll();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n }}</pre>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ThreadPoolExecutor",
                    "comment_text": "Creates a new {@code ThreadPoolExecutor} with the given initial\n parameters and default thread factory and rejected execution handler.\n It may be more convenient to use one of the {@link Executors} factory\n methods instead of this general purpose constructor.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "maximumPoolSize",
                            "comment_text": "the maximum number of threads to allow in the\n        pool",
                            "type": "int"
                        },
                        {
                            "name": "keepAliveTime",
                            "comment_text": "when the number of threads is greater than\n        the core, this is the maximum time that excess idle threads\n        will wait for new tasks before terminating.",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit for the {@code keepAliveTime} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        },
                        {
                            "name": "workQueue",
                            "comment_text": "the queue to use for holding tasks before they are\n        executed.  This queue will hold only the {@code Runnable}\n        tasks submitted by the {@code execute} method.",
                            "type": "java.util.concurrent.BlockingQueue"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ThreadPoolExecutor",
                    "comment_text": "Creates a new {@code ThreadPoolExecutor} with the given initial\n parameters and default rejected execution handler.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "maximumPoolSize",
                            "comment_text": "the maximum number of threads to allow in the\n        pool",
                            "type": "int"
                        },
                        {
                            "name": "keepAliveTime",
                            "comment_text": "when the number of threads is greater than\n        the core, this is the maximum time that excess idle threads\n        will wait for new tasks before terminating.",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit for the {@code keepAliveTime} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        },
                        {
                            "name": "workQueue",
                            "comment_text": "the queue to use for holding tasks before they are\n        executed.  This queue will hold only the {@code Runnable}\n        tasks submitted by the {@code execute} method.",
                            "type": "java.util.concurrent.BlockingQueue"
                        },
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when the executor\n        creates a new thread",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ThreadPoolExecutor",
                    "comment_text": "Creates a new {@code ThreadPoolExecutor} with the given initial\n parameters and default thread factory.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "maximumPoolSize",
                            "comment_text": "the maximum number of threads to allow in the\n        pool",
                            "type": "int"
                        },
                        {
                            "name": "keepAliveTime",
                            "comment_text": "when the number of threads is greater than\n        the core, this is the maximum time that excess idle threads\n        will wait for new tasks before terminating.",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit for the {@code keepAliveTime} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        },
                        {
                            "name": "workQueue",
                            "comment_text": "the queue to use for holding tasks before they are\n        executed.  This queue will hold only the {@code Runnable}\n        tasks submitted by the {@code execute} method.",
                            "type": "java.util.concurrent.BlockingQueue"
                        },
                        {
                            "name": "handler",
                            "comment_text": "the handler to use when execution is blocked\n        because the thread bounds and queue capacities are reached",
                            "type": "java.util.concurrent.RejectedExecutionHandler"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ThreadPoolExecutor",
                    "comment_text": "Creates a new {@code ThreadPoolExecutor} with the given initial\n parameters.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "maximumPoolSize",
                            "comment_text": "the maximum number of threads to allow in the\n        pool",
                            "type": "int"
                        },
                        {
                            "name": "keepAliveTime",
                            "comment_text": "when the number of threads is greater than\n        the core, this is the maximum time that excess idle threads\n        will wait for new tasks before terminating.",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit for the {@code keepAliveTime} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        },
                        {
                            "name": "workQueue",
                            "comment_text": "the queue to use for holding tasks before they are\n        executed.  This queue will hold only the {@code Runnable}\n        tasks submitted by the {@code execute} method.",
                            "type": "java.util.concurrent.BlockingQueue"
                        },
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when the executor\n        creates a new thread",
                            "type": "java.util.concurrent.ThreadFactory"
                        },
                        {
                            "name": "handler",
                            "comment_text": "the handler to use when execution is blocked\n        because the thread bounds and queue capacities are reached",
                            "type": "java.util.concurrent.RejectedExecutionHandler"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "execute",
                    "comment_text": "Executes the given task sometime in the future.  The task\n may execute in a new thread or in an existing pooled thread.\n\n If the task cannot be submitted for execution, either because this\n executor has been shutdown or because its capacity has been reached,\n the task is handled by the current {@code RejectedExecutionHandler}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "the task to execute",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdown",
                    "comment_text": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n <p>This method does not wait for previously submitted tasks to\n complete execution.  Use {@link #awaitTermination awaitTermination}\n to do that.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdownNow",
                    "comment_text": "Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution. These tasks are drained (removed)\n from the task queue upon return from this method.\n\n <p>This method does not wait for actively executing tasks to\n terminate.  Use {@link #awaitTermination awaitTermination} to\n do that.\n\n <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n cancels tasks via {@link Thread#interrupt}, so any task that\n fails to respond to interrupts may never terminate.",
                    "return_type": "java.util.List",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isShutdown",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isTerminating",
                    "comment_text": "Returns true if this executor is in the process of terminating\n after {@link #shutdown} or {@link #shutdownNow} but has not\n completely terminated.  This method may be useful for\n debugging. A return of {@code true} reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, causing this executor not\n to properly terminate.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isTerminated",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitTermination",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "finalize",
                    "comment_text": "Invokes {@code shutdown} when this executor is no longer\n referenced and it has no threads.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setThreadFactory",
                    "comment_text": "Sets the thread factory used to create new threads.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "threadFactory",
                            "comment_text": "the new thread factory",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getThreadFactory",
                    "comment_text": "Returns the thread factory used to create new threads.",
                    "return_type": "java.util.concurrent.ThreadFactory",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRejectedExecutionHandler",
                    "comment_text": "Sets a new handler for unexecutable tasks.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "handler",
                            "comment_text": "the new handler",
                            "type": "java.util.concurrent.RejectedExecutionHandler"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRejectedExecutionHandler",
                    "comment_text": "Returns the current handler for unexecutable tasks.",
                    "return_type": "java.util.concurrent.RejectedExecutionHandler",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setCorePoolSize",
                    "comment_text": "Sets the core number of threads.  This overrides any value set\n in the constructor.  If the new value is smaller than the\n current value, excess existing threads will be terminated when\n they next become idle.  If larger, new threads will, if needed,\n be started to execute any queued tasks.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the new core size",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCorePoolSize",
                    "comment_text": "Returns the core number of threads.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "prestartCoreThread",
                    "comment_text": "Starts a core thread, causing it to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed. This method will return {@code false}\n if all core threads have already been started.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "prestartAllCoreThreads",
                    "comment_text": "Starts all core threads, causing them to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "allowsCoreThreadTimeOut",
                    "comment_text": "Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time, being\n replaced if needed when new tasks arrive. When true, the same\n keep-alive policy applying to non-core threads applies also to\n core threads. When false (the default), core threads are never\n terminated due to lack of incoming tasks.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "allowCoreThreadTimeOut",
                    "comment_text": "Sets the policy governing whether core threads may time out and\n terminate if no tasks arrive within the keep-alive time, being\n replaced if needed when new tasks arrive. When false, core\n threads are never terminated due to lack of incoming\n tasks. When true, the same keep-alive policy applying to\n non-core threads applies also to core threads. To avoid\n continual thread replacement, the keep-alive time must be\n greater than zero when setting {@code true}. This method\n should in general be called before the pool is actively used.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "{@code true} if should time out, else {@code false}",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setMaximumPoolSize",
                    "comment_text": "Sets the maximum allowed number of threads. This overrides any\n value set in the constructor. If the new value is smaller than\n the current value, excess existing threads will be\n terminated when they next become idle.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "maximumPoolSize",
                            "comment_text": "the new maximum",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getMaximumPoolSize",
                    "comment_text": "Returns the maximum allowed number of threads.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setKeepAliveTime",
                    "comment_text": "Sets the time limit for which threads may remain idle before\n being terminated.  If there are more than the core number of\n threads currently in the pool, after waiting this amount of\n time without processing a task, excess threads will be\n terminated.  This overrides any value set in the constructor.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "the time to wait.  A time value of zero will cause\n        excess threads to terminate immediately after executing tasks.",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the {@code time} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getKeepAliveTime",
                    "comment_text": "Returns the thread keep-alive time, which is the amount of time\n that threads in excess of the core pool size may remain\n idle before being terminated.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "unit",
                            "comment_text": "the desired time unit of the result",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueue",
                    "comment_text": "Returns the task queue used by this executor. Access to the\n task queue is intended primarily for debugging and monitoring.\n This queue may be in active use.  Retrieving the task queue\n does not prevent queued tasks from executing.",
                    "return_type": "java.util.concurrent.BlockingQueue",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not already\n started.\n\n <p> This method may be useful as one part of a cancellation\n scheme.  It may fail to remove tasks that have been converted\n into other forms before being placed on the internal queue. For\n example, a task entered using {@code submit} might be\n converted into a form that maintains {@code Future} status.\n However, in such cases, method {@link #purge} may be used to\n remove those Futures that have been cancelled.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to remove",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "purge",
                    "comment_text": "Tries to remove from the work queue all {@link Future}\n tasks that have been cancelled. This method can be useful as a\n storage reclamation operation, that has no other impact on\n functionality. Cancelled tasks are never executed, but may\n accumulate in work queues until worker threads can actively\n remove them. Invoking this method instead tries to remove them now.\n However, this method may fail to remove tasks in\n the presence of interference by other threads.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getPoolSize",
                    "comment_text": "Returns the current number of threads in the pool.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActiveCount",
                    "comment_text": "Returns the approximate number of threads that are actively\n executing tasks.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLargestPoolSize",
                    "comment_text": "Returns the largest number of threads that have ever\n simultaneously been in the pool.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getTaskCount",
                    "comment_text": "Returns the approximate total number of tasks that have ever been\n scheduled for execution. Because the states of tasks and\n threads may change dynamically during computation, the returned\n value is only an approximation.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCompletedTaskCount",
                    "comment_text": "Returns the approximate total number of tasks that have\n completed execution. Because the states of tasks and threads\n may change dynamically during computation, the returned value\n is only an approximation, but one that does not ever decrease\n across successive calls.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this pool, as well as its state,\n including indications of run state and estimated worker and\n task counts.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "beforeExecute",
                    "comment_text": "Method invoked prior to executing the given Runnable in the\n given thread.  This method is invoked by thread {@code t} that\n will execute task {@code r}, and may be used to re-initialize\n ThreadLocals, or to perform logging.\n\n <p>This implementation does nothing, but may be customized in\n subclasses. Note: To properly nest multiple overridings, subclasses\n should generally invoke {@code super.beforeExecute} at the end of\n this method.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "t",
                            "comment_text": "the thread that will run task {@code r}",
                            "type": "java.lang.Thread"
                        },
                        {
                            "name": "r",
                            "comment_text": "the task that will be executed",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "afterExecute",
                    "comment_text": "Method invoked upon completion of execution of the given Runnable.\n This method is invoked by the thread that executed the task. If\n non-null, the Throwable is the uncaught {@code RuntimeException}\n or {@code Error} that caused execution to terminate abruptly.\n\n <p>This implementation does nothing, but may be customized in\n subclasses. Note: To properly nest multiple overridings, subclasses\n should generally invoke {@code super.afterExecute} at the\n beginning of this method.\n\n <p><b>Note:</b> When actions are enclosed in tasks (such as\n {@link FutureTask}) either explicitly or via methods such as\n {@code submit}, these task objects catch and maintain\n computational exceptions, and so they do not cause abrupt\n termination, and the internal exceptions are <em>not</em>\n passed to this method. If you would like to trap both kinds of\n failures in this method, you can further probe for such cases,\n as in this sample subclass that prints either the direct cause\n or the underlying exception if a task has been aborted:\n\n  <pre> {@code\n class ExtendedExecutor extends ThreadPoolExecutor {\n   // ...\n   protected void afterExecute(Runnable r, Throwable t) {\n     super.afterExecute(r, t);\n     if (t == null && r instanceof Future<?>) {\n       try {\n         Object result = ((Future<?>) r).get();\n       } catch (CancellationException ce) {\n           t = ce;\n       } catch (ExecutionException ee) {\n           t = ee.getCause();\n       } catch (InterruptedException ie) {\n           Thread.currentThread().interrupt(); // ignore/reset\n       }\n     }\n     if (t != null)\n       System.out.println(t);\n   }\n }}</pre>",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "the runnable that has completed",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "t",
                            "comment_text": "the exception that caused termination, or null if\n execution completed normally",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "terminated",
                    "comment_text": "Method invoked when the Executor has terminated.  Default\n implementation does nothing. Note: To properly nest multiple\n overridings, subclasses should generally invoke\n {@code super.terminated} within this method.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy",
            "interfaces": [
                "java.util.concurrent.RejectedExecutionHandler"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A handler for rejected tasks that runs the rejected task\n directly in the calling thread of the {@code execute} method,\n unless the executor has been shut down, in which case the task\n is discarded.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ThreadPoolExecutor.CallerRunsPolicy",
                    "comment_text": "Creates a {@code CallerRunsPolicy}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "rejectedExecution",
                    "comment_text": "Executes task r in the caller's thread, unless the executor\n has been shut down, in which case the task is discarded.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "the runnable task requested to be executed",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "e",
                            "comment_text": "the executor attempting to execute this task",
                            "type": "java.util.concurrent.ThreadPoolExecutor"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadPoolExecutor.AbortPolicy",
            "interfaces": [
                "java.util.concurrent.RejectedExecutionHandler"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A handler for rejected tasks that throws a\n {@code RejectedExecutionException}.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ThreadPoolExecutor.AbortPolicy",
                    "comment_text": "Creates an {@code AbortPolicy}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "rejectedExecution",
                    "comment_text": "Always throws RejectedExecutionException.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "the runnable task requested to be executed",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "e",
                            "comment_text": "the executor attempting to execute this task",
                            "type": "java.util.concurrent.ThreadPoolExecutor"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadPoolExecutor.DiscardPolicy",
            "interfaces": [
                "java.util.concurrent.RejectedExecutionHandler"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A handler for rejected tasks that silently discards the\n rejected task.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ThreadPoolExecutor.DiscardPolicy",
                    "comment_text": "Creates a {@code DiscardPolicy}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "rejectedExecution",
                    "comment_text": "Does nothing, which has the effect of discarding task r.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "the runnable task requested to be executed",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "e",
                            "comment_text": "the executor attempting to execute this task",
                            "type": "java.util.concurrent.ThreadPoolExecutor"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy",
            "interfaces": [
                "java.util.concurrent.RejectedExecutionHandler"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A handler for rejected tasks that discards the oldest unhandled\n request and then retries {@code execute}, unless the executor\n is shut down, in which case the task is discarded.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ThreadPoolExecutor.DiscardOldestPolicy",
                    "comment_text": "Creates a {@code DiscardOldestPolicy} for the given executor.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "rejectedExecution",
                    "comment_text": "Obtains and ignores the next task that the executor\n would otherwise execute, if one is immediately available,\n and then retries execution of task r, unless the executor\n is shut down, in which case task r is instead discarded.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "the runnable task requested to be executed",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "e",
                            "comment_text": "the executor attempting to execute this task",
                            "type": "java.util.concurrent.ThreadPoolExecutor"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadLocalRandom",
            "interfaces": [

            ],
            "superclass": "java.util.Random",
            "comment_text": "A random number generator isolated to the current thread.  Like the\n global {@link java.util.Random} generator used by the {@link\n java.lang.Math} class, a {@code ThreadLocalRandom} is initialized\n with an internally generated seed that may not otherwise be\n modified. When applicable, use of {@code ThreadLocalRandom} rather\n than shared {@code Random} objects in concurrent programs will\n typically encounter much less overhead and contention.  Use of\n {@code ThreadLocalRandom} is particularly appropriate when multiple\n tasks (for example, each a {@link ForkJoinTask}) use random numbers\n in parallel in thread pools.\n\n <p>Usages of this class should typically be of the form:\n {@code ThreadLocalRandom.current().nextX(...)} (where\n {@code X} is {@code Int}, {@code Long}, etc).\n When all usages are of this form, it is never possible to\n accidently share a {@code ThreadLocalRandom} across multiple threads.\n\n <p>This class also provides additional commonly used bounded random\n generation methods.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "current",
                    "comment_text": "Returns the current thread's {@code ThreadLocalRandom}.",
                    "return_type": "java.util.concurrent.ThreadLocalRandom",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setSeed",
                    "comment_text": "Throws {@code UnsupportedOperationException}.  Setting seeds in\n this generator is not supported.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "seed",
                            "comment_text": "",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "next",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "bits",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextInt",
                    "comment_text": "Returns a pseudorandom, uniformly distributed value between the\n given least value (inclusive) and bound (exclusive).",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "least",
                            "comment_text": "the least value returned",
                            "type": "int"
                        },
                        {
                            "name": "bound",
                            "comment_text": "the upper bound (exclusive)",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextLong",
                    "comment_text": "Returns a pseudorandom, uniformly distributed value\n between 0 (inclusive) and the specified value (exclusive).",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the bound on the random number to be returned.  Must be\n        positive.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextLong",
                    "comment_text": "Returns a pseudorandom, uniformly distributed value between the\n given least value (inclusive) and bound (exclusive).",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "least",
                            "comment_text": "the least value returned",
                            "type": "long"
                        },
                        {
                            "name": "bound",
                            "comment_text": "the upper bound (exclusive)",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextDouble",
                    "comment_text": "Returns a pseudorandom, uniformly distributed {@code double} value\n between 0 (inclusive) and the specified value (exclusive).",
                    "return_type": "double",
                    "parameters": [
                        {
                            "name": "n",
                            "comment_text": "the bound on the random number to be returned.  Must be\n        positive.",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "nextDouble",
                    "comment_text": "Returns a pseudorandom, uniformly distributed value between the\n given least value (inclusive) and bound (exclusive).",
                    "return_type": "double",
                    "parameters": [
                        {
                            "name": "least",
                            "comment_text": "the least value returned",
                            "type": "double"
                        },
                        {
                            "name": "bound",
                            "comment_text": "the upper bound (exclusive)",
                            "type": "double"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ThreadFactory",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "An object that creates new threads on demand.  Using thread factories\n removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},\n enabling applications to use special thread subclasses, priorities, etc.\n\n <p>\n The simplest implementation of this interface is just:\n <pre>\n class SimpleThreadFactory implements ThreadFactory {\n   public Thread newThread(Runnable r) {\n     return new Thread(r);\n   }\n }\n </pre>\n\n The {@link Executors#defaultThreadFactory} method provides a more\n useful simple implementation, that sets the created thread context\n to known values before returning it.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newThread",
                    "comment_text": "Constructs a new {@code Thread}.  Implementations may also initialize\n priority, name, daemon status, {@code ThreadGroup}, etc.",
                    "return_type": "java.lang.Thread",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "a runnable to be executed by new thread instance",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.SynchronousQueue",
            "interfaces": [
                "java.util.concurrent.BlockingQueue",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "A {@linkplain BlockingQueue blocking queue} in which each insert\n operation must wait for a corresponding remove operation by another\n thread, and vice versa.  A synchronous queue does not have any\n internal capacity, not even a capacity of one.  You cannot\n <tt>peek</tt> at a synchronous queue because an element is only\n present when you try to remove it; you cannot insert an element\n (using any method) unless another thread is trying to remove it;\n you cannot iterate as there is nothing to iterate.  The\n <em>head</em> of the queue is the element that the first queued\n inserting thread is trying to add to the queue; if there is no such\n queued thread then no element is available for removal and\n <tt>poll()</tt> will return <tt>null</tt>.  For purposes of other\n <tt>Collection</tt> methods (for example <tt>contains</tt>), a\n <tt>SynchronousQueue</tt> acts as an empty collection.  This queue\n does not permit <tt>null</tt> elements.\n\n <p>Synchronous queues are similar to rendezvous channels used in\n CSP and Ada. They are well suited for handoff designs, in which an\n object running in one thread must sync up with an object running\n in another thread in order to hand it some information, event, or\n task.\n\n <p> This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to <tt>true</tt> grants threads access in FIFO order.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "SynchronousQueue",
                    "comment_text": "Creates a <tt>SynchronousQueue</tt> with nonfair access policy.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "SynchronousQueue",
                    "comment_text": "Creates a <tt>SynchronousQueue</tt> with the specified fairness policy.",
                    "parameters": [
                        {
                            "name": "fair",
                            "comment_text": "if true, waiting threads contend in FIFO order for\n        access; otherwise the order is unspecified.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "put",
                    "comment_text": "Adds the specified element to this queue, waiting if necessary for\n another thread to receive it.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this queue, waiting if necessary\n up to the specified wait time for another thread to receive it.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this queue, if another thread is\n waiting to receive it.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "Retrieves and removes the head of this queue, waiting if necessary\n for another thread to insert it.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of this queue, waiting\n if necessary up to the specified wait time, for another thread\n to insert it.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of this queue, if another thread\n is currently making an element available.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Always returns <tt>true</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Always returns zero.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Always returns zero.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Does nothing.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the element",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the element to remove",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns <tt>false</tt> unless the given collection is empty.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Always returns <tt>false</tt>.\n A <tt>SynchronousQueue</tt> has no internal capacity.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Always returns <tt>null</tt>.\n A <tt>SynchronousQueue</tt> does not return elements\n unless actively waited on.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an empty iterator in which <tt>hasNext</tt> always returns\n <tt>false</tt>.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns a zero-length array.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Sets the zeroeth element of the specified array to <tt>null</tt>\n (if the array has non-zero length) and returns it.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.Semaphore",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A counting semaphore.  Conceptually, a semaphore maintains a set of\n permits.  Each {@link #acquire} blocks if necessary until a permit is\n available, and then takes it.  Each {@link #release} adds a permit,\n potentially releasing a blocking acquirer.\n However, no actual permit objects are used; the {@code Semaphore} just\n keeps a count of the number available and acts accordingly.\n\n <p>Semaphores are often used to restrict the number of threads than can\n access some (physical or logical) resource. For example, here is\n a class that uses a semaphore to control access to a pool of items:\n <pre>\n class Pool {\n   private static final int MAX_AVAILABLE = 100;\n   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);\n\n   public Object getItem() throws InterruptedException {\n     available.acquire();\n     return getNextAvailableItem();\n   }\n\n   public void putItem(Object x) {\n     if (markAsUnused(x))\n       available.release();\n   }\n\n   // Not a particularly efficient data structure; just for demo\n\n   protected Object[] items = ... whatever kinds of items being managed\n   protected boolean[] used = new boolean[MAX_AVAILABLE];\n\n   protected synchronized Object getNextAvailableItem() {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (!used[i]) {\n          used[i] = true;\n          return items[i];\n       }\n     }\n     return null; // not reached\n   }\n\n   protected synchronized boolean markAsUnused(Object item) {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (item == items[i]) {\n          if (used[i]) {\n            used[i] = false;\n            return true;\n          } else\n            return false;\n       }\n     }\n     return false;\n   }\n\n }\n </pre>\n\n <p>Before obtaining an item each thread must acquire a permit from\n the semaphore, guaranteeing that an item is available for use. When\n the thread has finished with the item it is returned back to the\n pool and a permit is returned to the semaphore, allowing another\n thread to acquire that item.  Note that no synchronization lock is\n held when {@link #acquire} is called as that would prevent an item\n from being returned to the pool.  The semaphore encapsulates the\n synchronization needed to restrict access to the pool, separately\n from any synchronization needed to maintain the consistency of the\n pool itself.\n\n <p>A semaphore initialized to one, and which is used such that it\n only has at most one permit available, can serve as a mutual\n exclusion lock.  This is more commonly known as a <em>binary\n semaphore</em>, because it only has two states: one permit\n available, or zero permits available.  When used in this way, the\n binary semaphore has the property (unlike many {@link Lock}\n implementations), that the &quot;lock&quot; can be released by a\n thread other than the owner (as semaphores have no notion of\n ownership).  This can be useful in some specialized contexts, such\n as deadlock recovery.\n\n <p> The constructor for this class optionally accepts a\n <em>fairness</em> parameter. When set false, this class makes no\n guarantees about the order in which threads acquire permits. In\n particular, <em>barging</em> is permitted, that is, a thread\n invoking {@link #acquire} can be allocated a permit ahead of a\n thread that has been waiting - logically the new thread places itself at\n the head of the queue of waiting threads. When fairness is set true, the\n semaphore guarantees that threads invoking any of the {@link\n #acquire() acquire} methods are selected to obtain permits in the order in\n which their invocation of those methods was processed\n (first-in-first-out; FIFO). Note that FIFO ordering necessarily\n applies to specific internal points of execution within these\n methods.  So, it is possible for one thread to invoke\n {@code acquire} before another, but reach the ordering point after\n the other, and similarly upon return from the method.\n Also note that the untimed {@link #tryAcquire() tryAcquire} methods do not\n honor the fairness setting, but will take any permits that are\n available.\n\n <p>Generally, semaphores used to control resource access should be\n initialized as fair, to ensure that no thread is starved out from\n accessing a resource. When using semaphores for other kinds of\n synchronization control, the throughput advantages of non-fair\n ordering often outweigh fairness considerations.\n\n <p>This class also provides convenience methods to {@link\n #acquire(int) acquire} and {@link #release(int) release} multiple\n permits at a time.  Beware of the increased risk of indefinite\n postponement when these methods are used without fairness set true.\n\n <p>Memory consistency effects: Actions in a thread prior to calling\n a \"release\" method such as {@code release()}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions following a successful \"acquire\" method such as {@code acquire()}\n in another thread.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Semaphore",
                    "comment_text": "Creates a {@code Semaphore} with the given number of\n permits and nonfair fairness setting.",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the initial number of permits available.\n        This value may be negative, in which case releases\n        must occur before any acquires will be granted.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Semaphore",
                    "comment_text": "Creates a {@code Semaphore} with the given number of\n permits and the given fairness setting.",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the initial number of permits available.\n        This value may be negative, in which case releases\n        must occur before any acquires will be granted.",
                            "type": "int"
                        },
                        {
                            "name": "fair",
                            "comment_text": "{@code true} if this semaphore will guarantee\n        first-in first-out granting of permits under contention,\n        else {@code false}",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "acquire",
                    "comment_text": "Acquires a permit from this semaphore, blocking until one is\n available, or the thread is {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n <p>If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n <ul>\n <li>Some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for a permit,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "acquireUninterruptibly",
                    "comment_text": "Acquires a permit from this semaphore, blocking until one is\n available.\n\n <p>Acquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n <p>If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit.\n\n <p>If the current thread is {@linkplain Thread#interrupt interrupted}\n while waiting for a permit then it will continue to wait, but the\n time at which the thread is assigned a permit may change compared to\n the time it would have received the permit had no interruption\n occurred.  When the thread does return from this method its interrupt\n status will be set.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquire",
                    "comment_text": "Acquires a permit from this semaphore, only if one is available at the\n time of invocation.\n\n <p>Acquires a permit, if one is available and returns immediately,\n with the value {@code true},\n reducing the number of available permits by one.\n\n <p>If no permit is available then this method will return\n immediately with the value {@code false}.\n\n <p>Even when this semaphore has been set to use a\n fair ordering policy, a call to {@code tryAcquire()} <em>will</em>\n immediately acquire a permit if one is available, whether or not\n other threads are currently waiting.\n This &quot;barging&quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting, then use\n {@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquire",
                    "comment_text": "Acquires a permit from this semaphore, if one becomes available\n within the given waiting time and the current thread has not\n been {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires a permit, if one is available and returns immediately,\n with the value {@code true},\n reducing the number of available permits by one.\n\n <p>If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of three things happens:\n <ul>\n <li>Some other thread invokes the {@link #release} method for this\n semaphore and the current thread is next to be assigned a permit; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n\n <p>If a permit is acquired then the value {@code true} is returned.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n to acquire a permit,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait for a permit",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the {@code timeout} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "release",
                    "comment_text": "Releases a permit, returning it to the semaphore.\n\n <p>Releases a permit, increasing the number of available permits by\n one.  If any threads are trying to acquire a permit, then one is\n selected and given the permit that was just released.  That thread\n is (re)enabled for thread scheduling purposes.\n\n <p>There is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link #acquire}.\n Correct usage of a semaphore is established by programming convention\n in the application.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquire",
                    "comment_text": "Acquires the given number of permits from this semaphore,\n blocking until all are available,\n or the thread is {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount.\n\n <p>If insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n <ul>\n <li>Some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for a permit,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n Any permits that were to be assigned to this thread are instead\n assigned to other threads trying to acquire permits, as if\n permits had been made available by a call to {@link #release()}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the number of permits to acquire",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "acquireUninterruptibly",
                    "comment_text": "Acquires the given number of permits from this semaphore,\n blocking until all are available.\n\n <p>Acquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount.\n\n <p>If insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request.\n\n <p>If the current thread is {@linkplain Thread#interrupt interrupted}\n while waiting for permits then it will continue to wait and its\n position in the queue is not affected.  When the thread does return\n from this method its interrupt status will be set.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the number of permits to acquire",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquire",
                    "comment_text": "Acquires the given number of permits from this semaphore, only\n if all are available at the time of invocation.\n\n <p>Acquires the given number of permits, if they are available, and\n returns immediately, with the value {@code true},\n reducing the number of available permits by the given amount.\n\n <p>If insufficient permits are available then this method will return\n immediately with the value {@code false} and the number of available\n permits is unchanged.\n\n <p>Even when this semaphore has been set to use a fair ordering\n policy, a call to {@code tryAcquire} <em>will</em>\n immediately acquire a permit if one is available, whether or\n not other threads are currently waiting.  This\n &quot;barging&quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to\n honor the fairness setting, then use {@link #tryAcquire(int,\n long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the number of permits to acquire",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquire",
                    "comment_text": "Acquires the given number of permits from this semaphore, if all\n become available within the given waiting time and the current\n thread has not been {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the given number of permits, if they are available and\n returns immediately, with the value {@code true},\n reducing the number of available permits by the given amount.\n\n <p>If insufficient permits are available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n <ul>\n <li>Some other thread invokes one of the {@link #release() release}\n methods for this semaphore, the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n\n <p>If the permits are acquired then the value {@code true} is returned.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n to acquire the permits,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n Any permits that were to be assigned to this thread, are instead\n assigned to other threads trying to acquire permits, as if\n the permits had been made available by a call to {@link #release()}.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.  Any permits that were to be assigned to this\n thread, are instead assigned to other threads trying to acquire\n permits, as if the permits had been made available by a call to\n {@link #release()}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the number of permits to acquire",
                            "type": "int"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait for the permits",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the {@code timeout} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "release",
                    "comment_text": "Releases the given number of permits, returning them to the semaphore.\n\n <p>Releases the given number of permits, increasing the number of\n available permits by that amount.\n If any threads are trying to acquire permits, then one\n is selected and given the permits that were just released.\n If the number of available permits satisfies that thread's request\n then that thread is (re)enabled for thread scheduling purposes;\n otherwise the thread will wait until sufficient permits are available.\n If there are still permits available\n after this thread's request has been satisfied, then those permits\n are assigned in turn to other threads trying to acquire permits.\n\n <p>There is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link Semaphore#acquire acquire}.\n Correct usage of a semaphore is established by programming convention\n in the application.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "permits",
                            "comment_text": "the number of permits to release",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "availablePermits",
                    "comment_text": "Returns the current number of permits available in this semaphore.\n\n <p>This method is typically used for debugging and testing purposes.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainPermits",
                    "comment_text": "Acquires and returns all permits that are immediately available.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reducePermits",
                    "comment_text": "Shrinks the number of available permits by the indicated\n reduction. This method can be useful in subclasses that use\n semaphores to track resources that become unavailable. This\n method differs from {@code acquire} in that it does not block\n waiting for permits to become available.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "reduction",
                            "comment_text": "the number of permits to remove",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isFair",
                    "comment_text": "Returns {@code true} if this semaphore has fairness set true.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThreads",
                    "comment_text": "Queries whether any threads are waiting to acquire. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire.  This method is designed primarily for use in\n monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting to acquire.\n The value is only an estimate because the number of threads may\n change dynamically while this method traverses internal data\n structures.  This method is designed for use in monitoring of the\n system state, not for synchronization control.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to acquire.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a best-effort\n estimate.  The elements of the returned collection are in no particular\n order.  This method is designed to facilitate construction of\n subclasses that provide more extensive monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this semaphore, as well as its state.\n The state, in brackets, includes the String {@code \"Permits =\"}\n followed by the number of permits.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
            "interfaces": [
                "java.util.concurrent.ScheduledExecutorService"
            ],
            "superclass": "java.util.concurrent.ThreadPoolExecutor",
            "comment_text": "A {@link ThreadPoolExecutor} that can additionally schedule\n commands to run after a given delay, or to execute\n periodically. This class is preferable to {@link java.util.Timer}\n when multiple worker threads are needed, or when the additional\n flexibility or capabilities of {@link ThreadPoolExecutor} (which\n this class extends) are required.\n\n <p>Delayed tasks execute no sooner than they are enabled, but\n without any real-time guarantees about when, after they are\n enabled, they will commence. Tasks scheduled for exactly the same\n execution time are enabled in first-in-first-out (FIFO) order of\n submission.\n\n <p>When a submitted task is cancelled before it is run, execution\n is suppressed. By default, such a cancelled task is not\n automatically removed from the work queue until its delay\n elapses. While this enables further inspection and monitoring, it\n may also cause unbounded retention of cancelled tasks. To avoid\n this, set {@link #setRemoveOnCancelPolicy} to {@code true}, which\n causes tasks to be immediately removed from the work queue at\n time of cancellation.\n\n <p>Successive executions of a task scheduled via\n {@code scheduleAtFixedRate} or\n {@code scheduleWithFixedDelay} do not overlap. While different\n executions may be performed by different threads, the effects of\n prior executions <a\n href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n those of subsequent ones.\n\n <p>While this class inherits from {@link ThreadPoolExecutor}, a few\n of the inherited tuning methods are not useful for it. In\n particular, because it acts as a fixed-sized pool using\n {@code corePoolSize} threads and an unbounded queue, adjustments\n to {@code maximumPoolSize} have no useful effect. Additionally, it\n is almost never a good idea to set {@code corePoolSize} to zero or\n use {@code allowCoreThreadTimeOut} because this may leave the pool\n without threads to handle tasks once they become eligible to run.\n\n <p><b>Extension notes:</b> This class overrides the\n {@link ThreadPoolExecutor#execute execute} and\n {@link AbstractExecutorService#submit(Runnable) submit}\n methods to generate internal {@link ScheduledFuture} objects to\n control per-task delays and scheduling.  To preserve\n functionality, any further overrides of these methods in\n subclasses must invoke superclass versions, which effectively\n disables additional task customization.  However, this class\n provides alternative protected extension method\n {@code decorateTask} (one version each for {@code Runnable} and\n {@code Callable}) that can be used to customize the concrete task\n types used to execute commands entered via {@code execute},\n {@code submit}, {@code schedule}, {@code scheduleAtFixedRate},\n and {@code scheduleWithFixedDelay}.  By default, a\n {@code ScheduledThreadPoolExecutor} uses a task type extending\n {@link FutureTask}. However, this may be modified or replaced using\n subclasses of the form:\n\n  <pre> {@code\n public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {\n\n   static class CustomTask<V> implements RunnableScheduledFuture<V> { ... }\n\n   protected <V> RunnableScheduledFuture<V> decorateTask(\n                Runnable r, RunnableScheduledFuture<V> task) {\n       return new CustomTask<V>(r, task);\n   }\n\n   protected <V> RunnableScheduledFuture<V> decorateTask(\n                Callable<V> c, RunnableScheduledFuture<V> task) {\n       return new CustomTask<V>(c, task);\n   }\n   // ... add constructors, etc.\n }}</pre>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ScheduledThreadPoolExecutor",
                    "comment_text": "Creates a new {@code ScheduledThreadPoolExecutor} with the\n given core pool size.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ScheduledThreadPoolExecutor",
                    "comment_text": "Creates a new {@code ScheduledThreadPoolExecutor} with the\n given initial parameters.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when the executor\n        creates a new thread",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ScheduledThreadPoolExecutor",
                    "comment_text": "Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "handler",
                            "comment_text": "the handler to use when execution is blocked\n        because the thread bounds and queue capacities are reached",
                            "type": "java.util.concurrent.RejectedExecutionHandler"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ScheduledThreadPoolExecutor",
                    "comment_text": "Creates a new ScheduledThreadPoolExecutor with the given\n initial parameters.",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool, even\n        if they are idle, unless {@code allowCoreThreadTimeOut} is set",
                            "type": "int"
                        },
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when the executor\n        creates a new thread",
                            "type": "java.util.concurrent.ThreadFactory"
                        },
                        {
                            "name": "handler",
                            "comment_text": "the handler to use when execution is blocked\n        because the thread bounds and queue capacities are reached",
                            "type": "java.util.concurrent.RejectedExecutionHandler"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "decorateTask",
                    "comment_text": "Modifies or replaces the task used to execute a runnable.\n This method can be used to override the concrete\n class used for managing internal tasks.\n The default implementation simply returns the given task.",
                    "return_type": "java.util.concurrent.RunnableScheduledFuture",
                    "parameters": [
                        {
                            "name": "runnable",
                            "comment_text": "the submitted Runnable",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "task",
                            "comment_text": "the task created to execute the runnable",
                            "type": "java.util.concurrent.RunnableScheduledFuture"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decorateTask",
                    "comment_text": "Modifies or replaces the task used to execute a callable.\n This method can be used to override the concrete\n class used for managing internal tasks.\n The default implementation simply returns the given task.",
                    "return_type": "java.util.concurrent.RunnableScheduledFuture",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the submitted Callable",
                            "type": "java.util.concurrent.Callable"
                        },
                        {
                            "name": "task",
                            "comment_text": "the task created to execute the callable",
                            "type": "java.util.concurrent.RunnableScheduledFuture"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "schedule",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "delay",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "schedule",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "",
                            "type": "java.util.concurrent.Callable"
                        },
                        {
                            "name": "delay",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduleAtFixedRate",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "initialDelay",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "period",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduleWithFixedDelay",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "initialDelay",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "delay",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "execute",
                    "comment_text": "Executes {@code command} with zero required delay.\n This has effect equivalent to\n {@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}.\n Note that inspections of the queue and of the list returned by\n {@code shutdownNow} will access the zero-delayed\n {@link ScheduledFuture}, not the {@code command} itself.\n\n <p>A consequence of the use of {@code ScheduledFuture} objects is\n that {@link ThreadPoolExecutor#afterExecute afterExecute} is always\n called with a null second {@code Throwable} argument, even if the\n {@code command} terminated abruptly.  Instead, the {@code Throwable}\n thrown by such a task can be obtained via {@link Future#get}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setContinueExistingPeriodicTasksAfterShutdownPolicy",
                    "comment_text": "Sets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow} or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code false}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "if {@code true}, continue after shutdown, else don't.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getContinueExistingPeriodicTasksAfterShutdownPolicy",
                    "comment_text": "Gets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow} or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code false}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setExecuteExistingDelayedTasksAfterShutdownPolicy",
                    "comment_text": "Sets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow}, or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code true}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "if {@code true}, execute after shutdown, else don't.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExecuteExistingDelayedTasksAfterShutdownPolicy",
                    "comment_text": "Gets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow}, or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code true}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRemoveOnCancelPolicy",
                    "comment_text": "Sets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default {@code false}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "if {@code true}, remove on cancellation, else don't",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRemoveOnCancelPolicy",
                    "comment_text": "Gets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default {@code false}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdown",
                    "comment_text": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n <p>This method does not wait for previously submitted tasks to\n complete execution.  Use {@link #awaitTermination awaitTermination}\n to do that.\n\n <p>If the {@code ExecuteExistingDelayedTasksAfterShutdownPolicy}\n has been set {@code false}, existing delayed tasks whose delays\n have not yet elapsed are cancelled.  And unless the {@code\n ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set\n {@code true}, future executions of existing periodic tasks will\n be cancelled.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdownNow",
                    "comment_text": "Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution.\n\n <p>This method does not wait for actively executing tasks to\n terminate.  Use {@link #awaitTermination awaitTermination} to\n do that.\n\n <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n cancels tasks via {@link Thread#interrupt}, so any task that\n fails to respond to interrupts may never terminate.",
                    "return_type": "java.util.List",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueue",
                    "comment_text": "Returns the task queue used by this executor.  Each element of\n this queue is a {@link ScheduledFuture}, including those\n tasks submitted using {@code execute} which are for scheduling\n purposes used as the basis of a zero-delay\n {@code ScheduledFuture}.  Iteration over this queue is\n <em>not</em> guaranteed to traverse tasks in the order in\n which they will execute.",
                    "return_type": "java.util.concurrent.BlockingQueue",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ScheduledFuture",
            "interfaces": [
                "java.util.concurrent.Delayed",
                "java.util.concurrent.Future"
            ],
            "superclass": "",
            "comment_text": "A delayed result-bearing action that can be cancelled.\n Usually a scheduled future is the result of scheduling\n a task with a {@link ScheduledExecutorService}.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.concurrent.ScheduledExecutorService",
            "interfaces": [
                "java.util.concurrent.ExecutorService"
            ],
            "superclass": "",
            "comment_text": "An {@link ExecutorService} that can schedule commands to run after a given\n delay, or to execute periodically.\n\n <p> The <tt>schedule</tt> methods create tasks with various delays\n and return a task object that can be used to cancel or check\n execution. The <tt>scheduleAtFixedRate</tt> and\n <tt>scheduleWithFixedDelay</tt> methods create and execute tasks\n that run periodically until cancelled.\n\n <p> Commands submitted using the {@link Executor#execute} and\n {@link ExecutorService} <tt>submit</tt> methods are scheduled with\n a requested delay of zero. Zero and negative delays (but not\n periods) are also allowed in <tt>schedule</tt> methods, and are\n treated as requests for immediate execution.\n\n <p>All <tt>schedule</tt> methods accept <em>relative</em> delays and\n periods as arguments, not absolute times or dates. It is a simple\n matter to transform an absolute time represented as a {@link\n java.util.Date} to the required form. For example, to schedule at\n a certain future <tt>date</tt>, you can use: <tt>schedule(task,\n date.getTime() - System.currentTimeMillis(),\n TimeUnit.MILLISECONDS)</tt>. Beware however that expiration of a\n relative delay need not coincide with the current <tt>Date</tt> at\n which the task is enabled due to network time synchronization\n protocols, clock drift, or other factors.\n\n The {@link Executors} class provides convenient factory methods for\n the ScheduledExecutorService implementations provided in this package.\n\n <h3>Usage Example</h3>\n\n Here is a class with a method that sets up a ScheduledExecutorService\n to beep every ten seconds for an hour:\n\n  <pre> {@code\n import static java.util.concurrent.TimeUnit.*;\n class BeeperControl {\n   private final ScheduledExecutorService scheduler =\n     Executors.newScheduledThreadPool(1);\n\n   public void beepForAnHour() {\n     final Runnable beeper = new Runnable() {\n       public void run() { System.out.println(\"beep\"); }\n     };\n     final ScheduledFuture<?> beeperHandle =\n       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n     scheduler.schedule(new Runnable() {\n       public void run() { beeperHandle.cancel(true); }\n     }, 60 * 60, SECONDS);\n   }\n }}</pre>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "schedule",
                    "comment_text": "Creates and executes a one-shot action that becomes enabled\n after the given delay.",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "the task to execute",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "delay",
                            "comment_text": "the time from now to delay execution",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the delay parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "schedule",
                    "comment_text": "Creates and executes a ScheduledFuture that becomes enabled after the\n given delay.",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the function to execute",
                            "type": "java.util.concurrent.Callable"
                        },
                        {
                            "name": "delay",
                            "comment_text": "the time from now to delay execution",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the delay parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduleAtFixedRate",
                    "comment_text": "Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the given\n period; that is executions will commence after\n <tt>initialDelay</tt> then <tt>initialDelay+period</tt>, then\n <tt>initialDelay + 2 * period</tt>, and so on.\n If any execution of the task\n encounters an exception, subsequent executions are suppressed.\n Otherwise, the task will only terminate via cancellation or\n termination of the executor.  If any execution of this task\n takes longer than its period, then subsequent executions\n may start late, but will not concurrently execute.",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "the task to execute",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "initialDelay",
                            "comment_text": "the time to delay first execution",
                            "type": "long"
                        },
                        {
                            "name": "period",
                            "comment_text": "the period between successive executions",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the initialDelay and period parameters",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "scheduleWithFixedDelay",
                    "comment_text": "Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the\n given delay between the termination of one execution and the\n commencement of the next.  If any execution of the task\n encounters an exception, subsequent executions are suppressed.\n Otherwise, the task will only terminate via cancellation or\n termination of the executor.",
                    "return_type": "java.util.concurrent.ScheduledFuture",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "the task to execute",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "initialDelay",
                            "comment_text": "the time to delay first execution",
                            "type": "long"
                        },
                        {
                            "name": "delay",
                            "comment_text": "the delay between the termination of one\n execution and the commencement of the next",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the initialDelay and delay parameters",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.RunnableScheduledFuture",
            "interfaces": [
                "java.util.concurrent.RunnableFuture",
                "java.util.concurrent.ScheduledFuture"
            ],
            "superclass": "",
            "comment_text": "A {@link ScheduledFuture} that is {@link Runnable}. Successful\n execution of the <tt>run</tt> method causes completion of the\n <tt>Future</tt> and allows access to its results.",
            "since": "1.6",
            "see": [
                "java.util.concurrent.FutureTask",
                "java.util.concurrent.Executor"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "isPeriodic",
                    "comment_text": "Returns true if this is a periodic task. A periodic task may\n re-run according to some schedule. A non-periodic task can be\n run only once.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.RunnableFuture",
            "interfaces": [
                "java.lang.Runnable",
                "java.util.concurrent.Future"
            ],
            "superclass": "",
            "comment_text": "A {@link Future} that is {@link Runnable}. Successful execution of\n the <tt>run</tt> method causes completion of the <tt>Future</tt>\n and allows access to its results.",
            "since": "1.6",
            "see": [
                "java.util.concurrent.FutureTask",
                "java.util.concurrent.Executor"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "run",
                    "comment_text": "Sets this Future to the result of its computation\n unless it has been cancelled.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.RejectedExecutionHandler",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "rejectedExecution",
                    "comment_text": "Method that may be invoked by a {@link ThreadPoolExecutor} when\n {@link ThreadPoolExecutor#execute execute} cannot accept a\n task.  This may occur when no more threads or queue slots are\n available because their bounds would be exceeded, or upon\n shutdown of the Executor.\n\n <p>In the absence of other alternatives, the method may throw\n an unchecked {@link RejectedExecutionException}, which will be\n propagated to the caller of {@code execute}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "r",
                            "comment_text": "the runnable task requested to be executed",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "executor",
                            "comment_text": "the executor attempting to execute this task",
                            "type": "java.util.concurrent.ThreadPoolExecutor"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.RejectedExecutionException",
            "interfaces": [

            ],
            "superclass": "java.lang.RuntimeException",
            "comment_text": "Exception thrown by an {@link Executor} when a task cannot be\n accepted for execution.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "RejectedExecutionException",
                    "comment_text": "Constructs a <tt>RejectedExecutionException</tt> with no detail message.\n The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause(Throwable) initCause}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "RejectedExecutionException",
                    "comment_text": "Constructs a <tt>RejectedExecutionException</tt> with the\n specified detail message. The cause is not initialized, and may\n subsequently be initialized by a call to {@link\n #initCause(Throwable) initCause}.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "RejectedExecutionException",
                    "comment_text": "Constructs a <tt>RejectedExecutionException</tt> with the\n specified detail message and cause.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link #getCause()} method)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "RejectedExecutionException",
                    "comment_text": "Constructs a <tt>RejectedExecutionException</tt> with the\n specified cause.  The detail message is set to: <pre> (cause ==\n null ? null : cause.toString())</pre> (which typically contains\n the class and detail message of <tt>cause</tt>).",
                    "parameters": [
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link #getCause()} method)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.concurrent.RecursiveTask",
            "interfaces": [

            ],
            "superclass": "java.util.concurrent.ForkJoinTask",
            "comment_text": "A recursive result-bearing {@link ForkJoinTask}.\n\n <p>For a classic example, here is a task computing Fibonacci numbers:\n\n  <pre> {@code\n class Fibonacci extends RecursiveTask<Integer> {\n   final int n;\n   Fibonacci(int n) { this.n = n; }\n   Integer compute() {\n     if (n <= 1)\n        return n;\n     Fibonacci f1 = new Fibonacci(n - 1);\n     f1.fork();\n     Fibonacci f2 = new Fibonacci(n - 2);\n     return f2.compute() + f1.join();\n   }\n }}</pre>\n\n However, besides being a dumb way to compute Fibonacci functions\n (there is a simple fast linear algorithm that you'd use in\n practice), this is likely to perform poorly because the smallest\n subtasks are too small to be worthwhile splitting up. Instead, as\n is the case for nearly all fork/join applications, you'd pick some\n minimum granularity size (for example 10 here) for which you always\n sequentially solve rather than subdividing.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "RecursiveTask",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "compute",
                    "comment_text": "The main computation performed by this task.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRawResult",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRawResult",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exec",
                    "comment_text": "Implements execution conventions for RecursiveTask.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.RecursiveAction",
            "interfaces": [

            ],
            "superclass": "java.util.concurrent.ForkJoinTask",
            "comment_text": "A recursive resultless {@link ForkJoinTask}.  This class\n establishes conventions to parameterize resultless actions as\n {@code Void} {@code ForkJoinTask}s. Because {@code null} is the\n only valid value of type {@code Void}, methods such as join always\n return {@code null} upon completion.\n\n <p><b>Sample Usages.</b> Here is a sketch of a ForkJoin sort that\n sorts a given {@code long[]} array:\n\n  <pre> {@code\n class SortTask extends RecursiveAction {\n   final long[] array; final int lo; final int hi;\n   SortTask(long[] array, int lo, int hi) {\n     this.array = array; this.lo = lo; this.hi = hi;\n   }\n   protected void compute() {\n     if (hi - lo < THRESHOLD)\n       sequentiallySort(array, lo, hi);\n     else {\n       int mid = (lo + hi) >>> 1;\n       invokeAll(new SortTask(array, lo, mid),\n                 new SortTask(array, mid, hi));\n       merge(array, lo, hi);\n     }\n   }\n }}</pre>\n\n You could then sort {@code anArray} by creating {@code new\n SortTask(anArray, 0, anArray.length-1) } and invoking it in a\n ForkJoinPool.  As a more concrete simple example, the following\n task increments each element of an array:\n  <pre> {@code\n class IncrementTask extends RecursiveAction {\n   final long[] array; final int lo; final int hi;\n   IncrementTask(long[] array, int lo, int hi) {\n     this.array = array; this.lo = lo; this.hi = hi;\n   }\n   protected void compute() {\n     if (hi - lo < THRESHOLD) {\n       for (int i = lo; i < hi; ++i)\n         array[i]++;\n     }\n     else {\n       int mid = (lo + hi) >>> 1;\n       invokeAll(new IncrementTask(array, lo, mid),\n                 new IncrementTask(array, mid, hi));\n     }\n   }\n }}</pre>\n\n <p>The following example illustrates some refinements and idioms\n that may lead to better performance: RecursiveActions need not be\n fully recursive, so long as they maintain the basic\n divide-and-conquer approach. Here is a class that sums the squares\n of each element of a double array, by subdividing out only the\n right-hand-sides of repeated divisions by two, and keeping track of\n them with a chain of {@code next} references. It uses a dynamic\n threshold based on method {@code getSurplusQueuedTaskCount}, but\n counterbalances potential excess partitioning by directly\n performing leaf actions on unstolen tasks rather than further\n subdividing.\n\n  <pre> {@code\n double sumOfSquares(ForkJoinPool pool, double[] array) {\n   int n = array.length;\n   Applyer a = new Applyer(array, 0, n, null);\n   pool.invoke(a);\n   return a.result;\n }\n\n class Applyer extends RecursiveAction {\n   final double[] array;\n   final int lo, hi;\n   double result;\n   Applyer next; // keeps track of right-hand-side tasks\n   Applyer(double[] array, int lo, int hi, Applyer next) {\n     this.array = array; this.lo = lo; this.hi = hi;\n     this.next = next;\n   }\n\n   double atLeaf(int l, int h) {\n     double sum = 0;\n     for (int i = l; i < h; ++i) // perform leftmost base step\n       sum += array[i] * array[i];\n     return sum;\n   }\n\n   protected void compute() {\n     int l = lo;\n     int h = hi;\n     Applyer right = null;\n     while (h - l > 1 && getSurplusQueuedTaskCount() <= 3) {\n        int mid = (l + h) >>> 1;\n        right = new Applyer(array, mid, h, right);\n        right.fork();\n        h = mid;\n     }\n     double sum = atLeaf(l, h);\n     while (right != null) {\n        if (right.tryUnfork()) // directly calculate if not stolen\n          sum += right.atLeaf(right.lo, right.hi);\n       else {\n          right.join();\n          sum += right.result;\n        }\n        right = right.next;\n      }\n     result = sum;\n   }\n }}</pre>",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "RecursiveAction",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "compute",
                    "comment_text": "The main computation performed by this task.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRawResult",
                    "comment_text": "Always returns {@code null}.",
                    "return_type": "java.lang.Void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRawResult",
                    "comment_text": "Requires null completion value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "mustBeNull",
                            "comment_text": "",
                            "type": "java.lang.Void"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exec",
                    "comment_text": "Implements execution conventions for RecursiveActions.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.PriorityBlockingQueue",
            "interfaces": [
                "java.util.concurrent.BlockingQueue",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An unbounded {@linkplain BlockingQueue blocking queue} that uses\n the same ordering rules as class {@link PriorityQueue} and supplies\n blocking retrieval operations.  While this queue is logically\n unbounded, attempted additions may fail due to resource exhaustion\n (causing {@code OutOfMemoryError}). This class does not permit\n {@code null} elements.  A priority queue relying on {@linkplain\n Comparable natural ordering} also does not permit insertion of\n non-comparable objects (doing so results in\n {@code ClassCastException}).\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.  The Iterator provided in method {@link\n #iterator()} is <em>not</em> guaranteed to traverse the elements of\n the PriorityBlockingQueue in any particular order. If you need\n ordered traversal, consider using\n {@code Arrays.sort(pq.toArray())}.  Also, method {@code drainTo}\n can be used to <em>remove</em> some or all elements in priority\n order and place them in another collection.\n\n <p>Operations on this class make no guarantees about the ordering\n of elements with equal priority. If you need to enforce an\n ordering, you can define custom classes or comparators that use a\n secondary key to break ties in primary priority values.  For\n example, here is a class that applies first-in-first-out\n tie-breaking to comparable elements. To use it, you would insert a\n {@code new FIFOEntry(anEntry)} instead of a plain entry object.\n\n  <pre> {@code\n class FIFOEntry<E extends Comparable<? super E>>\n     implements Comparable<FIFOEntry<E>> {\n   static final AtomicLong seq = new AtomicLong(0);\n   final long seqNum;\n   final E entry;\n   public FIFOEntry(E entry) {\n     seqNum = seq.getAndIncrement();\n     this.entry = entry;\n   }\n   public E getEntry() { return entry; }\n   public int compareTo(FIFOEntry<E> other) {\n     int res = entry.compareTo(other.entry);\n     if (res == 0 && other.entry != this.entry)\n       res = (seqNum < other.seqNum ? -1 : 1);\n     return res;\n   }\n }}</pre>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "PriorityBlockingQueue",
                    "comment_text": "Creates a {@code PriorityBlockingQueue} with the default\n initial capacity (11) that orders its elements according to\n their {@linkplain Comparable natural ordering}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityBlockingQueue",
                    "comment_text": "Creates a {@code PriorityBlockingQueue} with the specified\n initial capacity that orders its elements according to their\n {@linkplain Comparable natural ordering}.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity for this priority queue",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityBlockingQueue",
                    "comment_text": "Creates a {@code PriorityBlockingQueue} with the specified initial\n capacity that orders its elements according to the specified\n comparator.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity for this priority queue",
                            "type": "int"
                        },
                        {
                            "name": "comparator",
                            "comment_text": "the comparator that will be used to order this\n         priority queue.  If {@code null}, the {@linkplain Comparable\n         natural ordering} of the elements will be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "PriorityBlockingQueue",
                    "comment_text": "Creates a {@code PriorityBlockingQueue} containing the elements\n in the specified collection.  If the specified collection is a\n {@link SortedSet} or a {@link PriorityQueue},  this\n priority queue will be ordered according to the same ordering.\n Otherwise, this priority queue will be ordered according to the\n {@linkplain Comparable natural ordering} of its elements.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection whose elements are to be placed\n         into this priority queue",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into this priority queue.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block or\n return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "This parameter is ignored as the method never blocks",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "This parameter is ignored as the method never blocks",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "comparator",
                    "comment_text": "Returns the comparator used to order the elements in this queue,\n or {@code null} if this queue uses the {@linkplain Comparable\n natural ordering} of its elements.",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Always returns {@code Integer.MAX_VALUE} because\n a {@code PriorityBlockingQueue} is not capacity constrained.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.  Returns {@code true} if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue.\n The returned array elements are in no particular order.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n  <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this queue. The\n iterator does not return the elements in any particular order.\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.Phaser",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A reusable synchronization barrier, similar in functionality to\n {@link java.util.concurrent.CyclicBarrier CyclicBarrier} and\n {@link java.util.concurrent.CountDownLatch CountDownLatch}\n but supporting more flexible usage.\n\n <p> <b>Registration.</b> Unlike the case for other barriers, the\n number of parties <em>registered</em> to synchronize on a phaser\n may vary over time.  Tasks may be registered at any time (using\n methods {@link #register}, {@link #bulkRegister}, or forms of\n constructors establishing initial numbers of parties), and\n optionally deregistered upon any arrival (using {@link\n #arriveAndDeregister}).  As is the case with most basic\n synchronization constructs, registration and deregistration affect\n only internal counts; they do not establish any further internal\n bookkeeping, so tasks cannot query whether they are registered.\n (However, you can introduce such bookkeeping by subclassing this\n class.)\n\n <p> <b>Synchronization.</b> Like a {@code CyclicBarrier}, a {@code\n Phaser} may be repeatedly awaited.  Method {@link\n #arriveAndAwaitAdvance} has effect analogous to {@link\n java.util.concurrent.CyclicBarrier#await CyclicBarrier.await}. Each\n generation of a phaser has an associated phase number. The phase\n number starts at zero, and advances when all parties arrive at the\n phaser, wrapping around to zero after reaching {@code\n Integer.MAX_VALUE}. The use of phase numbers enables independent\n control of actions upon arrival at a phaser and upon awaiting\n others, via two kinds of methods that may be invoked by any\n registered party:\n\n <ul>\n\n   <li> <b>Arrival.</b> Methods {@link #arrive} and\n       {@link #arriveAndDeregister} record arrival.  These methods\n       do not block, but return an associated <em>arrival phase\n       number</em>; that is, the phase number of the phaser to which\n       the arrival applied. When the final party for a given phase\n       arrives, an optional action is performed and the phase\n       advances.  These actions are performed by the party\n       triggering a phase advance, and are arranged by overriding\n       method {@link #onAdvance(int, int)}, which also controls\n       termination. Overriding this method is similar to, but more\n       flexible than, providing a barrier action to a {@code\n       CyclicBarrier}.\n\n   <li> <b>Waiting.</b> Method {@link #awaitAdvance} requires an\n       argument indicating an arrival phase number, and returns when\n       the phaser advances to (or is already at) a different phase.\n       Unlike similar constructions using {@code CyclicBarrier},\n       method {@code awaitAdvance} continues to wait even if the\n       waiting thread is interrupted. Interruptible and timeout\n       versions are also available, but exceptions encountered while\n       tasks wait interruptibly or with timeout do not change the\n       state of the phaser. If necessary, you can perform any\n       associated recovery within handlers of those exceptions,\n       often after invoking {@code forceTermination}.  Phasers may\n       also be used by tasks executing in a {@link ForkJoinPool},\n       which will ensure sufficient parallelism to execute tasks\n       when others are blocked waiting for a phase to advance.\n\n </ul>\n\n <p> <b>Termination.</b> A phaser may enter a <em>termination</em>\n state, that may be checked using method {@link #isTerminated}. Upon\n termination, all synchronization methods immediately return without\n waiting for advance, as indicated by a negative return value.\n Similarly, attempts to register upon termination have no effect.\n Termination is triggered when an invocation of {@code onAdvance}\n returns {@code true}. The default implementation returns {@code\n true} if a deregistration has caused the number of registered\n parties to become zero.  As illustrated below, when phasers control\n actions with a fixed number of iterations, it is often convenient\n to override this method to cause termination when the current phase\n number reaches a threshold. Method {@link #forceTermination} is\n also available to abruptly release waiting threads and allow them\n to terminate.\n\n <p> <b>Tiering.</b> Phasers may be <em>tiered</em> (i.e.,\n constructed in tree structures) to reduce contention. Phasers with\n large numbers of parties that would otherwise experience heavy\n synchronization contention costs may instead be set up so that\n groups of sub-phasers share a common parent.  This may greatly\n increase throughput even though it incurs greater per-operation\n overhead.\n\n <p>In a tree of tiered phasers, registration and deregistration of\n child phasers with their parent are managed automatically.\n Whenever the number of registered parties of a child phaser becomes\n non-zero (as established in the {@link #Phaser(Phaser,int)}\n constructor, {@link #register}, or {@link #bulkRegister}), the\n child phaser is registered with its parent.  Whenever the number of\n registered parties becomes zero as the result of an invocation of\n {@link #arriveAndDeregister}, the child phaser is deregistered\n from its parent.\n\n <p><b>Monitoring.</b> While synchronization methods may be invoked\n only by registered parties, the current state of a phaser may be\n monitored by any caller.  At any given moment there are {@link\n #getRegisteredParties} parties in total, of which {@link\n #getArrivedParties} have arrived at the current phase ({@link\n #getPhase}).  When the remaining ({@link #getUnarrivedParties})\n parties arrive, the phase advances.  The values returned by these\n methods may reflect transient states and so are not in general\n useful for synchronization control.  Method {@link #toString}\n returns snapshots of these state queries in a form convenient for\n informal monitoring.\n\n <p><b>Sample usages:</b>\n\n <p>A {@code Phaser} may be used instead of a {@code CountDownLatch}\n to control a one-shot action serving a variable number of parties.\n The typical idiom is for the method setting this up to first\n register, then start the actions, then deregister, as in:\n\n  <pre> {@code\n void runTasks(List<Runnable> tasks) {\n   final Phaser phaser = new Phaser(1); // \"1\" to register self\n   // create and start threads\n   for (final Runnable task : tasks) {\n     phaser.register();\n     new Thread() {\n       public void run() {\n         phaser.arriveAndAwaitAdvance(); // await all creation\n         task.run();\n       }\n     }.start();\n   }\n\n   // allow threads to start and deregister self\n   phaser.arriveAndDeregister();\n }}</pre>\n\n <p>One way to cause a set of threads to repeatedly perform actions\n for a given number of iterations is to override {@code onAdvance}:\n\n  <pre> {@code\n void startTasks(List<Runnable> tasks, final int iterations) {\n   final Phaser phaser = new Phaser() {\n     protected boolean onAdvance(int phase, int registeredParties) {\n       return phase >= iterations || registeredParties == 0;\n     }\n   };\n   phaser.register();\n   for (final Runnable task : tasks) {\n     phaser.register();\n     new Thread() {\n       public void run() {\n         do {\n           task.run();\n           phaser.arriveAndAwaitAdvance();\n         } while (!phaser.isTerminated());\n       }\n     }.start();\n   }\n   phaser.arriveAndDeregister(); // deregister self, don't wait\n }}</pre>\n\n If the main task must later await termination, it\n may re-register and then execute a similar loop:\n  <pre> {@code\n   // ...\n   phaser.register();\n   while (!phaser.isTerminated())\n     phaser.arriveAndAwaitAdvance();}</pre>\n\n <p>Related constructions may be used to await particular phase numbers\n in contexts where you are sure that the phase will never wrap around\n {@code Integer.MAX_VALUE}. For example:\n\n  <pre> {@code\n void awaitPhase(Phaser phaser, int phase) {\n   int p = phaser.register(); // assumes caller not already registered\n   while (p < phase) {\n     if (phaser.isTerminated())\n       // ... deal with unexpected termination\n     else\n       p = phaser.arriveAndAwaitAdvance();\n   }\n   phaser.arriveAndDeregister();\n }}</pre>\n\n\n <p>To create a set of {@code n} tasks using a tree of phasers, you\n could use code of the following form, assuming a Task class with a\n constructor accepting a {@code Phaser} that it registers with upon\n construction. After invocation of {@code build(new Task[n], 0, n,\n new Phaser())}, these tasks could then be started, for example by\n submitting to a pool:\n\n  <pre> {@code\n void build(Task[] tasks, int lo, int hi, Phaser ph) {\n   if (hi - lo > TASKS_PER_PHASER) {\n     for (int i = lo; i < hi; i += TASKS_PER_PHASER) {\n       int j = Math.min(i + TASKS_PER_PHASER, hi);\n       build(tasks, i, j, new Phaser(ph));\n     }\n   } else {\n     for (int i = lo; i < hi; ++i)\n       tasks[i] = new Task(ph);\n       // assumes new Task(ph) performs ph.register()\n   }\n }}</pre>\n\n The best value of {@code TASKS_PER_PHASER} depends mainly on\n expected synchronization rates. A value as low as four may\n be appropriate for extremely small per-phase task bodies (thus\n high rates), or up to hundreds for extremely large ones.\n\n <p><b>Implementation notes</b>: This implementation restricts the\n maximum number of parties to 65535. Attempts to register additional\n parties result in {@code IllegalStateException}. However, you can and\n should create tiered phasers to accommodate arbitrarily large sets\n of participants.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Phaser",
                    "comment_text": "Creates a new phaser with no initially registered parties, no\n parent, and initial phase number 0. Any thread using this\n phaser will need to first register for it.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Phaser",
                    "comment_text": "Creates a new phaser with the given number of registered\n unarrived parties, no parent, and initial phase number 0.",
                    "parameters": [
                        {
                            "name": "parties",
                            "comment_text": "the number of parties required to advance to the\n next phase",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Phaser",
                    "comment_text": "Equivalent to {@link #Phaser(Phaser, int) Phaser(parent, 0)}.",
                    "parameters": [
                        {
                            "name": "parent",
                            "comment_text": "the parent phaser",
                            "type": "java.util.concurrent.Phaser"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "Phaser",
                    "comment_text": "Creates a new phaser with the given parent and number of\n registered unarrived parties.  When the given parent is non-null\n and the given number of parties is greater than zero, this\n child phaser is registered with its parent.",
                    "parameters": [
                        {
                            "name": "parent",
                            "comment_text": "the parent phaser",
                            "type": "java.util.concurrent.Phaser"
                        },
                        {
                            "name": "parties",
                            "comment_text": "the number of parties required to advance to the\n next phase",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "register",
                    "comment_text": "Adds a new unarrived party to this phaser.  If an ongoing\n invocation of {@link #onAdvance} is in progress, this method\n may await its completion before returning.  If this phaser has\n a parent, and this phaser previously had no registered parties,\n this child phaser is also registered with its parent. If\n this phaser is terminated, the attempt to register has\n no effect, and a negative value is returned.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "bulkRegister",
                    "comment_text": "Adds the given number of new unarrived parties to this phaser.\n If an ongoing invocation of {@link #onAdvance} is in progress,\n this method may await its completion before returning.  If this\n phaser has a parent, and the given number of parties is greater\n than zero, and this phaser previously had no registered\n parties, this child phaser is also registered with its parent.\n If this phaser is terminated, the attempt to register has no\n effect, and a negative value is returned.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "parties",
                            "comment_text": "the number of additional parties required to\n advance to the next phase",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "arrive",
                    "comment_text": "Arrives at this phaser, without waiting for others to arrive.\n\n <p>It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an {@code\n IllegalStateException} only upon some subsequent operation on\n this phaser, if ever.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "arriveAndDeregister",
                    "comment_text": "Arrives at this phaser and deregisters from it without waiting\n for others to arrive. Deregistration reduces the number of\n parties required to advance in future phases.  If this phaser\n has a parent, and deregistration causes this phaser to have\n zero parties, this phaser is also deregistered from its parent.\n\n <p>It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an {@code\n IllegalStateException} only upon some subsequent operation on\n this phaser, if ever.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "arriveAndAwaitAdvance",
                    "comment_text": "Arrives at this phaser and awaits others. Equivalent in effect\n to {@code awaitAdvance(arrive())}.  If you need to await with\n interruption or timeout, you can arrange this with an analogous\n construction using one of the other forms of the {@code\n awaitAdvance} method.  If instead you need to deregister upon\n arrival, use {@code awaitAdvance(arriveAndDeregister())}.\n\n <p>It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an {@code\n IllegalStateException} only upon some subsequent operation on\n this phaser, if ever.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitAdvance",
                    "comment_text": "Awaits the phase of this phaser to advance from the given phase\n value, returning immediately if the current phase is not equal\n to the given phase value or this phaser is terminated.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "phase",
                            "comment_text": "an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to {@code arrive} or {@code arriveAndDeregister}.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitAdvanceInterruptibly",
                    "comment_text": "Awaits the phase of this phaser to advance from the given phase\n value, throwing {@code InterruptedException} if interrupted\n while waiting, or returning immediately if the current phase is\n not equal to the given phase value or this phaser is\n terminated.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "phase",
                            "comment_text": "an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to {@code arrive} or {@code arriveAndDeregister}.",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if thread interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "awaitAdvanceInterruptibly",
                    "comment_text": "Awaits the phase of this phaser to advance from the given phase\n value or the given timeout to elapse, throwing {@code\n InterruptedException} if interrupted while waiting, or\n returning immediately if the current phase is not equal to the\n given phase value or this phaser is terminated.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "phase",
                            "comment_text": "an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to {@code arrive} or {@code arriveAndDeregister}.",
                            "type": "int"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        {@code unit}",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if thread interrupted while waiting"
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": "if timed out while waiting"
                        }
                    ]
                },
                {
                    "name": "forceTermination",
                    "comment_text": "Forces this phaser to enter termination state.  Counts of\n registered parties are unaffected.  If this phaser is a member\n of a tiered set of phasers, then all of the phasers in the set\n are terminated.  If this phaser is already terminated, this\n method has no effect.  This method may be useful for\n coordinating recovery after one or more tasks encounter\n unexpected exceptions.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getPhase",
                    "comment_text": "Returns the current phase number. The maximum phase number is\n {@code Integer.MAX_VALUE}, after which it restarts at\n zero. Upon termination, the phase number is negative,\n in which case the prevailing phase prior to termination\n may be obtained via {@code getPhase() + Integer.MIN_VALUE}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRegisteredParties",
                    "comment_text": "Returns the number of parties registered at this phaser.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getArrivedParties",
                    "comment_text": "Returns the number of registered parties that have arrived at\n the current phase of this phaser. If this phaser has terminated,\n the returned value is meaningless and arbitrary.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getUnarrivedParties",
                    "comment_text": "Returns the number of registered parties that have not yet\n arrived at the current phase of this phaser. If this phaser has\n terminated, the returned value is meaningless and arbitrary.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getParent",
                    "comment_text": "Returns the parent of this phaser, or {@code null} if none.",
                    "return_type": "java.util.concurrent.Phaser",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRoot",
                    "comment_text": "Returns the root ancestor of this phaser, which is the same as\n this phaser if it has no parent.",
                    "return_type": "java.util.concurrent.Phaser",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isTerminated",
                    "comment_text": "Returns {@code true} if this phaser has been terminated.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "onAdvance",
                    "comment_text": "Overridable method to perform an action upon impending phase\n advance, and to control termination. This method is invoked\n upon arrival of the party advancing this phaser (when all other\n waiting parties are dormant).  If this method returns {@code\n true}, this phaser will be set to a final termination state\n upon advance, and subsequent calls to {@link #isTerminated}\n will return true. Any (unchecked) Exception or Error thrown by\n an invocation of this method is propagated to the party\n attempting to advance this phaser, in which case no advance\n occurs.\n\n <p>The arguments to this method provide the state of the phaser\n prevailing for the current transition.  The effects of invoking\n arrival, registration, and waiting methods on this phaser from\n within {@code onAdvance} are unspecified and should not be\n relied on.\n\n <p>If this phaser is a member of a tiered set of phasers, then\n {@code onAdvance} is invoked only for its root phaser on each\n advance.\n\n <p>To support the most common use cases, the default\n implementation of this method returns {@code true} when the\n number of registered parties has become zero as the result of a\n party invoking {@code arriveAndDeregister}.  You can disable\n this behavior, thus enabling continuation upon future\n registrations, by overriding this method to always return\n {@code false}:\n\n <pre> {@code\n Phaser phaser = new Phaser() {\n   protected boolean onAdvance(int phase, int parties) { return false; }\n }}</pre>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "phase",
                            "comment_text": "the current phase number on entry to this method,\n before this phaser is advanced",
                            "type": "int"
                        },
                        {
                            "name": "registeredParties",
                            "comment_text": "the current number of registered parties",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this phaser, as well as its\n state.  The state, in brackets, includes the String {@code\n \"phase = \"} followed by the phase number, {@code \"parties = \"}\n followed by the number of registered parties, and {@code\n \"arrived = \"} followed by the number of arrived parties.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.LinkedTransferQueue",
            "interfaces": [
                "java.util.concurrent.TransferQueue",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An unbounded {@link TransferQueue} based on linked nodes.\n This queue orders elements FIFO (first-in-first-out) with respect\n to any given producer.  The <em>head</em> of the queue is that\n element that has been on the queue the longest time for some\n producer.  The <em>tail</em> of the queue is that element that has\n been on the queue the shortest time for some producer.\n\n <p>Beware that, unlike in most collections, the {@code size} method\n is <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code addAll},\n {@code removeAll}, {@code retainAll}, {@code containsAll},\n {@code equals}, and {@code toArray} are <em>not</em> guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an {@code addAll} operation might view only some\n of the added elements.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code LinkedTransferQueue}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code LinkedTransferQueue} in another thread.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LinkedTransferQueue",
                    "comment_text": "Creates an initially empty {@code LinkedTransferQueue}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedTransferQueue",
                    "comment_text": "Creates a {@code LinkedTransferQueue}\n initially containing the elements of the given collection,\n added in traversal order of the collection's iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block or\n return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n {@link IllegalStateException} or return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryTransfer",
                    "comment_text": "Transfers the element to a waiting consumer immediately, if possible.\n\n <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n otherwise returning {@code false} without enqueuing the element.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "transfer",
                    "comment_text": "Transfers the element to a consumer, waiting if necessary to do so.\n\n <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "tryTransfer",
                    "comment_text": "Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.\n\n <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n {@link #take} or timed {@link #poll(long,TimeUnit) poll}),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer,\n returning {@code false} if the specified wait time elapses\n before the element can be transferred.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "take",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns {@code true} if this queue contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasWaitingConsumer",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this queue.  If this queue\n contains more than {@code Integer.MAX_VALUE} elements, returns\n {@code Integer.MAX_VALUE}.\n\n <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingConsumerCount",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Always returns {@code Integer.MAX_VALUE} because a\n {@code LinkedTransferQueue} is not capacity constrained.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.LinkedBlockingQueue",
            "interfaces": [
                "java.util.concurrent.BlockingQueue",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An optionally-bounded {@linkplain BlockingQueue blocking queue} based on\n linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The <em>head</em> of the queue is that element that has been on the\n queue the longest time.\n The <em>tail</em> of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n Linked queues typically have higher throughput than array-based queues but\n less predictable performance in most concurrent applications.\n\n <p> The optional capacity bound constructor argument serves as a\n way to prevent excessive queue expansion. The capacity, if unspecified,\n is equal to {@link Integer#MAX_VALUE}.  Linked nodes are\n dynamically created upon each insertion unless this would bring the\n queue above capacity.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LinkedBlockingQueue",
                    "comment_text": "Creates a {@code LinkedBlockingQueue} with a capacity of\n {@link Integer#MAX_VALUE}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedBlockingQueue",
                    "comment_text": "Creates a {@code LinkedBlockingQueue} with the given (fixed) capacity.",
                    "parameters": [
                        {
                            "name": "capacity",
                            "comment_text": "the capacity of this queue",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedBlockingQueue",
                    "comment_text": "Creates a {@code LinkedBlockingQueue} with a capacity of\n {@link Integer#MAX_VALUE}, initially containing the elements of the\n given collection,\n added in traversal order of the collection's iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this queue.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current {@code size} of this queue.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting {@code remainingCapacity}\n because it may be the case that another thread is about to\n insert or remove an element.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element at the tail of this queue, waiting if\n necessary for space to become available.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue, waiting if\n necessary up to the specified wait time for space to become available.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning {@code true} upon success and {@code false} if this queue\n is full.\n When using a capacity-restricted queue, this method is generally\n preferable to method {@link BlockingQueue#add add}, which can fail to\n insert an element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.LinkedBlockingDeque",
            "interfaces": [
                "java.util.concurrent.BlockingDeque",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An optionally-bounded {@linkplain BlockingDeque blocking deque} based on\n linked nodes.\n\n <p> The optional capacity bound constructor argument serves as a\n way to prevent excessive expansion. The capacity, if unspecified,\n is equal to {@link Integer#MAX_VALUE}.  Linked nodes are\n dynamically created upon each insertion unless this would bring the\n deque above capacity.\n\n <p>Most operations run in constant time (ignoring time spent\n blocking).  Exceptions include {@link #remove(Object) remove},\n {@link #removeFirstOccurrence removeFirstOccurrence}, {@link\n #removeLastOccurrence removeLastOccurrence}, {@link #contains\n contains}, {@link #iterator iterator.remove()}, and the bulk\n operations, all of which run in linear time.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "LinkedBlockingDeque",
                    "comment_text": "Creates a {@code LinkedBlockingDeque} with a capacity of\n {@link Integer#MAX_VALUE}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedBlockingDeque",
                    "comment_text": "Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity.",
                    "parameters": [
                        {
                            "name": "capacity",
                            "comment_text": "the capacity of this deque",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "LinkedBlockingDeque",
                    "comment_text": "Creates a {@code LinkedBlockingDeque} with a capacity of\n {@link Integer#MAX_VALUE}, initially containing the elements of\n the given collection, added in traversal order of the\n collection's iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "addFirst",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addLast",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putFirst",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "putLast",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "removeFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "takeFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "takeLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "getFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirstOccurrence",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLastOccurrence",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n it is generally preferable to use method {@link #offer(Object) offer}.\n\n <p>This method is equivalent to {@link #addLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque.\n This method differs from {@link #poll poll} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst() removeFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from {@link #peek peek} only in that\n it throws an exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst() getFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Returns the number of additional elements that this deque can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this deque\n less the current {@code size} of this deque.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting {@code remainingCapacity}\n because it may be the case that another thread is about to\n insert or remove an element.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pop",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to\n {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this deque.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this deque contains the specified element.\n More formally, returns {@code true} if and only if this deque contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this deque",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this deque, in\n proper sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this deque, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the deque fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this deque.\n\n <p>If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Atomically removes all of the elements from this deque.\n The deque will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.FutureTask",
            "interfaces": [
                "java.util.concurrent.RunnableFuture"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A cancellable asynchronous computation.  This class provides a base\n implementation of {@link Future}, with methods to start and cancel\n a computation, query to see if the computation is complete, and\n retrieve the result of the computation.  The result can only be\n retrieved when the computation has completed; the {@code get}\n methods will block if the computation has not yet completed.  Once\n the computation has completed, the computation cannot be restarted\n or cancelled (unless the computation is invoked using\n {@link #runAndReset}).\n\n <p>A {@code FutureTask} can be used to wrap a {@link Callable} or\n {@link Runnable} object.  Because {@code FutureTask} implements\n {@code Runnable}, a {@code FutureTask} can be submitted to an\n {@link Executor} for execution.\n\n <p>In addition to serving as a standalone class, this class provides\n {@code protected} functionality that may be useful when creating\n customized task classes.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "FutureTask",
                    "comment_text": "Creates a {@code FutureTask} that will, upon running, execute the\n given {@code Callable}.",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the callable task",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "FutureTask",
                    "comment_text": "Creates a {@code FutureTask} that will, upon running, execute the\n given {@code Runnable}, and arrange that {@code get} will return the\n given result on successful completion.",
                    "parameters": [
                        {
                            "name": "runnable",
                            "comment_text": "the runnable task",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "the result to return on successful completion. If\n you don't need a particular result, consider using\n constructions of the form:\n {@code Future<?> f = new FutureTask<Void>(runnable, null)}",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "isCancelled",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isDone",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "cancel",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "mayInterruptIfRunning",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "get",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": ""
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "done",
                    "comment_text": "Protected method invoked when this task transitions to state\n {@code isDone} (whether normally or via cancellation). The\n default implementation does nothing.  Subclasses may override\n this method to invoke completion callbacks or perform\n bookkeeping. Note that you can query status inside the\n implementation of this method to determine whether this task\n has been cancelled.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the result of this future to the given value unless\n this future has already been set or has been cancelled.\n\n <p>This method is invoked internally by the {@link #run} method\n upon successful completion of the computation.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "v",
                            "comment_text": "the value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setException",
                    "comment_text": "Causes this future to report an {@link ExecutionException}\n with the given throwable as its cause, unless this future has\n already been set or has been cancelled.\n\n <p>This method is invoked internally by the {@link #run} method\n upon failure of the computation.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "t",
                            "comment_text": "the cause of failure",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "run",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "runAndReset",
                    "comment_text": "Executes the computation without setting its result, and then\n resets this future to initial state, failing to do so if the\n computation encounters an exception or is cancelled.  This is\n designed for use with tasks that intrinsically execute more\n than once.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.Future",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A <tt>Future</tt> represents the result of an asynchronous\n computation.  Methods are provided to check if the computation is\n complete, to wait for its completion, and to retrieve the result of\n the computation.  The result can only be retrieved using method\n <tt>get</tt> when the computation has completed, blocking if\n necessary until it is ready.  Cancellation is performed by the\n <tt>cancel</tt> method.  Additional methods are provided to\n determine if the task completed normally or was cancelled. Once a\n computation has completed, the computation cannot be cancelled.\n If you would like to use a <tt>Future</tt> for the sake\n of cancellability but not provide a usable result, you can\n declare types of the form {@code Future<?>} and\n return <tt>null</tt> as a result of the underlying task.\n\n <p>\n <b>Sample Usage</b> (Note that the following classes are all\n made-up.) <p>\n  <pre> {@code\n interface ArchiveSearcher { String search(String target); }\n class App {\n   ExecutorService executor = ...\n   ArchiveSearcher searcher = ...\n   void showSearch(final String target)\n       throws InterruptedException {\n     Future<String> future\n       = executor.submit(new Callable<String>() {\n         public String call() {\n             return searcher.search(target);\n         }});\n     displayOtherThings(); // do other things while searching\n     try {\n       displayText(future.get()); // use future\n     } catch (ExecutionException ex) { cleanup(); return; }\n   }\n }}</pre>\n\n The {@link FutureTask} class is an implementation of <tt>Future</tt> that\n implements <tt>Runnable</tt>, and so may be executed by an <tt>Executor</tt>.\n For example, the above construction with <tt>submit</tt> could be replaced by:\n  <pre> {@code\n     FutureTask<String> future =\n       new FutureTask<String>(new Callable<String>() {\n         public String call() {\n           return searcher.search(target);\n       }});\n     executor.execute(future);}</pre>\n\n <p>Memory consistency effects: Actions taken by the asynchronous computation\n <a href=\"package-summary.html#MemoryVisibility\"> <i>happen-before</i></a>\n actions following the corresponding {@code Future.get()} in another thread.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.FutureTask",
                "java.util.concurrent.Executor"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "cancel",
                    "comment_text": "Attempts to cancel execution of this task.  This attempt will\n fail if the task has already completed, has already been cancelled,\n or could not be cancelled for some other reason. If successful,\n and this task has not started when <tt>cancel</tt> is called,\n this task should never run.  If the task has already started,\n then the <tt>mayInterruptIfRunning</tt> parameter determines\n whether the thread executing this task should be interrupted in\n an attempt to stop the task.\n\n <p>After this method returns, subsequent calls to {@link #isDone} will\n always return <tt>true</tt>.  Subsequent calls to {@link #isCancelled}\n will always return <tt>true</tt> if this method returned <tt>true</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "mayInterruptIfRunning",
                            "comment_text": "<tt>true</tt> if the thread executing this\n task should be interrupted; otherwise, in-progress tasks are allowed\n to complete",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isCancelled",
                    "comment_text": "Returns <tt>true</tt> if this task was cancelled before it completed\n normally.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isDone",
                    "comment_text": "Returns <tt>true</tt> if this task completed.\n\n Completion may be due to normal termination, an exception, or\n cancellation -- in all of these cases, this method will return\n <tt>true</tt>.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Waits if necessary for the computation to complete, and then\n retrieves its result.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread was interrupted\n while waiting"
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": "if the computation threw an\n exception"
                        }
                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread was interrupted\n while waiting"
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": "if the computation threw an\n exception"
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": "if the wait timed out"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ForkJoinWorkerThread",
            "interfaces": [

            ],
            "superclass": "java.lang.Thread",
            "comment_text": "A thread managed by a {@link ForkJoinPool}, which executes\n {@link ForkJoinTask}s.\n This class is subclassable solely for the sake of adding\n functionality -- there are no overridable methods dealing with\n scheduling or execution.  However, you can override initialization\n and termination methods surrounding the main task processing loop.\n If you do create such a subclass, you will also need to supply a\n custom {@link ForkJoinPool.ForkJoinWorkerThreadFactory} to use it\n in a {@code ForkJoinPool}.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ForkJoinWorkerThread",
                    "comment_text": "Creates a ForkJoinWorkerThread operating in the given pool.",
                    "parameters": [
                        {
                            "name": "pool",
                            "comment_text": "the pool this thread works in",
                            "type": "java.util.concurrent.ForkJoinPool"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getPool",
                    "comment_text": "Returns the pool hosting this thread.",
                    "return_type": "java.util.concurrent.ForkJoinPool",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getPoolIndex",
                    "comment_text": "Returns the index number of this thread in its pool.  The\n returned value ranges from zero to the maximum number of\n threads (minus one) that have ever been created in the pool.\n This method may be useful for applications that track status or\n collect results per-worker rather than per-task.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "onStart",
                    "comment_text": "Initializes internal state after construction but before\n processing any tasks. If you override this method, you must\n invoke {@code super.onStart()} at the beginning of the method.\n Initialization requires care: Most fields must have legal\n default values, to ensure that attempted accesses from other\n threads work correctly even before this thread starts\n processing tasks.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "onTermination",
                    "comment_text": "Performs cleanup associated with termination of this worker\n thread.  If you override this method, you must invoke\n {@code super.onTermination} at the end of the overridden method.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "exception",
                            "comment_text": "the exception causing this thread to abort due\n to an unrecoverable error, or {@code null} if completed normally",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "run",
                    "comment_text": "This method is required to be public, but should never be\n called explicitly. It performs the main run loop to execute\n {@link ForkJoinTask}s.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ForkJoinTask",
            "interfaces": [
                "java.util.concurrent.Future",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "Abstract base class for tasks that run within a {@link ForkJoinPool}.\n A {@code ForkJoinTask} is a thread-like entity that is much\n lighter weight than a normal thread.  Huge numbers of tasks and\n subtasks may be hosted by a small number of actual threads in a\n ForkJoinPool, at the price of some usage limitations.\n\n <p>A \"main\" {@code ForkJoinTask} begins execution when submitted\n to a {@link ForkJoinPool}.  Once started, it will usually in turn\n start other subtasks.  As indicated by the name of this class,\n many programs using {@code ForkJoinTask} employ only methods\n {@link #fork} and {@link #join}, or derivatives such as {@link\n #invokeAll(ForkJoinTask...) invokeAll}.  However, this class also\n provides a number of other methods that can come into play in\n advanced usages, as well as extension mechanics that allow\n support of new forms of fork/join processing.\n\n <p>A {@code ForkJoinTask} is a lightweight form of {@link Future}.\n The efficiency of {@code ForkJoinTask}s stems from a set of\n restrictions (that are only partially statically enforceable)\n reflecting their intended use as computational tasks calculating\n pure functions or operating on purely isolated objects.  The\n primary coordination mechanisms are {@link #fork}, that arranges\n asynchronous execution, and {@link #join}, that doesn't proceed\n until the task's result has been computed.  Computations should\n avoid {@code synchronized} methods or blocks, and should minimize\n other blocking synchronization apart from joining other tasks or\n using synchronizers such as Phasers that are advertised to\n cooperate with fork/join scheduling. Tasks should also not perform\n blocking IO, and should ideally access variables that are\n completely independent of those accessed by other running\n tasks. Minor breaches of these restrictions, for example using\n shared output streams, may be tolerable in practice, but frequent\n use may result in poor performance, and the potential to\n indefinitely stall if the number of threads not waiting for IO or\n other external synchronization becomes exhausted. This usage\n restriction is in part enforced by not permitting checked\n exceptions such as {@code IOExceptions} to be thrown. However,\n computations may still encounter unchecked exceptions, that are\n rethrown to callers attempting to join them. These exceptions may\n additionally include {@link RejectedExecutionException} stemming\n from internal resource exhaustion, such as failure to allocate\n internal task queues. Rethrown exceptions behave in the same way as\n regular exceptions, but, when possible, contain stack traces (as\n displayed for example using {@code ex.printStackTrace()}) of both\n the thread that initiated the computation as well as the thread\n actually encountering the exception; minimally only the latter.\n\n <p>The primary method for awaiting completion and extracting\n results of a task is {@link #join}, but there are several variants:\n The {@link Future#get} methods support interruptible and/or timed\n waits for completion and report results using {@code Future}\n conventions. Method {@link #invoke} is semantically\n equivalent to {@code fork(); join()} but always attempts to begin\n execution in the current thread. The \"<em>quiet</em>\" forms of\n these methods do not extract results or report exceptions. These\n may be useful when a set of tasks are being executed, and you need\n to delay processing of results or exceptions until all complete.\n Method {@code invokeAll} (available in multiple versions)\n performs the most common form of parallel invocation: forking a set\n of tasks and joining them all.\n\n <p>The execution status of tasks may be queried at several levels\n of detail: {@link #isDone} is true if a task completed in any way\n (including the case where a task was cancelled without executing);\n {@link #isCompletedNormally} is true if a task completed without\n cancellation or encountering an exception; {@link #isCancelled} is\n true if the task was cancelled (in which case {@link #getException}\n returns a {@link java.util.concurrent.CancellationException}); and\n {@link #isCompletedAbnormally} is true if a task was either\n cancelled or encountered an exception, in which case {@link\n #getException} will return either the encountered exception or\n {@link java.util.concurrent.CancellationException}.\n\n <p>The ForkJoinTask class is not usually directly subclassed.\n Instead, you subclass one of the abstract classes that support a\n particular style of fork/join processing, typically {@link\n RecursiveAction} for computations that do not return results, or\n {@link RecursiveTask} for those that do.  Normally, a concrete\n ForkJoinTask subclass declares fields comprising its parameters,\n established in a constructor, and then defines a {@code compute}\n method that somehow uses the control methods supplied by this base\n class. While these methods have {@code public} access (to allow\n instances of different task subclasses to call each other's\n methods), some of them may only be called from within other\n ForkJoinTasks (as may be determined using method {@link\n #inForkJoinPool}).  Attempts to invoke them in other contexts\n result in exceptions or errors, possibly including\n {@code ClassCastException}.\n\n <p>Method {@link #join} and its variants are appropriate for use\n only when completion dependencies are acyclic; that is, the\n parallel computation can be described as a directed acyclic graph\n (DAG). Otherwise, executions may encounter a form of deadlock as\n tasks cyclically wait for each other.  However, this framework\n supports other methods and techniques (for example the use of\n {@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that\n may be of use in constructing custom subclasses for problems that\n are not statically structured as DAGs.\n\n <p>Most base support methods are {@code final}, to prevent\n overriding of implementations that are intrinsically tied to the\n underlying lightweight task scheduling framework.  Developers\n creating new basic styles of fork/join processing should minimally\n implement {@code protected} methods {@link #exec}, {@link\n #setRawResult}, and {@link #getRawResult}, while also introducing\n an abstract computational method that can be implemented in its\n subclasses, possibly relying on other {@code protected} methods\n provided by this class.\n\n <p>ForkJoinTasks should perform relatively small amounts of\n computation. Large tasks should be split into smaller subtasks,\n usually via recursive decomposition. As a very rough rule of thumb,\n a task should perform more than 100 and less than 10000 basic\n computational steps, and should avoid indefinite looping. If tasks\n are too big, then parallelism cannot improve throughput. If too\n small, then memory and internal task maintenance overhead may\n overwhelm processing.\n\n <p>This class provides {@code adapt} methods for {@link Runnable}\n and {@link Callable}, that may be of use when mixing execution of\n {@code ForkJoinTasks} with other kinds of tasks. When all tasks are\n of this form, consider using a pool constructed in <em>asyncMode</em>.\n\n <p>ForkJoinTasks are {@code Serializable}, which enables them to be\n used in extensions such as remote execution frameworks. It is\n sensible to serialize tasks only before or after, but not during,\n execution. Serialization is not relied on during execution itself.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ForkJoinTask",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "fork",
                    "comment_text": "Arranges to asynchronously execute this task.  While it is not\n necessarily enforced, it is a usage error to fork a task more\n than once unless it has completed and been reinitialized.\n Subsequent modifications to the state of this task or any data\n it operates on are not necessarily consistently observable by\n any thread other than the one executing it unless preceded by a\n call to {@link #join} or related methods, or a call to {@link\n #isDone} returning {@code true}.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "join",
                    "comment_text": "Returns the result of the computation when it {@link #isDone is\n done}.  This method differs from {@link #get()} in that\n abnormal completion results in {@code RuntimeException} or\n {@code Error}, not {@code ExecutionException}, and that\n interrupts of the calling thread do <em>not</em> cause the\n method to abruptly return by throwing {@code\n InterruptedException}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invoke",
                    "comment_text": "Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)\n {@code RuntimeException} or {@code Error} if the underlying\n computation did so.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "Forks the given tasks, returning when {@code isDone} holds for\n each task or an (unchecked) exception is encountered, in which\n case the exception is rethrown. If more than one task\n encounters an exception, then this method throws any one of\n these exceptions. If any task encounters an exception, the\n other may be cancelled. However, the execution status of\n individual tasks is not guaranteed upon exceptional return. The\n status of each task may be obtained using {@link\n #getException()} and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "t1",
                            "comment_text": "the first task",
                            "type": "java.util.concurrent.ForkJoinTask"
                        },
                        {
                            "name": "t2",
                            "comment_text": "the second task",
                            "type": "java.util.concurrent.ForkJoinTask"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "Forks the given tasks, returning when {@code isDone} holds for\n each task or an (unchecked) exception is encountered, in which\n case the exception is rethrown. If more than one task\n encounters an exception, then this method throws any one of\n these exceptions. If any task encounters an exception, others\n may be cancelled. However, the execution status of individual\n tasks is not guaranteed upon exceptional return. The status of\n each task may be obtained using {@link #getException()} and\n related methods to check if they have been cancelled, completed\n normally or exceptionally, or left unprocessed.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "the tasks",
                            "type": "java.util.concurrent.ForkJoinTask"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "Forks all tasks in the specified collection, returning when\n {@code isDone} holds for each task or an (unchecked) exception\n is encountered, in which case the exception is rethrown. If\n more than one task encounters an exception, then this method\n throws any one of these exceptions. If any task encounters an\n exception, others may be cancelled. However, the execution\n status of individual tasks is not guaranteed upon exceptional\n return. The status of each task may be obtained using {@link\n #getException()} and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "the collection of tasks",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "cancel",
                    "comment_text": "Attempts to cancel execution of this task. This attempt will\n fail if the task has already completed or could not be\n cancelled for some other reason. If successful, and this task\n has not started when {@code cancel} is called, execution of\n this task is suppressed. After this method returns\n successfully, unless there is an intervening call to {@link\n #reinitialize}, subsequent calls to {@link #isCancelled},\n {@link #isDone}, and {@code cancel} will return {@code true}\n and calls to {@link #join} and related methods will result in\n {@code CancellationException}.\n\n <p>This method may be overridden in subclasses, but if so, must\n still ensure that these properties hold. In particular, the\n {@code cancel} method itself must not throw exceptions.\n\n <p>This method is designed to be invoked by <em>other</em>\n tasks. To terminate the current task, you can just return or\n throw an unchecked exception from its computation method, or\n invoke {@link #completeExceptionally}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "mayInterruptIfRunning",
                            "comment_text": "this value has no effect in the\n default implementation because interrupts are not used to\n control cancellation.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isDone",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isCancelled",
                    "comment_text": "",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isCompletedAbnormally",
                    "comment_text": "Returns {@code true} if this task threw an exception or was cancelled.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isCompletedNormally",
                    "comment_text": "Returns {@code true} if this task completed without throwing an\n exception and was not cancelled.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getException",
                    "comment_text": "Returns the exception thrown by the base computation, or a\n {@code CancellationException} if cancelled, or {@code null} if\n none or if the method has not yet completed.",
                    "return_type": "java.lang.Throwable",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "completeExceptionally",
                    "comment_text": "Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon\n {@code join} and related operations. This method may be used\n to induce exceptions in asynchronous tasks, or to force\n completion of tasks that would not otherwise complete.  Its use\n in other situations is discouraged.  This method is\n overridable, but overridden versions must invoke {@code super}\n implementation to maintain guarantees.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "ex",
                            "comment_text": "the exception to throw. If this exception is not a\n {@code RuntimeException} or {@code Error}, the actual exception\n thrown will be a {@code RuntimeException} with cause {@code ex}.",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "complete",
                    "comment_text": "Completes this task, and if not already aborted or cancelled,\n returning the given value as the result of subsequent\n invocations of {@code join} and related operations. This method\n may be used to provide results for asynchronous tasks, or to\n provide alternative handling for tasks that would not otherwise\n complete normally. Its use in other situations is\n discouraged. This method is overridable, but overridden\n versions must invoke {@code super} implementation to maintain\n guarantees.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the result value for this task",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Waits if necessary for the computation to complete, and then\n retrieves its result.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is not a\n member of a ForkJoinPool and was interrupted while waiting"
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": "if the computation threw an\n exception"
                        }
                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is not a\n member of a ForkJoinPool and was interrupted while waiting"
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": "if the computation threw an\n exception"
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": "if the wait timed out"
                        }
                    ]
                },
                {
                    "name": "quietlyJoin",
                    "comment_text": "Joins this task, without returning its result or throwing its\n exception. This method may be useful when processing\n collections of tasks when some have been cancelled or otherwise\n known to have aborted.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "quietlyInvoke",
                    "comment_text": "Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n exception.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "helpQuiesce",
                    "comment_text": "Possibly executes tasks until the pool hosting the current task\n {@link ForkJoinPool#isQuiescent is quiescent}. This method may\n be of use in designs in which many tasks are forked, but none\n are explicitly joined, instead executing them until all are\n processed.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reinitialize",
                    "comment_text": "Resets the internal bookkeeping state of this task, allowing a\n subsequent {@code fork}. This method allows repeated reuse of\n this task, but only if reuse occurs when this task has either\n never been forked, or has been forked, then completed and all\n outstanding joins of this task have also completed. Effects\n under any other usage conditions are not guaranteed.\n This method may be useful when executing\n pre-constructed trees of subtasks in loops.\n\n <p>Upon completion of this method, {@code isDone()} reports\n {@code false}, and {@code getException()} reports {@code\n null}. However, the value returned by {@code getRawResult} is\n unaffected. To clear this value, you can invoke {@code\n setRawResult(null)}.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getPool",
                    "comment_text": "Returns the pool hosting the current task execution, or null\n if this task is executing outside of any ForkJoinPool.",
                    "return_type": "java.util.concurrent.ForkJoinPool",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "inForkJoinPool",
                    "comment_text": "Returns {@code true} if the current thread is a {@link\n ForkJoinWorkerThread} executing as a ForkJoinPool computation.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryUnfork",
                    "comment_text": "Tries to unschedule this task for execution. This method will\n typically succeed if this task is the most recently forked task\n by the current thread, and has not commenced executing in\n another thread.  This method may be useful when arranging\n alternative local processing of tasks that could have been, but\n were not, stolen.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedTaskCount",
                    "comment_text": "Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. This\n value may be useful for heuristic decisions about whether to\n fork other tasks.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSurplusQueuedTaskCount",
                    "comment_text": "Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other worker\n threads that might steal them.  This value may be useful for\n heuristic decisions about whether to fork other tasks. In many\n usages of ForkJoinTasks, at steady state, each worker should\n aim to maintain a small constant surplus (for example, 3) of\n tasks, and to process computations locally if this threshold is\n exceeded.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRawResult",
                    "comment_text": "Returns the result that would be returned by {@link #join}, even\n if this task completed abnormally, or {@code null} if this task\n is not known to have been completed.  This method is designed\n to aid debugging, as well as to support extensions. Its use in\n any other context is discouraged.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setRawResult",
                    "comment_text": "Forces the given value to be returned as a result.  This method\n is designed to support extensions, and should not in general be\n called otherwise.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "the value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "exec",
                    "comment_text": "Immediately performs the base action of this task.  This method\n is designed to support extensions, and should not in general be\n called otherwise. The return value controls whether this task\n is considered to be done normally. It may return false in\n asynchronous actions that require explicit invocations of\n {@link #complete} to become joinable. It may also throw an\n (unchecked) exception to indicate abnormal exit.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekNextLocalTask",
                    "comment_text": "Returns, but does not unschedule or execute, a task queued by\n the current thread but not yet executed, if one is immediately\n available. There is no guarantee that this task will actually\n be polled or executed next. Conversely, this method may return\n null even if a task exists but cannot be accessed without\n contention with other threads.  This method is designed\n primarily to support extensions, and is unlikely to be useful\n otherwise.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollNextLocalTask",
                    "comment_text": "Unschedules and returns, without executing, the next task\n queued by the current thread but not yet executed.  This method\n is designed primarily to support extensions, and is unlikely to\n be useful otherwise.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollTask",
                    "comment_text": "Unschedules and returns, without executing, the next task\n queued by the current thread but not yet executed, if one is\n available, or if not available, a task that was forked by some\n other thread, if available. Availability may be transient, so a\n {@code null} result does not necessarily imply quiescence\n of the pool this task is operating in.  This method is designed\n primarily to support extensions, and is unlikely to be useful\n otherwise.\n\n <p>This method may be invoked only from within {@code\n ForkJoinPool} computations (as may be determined using method\n {@link #inForkJoinPool}).  Attempts to invoke in other contexts\n result in exceptions or errors, possibly including {@code\n ClassCastException}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "adapt",
                    "comment_text": "Returns a new {@code ForkJoinTask} that performs the {@code run}\n method of the given {@code Runnable} as its action, and returns\n a null result upon {@link #join}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "runnable",
                            "comment_text": "the runnable action",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "adapt",
                    "comment_text": "Returns a new {@code ForkJoinTask} that performs the {@code run}\n method of the given {@code Runnable} as its action, and returns\n the given result upon {@link #join}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "runnable",
                            "comment_text": "the runnable action",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "the result upon completion",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "adapt",
                    "comment_text": "Returns a new {@code ForkJoinTask} that performs the {@code call}\n method of the given {@code Callable} as its action, and returns\n its result upon {@link #join}, translating any checked exceptions\n encountered into {@code RuntimeException}.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the callable action",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ForkJoinPool",
            "interfaces": [

            ],
            "superclass": "java.util.concurrent.AbstractExecutorService",
            "comment_text": "An {@link ExecutorService} for running {@link ForkJoinTask}s.\n A {@code ForkJoinPool} provides the entry point for submissions\n from non-{@code ForkJoinTask} clients, as well as management and\n monitoring operations.\n\n <p>A {@code ForkJoinPool} differs from other kinds of {@link\n ExecutorService} mainly by virtue of employing\n <em>work-stealing</em>: all threads in the pool attempt to find and\n execute subtasks created by other active tasks (eventually blocking\n waiting for work if none exist). This enables efficient processing\n when most tasks spawn other subtasks (as do most {@code\n ForkJoinTask}s). When setting <em>asyncMode</em> to true in\n constructors, {@code ForkJoinPool}s may also be appropriate for use\n with event-style tasks that are never joined.\n\n <p>A {@code ForkJoinPool} is constructed with a given target\n parallelism level; by default, equal to the number of available\n processors. The pool attempts to maintain enough active (or\n available) threads by dynamically adding, suspending, or resuming\n internal worker threads, even if some tasks are stalled waiting to\n join others. However, no such adjustments are guaranteed in the\n face of blocked IO or other unmanaged synchronization. The nested\n {@link ManagedBlocker} interface enables extension of the kinds of\n synchronization accommodated.\n\n <p>In addition to execution and lifecycle control methods, this\n class provides status check methods (for example\n {@link #getStealCount}) that are intended to aid in developing,\n tuning, and monitoring fork/join applications. Also, method\n {@link #toString} returns indications of pool state in a\n convenient form for informal monitoring.\n\n <p> As is the case with other ExecutorServices, there are three\n main task execution methods summarized in the following\n table. These are designed to be used by clients not already engaged\n in fork/join computations in the current pool.  The main forms of\n these methods accept instances of {@code ForkJoinTask}, but\n overloaded forms also allow mixed execution of plain {@code\n Runnable}- or {@code Callable}- based activities as well.  However,\n tasks that are already executing in a pool should normally\n <em>NOT</em> use these pool execution methods, but instead use the\n within-computation forms listed in the table.\n\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER> <b>Call from non-fork/join clients</b></td>\n    <td ALIGN=CENTER> <b>Call from within fork/join computations</b></td>\n  </tr>\n  <tr>\n    <td> <b>Arrange async execution</td>\n    <td> {@link #execute(ForkJoinTask)}</td>\n    <td> {@link ForkJoinTask#fork}</td>\n  </tr>\n  <tr>\n    <td> <b>Await and obtain result</td>\n    <td> {@link #invoke(ForkJoinTask)}</td>\n    <td> {@link ForkJoinTask#invoke}</td>\n  </tr>\n  <tr>\n    <td> <b>Arrange exec and obtain Future</td>\n    <td> {@link #submit(ForkJoinTask)}</td>\n    <td> {@link ForkJoinTask#fork} (ForkJoinTasks <em>are</em> Futures)</td>\n  </tr>\n </table>\n\n <p><b>Sample Usage.</b> Normally a single {@code ForkJoinPool} is\n used for all parallel task execution in a program or subsystem.\n Otherwise, use would not usually outweigh the construction and\n bookkeeping overhead of creating a large set of threads. For\n example, a common pool could be used for the {@code SortTasks}\n illustrated in {@link RecursiveAction}. Because {@code\n ForkJoinPool} uses threads in {@linkplain java.lang.Thread#isDaemon\n daemon} mode, there is typically no need to explicitly {@link\n #shutdown} such a pool upon program exit.\n\n <pre>\n static final ForkJoinPool mainPool = new ForkJoinPool();\n ...\n public void sort(long[] array) {\n   mainPool.invoke(new SortTask(array, 0, array.length));\n }\n </pre>\n\n <p><b>Implementation notes</b>: This implementation restricts the\n maximum number of running threads to 32767. Attempts to create\n pools with greater than the maximum number result in\n {@code IllegalArgumentException}.\n\n <p>This implementation rejects submitted tasks (that is, by throwing\n {@link RejectedExecutionException}) only when the pool is shut down\n or internal resources have been exhausted.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ForkJoinPool",
                    "comment_text": "Creates a {@code ForkJoinPool} with parallelism equal to {@link\n java.lang.Runtime#availableProcessors}, using the {@linkplain\n #defaultForkJoinWorkerThreadFactory default thread factory},\n no UncaughtExceptionHandler, and non-async LIFO processing mode.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ForkJoinPool",
                    "comment_text": "Creates a {@code ForkJoinPool} with the indicated parallelism\n level, the {@linkplain\n #defaultForkJoinWorkerThreadFactory default thread factory},\n no UncaughtExceptionHandler, and non-async LIFO processing mode.",
                    "parameters": [
                        {
                            "name": "parallelism",
                            "comment_text": "the parallelism level",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ForkJoinPool",
                    "comment_text": "Creates a {@code ForkJoinPool} with the given parameters.",
                    "parameters": [
                        {
                            "name": "parallelism",
                            "comment_text": "the parallelism level. For default value,\n use {@link java.lang.Runtime#availableProcessors}.",
                            "type": "int"
                        },
                        {
                            "name": "factory",
                            "comment_text": "the factory for creating new threads. For default value,\n use {@link #defaultForkJoinWorkerThreadFactory}.",
                            "type": "java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory"
                        },
                        {
                            "name": "handler",
                            "comment_text": "the handler for internal worker threads that\n terminate due to unrecoverable errors encountered while executing\n tasks. For default value, use {@code null}.",
                            "type": "java.lang.Thread.UncaughtExceptionHandler"
                        },
                        {
                            "name": "asyncMode",
                            "comment_text": "if true,\n establishes local first-in-first-out scheduling mode for forked\n tasks that are never joined. This mode may be more appropriate\n than default locally stack-based mode in applications in which\n worker threads only process event-style asynchronous tasks.\n For default value, use {@code false}.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [
                {
                    "name": "defaultForkJoinWorkerThreadFactory",
                    "comment_text": "Creates a new ForkJoinWorkerThread. This factory is used unless\n overridden in ForkJoinPool constructors.",
                    "type": "java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory"
                }
            ],
            "methods": [
                {
                    "name": "invoke",
                    "comment_text": "Performs the given task, returning its result upon completion.\n If the computation encounters an unchecked Exception or Error,\n it is rethrown as the outcome of this invocation.  Rethrown\n exceptions behave in the same way as regular exceptions, but,\n when possible, contain stack traces (as displayed for example\n using {@code ex.printStackTrace()}) of both the current thread\n as well as the thread actually encountering the exception;\n minimally only the latter.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task",
                            "type": "java.util.concurrent.ForkJoinTask"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "execute",
                    "comment_text": "Arranges for (asynchronous) execution of the given task.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task",
                            "type": "java.util.concurrent.ForkJoinTask"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "execute",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "Submits a ForkJoinTask for execution.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to submit",
                            "type": "java.util.concurrent.ForkJoinTask"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFactory",
                    "comment_text": "Returns the factory used for constructing new workers.",
                    "return_type": "java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getUncaughtExceptionHandler",
                    "comment_text": "Returns the handler for internal worker threads that terminate\n due to unrecoverable errors encountered while executing tasks.",
                    "return_type": "java.lang.Thread.UncaughtExceptionHandler",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getParallelism",
                    "comment_text": "Returns the targeted parallelism level of this pool.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getPoolSize",
                    "comment_text": "Returns the number of worker threads that have started but not\n yet terminated.  The result returned by this method may differ\n from {@link #getParallelism} when threads are created to\n maintain parallelism when others are cooperatively blocked.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAsyncMode",
                    "comment_text": "Returns {@code true} if this pool uses local first-in-first-out\n scheduling mode for forked tasks that are never joined.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getRunningThreadCount",
                    "comment_text": "Returns an estimate of the number of worker threads that are\n not blocked waiting to join tasks or for other managed\n synchronization. This method may overestimate the\n number of running threads.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getActiveThreadCount",
                    "comment_text": "Returns an estimate of the number of threads that are currently\n stealing or executing tasks. This method may overestimate the\n number of active threads.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isQuiescent",
                    "comment_text": "Returns {@code true} if all worker threads are currently idle.\n An idle worker is one that cannot obtain a task to execute\n because none are available to steal from other threads, and\n there are no pending submissions to the pool. This method is\n conservative; it might not return {@code true} immediately upon\n idleness of all threads, but will eventually become true if\n threads remain inactive.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getStealCount",
                    "comment_text": "Returns an estimate of the total number of tasks stolen from\n one thread's work queue by another. The reported value\n underestimates the actual total number of steals when the pool\n is not quiescent. This value may be useful for monitoring and\n tuning fork/join programs: in general, steal counts should be\n high enough to keep threads busy, but low enough to avoid\n overhead and contention across threads.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedTaskCount",
                    "comment_text": "Returns an estimate of the total number of tasks currently held\n in queues by worker threads (but not including tasks submitted\n to the pool that have not begun executing). This value is only\n an approximation, obtained by iterating across all threads in\n the pool. This method may be useful for tuning task\n granularities.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedSubmissionCount",
                    "comment_text": "Returns an estimate of the number of tasks submitted to this\n pool that have not yet begun executing.  This method may take\n time proportional to the number of submissions.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedSubmissions",
                    "comment_text": "Returns {@code true} if there are any tasks submitted to this\n pool that have not yet begun executing.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollSubmission",
                    "comment_text": "Removes and returns the next unexecuted submission if one is\n available.  This method may be useful in extensions to this\n class that re-assign work in systems with multiple pools.",
                    "return_type": "java.util.concurrent.ForkJoinTask",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTasksTo",
                    "comment_text": "Removes all available unexecuted submitted and forked tasks\n from scheduling queues and adds them to the given collection,\n without altering their execution status. These may include\n artificially generated or wrapped tasks. This method is\n designed to be invoked only when the pool is known to be\n quiescent. Invocations at other times may not remove all\n tasks. A failure encountered while attempting to add elements\n to collection {@code c} may result in elements being in\n neither, either or both collections when the associated\n exception is thrown.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection to transfer elements into",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this pool, as well as its state,\n including indications of run state, parallelism level, and\n worker and task counts.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdown",
                    "comment_text": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n Tasks that are in the process of being submitted concurrently\n during the course of this method may or may not be rejected.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdownNow",
                    "comment_text": "Attempts to cancel and/or stop all tasks, and reject all\n subsequently submitted tasks.  Tasks that are in the process of\n being submitted or executed concurrently during the course of\n this method may or may not be rejected. This method cancels\n both existing and unexecuted tasks, in order to permit\n termination in the presence of task dependencies. So the method\n always returns an empty list (unlike the case for some other\n Executors).",
                    "return_type": "java.util.List",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isTerminated",
                    "comment_text": "Returns {@code true} if all tasks have completed following shut down.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isTerminating",
                    "comment_text": "Returns {@code true} if the process of termination has\n commenced but not yet completed.  This method may be useful for\n debugging. A return of {@code true} reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, or are waiting for IO,\n causing this executor not to properly terminate. (See the\n advisory notes for class {@link ForkJoinTask} stating that\n tasks should not normally entail blocking operations.  But if\n they do, they must abort them on interrupt.)",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isShutdown",
                    "comment_text": "Returns {@code true} if this pool has been shut down.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitTermination",
                    "comment_text": "Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thread is\n interrupted, whichever happens first.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "managedBlock",
                    "comment_text": "Blocks in accord with the given blocker.  If the current thread\n is a {@link ForkJoinWorkerThread}, this method possibly\n arranges for a spare thread to be activated if necessary to\n ensure sufficient parallelism while the current thread is blocked.\n\n <p>If the caller is not a {@link ForkJoinTask}, this method is\n behaviorally equivalent to\n  <pre> {@code\n while (!blocker.isReleasable())\n   if (blocker.block())\n     return;\n }</pre>\n\n If the caller is a {@code ForkJoinTask}, then the pool may\n first be expanded to ensure parallelism, and later adjusted.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "blocker",
                            "comment_text": "the blocker",
                            "type": "java.util.concurrent.ForkJoinPool.ManagedBlocker"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if blocker.block did so"
                        }
                    ]
                },
                {
                    "name": "newTaskFor",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.RunnableFuture",
                    "parameters": [
                        {
                            "name": "runnable",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newTaskFor",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.RunnableFuture",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "Factory for creating new {@link ForkJoinWorkerThread}s.\n A {@code ForkJoinWorkerThreadFactory} must be defined and used\n for {@code ForkJoinWorkerThread} subclasses that extend base\n functionality or initialize threads with different contexts.",
            "since": "",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newThread",
                    "comment_text": "Returns a new worker thread operating in the given pool.",
                    "return_type": "java.util.concurrent.ForkJoinWorkerThread",
                    "parameters": [
                        {
                            "name": "pool",
                            "comment_text": "the pool this thread works in",
                            "type": "java.util.concurrent.ForkJoinPool"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ForkJoinPool.ManagedBlocker",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "Interface for extending managed parallelism for tasks running\n in {@link ForkJoinPool}s.\n\n <p>A {@code ManagedBlocker} provides two methods.  Method\n {@code isReleasable} must return {@code true} if blocking is\n not necessary. Method {@code block} blocks the current thread\n if necessary (perhaps internally invoking {@code isReleasable}\n before actually blocking). These actions are performed by any\n thread invoking {@link ForkJoinPool#managedBlock}.  The\n unusual methods in this API accommodate synchronizers that may,\n but don't usually, block for long periods. Similarly, they\n allow more efficient internal handling of cases in which\n additional workers may be, but usually are not, needed to\n ensure sufficient parallelism.  Toward this end,\n implementations of method {@code isReleasable} must be amenable\n to repeated invocation.\n\n <p>For example, here is a ManagedBlocker based on a\n ReentrantLock:\n  <pre> {@code\n class ManagedLocker implements ManagedBlocker {\n   final ReentrantLock lock;\n   boolean hasLock = false;\n   ManagedLocker(ReentrantLock lock) { this.lock = lock; }\n   public boolean block() {\n     if (!hasLock)\n       lock.lock();\n     return true;\n   }\n   public boolean isReleasable() {\n     return hasLock || (hasLock = lock.tryLock());\n   }\n }}</pre>\n\n <p>Here is a class that possibly blocks waiting for an\n item on a given queue:\n  <pre> {@code\n class QueueTaker<E> implements ManagedBlocker {\n   final BlockingQueue<E> queue;\n   volatile E item = null;\n   QueueTaker(BlockingQueue<E> q) { this.queue = q; }\n   public boolean block() throws InterruptedException {\n     if (item == null)\n       item = queue.take();\n     return true;\n   }\n   public boolean isReleasable() {\n     return item != null || (item = queue.poll()) != null;\n   }\n   public E getItem() { // call after pool.managedBlock completes\n     return item;\n   }\n }}</pre>",
            "since": "",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "block",
                    "comment_text": "Possibly blocks the current thread, for example waiting for\n a lock or condition.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting\n (the method is not required to do so, but is allowed to)"
                        }
                    ]
                },
                {
                    "name": "isReleasable",
                    "comment_text": "Returns {@code true} if blocking is unnecessary.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.Executors",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "Factory and utility methods for {@link Executor}, {@link\n ExecutorService}, {@link ScheduledExecutorService}, {@link\n ThreadFactory}, and {@link Callable} classes defined in this\n package. This class supports the following kinds of methods:\n\n <ul>\n   <li> Methods that create and return an {@link ExecutorService}\n        set up with commonly useful configuration settings.\n   <li> Methods that create and return a {@link ScheduledExecutorService}\n        set up with commonly useful configuration settings.\n   <li> Methods that create and return a \"wrapped\" ExecutorService, that\n        disables reconfiguration by making implementation-specific methods\n        inaccessible.\n   <li> Methods that create and return a {@link ThreadFactory}\n        that sets newly created threads to a known state.\n   <li> Methods that create and return a {@link Callable}\n        out of other closure-like forms, so they can be used\n        in execution methods requiring <tt>Callable</tt>.\n </ul>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newFixedThreadPool",
                    "comment_text": "Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue.  At any point, at most\n <tt>nThreads</tt> threads will be active processing tasks.\n If additional tasks are submitted when all threads are active,\n they will wait in the queue until a thread is available.\n If any thread terminates due to a failure during execution\n prior to shutdown, a new one will take its place if needed to\n execute subsequent tasks.  The threads in the pool will exist\n until it is explicitly {@link ExecutorService#shutdown shutdown}.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [
                        {
                            "name": "nThreads",
                            "comment_text": "the number of threads in the pool",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newFixedThreadPool",
                    "comment_text": "Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue, using the provided\n ThreadFactory to create new threads when needed.  At any point,\n at most <tt>nThreads</tt> threads will be active processing\n tasks.  If additional tasks are submitted when all threads are\n active, they will wait in the queue until a thread is\n available.  If any thread terminates due to a failure during\n execution prior to shutdown, a new one will take its place if\n needed to execute subsequent tasks.  The threads in the pool will\n exist until it is explicitly {@link ExecutorService#shutdown\n shutdown}.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [
                        {
                            "name": "nThreads",
                            "comment_text": "the number of threads in the pool",
                            "type": "int"
                        },
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when creating new threads",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newSingleThreadExecutor",
                    "comment_text": "Creates an Executor that uses a single worker thread operating\n off an unbounded queue. (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n <tt>newFixedThreadPool(1)</tt> the returned executor is\n guaranteed not to be reconfigurable to use additional threads.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newSingleThreadExecutor",
                    "comment_text": "Creates an Executor that uses a single worker thread operating\n off an unbounded queue, and uses the provided ThreadFactory to\n create a new thread when needed. Unlike the otherwise\n equivalent <tt>newFixedThreadPool(1, threadFactory)</tt> the\n returned executor is guaranteed not to be reconfigurable to use\n additional threads.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when creating new\n threads",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newCachedThreadPool",
                    "comment_text": "Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available.  These pools will typically improve the performance\n of programs that execute many short-lived asynchronous tasks.\n Calls to <tt>execute</tt> will reuse previously constructed\n threads if available. If no existing thread is available, a new\n thread will be created and added to the pool. Threads that have\n not been used for sixty seconds are terminated and removed from\n the cache. Thus, a pool that remains idle for long enough will\n not consume any resources. Note that pools with similar\n properties but different details (for example, timeout parameters)\n may be created using {@link ThreadPoolExecutor} constructors.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newCachedThreadPool",
                    "comment_text": "Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available, and uses the provided\n ThreadFactory to create new threads when needed.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when creating new threads",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newSingleThreadScheduledExecutor",
                    "comment_text": "Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.\n (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n <tt>newScheduledThreadPool(1)</tt> the returned executor is\n guaranteed not to be reconfigurable to use additional threads.",
                    "return_type": "java.util.concurrent.ScheduledExecutorService",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newSingleThreadScheduledExecutor",
                    "comment_text": "Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.  (Note\n however that if this single thread terminates due to a failure\n during execution prior to shutdown, a new one will take its\n place if needed to execute subsequent tasks.)  Tasks are\n guaranteed to execute sequentially, and no more than one task\n will be active at any given time. Unlike the otherwise\n equivalent <tt>newScheduledThreadPool(1, threadFactory)</tt>\n the returned executor is guaranteed not to be reconfigurable to\n use additional threads.",
                    "return_type": "java.util.concurrent.ScheduledExecutorService",
                    "parameters": [
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when creating new\n threads",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newScheduledThreadPool",
                    "comment_text": "Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.",
                    "return_type": "java.util.concurrent.ScheduledExecutorService",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool,\n even if they are idle.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newScheduledThreadPool",
                    "comment_text": "Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.",
                    "return_type": "java.util.concurrent.ScheduledExecutorService",
                    "parameters": [
                        {
                            "name": "corePoolSize",
                            "comment_text": "the number of threads to keep in the pool,\n even if they are idle.",
                            "type": "int"
                        },
                        {
                            "name": "threadFactory",
                            "comment_text": "the factory to use when the executor\n creates a new thread.",
                            "type": "java.util.concurrent.ThreadFactory"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unconfigurableExecutorService",
                    "comment_text": "Returns an object that delegates all defined {@link\n ExecutorService} methods to the given executor, but not any\n other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation.",
                    "return_type": "java.util.concurrent.ExecutorService",
                    "parameters": [
                        {
                            "name": "executor",
                            "comment_text": "the underlying implementation",
                            "type": "java.util.concurrent.ExecutorService"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "unconfigurableScheduledExecutorService",
                    "comment_text": "Returns an object that delegates all defined {@link\n ScheduledExecutorService} methods to the given executor, but\n not any other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation.",
                    "return_type": "java.util.concurrent.ScheduledExecutorService",
                    "parameters": [
                        {
                            "name": "executor",
                            "comment_text": "the underlying implementation",
                            "type": "java.util.concurrent.ScheduledExecutorService"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "defaultThreadFactory",
                    "comment_text": "Returns a default thread factory used to create new threads.\n This factory creates all new threads used by an Executor in the\n same {@link ThreadGroup}. If there is a {@link\n java.lang.SecurityManager}, it uses the group of {@link\n System#getSecurityManager}, else the group of the thread\n invoking this <tt>defaultThreadFactory</tt> method. Each new\n thread is created as a non-daemon thread with priority set to\n the smaller of <tt>Thread.NORM_PRIORITY</tt> and the maximum\n priority permitted in the thread group.  New threads have names\n accessible via {@link Thread#getName} of\n <em>pool-N-thread-M</em>, where <em>N</em> is the sequence\n number of this factory, and <em>M</em> is the sequence number\n of the thread created by this factory.",
                    "return_type": "java.util.concurrent.ThreadFactory",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "privilegedThreadFactory",
                    "comment_text": "Returns a thread factory used to create new threads that\n have the same permissions as the current thread.\n This factory creates threads with the same settings as {@link\n Executors#defaultThreadFactory}, additionally setting the\n AccessControlContext and contextClassLoader of new threads to\n be the same as the thread invoking this\n <tt>privilegedThreadFactory</tt> method.  A new\n <tt>privilegedThreadFactory</tt> can be created within an\n {@link AccessController#doPrivileged} action setting the\n current thread's access control context to create threads with\n the selected permission settings holding within that action.\n\n <p> Note that while tasks running within such threads will have\n the same access control and class loader settings as the\n current thread, they need not have the same {@link\n java.lang.ThreadLocal} or {@link\n java.lang.InheritableThreadLocal} values. If necessary,\n particular values of thread locals can be set or reset before\n any task runs in {@link ThreadPoolExecutor} subclasses using\n {@link ThreadPoolExecutor#beforeExecute}. Also, if it is\n necessary to initialize worker threads to have the same\n InheritableThreadLocal settings as some other designated\n thread, you can create a custom ThreadFactory in which that\n thread waits for and services requests to create others that\n will inherit its values.",
                    "return_type": "java.util.concurrent.ThreadFactory",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "callable",
                    "comment_text": "Returns a {@link Callable} object that, when\n called, runs the given task and returns the given result.  This\n can be useful when applying methods requiring a\n <tt>Callable</tt> to an otherwise resultless action.",
                    "return_type": "java.util.concurrent.Callable",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to run",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "the result to return",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "callable",
                    "comment_text": "Returns a {@link Callable} object that, when\n called, runs the given task and returns <tt>null</tt>.",
                    "return_type": "java.util.concurrent.Callable",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to run",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "callable",
                    "comment_text": "Returns a {@link Callable} object that, when\n called, runs the given privileged action and returns its result.",
                    "return_type": "java.util.concurrent.Callable",
                    "parameters": [
                        {
                            "name": "action",
                            "comment_text": "the privileged action to run",
                            "type": "java.security.PrivilegedAction"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "callable",
                    "comment_text": "Returns a {@link Callable} object that, when\n called, runs the given privileged exception action and returns\n its result.",
                    "return_type": "java.util.concurrent.Callable",
                    "parameters": [
                        {
                            "name": "action",
                            "comment_text": "the privileged exception action to run",
                            "type": "java.security.PrivilegedExceptionAction"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "privilegedCallable",
                    "comment_text": "Returns a {@link Callable} object that will, when\n called, execute the given <tt>callable</tt> under the current\n access control context. This method should normally be\n invoked within an {@link AccessController#doPrivileged} action\n to create callables that will, if possible, execute under the\n selected permission settings holding within that action; or if\n not possible, throw an associated {@link\n AccessControlException}.",
                    "return_type": "java.util.concurrent.Callable",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the underlying task",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "privilegedCallableUsingCurrentClassLoader",
                    "comment_text": "Returns a {@link Callable} object that will, when\n called, execute the given <tt>callable</tt> under the current\n access control context, with the current context class loader\n as the context class loader. This method should normally be\n invoked within an {@link AccessController#doPrivileged} action\n to create callables that will, if possible, execute under the\n selected permission settings holding within that action; or if\n not possible, throw an associated {@link\n AccessControlException}.",
                    "return_type": "java.util.concurrent.Callable",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the underlying task",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ExecutorService",
            "interfaces": [
                "java.util.concurrent.Executor"
            ],
            "superclass": "",
            "comment_text": "An {@link Executor} that provides methods to manage termination and\n methods that can produce a {@link Future} for tracking progress of\n one or more asynchronous tasks.\n\n <p> An <tt>ExecutorService</tt> can be shut down, which will cause\n it to reject new tasks.  Two different methods are provided for\n shutting down an <tt>ExecutorService</tt>. The {@link #shutdown}\n method will allow previously submitted tasks to execute before\n terminating, while the {@link #shutdownNow} method prevents waiting\n tasks from starting and attempts to stop currently executing tasks.\n Upon termination, an executor has no tasks actively executing, no\n tasks awaiting execution, and no new tasks can be submitted.  An\n unused <tt>ExecutorService</tt> should be shut down to allow\n reclamation of its resources.\n\n <p> Method <tt>submit</tt> extends base method {@link\n Executor#execute} by creating and returning a {@link Future} that\n can be used to cancel execution and/or wait for completion.\n Methods <tt>invokeAny</tt> and <tt>invokeAll</tt> perform the most\n commonly useful forms of bulk execution, executing a collection of\n tasks and then waiting for at least one, or all, to\n complete. (Class {@link ExecutorCompletionService} can be used to\n write customized variants of these methods.)\n\n <p>The {@link Executors} class provides factory methods for the\n executor services provided in this package.\n\n <h3>Usage Examples</h3>\n\n Here is a sketch of a network service in which threads in a thread\n pool service incoming requests. It uses the preconfigured {@link\n Executors#newFixedThreadPool} factory method:\n\n <pre>\n class NetworkService implements Runnable {\n   private final ServerSocket serverSocket;\n   private final ExecutorService pool;\n\n   public NetworkService(int port, int poolSize)\n       throws IOException {\n     serverSocket = new ServerSocket(port);\n     pool = Executors.newFixedThreadPool(poolSize);\n   }\n\n   public void run() { // run the service\n     try {\n       for (;;) {\n         pool.execute(new Handler(serverSocket.accept()));\n       }\n     } catch (IOException ex) {\n       pool.shutdown();\n     }\n   }\n }\n\n class Handler implements Runnable {\n   private final Socket socket;\n   Handler(Socket socket) { this.socket = socket; }\n   public void run() {\n     // read and service request on socket\n   }\n }\n </pre>\n\n The following method shuts down an <tt>ExecutorService</tt> in two phases,\n first by calling <tt>shutdown</tt> to reject incoming tasks, and then\n calling <tt>shutdownNow</tt>, if necessary, to cancel any lingering tasks:\n\n <pre>\n void shutdownAndAwaitTermination(ExecutorService pool) {\n   pool.shutdown(); // Disable new tasks from being submitted\n   try {\n     // Wait a while for existing tasks to terminate\n     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {\n       pool.shutdownNow(); // Cancel currently executing tasks\n       // Wait a while for tasks to respond to being cancelled\n       if (!pool.awaitTermination(60, TimeUnit.SECONDS))\n           System.err.println(\"Pool did not terminate\");\n     }\n   } catch (InterruptedException ie) {\n     // (Re-)Cancel if current thread also interrupted\n     pool.shutdownNow();\n     // Preserve interrupt status\n     Thread.currentThread().interrupt();\n   }\n }\n </pre>\n\n <p>Memory consistency effects: Actions in a thread prior to the\n submission of a {@code Runnable} or {@code Callable} task to an\n {@code ExecutorService}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n any actions taken by that task, which in turn <i>happen-before</i> the\n result is retrieved via {@code Future.get()}.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "shutdown",
                    "comment_text": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n <p>This method does not wait for previously submitted tasks to\n complete execution.  Use {@link #awaitTermination awaitTermination}\n to do that.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "shutdownNow",
                    "comment_text": "Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution.\n\n <p>This method does not wait for actively executing tasks to\n terminate.  Use {@link #awaitTermination awaitTermination} to\n do that.\n\n <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  For example, typical\n implementations will cancel via {@link Thread#interrupt}, so any\n task that fails to respond to interrupts may never terminate.",
                    "return_type": "java.util.List",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isShutdown",
                    "comment_text": "Returns <tt>true</tt> if this executor has been shut down.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isTerminated",
                    "comment_text": "Returns <tt>true</tt> if all tasks have completed following shut down.\n Note that <tt>isTerminated</tt> is never <tt>true</tt> unless\n either <tt>shutdown</tt> or <tt>shutdownNow</tt> was called first.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitTermination",
                    "comment_text": "Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thread is\n interrupted, whichever happens first.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "Submits a value-returning task for execution and returns a\n Future representing the pending results of the task. The\n Future's <tt>get</tt> method will return the task's result upon\n successful completion.\n\n <p>\n If you would like to immediately block waiting\n for a task, you can use constructions of the form\n <tt>result = exec.submit(aCallable).get();</tt>\n\n <p> Note: The {@link Executors} class includes a set of methods\n that can convert some other common closure-like objects,\n for example, {@link java.security.PrivilegedAction} to\n {@link Callable} form so they can be submitted.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to submit",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "Submits a Runnable task for execution and returns a Future\n representing that task. The Future's <tt>get</tt> method will\n return the given result upon successful completion.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to submit",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "the result to return",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "Submits a Runnable task for execution and returns a Future\n representing that task. The Future's <tt>get</tt> method will\n return <tt>null</tt> upon <em>successful</em> completion.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to submit",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "Executes the given tasks, returning a list of Futures holding\n their status and results when all complete.\n {@link Future#isDone} is <tt>true</tt> for each\n element of the returned list.\n Note that a <em>completed</em> task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "the collection of tasks",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting, in\n         which case unfinished tasks are cancelled."
                        }
                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the timeout expires, whichever happens first.\n {@link Future#isDone} is <tt>true</tt> for each\n element of the returned list.\n Upon return, tasks that have not completed are cancelled.\n Note that a <em>completed</em> task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "the collection of tasks",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting, in\n         which case unfinished tasks are cancelled"
                        }
                    ]
                },
                {
                    "name": "invokeAny",
                    "comment_text": "Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do. Upon normal or exceptional return,\n tasks that have not completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "the collection of tasks",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": "if no task successfully completes"
                        }
                    ]
                },
                {
                    "name": "invokeAny",
                    "comment_text": "Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do before the given timeout elapses.\n Upon normal or exceptional return, tasks that have not\n completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "the collection of tasks",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": "if no task successfully completes"
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": "if the given timeout elapses before\n         any task successfully completes"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ExecutorCompletionService",
            "interfaces": [
                "java.util.concurrent.CompletionService"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A {@link CompletionService} that uses a supplied {@link Executor}\n to execute tasks.  This class arranges that submitted tasks are,\n upon completion, placed on a queue accessible using {@code take}.\n The class is lightweight enough to be suitable for transient use\n when processing groups of tasks.\n\n <p>\n\n <b>Usage Examples.</b>\n\n Suppose you have a set of solvers for a certain problem, each\n returning a value of some type {@code Result}, and would like to\n run them concurrently, processing the results of each of them that\n return a non-null value, in some method {@code use(Result r)}. You\n could write this as:\n\n <pre> {@code\n void solve(Executor e,\n            Collection<Callable<Result>> solvers)\n     throws InterruptedException, ExecutionException {\n     CompletionService<Result> ecs\n         = new ExecutorCompletionService<Result>(e);\n     for (Callable<Result> s : solvers)\n         ecs.submit(s);\n     int n = solvers.size();\n     for (int i = 0; i < n; ++i) {\n         Result r = ecs.take().get();\n         if (r != null)\n             use(r);\n     }\n }}</pre>\n\n Suppose instead that you would like to use the first non-null result\n of the set of tasks, ignoring any that encounter exceptions,\n and cancelling all other tasks when the first one is ready:\n\n <pre> {@code\n void solve(Executor e,\n            Collection<Callable<Result>> solvers)\n     throws InterruptedException {\n     CompletionService<Result> ecs\n         = new ExecutorCompletionService<Result>(e);\n     int n = solvers.size();\n     List<Future<Result>> futures\n         = new ArrayList<Future<Result>>(n);\n     Result result = null;\n     try {\n         for (Callable<Result> s : solvers)\n             futures.add(ecs.submit(s));\n         for (int i = 0; i < n; ++i) {\n             try {\n                 Result r = ecs.take().get();\n                 if (r != null) {\n                     result = r;\n                     break;\n                 }\n             } catch (ExecutionException ignore) {}\n         }\n     }\n     finally {\n         for (Future<Result> f : futures)\n             f.cancel(true);\n     }\n\n     if (result != null)\n         use(result);\n }}</pre>",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ExecutorCompletionService",
                    "comment_text": "Creates an ExecutorCompletionService using the supplied\n executor for base task execution and a\n {@link LinkedBlockingQueue} as a completion queue.",
                    "parameters": [
                        {
                            "name": "executor",
                            "comment_text": "the executor to use",
                            "type": "java.util.concurrent.Executor"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ExecutorCompletionService",
                    "comment_text": "Creates an ExecutorCompletionService using the supplied\n executor for base task execution and the supplied queue as its\n completion queue.",
                    "parameters": [
                        {
                            "name": "executor",
                            "comment_text": "the executor to use",
                            "type": "java.util.concurrent.Executor"
                        },
                        {
                            "name": "completionQueue",
                            "comment_text": "the queue to use as the completion queue\n        normally one dedicated for use by this service. This\n        queue is treated as unbounded -- failed attempted\n        {@code Queue.add} operations for completed taskes cause\n        them not to be retrievable.",
                            "type": "java.util.concurrent.BlockingQueue"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.Executor",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "An object that executes submitted {@link Runnable} tasks. This\n interface provides a way of decoupling task submission from the\n mechanics of how each task will be run, including details of thread\n use, scheduling, etc.  An <tt>Executor</tt> is normally used\n instead of explicitly creating threads. For example, rather than\n invoking <tt>new Thread(new(RunnableTask())).start()</tt> for each\n of a set of tasks, you might use:\n\n <pre>\n Executor executor = <em>anExecutor</em>;\n executor.execute(new RunnableTask1());\n executor.execute(new RunnableTask2());\n ...\n </pre>\n\n However, the <tt>Executor</tt> interface does not strictly\n require that execution be asynchronous. In the simplest case, an\n executor can run the submitted task immediately in the caller's\n thread:\n\n <pre>\n class DirectExecutor implements Executor {\n     public void execute(Runnable r) {\n         r.run();\n     }\n }</pre>\n\n More typically, tasks are executed in some thread other\n than the caller's thread.  The executor below spawns a new thread\n for each task.\n\n <pre>\n class ThreadPerTaskExecutor implements Executor {\n     public void execute(Runnable r) {\n         new Thread(r).start();\n     }\n }</pre>\n\n Many <tt>Executor</tt> implementations impose some sort of\n limitation on how and when tasks are scheduled.  The executor below\n serializes the submission of tasks to a second executor,\n illustrating a composite executor.\n\n  <pre> {@code\n class SerialExecutor implements Executor {\n   final Queue<Runnable> tasks = new ArrayDeque<Runnable>();\n   final Executor executor;\n   Runnable active;\n\n   SerialExecutor(Executor executor) {\n     this.executor = executor;\n   }\n\n   public synchronized void execute(final Runnable r) {\n     tasks.offer(new Runnable() {\n       public void run() {\n         try {\n           r.run();\n         } finally {\n           scheduleNext();\n         }\n       }\n     });\n     if (active == null) {\n       scheduleNext();\n     }\n   }\n\n   protected synchronized void scheduleNext() {\n     if ((active = tasks.poll()) != null) {\n       executor.execute(active);\n     }\n   }\n }}</pre>\n\n The <tt>Executor</tt> implementations provided in this package\n implement {@link ExecutorService}, which is a more extensive\n interface.  The {@link ThreadPoolExecutor} class provides an\n extensible thread pool implementation. The {@link Executors} class\n provides convenient factory methods for these Executors.\n\n <p>Memory consistency effects: Actions in a thread prior to\n submitting a {@code Runnable} object to an {@code Executor}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n its execution begins, perhaps in another thread.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "execute",
                    "comment_text": "Executes the given command at some time in the future.  The command\n may execute in a new thread, in a pooled thread, or in the calling\n thread, at the discretion of the <tt>Executor</tt> implementation.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "command",
                            "comment_text": "the runnable task",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ExecutionException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "Exception thrown when attempting to retrieve the result of a task\n that aborted by throwing an exception. This exception can be\n inspected using the {@link #getCause()} method.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.Future"
            ],
            "constructors": [
                {
                    "name": "ExecutionException",
                    "comment_text": "Constructs an <tt>ExecutionException</tt> with no detail message.\n The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause(Throwable) initCause}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ExecutionException",
                    "comment_text": "Constructs an <tt>ExecutionException</tt> with the specified detail\n message. The cause is not initialized, and may subsequently be\n initialized by a call to {@link #initCause(Throwable) initCause}.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ExecutionException",
                    "comment_text": "Constructs an <tt>ExecutionException</tt> with the specified detail\n message and cause.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link #getCause()} method)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ExecutionException",
                    "comment_text": "Constructs an <tt>ExecutionException</tt> with the specified cause.\n The detail message is set to:\n <pre>\n  (cause == null ? null : cause.toString())</pre>\n (which typically contains the class and detail message of\n <tt>cause</tt>).",
                    "parameters": [
                        {
                            "name": "cause",
                            "comment_text": "the cause (which is saved for later retrieval by the\n         {@link #getCause()} method)",
                            "type": "java.lang.Throwable"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.concurrent.Exchanger",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A synchronization point at which threads can pair and swap elements\n within pairs.  Each thread presents some object on entry to the\n {@link #exchange exchange} method, matches with a partner thread,\n and receives its partner's object on return.  An Exchanger may be\n viewed as a bidirectional form of a {@link SynchronousQueue}.\n Exchangers may be useful in applications such as genetic algorithms\n and pipeline designs.\n\n <p><b>Sample Usage:</b>\n Here are the highlights of a class that uses an {@code Exchanger}\n to swap buffers between threads so that the thread filling the\n buffer gets a freshly emptied one when it needs it, handing off the\n filled one to the thread emptying the buffer.\n <pre>{@code\n class FillAndEmpty {\n   Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>();\n   DataBuffer initialEmptyBuffer = ... a made-up type\n   DataBuffer initialFullBuffer = ...\n\n   class FillingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialEmptyBuffer;\n       try {\n         while (currentBuffer != null) {\n           addToBuffer(currentBuffer);\n           if (currentBuffer.isFull())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ... }\n     }\n   }\n\n   class EmptyingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialFullBuffer;\n       try {\n         while (currentBuffer != null) {\n           takeFromBuffer(currentBuffer);\n           if (currentBuffer.isEmpty())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ...}\n     }\n   }\n\n   void start() {\n     new Thread(new FillingLoop()).start();\n     new Thread(new EmptyingLoop()).start();\n   }\n }\n }</pre>\n\n <p>Memory consistency effects: For each pair of threads that\n successfully exchange objects via an {@code Exchanger}, actions\n prior to the {@code exchange()} in each thread\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n those subsequent to a return from the corresponding {@code exchange()}\n in the other thread.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "Exchanger",
                    "comment_text": "Creates a new Exchanger.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "exchange",
                    "comment_text": "Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted}),\n and then transfers the given object to it, receiving its object\n in return.\n\n <p>If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n <p>If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of two things happens:\n <ul>\n <li>Some other thread enters the exchange; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "x",
                            "comment_text": "the object to exchange",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread was\n         interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "exchange",
                    "comment_text": "Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted} or\n the specified waiting time elapses), and then transfers the given\n object to it, receiving its object in return.\n\n <p>If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n <p>If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of three things happens:\n <ul>\n <li>Some other thread enters the exchange; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then {@link\n TimeoutException} is thrown.  If the time is less than or equal\n to zero, the method will not wait at all.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "x",
                            "comment_text": "the object to exchange",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the <tt>timeout</tt> argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread was\n         interrupted while waiting"
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": "if the specified waiting time elapses\n         before another thread enters the exchange"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.Delayed",
            "interfaces": [
                "java.lang.Comparable"
            ],
            "superclass": "",
            "comment_text": "A mix-in style interface for marking objects that should be\n acted upon after a given delay.\n\n <p>An implementation of this interface must define a\n <tt>compareTo</tt> method that provides an ordering consistent with\n its <tt>getDelay</tt> method.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getDelay",
                    "comment_text": "Returns the remaining delay associated with this object, in the\n given time unit.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "unit",
                            "comment_text": "the time unit",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.DelayQueue",
            "interfaces": [
                "java.util.concurrent.BlockingQueue"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An unbounded {@linkplain BlockingQueue blocking queue} of\n <tt>Delayed</tt> elements, in which an element can only be taken\n when its delay has expired.  The <em>head</em> of the queue is that\n <tt>Delayed</tt> element whose delay expired furthest in the\n past.  If no delay has expired there is no head and <tt>poll</tt>\n will return <tt>null</tt>. Expiration occurs when an element's\n <tt>getDelay(TimeUnit.NANOSECONDS)</tt> method returns a value less\n than or equal to zero.  Even though unexpired elements cannot be\n removed using <tt>take</tt> or <tt>poll</tt>, they are otherwise\n treated as normal elements. For example, the <tt>size</tt> method\n returns the count of both expired and unexpired elements.\n This queue does not permit null elements.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "DelayQueue",
                    "comment_text": "Creates a new <tt>DelayQueue</tt> that is initially empty.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "DelayQueue",
                    "comment_text": "Creates a <tt>DelayQueue</tt> initially containing the elements of the\n given collection of {@link Delayed} instances.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into this delay queue.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.util.concurrent.Delayed"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this delay queue.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.util.concurrent.Delayed"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.util.concurrent.Delayed"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.util.concurrent.Delayed"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "This parameter is ignored as the method never blocks",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "This parameter is ignored as the method never blocks",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of this queue, or returns <tt>null</tt>\n if this queue has no elements with an expired delay.",
                    "return_type": "java.util.concurrent.Delayed",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue.",
                    "return_type": "java.util.concurrent.Delayed",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue,\n or the specified wait time expires.",
                    "return_type": "java.util.concurrent.Delayed",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Retrieves, but does not remove, the head of this queue, or\n returns <tt>null</tt> if this queue is empty.  Unlike\n <tt>poll</tt>, if no expired elements are available in the queue,\n this method returns the element that will expire next,\n if one exists.",
                    "return_type": "java.util.concurrent.Delayed",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Atomically removes all of the elements from this delay queue.\n The queue will be empty after this call returns.\n Elements with an unexpired delay are not waited for; they are\n simply discarded from the queue.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Always returns <tt>Integer.MAX_VALUE</tt> because\n a <tt>DelayQueue</tt> is not capacity constrained.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue.\n The returned array elements are in no particular order.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n <tt>null</tt>.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>The following code can be used to dump a delay queue into a newly\n allocated array of <tt>Delayed</tt>:\n\n <pre>\n     Delayed[] a = q.toArray(new Delayed[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this\n queue, if it is present, whether or not it has expired.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over all the elements (both expired and\n unexpired) in this queue. The iterator does not return the\n elements in any particular order.\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.CyclicBarrier",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A synchronization aid that allows a set of threads to all wait for\n each other to reach a common barrier point.  CyclicBarriers are\n useful in programs involving a fixed sized party of threads that\n must occasionally wait for each other. The barrier is called\n <em>cyclic</em> because it can be re-used after the waiting threads\n are released.\n\n <p>A <tt>CyclicBarrier</tt> supports an optional {@link Runnable} command\n that is run once per barrier point, after the last thread in the party\n arrives, but before any threads are released.\n This <em>barrier action</em> is useful\n for updating shared-state before any of the parties continue.\n\n <p><b>Sample usage:</b> Here is an example of\n  using a barrier in a parallel decomposition design:\n <pre>\n class Solver {\n   final int N;\n   final float[][] data;\n   final CyclicBarrier barrier;\n\n   class Worker implements Runnable {\n     int myRow;\n     Worker(int row) { myRow = row; }\n     public void run() {\n       while (!done()) {\n         processRow(myRow);\n\n         try {\n           barrier.await();\n         } catch (InterruptedException ex) {\n           return;\n         } catch (BrokenBarrierException ex) {\n           return;\n         }\n       }\n     }\n   }\n\n   public Solver(float[][] matrix) {\n     data = matrix;\n     N = matrix.length;\n     barrier = new CyclicBarrier(N,\n                                 new Runnable() {\n                                   public void run() {\n                                     mergeRows(...);\n                                   }\n                                 });\n     for (int i = 0; i < N; ++i)\n       new Thread(new Worker(i)).start();\n\n     waitUntilDone();\n   }\n }\n </pre>\n Here, each worker thread processes a row of the matrix then waits at the\n barrier until all rows have been processed. When all rows are processed\n the supplied {@link Runnable} barrier action is executed and merges the\n rows. If the merger\n determines that a solution has been found then <tt>done()</tt> will return\n <tt>true</tt> and each worker will terminate.\n\n <p>If the barrier action does not rely on the parties being suspended when\n it is executed, then any of the threads in the party could execute that\n action when it is released. To facilitate this, each invocation of\n {@link #await} returns the arrival index of that thread at the barrier.\n You can then choose which thread should execute the barrier action, for\n example:\n <pre>  if (barrier.await() == 0) {\n     // log the completion of this iteration\n   }</pre>\n\n <p>The <tt>CyclicBarrier</tt> uses an all-or-none breakage model\n for failed synchronization attempts: If a thread leaves a barrier\n point prematurely because of interruption, failure, or timeout, all\n other threads waiting at that barrier point will also leave\n abnormally via {@link BrokenBarrierException} (or\n {@link InterruptedException} if they too were interrupted at about\n the same time).\n\n <p>Memory consistency effects: Actions in a thread prior to calling\n {@code await()}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions that are part of the barrier action, which in turn\n <i>happen-before</i> actions following a successful return from the\n corresponding {@code await()} in other threads.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.CountDownLatch"
            ],
            "constructors": [
                {
                    "name": "CyclicBarrier",
                    "comment_text": "Creates a new <tt>CyclicBarrier</tt> that will trip when the\n given number of parties (threads) are waiting upon it, and which\n will execute the given barrier action when the barrier is tripped,\n performed by the last thread entering the barrier.",
                    "parameters": [
                        {
                            "name": "parties",
                            "comment_text": "the number of threads that must invoke {@link #await}\n        before the barrier is tripped",
                            "type": "int"
                        },
                        {
                            "name": "barrierAction",
                            "comment_text": "the command to execute when the barrier is\n        tripped, or {@code null} if there is no action",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "CyclicBarrier",
                    "comment_text": "Creates a new <tt>CyclicBarrier</tt> that will trip when the\n given number of parties (threads) are waiting upon it, and\n does not perform a predefined action when the barrier is tripped.",
                    "parameters": [
                        {
                            "name": "parties",
                            "comment_text": "the number of threads that must invoke {@link #await}\n        before the barrier is tripped",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getParties",
                    "comment_text": "Returns the number of parties required to trip this barrier.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Waits until all {@linkplain #getParties parties} have invoked\n <tt>await</tt> on this barrier.\n\n <p>If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n <ul>\n <li>The last thread arrives; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n one of the other waiting threads; or\n <li>Some other thread times out while waiting for barrier; or\n <li>Some other thread invokes {@link #reset} on this barrier.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the barrier is {@link #reset} while any thread is waiting,\n or if the barrier {@linkplain #isBroken is broken} when\n <tt>await</tt> is invoked, or while any thread is waiting, then\n {@link BrokenBarrierException} is thrown.\n\n <p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting,\n then all other waiting threads will throw\n {@link BrokenBarrierException} and the barrier is placed in the broken\n state.\n\n <p>If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread was interrupted\n         while waiting"
                        },
                        {
                            "name": "java.util.concurrent.BrokenBarrierException",
                            "comment_text": "if <em>another</em> thread was\n         interrupted or timed out while the current thread was\n         waiting, or the barrier was reset, or the barrier was\n         broken when {@code await} was called, or the barrier\n         action (if present) failed due an exception."
                        }
                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Waits until all {@linkplain #getParties parties} have invoked\n <tt>await</tt> on this barrier, or the specified waiting time elapses.\n\n <p>If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n <ul>\n <li>The last thread arrives; or\n <li>The specified timeout elapses; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n one of the other waiting threads; or\n <li>Some other thread times out while waiting for barrier; or\n <li>Some other thread invokes {@link #reset} on this barrier.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then {@link TimeoutException}\n is thrown. If the time is less than or equal to zero, the\n method will not wait at all.\n\n <p>If the barrier is {@link #reset} while any thread is waiting,\n or if the barrier {@linkplain #isBroken is broken} when\n <tt>await</tt> is invoked, or while any thread is waiting, then\n {@link BrokenBarrierException} is thrown.\n\n <p>If any thread is {@linkplain Thread#interrupt interrupted} while\n waiting, then all other waiting threads will throw {@link\n BrokenBarrierException} and the barrier is placed in the broken\n state.\n\n <p>If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the time to wait for the barrier",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread was interrupted\n         while waiting"
                        },
                        {
                            "name": "java.util.concurrent.BrokenBarrierException",
                            "comment_text": "if <em>another</em> thread was\n         interrupted or timed out while the current thread was\n         waiting, or the barrier was reset, or the barrier was broken\n         when {@code await} was called, or the barrier action (if\n         present) failed due an exception"
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": "if the specified timeout elapses"
                        }
                    ]
                },
                {
                    "name": "isBroken",
                    "comment_text": "Queries if this barrier is in a broken state.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "reset",
                    "comment_text": "Resets the barrier to its initial state.  If any parties are\n currently waiting at the barrier, they will return with a\n {@link BrokenBarrierException}. Note that resets <em>after</em>\n a breakage has occurred for other reasons can be complicated to\n carry out; threads need to re-synchronize in some other way,\n and choose one to perform the reset.  It may be preferable to\n instead create a new barrier for subsequent use.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getNumberWaiting",
                    "comment_text": "Returns the number of parties currently waiting at the barrier.\n This method is primarily useful for debugging and assertions.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.CountDownLatch",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A synchronization aid that allows one or more threads to wait until\n a set of operations being performed in other threads completes.\n\n <p>A {@code CountDownLatch} is initialized with a given <em>count</em>.\n The {@link #await await} methods block until the current count reaches\n zero due to invocations of the {@link #countDown} method, after which\n all waiting threads are released and any subsequent invocations of\n {@link #await await} return immediately.  This is a one-shot phenomenon\n -- the count cannot be reset.  If you need a version that resets the\n count, consider using a {@link CyclicBarrier}.\n\n <p>A {@code CountDownLatch} is a versatile synchronization tool\n and can be used for a number of purposes.  A\n {@code CountDownLatch} initialized with a count of one serves as a\n simple on/off latch, or gate: all threads invoking {@link #await await}\n wait at the gate until it is opened by a thread invoking {@link\n #countDown}.  A {@code CountDownLatch} initialized to <em>N</em>\n can be used to make one thread wait until <em>N</em> threads have\n completed some action, or some action has been completed N times.\n\n <p>A useful property of a {@code CountDownLatch} is that it\n doesn't require that threads calling {@code countDown} wait for\n the count to reach zero before proceeding, it simply prevents any\n thread from proceeding past an {@link #await await} until all\n threads could pass.\n\n <p><b>Sample usage:</b> Here is a pair of classes in which a group\n of worker threads use two countdown latches:\n <ul>\n <li>The first is a start signal that prevents any worker from proceeding\n until the driver is ready for them to proceed;\n <li>The second is a completion signal that allows the driver to wait\n until all workers have completed.\n </ul>\n\n <pre>\n class Driver { // ...\n   void main() throws InterruptedException {\n     CountDownLatch startSignal = new CountDownLatch(1);\n     CountDownLatch doneSignal = new CountDownLatch(N);\n\n     for (int i = 0; i < N; ++i) // create and start threads\n       new Thread(new Worker(startSignal, doneSignal)).start();\n\n     doSomethingElse();            // don't let run yet\n     startSignal.countDown();      // let all threads proceed\n     doSomethingElse();\n     doneSignal.await();           // wait for all to finish\n   }\n }\n\n class Worker implements Runnable {\n   private final CountDownLatch startSignal;\n   private final CountDownLatch doneSignal;\n   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {\n      this.startSignal = startSignal;\n      this.doneSignal = doneSignal;\n   }\n   public void run() {\n      try {\n        startSignal.await();\n        doWork();\n        doneSignal.countDown();\n      } catch (InterruptedException ex) {} // return;\n   }\n\n   void doWork() { ... }\n }\n\n </pre>\n\n <p>Another typical usage would be to divide a problem into N parts,\n describe each part with a Runnable that executes that portion and\n counts down on the latch, and queue all the Runnables to an\n Executor.  When all sub-parts are complete, the coordinating thread\n will be able to pass through await. (When threads must repeatedly\n count down in this way, instead use a {@link CyclicBarrier}.)\n\n <pre>\n class Driver2 { // ...\n   void main() throws InterruptedException {\n     CountDownLatch doneSignal = new CountDownLatch(N);\n     Executor e = ...\n\n     for (int i = 0; i < N; ++i) // create and start threads\n       e.execute(new WorkerRunnable(doneSignal, i));\n\n     doneSignal.await();           // wait for all to finish\n   }\n }\n\n class WorkerRunnable implements Runnable {\n   private final CountDownLatch doneSignal;\n   private final int i;\n   WorkerRunnable(CountDownLatch doneSignal, int i) {\n      this.doneSignal = doneSignal;\n      this.i = i;\n   }\n   public void run() {\n      try {\n        doWork(i);\n        doneSignal.countDown();\n      } catch (InterruptedException ex) {} // return;\n   }\n\n   void doWork() { ... }\n }\n\n </pre>\n\n <p>Memory consistency effects: Until the count reaches\n zero, actions in a thread prior to calling\n {@code countDown()}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions following a successful return from a corresponding\n {@code await()} in another thread.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "CountDownLatch",
                    "comment_text": "Constructs a {@code CountDownLatch} initialized with the given count.",
                    "parameters": [
                        {
                            "name": "count",
                            "comment_text": "the number of times {@link #countDown} must be invoked\n        before threads can pass through {@link #await}",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "await",
                    "comment_text": "Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is {@linkplain Thread#interrupt interrupted}.\n\n <p>If the current count is zero then this method returns immediately.\n\n <p>If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n <ul>\n <li>The count reaches zero due to invocations of the\n {@link #countDown} method; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         while waiting"
                        }
                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is {@linkplain Thread#interrupt interrupted},\n or the specified waiting time elapses.\n\n <p>If the current count is zero then this method returns immediately\n with the value {@code true}.\n\n <p>If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of three things happen:\n <ul>\n <li>The count reaches zero due to invocations of the\n {@link #countDown} method; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </ul>\n\n <p>If the count reaches zero then the method returns with the\n value {@code true}.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the {@code timeout} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         while waiting"
                        }
                    ]
                },
                {
                    "name": "countDown",
                    "comment_text": "Decrements the count of the latch, releasing all waiting threads if\n the count reaches zero.\n\n <p>If the current count is greater than zero then it is decremented.\n If the new count is zero then all waiting threads are re-enabled for\n thread scheduling purposes.\n\n <p>If the current count equals zero then nothing happens.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getCount",
                    "comment_text": "Returns the current count.\n\n <p>This method is typically used for debugging and testing purposes.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this latch, as well as its state.\n The state, in brackets, includes the String {@code \"Count =\"}\n followed by the current count.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.CopyOnWriteArraySet",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractSet",
            "comment_text": "A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}\n for all of its operations.  Thus, it shares the same basic properties:\n <ul>\n  <li>It is best suited for applications in which set sizes generally\n       stay small, read-only operations\n       vastly outnumber mutative operations, and you need\n       to prevent interference among threads during traversal.\n  <li>It is thread-safe.\n  <li>Mutative operations (<tt>add</tt>, <tt>set</tt>, <tt>remove</tt>, etc.)\n      are expensive since they usually entail copying the entire underlying\n      array.\n  <li>Iterators do not support the mutative <tt>remove</tt> operation.\n  <li>Traversal via iterators is fast and cannot encounter\n      interference from other threads. Iterators rely on\n      unchanging snapshots of the array at the time the iterators were\n      constructed.\n </ul>\n\n <p> <b>Sample Usage.</b> The following code sketch uses a\n copy-on-write set to maintain a set of Handler objects that\n perform some action upon state updates.\n\n  <pre> {@code\n class Handler { void handle(); ... }\n\n class X {\n   private final CopyOnWriteArraySet<Handler> handlers\n     = new CopyOnWriteArraySet<Handler>();\n   public void addHandler(Handler h) { handlers.add(h); }\n\n   private long internalState;\n   private synchronized void changeState() { internalState = ...; }\n\n   public void update() {\n     changeState();\n     for (Handler handler : handlers)\n        handler.handle();\n   }\n }}</pre>\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.CopyOnWriteArrayList"
            ],
            "constructors": [
                {
                    "name": "CopyOnWriteArraySet",
                    "comment_text": "Creates an empty set.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "CopyOnWriteArraySet",
                    "comment_text": "Creates a set containing all of the elements of the specified\n collection.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this set.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this set contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this set is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this set.\n If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the\n elements in the same order.\n\n <p>The returned array will be \"safe\" in that no references to it\n are maintained by this set.  (In other words, this method must\n allocate a new array even if this set is backed by an array).\n The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this set; the\n runtime type of the returned array is that of the specified array.\n If the set fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this set.\n\n <p>If this set fits in the specified array with room to spare\n (i.e., the array has more elements than this set), the element in\n the array immediately following the end of the set is set to\n <tt>null</tt>.  (This is useful in determining the length of this\n set <i>only</i> if the caller knows that this set does not contain\n any null elements.)\n\n <p>If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements\n in the same order.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a set known to contain only strings.\n The following code can be used to dump the set into a newly allocated\n array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of this set are to be\n        stored, if it is big enough; otherwise, a new array of the same\n        runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this set.\n The set will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the specified element from this set if it is present.\n More formally, removes an element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,\n if this set contains such an element.  Returns <tt>true</tt> if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be removed from this set, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element <tt>e</tt> to this set if\n the set contains no element <tt>e2</tt> such that\n <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be added to this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns <tt>true</tt> if this set contains all of the elements of the\n specified collection.  If the specified collection is also a set, this\n method returns <tt>true</tt> if it is a <i>subset</i> of this set.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection to be checked for containment in this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Adds all of the elements in the specified collection to this set if\n they're not already present.  If the specified collection is also a\n set, the <tt>addAll</tt> operation effectively modifies this set so\n that its value is the <i>union</i> of the two sets.  The behavior of\n this operation is undefined if the specified collection is modified\n while the operation is in progress.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this set all of its elements that are contained in the\n specified collection.  If the specified collection is also a set,\n this operation effectively modifies this set so that its value is the\n <i>asymmetric set difference</i> of the two sets.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this set that are contained in the\n specified collection.  In other words, removes from this set all of\n its elements that are not contained in the specified collection.  If\n the specified collection is also a set, this operation effectively\n modifies this set so that its value is the <i>intersection</i> of the\n two sets.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be retained in this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements contained in this set\n in the order in which these elements were added.\n\n <p>The returned iterator provides a snapshot of the state of the set\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt> method.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this set for equality.\n Returns {@code true} if the specified object is the same object\n as this object, or if it is also a {@link Set} and the elements\n returned by an {@linkplain List#iterator() iterator} over the\n specified set are the same as the elements returned by an\n iterator over this set.  More formally, the two iterators are\n considered to return the same elements if they return the same\n number of elements and for every element {@code e1} returned by\n the iterator over the specified set, there is an element\n {@code e2} returned by the iterator over this set such that\n {@code (e1==null ? e2==null : e1.equals(e2))}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.CopyOnWriteArrayList",
            "interfaces": [
                "java.util.List",
                "java.util.RandomAccess",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A thread-safe variant of {@link java.util.ArrayList} in which all mutative\n operations (<tt>add</tt>, <tt>set</tt>, and so on) are implemented by\n making a fresh copy of the underlying array.\n\n <p> This is ordinarily too costly, but may be <em>more</em> efficient\n than alternatives when traversal operations vastly outnumber\n mutations, and is useful when you cannot or don't want to\n synchronize traversals, yet need to preclude interference among\n concurrent threads.  The \"snapshot\" style iterator method uses a\n reference to the state of the array at the point that the iterator\n was created. This array never changes during the lifetime of the\n iterator, so interference is impossible and the iterator is\n guaranteed not to throw <tt>ConcurrentModificationException</tt>.\n The iterator will not reflect additions, removals, or changes to\n the list since the iterator was created.  Element-changing\n operations on iterators themselves (<tt>remove</tt>, <tt>set</tt>, and\n <tt>add</tt>) are not supported. These methods throw\n <tt>UnsupportedOperationException</tt>.\n\n <p>All elements are permitted, including <tt>null</tt>.\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code CopyOnWriteArrayList}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code CopyOnWriteArrayList} in another thread.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "CopyOnWriteArrayList",
                    "comment_text": "Creates an empty list.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "CopyOnWriteArrayList",
                    "comment_text": "Creates a list containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of initially held elements",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "CopyOnWriteArrayList",
                    "comment_text": "Creates a list holding a copy of the given array.",
                    "parameters": [
                        {
                            "name": "toCopyIn",
                            "comment_text": "the array (a copy of this array is used as the\n        internal array)",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this list.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this list contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this list contains the specified element.\n More formally, returns <tt>true</tt> if and only if this list contains\n at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this list is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "indexOf",
                    "comment_text": "Returns the index of the first occurrence of the specified element in\n this list, searching forwards from <tt>index</tt>, or returns -1 if\n the element is not found.\n More formally, returns the lowest index <tt>i</tt> such that\n <tt>(i&nbsp;&gt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "index",
                            "comment_text": "index to start searching from",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastIndexOf",
                    "comment_text": "Returns the index of the last occurrence of the specified element in\n this list, searching backwards from <tt>index</tt>, or returns -1 if\n the element is not found.\n More formally, returns the highest index <tt>i</tt> such that\n <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(e==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;e.equals(get(i))))</tt>,\n or -1 if there is no such index.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to search for",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "index",
                            "comment_text": "index to start searching backwards from",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this list.  (The elements themselves\n are not copied.)",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n <p>If this list fits in the specified array with room to spare\n (i.e., the array has more elements than this list), the element in\n the array immediately following the end of the list is set to\n <tt>null</tt>.  (This is useful in determining the length of this\n list <i>only</i> if the caller knows that this list does not contain\n any null elements.)\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose <tt>x</tt> is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of <tt>String</tt>:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that <tt>toArray(new Object[0])</tt> is identical in function to\n <tt>toArray()</tt>.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the list are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose.",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Replaces the element at the specified position in this list with the\n specified element.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Appends the specified element to the end of this list.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be appended to this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices).",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        },
                        {
                            "name": "element",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the list.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n <tt>i</tt> such that\n <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>\n (if such an element exists).  Returns <tt>true</tt> if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this list, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addIfAbsent",
                    "comment_text": "Append the element if not present.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be added to this list, if absent",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsAll",
                    "comment_text": "Returns <tt>true</tt> if this list contains all of the elements of the\n specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection to be checked for containment in this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this list all of its elements that are contained in\n the specified collection. This is a particularly expensive operation\n in this class because of the need for an internal temporary array.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "retainAll",
                    "comment_text": "Retains only the elements in this list that are contained in the\n specified collection.  In other words, removes from this list all of\n its elements that are not contained in the specified collection.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be retained in this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAllAbsent",
                    "comment_text": "Appends all of the elements in the specified collection that\n are not already contained in this list, to the end of\n this list, in the order that they are returned by the\n specified collection's iterator.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this list.\n The list will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified collection to the end\n of this list, in the order that they are returned by the specified\n collection's iterator.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in this list in the order that they are returned by the\n specified collection's iterator.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "index at which to insert the first element\n        from the specified collection",
                            "type": "int"
                        },
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be added to this list",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string representation of this list.  The string\n representation consists of the string representations of the list's\n elements in the order they are returned by its iterator, enclosed in\n square brackets (<tt>\"[]\"</tt>).  Adjacent elements are separated by\n the characters <tt>\", \"</tt> (comma and space).  Elements are\n converted to strings as by {@link String#valueOf(Object)}.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this list for equality.\n Returns {@code true} if the specified object is the same object\n as this object, or if it is also a {@link List} and the sequence\n of elements returned by an {@linkplain List#iterator() iterator}\n over the specified list is the same as the sequence returned by\n an iterator over this list.  The two sequences are considered to\n be the same if they have the same length and corresponding\n elements at the same position in the sequence are <em>equal</em>.\n Two elements {@code e1} and {@code e2} are considered\n <em>equal</em> if {@code (e1==null ? e2==null : e1.equals(e2))}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to be compared for equality with this list",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hashCode",
                    "comment_text": "Returns the hash code value for this list.\n\n <p>This implementation uses the definition in {@link List#hashCode}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this list in proper sequence.\n\n <p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt> method.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "{@inheritDoc}\n\n <p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt>, <tt>set</tt> or <tt>add</tt> methods.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "listIterator",
                    "comment_text": "{@inheritDoc}\n\n <p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does <em>NOT</em> support the\n <tt>remove</tt>, <tt>set</tt> or <tt>add</tt> methods.",
                    "return_type": "java.util.ListIterator",
                    "parameters": [
                        {
                            "name": "index",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subList",
                    "comment_text": "Returns a view of the portion of this list between\n <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.\n The returned list is backed by this list, so changes in the\n returned list are reflected in this list.\n\n <p>The semantics of the list returned by this method become\n undefined if the backing list (i.e., this list) is modified in\n any way other than via the returned list.",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "fromIndex",
                            "comment_text": "low endpoint (inclusive) of the subList",
                            "type": "int"
                        },
                        {
                            "name": "toIndex",
                            "comment_text": "high endpoint (exclusive) of the subList",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentSkipListSet",
            "interfaces": [
                "java.util.NavigableSet",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractSet",
            "comment_text": "A scalable concurrent {@link NavigableSet} implementation based on\n a {@link ConcurrentSkipListMap}.  The elements of the set are kept\n sorted according to their {@linkplain Comparable natural ordering},\n or by a {@link Comparator} provided at set creation time, depending\n on which constructor is used.\n\n <p>This implementation provides expected average <i>log(n)</i> time\n cost for the <tt>contains</tt>, <tt>add</tt>, and <tt>remove</tt>\n operations and their variants.  Insertion, removal, and access\n operations safely execute concurrently by multiple threads.\n Iterators are <i>weakly consistent</i>, returning elements\n reflecting the state of the set at some point at or since the\n creation of the iterator.  They do <em>not</em> throw {@link\n ConcurrentModificationException}, and may proceed concurrently with\n other operations.  Ascending ordered views and their iterators are\n faster than descending ones.\n\n <p>Beware that, unlike in most collections, the <tt>size</tt>\n method is <em>not</em> a constant-time operation. Because of the\n asynchronous nature of these sets, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations <tt>addAll</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, <tt>containsAll</tt>,\n <tt>equals</tt>, and <tt>toArray</tt> are <em>not</em> guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an <tt>addAll</tt> operation might view only some\n of the added elements.\n\n <p>This class and its iterators implement all of the\n <em>optional</em> methods of the {@link Set} and {@link Iterator}\n interfaces. Like most other concurrent collection implementations,\n this class does not permit the use of <tt>null</tt> elements,\n because <tt>null</tt> arguments and return values cannot be reliably\n distinguished from the absence of elements.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ConcurrentSkipListSet",
                    "comment_text": "Constructs a new, empty set that orders its elements according to\n their {@linkplain Comparable natural ordering}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentSkipListSet",
                    "comment_text": "Constructs a new, empty set that orders its elements according to\n the specified comparator.",
                    "parameters": [
                        {
                            "name": "comparator",
                            "comment_text": "the comparator that will be used to order this set.\n        If <tt>null</tt>, the {@linkplain Comparable natural\n        ordering} of the elements will be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentSkipListSet",
                    "comment_text": "Constructs a new set containing the elements in the specified\n collection, that orders its elements according to their\n {@linkplain Comparable natural ordering}.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "The elements that will comprise the new set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentSkipListSet",
                    "comment_text": "Constructs a new set containing the same elements and using the\n same ordering as the specified sorted set.",
                    "parameters": [
                        {
                            "name": "s",
                            "comment_text": "sorted set whose elements will comprise the new set",
                            "type": "java.util.SortedSet"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this <tt>ConcurrentSkipListSet</tt>\n instance. (The elements themselves are not cloned.)",
                    "return_type": "java.util.concurrent.ConcurrentSkipListSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this set.  If this set\n contains more than <tt>Integer.MAX_VALUE</tt> elements, it\n returns <tt>Integer.MAX_VALUE</tt>.\n\n <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these sets, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this set contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this set contains the specified element.\n More formally, returns <tt>true</tt> if and only if this set\n contains an element <tt>e</tt> such that <tt>o.equals(e)</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element <tt>e</tt> to this set if\n the set contains no element <tt>e2</tt> such that <tt>e.equals(e2)</tt>.\n If this set already contains the element, the call leaves the set\n unchanged and returns <tt>false</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "element to be added to this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the specified element from this set if it is present.\n More formally, removes an element <tt>e</tt> such that\n <tt>o.equals(e)</tt>, if this set contains such an element.\n Returns <tt>true</tt> if this set contained the element (or\n equivalently, if this set changed as a result of the call).\n (This set will not contain the element once the call returns.)",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be removed from this set, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this set.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this set in ascending order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "Returns an iterator over the elements in this set in descending order.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this set for equality.  Returns\n <tt>true</tt> if the specified object is also a set, the two sets\n have the same size, and every member of the specified set is\n contained in this set (or equivalently, every member of this set is\n contained in the specified set).  This definition ensures that the\n equals method works properly across different implementations of the\n set interface.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "the object to be compared for equality with this set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeAll",
                    "comment_text": "Removes from this set all of its elements that are contained in\n the specified collection.  If the specified collection is also\n a set, this operation effectively modifies this set so that its\n value is the <i>asymmetric set difference</i> of the two sets.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "collection containing elements to be removed from this set",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lower",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floor",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceiling",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higher",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "comparator",
                    "comment_text": "",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "first",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "last",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "toElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailSet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [
                        {
                            "name": "fromElement",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingSet",
                    "comment_text": "Returns a reverse order view of the elements contained in this set.\n The descending set is backed by this set, so changes to the set are\n reflected in the descending set, and vice-versa.\n\n <p>The returned set has an ordering equivalent to\n <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n The expression {@code s.descendingSet().descendingSet()} returns a\n view of {@code s} essentially equivalent to {@code s}.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentSkipListMap",
            "interfaces": [
                "java.util.concurrent.ConcurrentNavigableMap",
                "java.lang.Cloneable",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "A scalable concurrent {@link ConcurrentNavigableMap} implementation.\n The map is sorted according to the {@linkplain Comparable natural\n ordering} of its keys, or by a {@link Comparator} provided at map\n creation time, depending on which constructor is used.\n\n <p>This class implements a concurrent variant of <a\n href=\"http://en.wikipedia.org/wiki/Skip_list\" target=\"_top\">SkipLists</a>\n providing expected average <i>log(n)</i> time cost for the\n <tt>containsKey</tt>, <tt>get</tt>, <tt>put</tt> and\n <tt>remove</tt> operations and their variants.  Insertion, removal,\n update, and access operations safely execute concurrently by\n multiple threads.  Iterators are <i>weakly consistent</i>, returning\n elements reflecting the state of the map at some point at or since\n the creation of the iterator.  They do <em>not</em> throw {@link\n ConcurrentModificationException}, and may proceed concurrently with\n other operations. Ascending key ordered views and their iterators\n are faster than descending ones.\n\n <p>All <tt>Map.Entry</tt> pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do <em>not</em> support the <tt>Entry.setValue</tt>\n method. (Note however that it is possible to change mappings in the\n associated map using <tt>put</tt>, <tt>putIfAbsent</tt>, or\n <tt>replace</tt>, depending on exactly which effect you need.)\n\n <p>Beware that, unlike in most collections, the <tt>size</tt>\n method is <em>not</em> a constant-time operation. Because of the\n asynchronous nature of these maps, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations <tt>putAll</tt>, <tt>equals</tt>,\n <tt>toArray</tt>, <tt>containsValue</tt>, and <tt>clear</tt> are\n <em>not</em> guaranteed to be performed atomically. For example, an\n iterator operating concurrently with a <tt>putAll</tt> operation\n might view only some of the added elements.\n\n <p>This class and its views and iterators implement all of the\n <em>optional</em> methods of the {@link Map} and {@link Iterator}\n interfaces. Like most other concurrent collections, this class does\n <em>not</em> permit the use of <tt>null</tt> keys or values because some\n null return values cannot be reliably distinguished from the absence of\n elements.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ConcurrentSkipListMap",
                    "comment_text": "Constructs a new, empty map, sorted according to the\n {@linkplain Comparable natural ordering} of the keys.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentSkipListMap",
                    "comment_text": "Constructs a new, empty map, sorted according to the specified\n comparator.",
                    "parameters": [
                        {
                            "name": "comparator",
                            "comment_text": "the comparator that will be used to order this map.\n        If <tt>null</tt>, the {@linkplain Comparable natural\n        ordering} of the keys will be used.",
                            "type": "java.util.Comparator"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentSkipListMap",
                    "comment_text": "Constructs a new map containing the same mappings as the given map,\n sorted according to the {@linkplain Comparable natural ordering} of\n the keys.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map whose mappings are to be placed in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentSkipListMap",
                    "comment_text": "Constructs a new map containing the same mappings and using the\n same ordering as the specified sorted map.",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the sorted map whose mappings are to be placed in this\n        map, and whose comparator is to be used to sort this map",
                            "type": "java.util.SortedMap"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "clone",
                    "comment_text": "Returns a shallow copy of this <tt>ConcurrentSkipListMap</tt>\n instance. (The keys and values themselves are not cloned.)",
                    "return_type": "java.util.concurrent.ConcurrentSkipListMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Returns <tt>true</tt> if this map contains a mapping for the specified\n key.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key} compares\n equal to {@code k} according to the map's ordering, then this\n method returns {@code v}; otherwise it returns {@code null}.\n (There can be at most one such mapping.)",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the mapping for the specified key from this map if present.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key for which mapping should be removed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.  This operation requires time linear in the\n map size. Additionally, it is possible for the map to change\n during execution of this method, in which case the returned\n result may be inaccurate.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.  If this map\n contains more than <tt>Integer.MAX_VALUE</tt> elements, it\n returns <tt>Integer.MAX_VALUE</tt>.\n\n <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these maps, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this map contains no key-value mappings.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n <p>This method is equivalent to method {@code navigableKeySet}.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "navigableKeySet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection's iterator returns the values in ascending order\n of the corresponding keys.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set's iterator returns the entries in ascending key order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n <p>The <tt>Map.Entry</tt> elements returned by\n <tt>iterator.next()</tt> do <em>not</em> support the\n <tt>setValue</tt> operation.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingKeySet",
                    "comment_text": "",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "equals",
                    "comment_text": "Compares the specified object with this map for equality.\n Returns <tt>true</tt> if the given object is also a map and the\n two maps represent the same mappings.  More formally, two maps\n <tt>m1</tt> and <tt>m2</tt> represent the same mappings if\n <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This\n operation may return misleading results if either map is\n concurrently modified during execution of this method.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be compared for equality with this map",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putIfAbsent",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replace",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "oldValue",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replace",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "comparator",
                    "comment_text": "",
                    "return_type": "java.util.Comparator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lowerEntry",
                    "comment_text": "Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or <tt>null</tt> if there is\n no such key. The returned entry does <em>not</em> support the\n <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lowerKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floorEntry",
                    "comment_text": "Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or <tt>null</tt> if there\n is no such key. The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floorKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceilingEntry",
                    "comment_text": "Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or <tt>null</tt> if\n there is no such entry. The returned entry does <em>not</em>\n support the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ceilingKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higherEntry",
                    "comment_text": "Returns a key-value mapping associated with the least key\n strictly greater than the given key, or <tt>null</tt> if there\n is no such key. The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "higherKey",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "firstEntry",
                    "comment_text": "Returns a key-value mapping associated with the least\n key in this map, or <tt>null</tt> if the map is empty.\n The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lastEntry",
                    "comment_text": "Returns a key-value mapping associated with the greatest\n key in this map, or <tt>null</tt> if the map is empty.\n The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirstEntry",
                    "comment_text": "Removes and returns a key-value mapping associated with\n the least key in this map, or <tt>null</tt> if the map is empty.\n The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLastEntry",
                    "comment_text": "Removes and returns a key-value mapping associated with\n the greatest key in this map, or <tt>null</tt> if the map is empty.\n The returned entry does <em>not</em> support\n the <tt>Entry.setValue</tt> method.",
                    "return_type": "java.util.Map.Entry",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentNavigableMap",
            "interfaces": [
                "java.util.concurrent.ConcurrentMap",
                "java.util.NavigableMap"
            ],
            "superclass": "",
            "comment_text": "A {@link ConcurrentMap} supporting {@link NavigableMap} operations,\n and recursively so for its navigable sub-maps.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "subMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "fromInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toInclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "inclusive",
                            "comment_text": "",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "subMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "headMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "toKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tailMap",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [
                        {
                            "name": "fromKey",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingMap",
                    "comment_text": "Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.\n\n <p>The returned map has an ordering equivalent to\n <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n The expression {@code m.descendingMap().descendingMap()} returns a\n view of {@code m} essentially equivalent to {@code m}.",
                    "return_type": "java.util.concurrent.ConcurrentNavigableMap",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "navigableKeySet",
                    "comment_text": "Returns a {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n <p>This method is equivalent to method {@code navigableKeySet}.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingKeySet",
                    "comment_text": "Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n The set's iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the {@code Iterator.remove}, {@code Set.remove},\n {@code removeAll}, {@code retainAll}, and {@code clear}\n operations.  It does not support the {@code add} or {@code addAll}\n operations.\n\n <p>The view's {@code iterator} is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.NavigableSet",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentMap",
            "interfaces": [
                "java.util.Map"
            ],
            "superclass": "",
            "comment_text": "A {@link java.util.Map} providing additional atomic\n <tt>putIfAbsent</tt>, <tt>remove</tt>, and <tt>replace</tt> methods.\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code ConcurrentMap} as a key or value\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that object from\n the {@code ConcurrentMap} in another thread.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "putIfAbsent",
                    "comment_text": "If the specified key is not already associated\n with a value, associate it with the given value.\n This is equivalent to\n <pre>\n   if (!map.containsKey(key))\n       return map.put(key, value);\n   else\n       return map.get(key);</pre>\n except that the action is performed atomically.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the entry for a key only if currently mapped to a given value.\n This is equivalent to\n <pre>\n   if (map.containsKey(key) &amp;&amp; map.get(key).equals(value)) {\n       map.remove(key);\n       return true;\n   } else return false;</pre>\n except that the action is performed atomically.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value expected to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replace",
                    "comment_text": "Replaces the entry for a key only if currently mapped to a given value.\n This is equivalent to\n <pre>\n   if (map.containsKey(key) &amp;&amp; map.get(key).equals(oldValue)) {\n       map.put(key, newValue);\n       return true;\n   } else return false;</pre>\n except that the action is performed atomically.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "oldValue",
                            "comment_text": "value expected to be associated with the specified key",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replace",
                    "comment_text": "Replaces the entry for a key only if currently mapped to some value.\n This is equivalent to\n <pre>\n   if (map.containsKey(key)) {\n       return map.put(key, value);\n   } else return null;</pre>\n except that the action is performed atomically.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentLinkedQueue",
            "interfaces": [
                "java.util.Queue",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The <em>head</em> of the queue is that element that has been on the\n queue the longest time.\n The <em>tail</em> of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n A {@code ConcurrentLinkedQueue} is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of {@code null} elements.\n\n <p>This implementation employs an efficient &quot;wait-free&quot;\n algorithm based on one described in <a\n href=\"http://www.cs.rochester.edu/u/michael/PODC96.html\"> Simple,\n Fast, and Practical Non-Blocking and Blocking Concurrent Queue\n Algorithms</a> by Maged M. Michael and Michael L. Scott.\n\n <p>Iterators are <i>weakly consistent</i>, returning elements\n reflecting the state of the queue at some point at or since the\n creation of the iterator.  They do <em>not</em> throw {@link\n java.util.ConcurrentModificationException}, and may proceed concurrently\n with other operations.  Elements contained in the queue since the creation\n of the iterator will be returned exactly once.\n\n <p>Beware that, unlike in most collections, the {@code size} method\n is <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code addAll},\n {@code removeAll}, {@code retainAll}, {@code containsAll},\n {@code equals}, and {@code toArray} are <em>not</em> guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an {@code addAll} operation might view only some\n of the added elements.\n\n <p>This class and its iterator implement all of the <em>optional</em>\n methods of the {@link Queue} and {@link Iterator} interfaces.\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code ConcurrentLinkedQueue}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code ConcurrentLinkedQueue} in another thread.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ConcurrentLinkedQueue",
                    "comment_text": "Creates a {@code ConcurrentLinkedQueue} that is initially empty.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentLinkedQueue",
                    "comment_text": "Creates a {@code ConcurrentLinkedQueue}\n initially containing the elements of the given collection,\n added in traversal order of the collection's iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n {@link IllegalStateException} or return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns {@code true} if this queue contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this queue.  If this queue\n contains more than {@code Integer.MAX_VALUE} elements, returns\n {@code Integer.MAX_VALUE}.\n\n <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.\n Additionally, if elements are added or removed during execution\n of this method, the returned result may be inaccurate.  Thus,\n this method is typically not very useful in concurrent\n applications.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified collection to the end of\n this queue, in the order that they are returned by the specified\n collection's iterator.  Attempts to {@code addAll} of a queue to\n itself result in {@code IllegalArgumentException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the elements to be inserted into this queue",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentLinkedDeque",
            "interfaces": [
                "java.util.Deque",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractCollection",
            "comment_text": "An unbounded concurrent {@linkplain Deque deque} based on linked nodes.\n Concurrent insertion, removal, and access operations execute safely\n across multiple threads.\n A {@code ConcurrentLinkedDeque} is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of {@code null} elements.\n\n <p>Iterators are <i>weakly consistent</i>, returning elements\n reflecting the state of the deque at some point at or since the\n creation of the iterator.  They do <em>not</em> throw {@link\n java.util.ConcurrentModificationException\n ConcurrentModificationException}, and may proceed concurrently with\n other operations.\n\n <p>Beware that, unlike in most collections, the {@code size} method\n is <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these deques, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code addAll},\n {@code removeAll}, {@code retainAll}, {@code containsAll},\n {@code equals}, and {@code toArray} are <em>not</em> guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an {@code addAll} operation might view only some\n of the added elements.\n\n <p>This class and its iterator implement all of the <em>optional</em>\n methods of the {@link Deque} and {@link Iterator} interfaces.\n\n <p>Memory consistency effects: As with other concurrent collections,\n actions in a thread prior to placing an object into a\n {@code ConcurrentLinkedDeque}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code ConcurrentLinkedDeque} in another thread.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.7",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ConcurrentLinkedDeque",
                    "comment_text": "Constructs an empty deque.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentLinkedDeque",
                    "comment_text": "Constructs a deque initially containing the elements of\n the given collection, added in traversal order of the\n collection's iterator.",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "addFirst",
                    "comment_text": "Inserts the specified element at the front of this deque.\n As the deque is unbounded, this method will never throw\n {@link IllegalStateException}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addLast",
                    "comment_text": "Inserts the specified element at the end of this deque.\n As the deque is unbounded, this method will never throw\n {@link IllegalStateException}.\n\n <p>This method is equivalent to {@link #add}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "Inserts the specified element at the front of this deque.\n As the deque is unbounded, this method will never return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "Inserts the specified element at the end of this deque.\n As the deque is unbounded, this method will never return {@code false}.\n\n <p>This method is equivalent to {@link #add}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peekLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirst",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLast",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this deque.\n As the deque is unbounded, this method will never return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the tail of this deque.\n As the deque is unbounded, this method will never throw\n {@link IllegalStateException} or return {@code false}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "element",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "pop",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeFirstOccurrence",
                    "comment_text": "Removes the first element {@code e} such that\n {@code o.equals(e)}, if such an element exists in this deque.\n If the deque does not contain the element, it is unchanged.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLastOccurrence",
                    "comment_text": "Removes the last element {@code e} such that\n {@code o.equals(e)}, if such an element exists in this deque.\n If the deque does not contain the element, it is unchanged.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this deque contains at least one\n element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element whose presence in this deque is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isEmpty",
                    "comment_text": "Returns {@code true} if this collection contains no elements.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this deque.  If this deque\n contains more than {@code Integer.MAX_VALUE} elements, it\n returns {@code Integer.MAX_VALUE}.\n\n <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these deques, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first element {@code e} such that\n {@code o.equals(e)}, if such an element exists in this deque.\n If the deque does not contain the element, it is unchanged.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAll",
                    "comment_text": "Appends all of the elements in the specified collection to the end of\n this deque, in the order that they are returned by the specified\n collection's iterator.  Attempts to {@code addAll} of a deque to\n itself result in {@code IllegalArgumentException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the elements to be inserted into this deque",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the elements from this deque.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this deque, in\n proper sequence (from first to last element).\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this deque,\n in proper sequence (from first to last element); the runtime\n type of the returned array is that of the specified array.  If\n the deque fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of\n the specified array and the size of this deque.\n\n <p>If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as\n bridge between array-based and collection-based APIs.  Further,\n this method allows precise control over the runtime type of the\n output array, and may, under certain circumstances, be used to\n save allocation costs.\n\n <p>Suppose {@code x} is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the deque are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "descendingIterator",
                    "comment_text": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n\n <p>The returned iterator is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException}, and guarantees to traverse\n elements as they existed upon construction of the iterator, and\n may (but is not guaranteed to) reflect any modifications\n subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ConcurrentHashMap",
            "interfaces": [
                "java.util.concurrent.ConcurrentMap",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractMap",
            "comment_text": "A hash table supporting full concurrency of retrievals and\n adjustable expected concurrency for updates. This class obeys the\n same functional specification as {@link java.util.Hashtable}, and\n includes versions of methods corresponding to each method of\n <tt>Hashtable</tt>. However, even though all operations are\n thread-safe, retrieval operations do <em>not</em> entail locking,\n and there is <em>not</em> any support for locking the entire table\n in a way that prevents all access.  This class is fully\n interoperable with <tt>Hashtable</tt> in programs that rely on its\n thread safety but not on its synchronization details.\n\n <p> Retrieval operations (including <tt>get</tt>) generally do not\n block, so may overlap with update operations (including\n <tt>put</tt> and <tt>remove</tt>). Retrievals reflect the results\n of the most recently <em>completed</em> update operations holding\n upon their onset.  For aggregate operations such as <tt>putAll</tt>\n and <tt>clear</tt>, concurrent retrievals may reflect insertion or\n removal of only some entries.  Similarly, Iterators and\n Enumerations return elements reflecting the state of the hash table\n at some point at or since the creation of the iterator/enumeration.\n They do <em>not</em> throw {@link ConcurrentModificationException}.\n However, iterators are designed to be used by only one thread at a time.\n\n <p> The allowed concurrency among update operations is guided by\n the optional <tt>concurrencyLevel</tt> constructor argument\n (default <tt>16</tt>), which is used as a hint for internal sizing.  The\n table is internally partitioned to try to permit the indicated\n number of concurrent updates without contention. Because placement\n in hash tables is essentially random, the actual concurrency will\n vary.  Ideally, you should choose a value to accommodate as many\n threads as will ever concurrently modify the table. Using a\n significantly higher value than you need can waste space and time,\n and a significantly lower value can lead to thread contention. But\n overestimates and underestimates within an order of magnitude do\n not usually have much noticeable impact. A value of one is\n appropriate when it is known that only one thread will modify and\n all others will only read. Also, resizing this or any other kind of\n hash table is a relatively slow operation, so, when possible, it is\n a good idea to provide estimates of expected table sizes in\n constructors.\n\n <p>This class and its views and iterators implement all of the\n <em>optional</em> methods of the {@link Map} and {@link Iterator}\n interfaces.\n\n <p> Like {@link Hashtable} but unlike {@link HashMap}, this class\n does <em>not</em> allow <tt>null</tt> to be used as a key or value.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ConcurrentHashMap",
                    "comment_text": "Creates a new, empty map with the specified initial\n capacity, load factor and concurrency level.",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity. The implementation\n performs internal sizing to accommodate this many elements.",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor threshold, used to control resizing.\n Resizing may be performed when the average number of elements per\n bin exceeds this threshold.",
                            "type": "float"
                        },
                        {
                            "name": "concurrencyLevel",
                            "comment_text": "the estimated number of concurrently\n updating threads. The implementation performs internal sizing\n to try to accommodate this many threads.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentHashMap",
                    "comment_text": "Creates a new, empty map with the specified initial capacity\n and load factor and with the default concurrencyLevel (16).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "The implementation performs internal\n sizing to accommodate this many elements.",
                            "type": "int"
                        },
                        {
                            "name": "loadFactor",
                            "comment_text": "the load factor threshold, used to control resizing.\n Resizing may be performed when the average number of elements per\n bin exceeds this threshold.",
                            "type": "float"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentHashMap",
                    "comment_text": "Creates a new, empty map with the specified initial capacity,\n and with default load factor (0.75) and concurrencyLevel (16).",
                    "parameters": [
                        {
                            "name": "initialCapacity",
                            "comment_text": "the initial capacity. The implementation\n performs internal sizing to accommodate this many elements.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentHashMap",
                    "comment_text": "Creates a new, empty map with a default initial capacity (16),\n load factor (0.75) and concurrencyLevel (16).",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ConcurrentHashMap",
                    "comment_text": "Creates a new map with the same mappings as the given map.\n The map is created with a capacity of 1.5 times the number\n of mappings in the given map or 16 (whichever is greater),\n and a default load factor (0.75) and concurrencyLevel (16).",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "the map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "isEmpty",
                    "comment_text": "Returns <tt>true</tt> if this map contains no key-value mappings.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of key-value mappings in this map.  If the\n map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n <p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code key.equals(k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  (There can be at most one such mapping.)",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsKey",
                    "comment_text": "Tests if the specified object is a key in this table.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "possible key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "containsValue",
                    "comment_text": "Returns <tt>true</tt> if this map maps one or more keys to the\n specified value. Note: This method requires a full internal\n traversal of the hash table, and so is much slower than\n method <tt>containsKey</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "value whose presence in this map is to be tested",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Legacy method testing if some key maps into the specified value\n in this table.  This method is identical in functionality to\n {@link #containsValue}, and exists solely to ensure\n full compatibility with class {@link java.util.Hashtable},\n which supported this method prior to introduction of the\n Java Collections framework.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "value",
                            "comment_text": "a value to search for",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Maps the specified key to the specified value in this table.\n Neither the key nor the value can be null.\n\n <p> The value can be retrieved by calling the <tt>get</tt> method\n with a key that is equal to the original key.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "key with which the specified value is to be associated",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "value to be associated with the specified key",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putIfAbsent",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putAll",
                    "comment_text": "Copies all of the mappings from the specified map to this one.\n These mappings replace any mappings that this map had for any of the\n keys currently in the specified map.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "m",
                            "comment_text": "mappings to be stored in this map",
                            "type": "java.util.Map"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the key (and its corresponding value) from this map.\n This method does nothing if the key is not in the map.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "the key that needs to be removed",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replace",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "oldValue",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "replace",
                    "comment_text": "{@inheritDoc}",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "key",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "value",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Removes all of the mappings from this map.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keySet",
                    "comment_text": "Returns a {@link Set} view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from this map,\n via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "values",
                    "comment_text": "Returns a {@link Collection} view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from this map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "entrySet",
                    "comment_text": "Returns a {@link Set} view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n operations.  It does not support the <tt>add</tt> or\n <tt>addAll</tt> operations.\n\n <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n that will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.Set",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "keys",
                    "comment_text": "Returns an enumeration of the keys in this table.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "elements",
                    "comment_text": "Returns an enumeration of the values in this table.",
                    "return_type": "java.util.Enumeration",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.CompletionService",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed tasks.  Producers\n <tt>submit</tt> tasks for execution. Consumers <tt>take</tt>\n completed tasks and process their results in the order they\n complete.  A <tt>CompletionService</tt> can for example be used to\n manage asynchronous IO, in which tasks that perform reads are\n submitted in one part of a program or system, and then acted upon\n in a different part of the program when the reads complete,\n possibly in a different order than they were requested.\n\n <p>Typically, a <tt>CompletionService</tt> relies on a separate\n {@link Executor} to actually execute the tasks, in which case the\n <tt>CompletionService</tt> only manages an internal completion\n queue. The {@link ExecutorCompletionService} class provides an\n implementation of this approach.\n\n <p>Memory consistency effects: Actions in a thread prior to\n submitting a task to a {@code CompletionService}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions taken by that task, which in turn <i>happen-before</i>\n actions following a successful return from the corresponding {@code take()}.",
            "since": "",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "submit",
                    "comment_text": "Submits a value-returning task for execution and returns a Future\n representing the pending results of the task.  Upon completion,\n this task may be taken or polled.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to submit",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "Submits a Runnable task for execution and returns a Future\n representing that task.  Upon completion, this task may be\n taken or polled.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "the task to submit",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "the result to return upon successful completion",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "Retrieves and removes the Future representing the next\n completed task, waiting if none are yet present.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the Future representing the next\n completed task or <tt>null</tt> if none are present.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait\n time if none are yet present.",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.CancellationException",
            "interfaces": [

            ],
            "superclass": "java.lang.IllegalStateException",
            "comment_text": "Exception indicating that the result of a value-producing task,\n such as a {@link FutureTask}, cannot be retrieved because the task\n was cancelled.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "CancellationException",
                    "comment_text": "Constructs a <tt>CancellationException</tt> with no detail message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "CancellationException",
                    "comment_text": "Constructs a <tt>CancellationException</tt> with the specified detail\n message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.concurrent.Callable",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A task that returns a result and may throw an exception.\n Implementors define a single method with no arguments called\n <tt>call</tt>.\n\n <p>The <tt>Callable</tt> interface is similar to {@link\n java.lang.Runnable}, in that both are designed for classes whose\n instances are potentially executed by another thread.  A\n <tt>Runnable</tt>, however, does not return a result and cannot\n throw a checked exception.\n\n <p> The {@link Executors} class contains utility methods to\n convert from other common forms to <tt>Callable</tt> classes.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.Executor"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "call",
                    "comment_text": "Computes a result, or throws an exception if unable to do so.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.Exception",
                            "comment_text": "if unable to compute a result"
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.BrokenBarrierException",
            "interfaces": [

            ],
            "superclass": "java.lang.Exception",
            "comment_text": "Exception thrown when a thread tries to wait upon a barrier that is\n in a broken state, or which enters the broken state while the thread\n is waiting.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.CyclicBarrier"
            ],
            "constructors": [
                {
                    "name": "BrokenBarrierException",
                    "comment_text": "Constructs a <tt>BrokenBarrierException</tt> with no specified detail\n message.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "BrokenBarrierException",
                    "comment_text": "Constructs a <tt>BrokenBarrierException</tt> with the specified\n detail message.",
                    "parameters": [
                        {
                            "name": "message",
                            "comment_text": "the detail message",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [

            ]
        },
        {
            "name": "java.util.concurrent.BlockingQueue",
            "interfaces": [
                "java.util.Queue"
            ],
            "superclass": "",
            "comment_text": "A {@link java.util.Queue} that additionally supports operations\n that wait for the queue to become non-empty when retrieving an\n element, and wait for space to become available in the queue when\n storing an element.\n\n <p><tt>BlockingQueue</tt> methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n <tt>null</tt> or <tt>false</tt>, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #add add(e)}</td>\n    <td>{@link #offer offer(e)}</td>\n    <td>{@link #put put(e)}</td>\n    <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #remove remove()}</td>\n    <td>{@link #poll poll()}</td>\n    <td>{@link #take take()}</td>\n    <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #element element()}</td>\n    <td>{@link #peek peek()}</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n </table>\n\n <p>A <tt>BlockingQueue</tt> does not accept <tt>null</tt> elements.\n Implementations throw <tt>NullPointerException</tt> on attempts\n to <tt>add</tt>, <tt>put</tt> or <tt>offer</tt> a <tt>null</tt>.  A\n <tt>null</tt> is used as a sentinel value to indicate failure of\n <tt>poll</tt> operations.\n\n <p>A <tt>BlockingQueue</tt> may be capacity bounded. At any given\n time it may have a <tt>remainingCapacity</tt> beyond which no\n additional elements can be <tt>put</tt> without blocking.\n A <tt>BlockingQueue</tt> without any intrinsic capacity constraints always\n reports a remaining capacity of <tt>Integer.MAX_VALUE</tt>.\n\n <p> <tt>BlockingQueue</tt> implementations are designed to be used\n primarily for producer-consumer queues, but additionally support\n the {@link java.util.Collection} interface.  So, for example, it is\n possible to remove an arbitrary element from a queue using\n <tt>remove(x)</tt>. However, such operations are in general\n <em>not</em> performed very efficiently, and are intended for only\n occasional use, such as when a queued message is cancelled.\n\n <p> <tt>BlockingQueue</tt> implementations are thread-safe.  All\n queuing methods achieve their effects atomically using internal\n locks or other forms of concurrency control. However, the\n <em>bulk</em> Collection operations <tt>addAll</tt>,\n <tt>containsAll</tt>, <tt>retainAll</tt> and <tt>removeAll</tt> are\n <em>not</em> necessarily performed atomically unless specified\n otherwise in an implementation. So it is possible, for example, for\n <tt>addAll(c)</tt> to fail (throwing an exception) after adding\n only some of the elements in <tt>c</tt>.\n\n <p>A <tt>BlockingQueue</tt> does <em>not</em> intrinsically support\n any kind of &quot;close&quot; or &quot;shutdown&quot; operation to\n indicate that no more items will be added.  The needs and usage of\n such features tend to be implementation-dependent. For example, a\n common tactic is for producers to insert special\n <em>end-of-stream</em> or <em>poison</em> objects, that are\n interpreted accordingly when taken by consumers.\n\n <p>\n Usage example, based on a typical producer-consumer scenario.\n Note that a <tt>BlockingQueue</tt> can safely be used with multiple\n producers and multiple consumers.\n <pre>\n class Producer implements Runnable {\n   private final BlockingQueue queue;\n   Producer(BlockingQueue q) { queue = q; }\n   public void run() {\n     try {\n       while (true) { queue.put(produce()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   Object produce() { ... }\n }\n\n class Consumer implements Runnable {\n   private final BlockingQueue queue;\n   Consumer(BlockingQueue q) { queue = q; }\n   public void run() {\n     try {\n       while (true) { consume(queue.take()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   void consume(Object x) { ... }\n }\n\n class Setup {\n   void main() {\n     BlockingQueue q = new SomeQueueImplementation();\n     Producer p = new Producer(q);\n     Consumer c1 = new Consumer(q);\n     Consumer c2 = new Consumer(q);\n     new Thread(p).start();\n     new Thread(c1).start();\n     new Thread(c2).start();\n   }\n }\n </pre>\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code BlockingQueue}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code BlockingQueue} in another thread.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n When using a capacity-restricted queue, it is generally preferable to\n use {@link #offer(Object) offer}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and <tt>false</tt> if no space is currently\n available.  When using a capacity-restricted queue, this method is\n generally preferable to {@link #add}, which can fail to insert an\n element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element into this queue, waiting if necessary\n for space to become available.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into this queue, waiting up to the\n specified wait time if necessary for space to become available.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "take",
                    "comment_text": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking, or <tt>Integer.MAX_VALUE</tt> if there is no intrinsic\n limit.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting <tt>remainingCapacity</tt>\n because it may be the case that another thread is about to\n insert or remove an element.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element <tt>e</tt> such\n that <tt>o.equals(e)</tt>, if this queue contains one or more such\n elements.\n Returns <tt>true</tt> if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this queue contains the specified element.\n More formally, returns <tt>true</tt> if and only if this queue contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection <tt>c</tt> may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n <tt>IllegalArgumentException</tt>. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection to transfer elements into",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection <tt>c</tt> may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n <tt>IllegalArgumentException</tt>. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "the collection to transfer elements into",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "the maximum number of elements to transfer",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.BlockingDeque",
            "interfaces": [
                "java.util.concurrent.BlockingQueue",
                "java.util.Deque"
            ],
            "superclass": "",
            "comment_text": "A {@link Deque} that additionally supports blocking operations that wait\n for the deque to become non-empty when retrieving an element, and wait for\n space to become available in the deque when storing an element.\n\n <p><tt>BlockingDeque</tt> methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n <tt>null</tt> or <tt>false</tt>, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 5> <b>First Element (Head)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #addFirst addFirst(e)}</td>\n    <td>{@link #offerFirst(Object) offerFirst(e)}</td>\n    <td>{@link #putFirst putFirst(e)}</td>\n    <td>{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #removeFirst removeFirst()}</td>\n    <td>{@link #pollFirst pollFirst()}</td>\n    <td>{@link #takeFirst takeFirst()}</td>\n    <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #getFirst getFirst()}</td>\n    <td>{@link #peekFirst peekFirst()}</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 5> <b>Last Element (Tail)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td>{@link #addLast addLast(e)}</td>\n    <td>{@link #offerLast(Object) offerLast(e)}</td>\n    <td>{@link #putLast putLast(e)}</td>\n    <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>{@link #removeLast() removeLast()}</td>\n    <td>{@link #pollLast() pollLast()}</td>\n    <td>{@link #takeLast takeLast()}</td>\n    <td>{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>{@link #getLast getLast()}</td>\n    <td>{@link #peekLast peekLast()}</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n </table>\n\n <p>Like any {@link BlockingQueue}, a <tt>BlockingDeque</tt> is thread safe,\n does not permit null elements, and may (or may not) be\n capacity-constrained.\n\n <p>A <tt>BlockingDeque</tt> implementation may be used directly as a FIFO\n <tt>BlockingQueue</tt>. The methods inherited from the\n <tt>BlockingQueue</tt> interface are precisely equivalent to\n <tt>BlockingDeque</tt> methods as indicated in the following table:\n\n <p>\n <table BORDER CELLPADDING=3 CELLSPACING=1>\n  <tr>\n    <td ALIGN=CENTER> <b><tt>BlockingQueue</tt> Method</b></td>\n    <td ALIGN=CENTER> <b>Equivalent <tt>BlockingDeque</tt> Method</b></td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Insert</b></td>\n  </tr>\n  <tr>\n    <td>{@link #add(Object) add(e)}</td>\n    <td>{@link #addLast(Object) addLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #offer(Object) offer(e)}</td>\n    <td>{@link #offerLast(Object) offerLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #put(Object) put(e)}</td>\n    <td>{@link #putLast(Object) putLast(e)}</td>\n  </tr>\n  <tr>\n    <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>\n    <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Remove</b></td>\n  </tr>\n  <tr>\n    <td>{@link #remove() remove()}</td>\n    <td>{@link #removeFirst() removeFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #poll() poll()}</td>\n    <td>{@link #pollFirst() pollFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #take() take()}</td>\n    <td>{@link #takeFirst() takeFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>\n    <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Examine</b></td>\n  </tr>\n  <tr>\n    <td>{@link #element() element()}</td>\n    <td>{@link #getFirst() getFirst()}</td>\n  </tr>\n  <tr>\n    <td>{@link #peek() peek()}</td>\n    <td>{@link #peekFirst() peekFirst()}</td>\n  </tr>\n </table>\n\n <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code BlockingDeque}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code BlockingDeque} in another thread.\n\n <p>This interface is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "addFirst",
                    "comment_text": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an <tt>IllegalStateException</tt> if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use {@link #offerFirst(Object) offerFirst}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addLast",
                    "comment_text": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an <tt>IllegalStateException</tt> if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use {@link #offerLast(Object) offerLast}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning <tt>true</tt> upon success and <tt>false</tt> if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the {@link #addFirst(Object) addFirst} method, which can\n fail to insert an element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning <tt>true</tt> upon success and <tt>false</tt> if no space is\n currently available.\n When using a capacity-restricted deque, this method is generally\n preferable to the {@link #addLast(Object) addLast} method, which can\n fail to insert an element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "putFirst",
                    "comment_text": "Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "putLast",
                    "comment_text": "Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "offerFirst",
                    "comment_text": "Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "offerLast",
                    "comment_text": "Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "takeFirst",
                    "comment_text": "Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "takeLast",
                    "comment_text": "Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "pollFirst",
                    "comment_text": "Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "pollLast",
                    "comment_text": "Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "how long to wait before giving up, in units of\n        <tt>unit</tt>",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "removeFirstOccurrence",
                    "comment_text": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "removeLastOccurrence",
                    "comment_text": "Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and throwing an\n <tt>IllegalStateException</tt> if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use {@link #offer(Object) offer}.\n\n <p>This method is equivalent to {@link #addLast(Object) addLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n <tt>true</tt> upon success and <tt>false</tt> if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the {@link #add} method, which can fail to\n insert an element only by throwing an exception.\n\n <p>This method is equivalent to {@link #offerLast(Object) offerLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting if necessary for\n space to become available.\n\n <p>This method is equivalent to {@link #putLast(Object) putLast}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting up to the\n specified wait time if necessary for space to become available.\n\n <p>This method is equivalent to\n {@link #offerLast(Object,long,TimeUnit) offerLast}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from {@link #poll poll} only in that it\n throws an exception if this deque is empty.\n\n <p>This method is equivalent to {@link #removeFirst() removeFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n <tt>null</tt> if this deque is empty.\n\n <p>This method is equivalent to {@link #pollFirst()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting if\n necessary until an element becomes available.\n\n <p>This method is equivalent to {@link #takeFirst() takeFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting up to the\n specified wait time if necessary for an element to become available.\n\n <p>This method is equivalent to\n {@link #pollFirst(long,TimeUnit) pollFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if interrupted while waiting"
                        }
                    ]
                },
                {
                    "name": "element",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from {@link #peek peek} only in that it throws an\n exception if this deque is empty.\n\n <p>This method is equivalent to {@link #getFirst() getFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns <tt>null</tt> if this deque is empty.\n\n <p>This method is equivalent to {@link #peekFirst() peekFirst}.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n <p>This method is equivalent to\n {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this deque, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns <tt>true</tt> if this deque contains the specified element.\n More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this deque",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this deque.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "push",
                    "comment_text": "Pushes an element onto the stack represented by this deque.  In other\n words, inserts the element at the front of this deque unless it would\n violate capacity restrictions.\n\n <p>This method is equivalent to {@link #addFirst(Object) addFirst}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.ArrayBlockingQueue",
            "interfaces": [
                "java.util.concurrent.BlockingQueue",
                "java.io.Serializable"
            ],
            "superclass": "java.util.AbstractQueue",
            "comment_text": "A bounded {@linkplain BlockingQueue blocking queue} backed by an\n array.  This queue orders elements FIFO (first-in-first-out).  The\n <em>head</em> of the queue is that element that has been on the\n queue the longest time.  The <em>tail</em> of the queue is that\n element that has been on the queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n\n <p>This is a classic &quot;bounded buffer&quot;, in which a\n fixed-sized array holds elements inserted by producers and\n extracted by consumers.  Once created, the capacity cannot be\n changed.  Attempts to {@code put} an element into a full queue\n will result in the operation blocking; attempts to {@code take} an\n element from an empty queue will similarly block.\n\n <p>This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to {@code true} grants threads access in FIFO order. Fairness\n generally decreases throughput but reduces variability and avoids\n starvation.\n\n <p>This class and its iterator implement all of the\n <em>optional</em> methods of the {@link Collection} and {@link\n Iterator} interfaces.\n\n <p>This class is a member of the\n <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n Java Collections Framework</a>.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ArrayBlockingQueue",
                    "comment_text": "Creates an {@code ArrayBlockingQueue} with the given (fixed)\n capacity and default access policy.",
                    "parameters": [
                        {
                            "name": "capacity",
                            "comment_text": "the capacity of this queue",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ArrayBlockingQueue",
                    "comment_text": "Creates an {@code ArrayBlockingQueue} with the given (fixed)\n capacity and the specified access policy.",
                    "parameters": [
                        {
                            "name": "capacity",
                            "comment_text": "the capacity of this queue",
                            "type": "int"
                        },
                        {
                            "name": "fair",
                            "comment_text": "if {@code true} then queue accesses for threads blocked\n        on insertion or removal, are processed in FIFO order;\n        if {@code false} the access order is unspecified.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ArrayBlockingQueue",
                    "comment_text": "Creates an {@code ArrayBlockingQueue} with the given (fixed)\n capacity, the specified access policy and initially containing the\n elements of the given collection,\n added in traversal order of the collection's iterator.",
                    "parameters": [
                        {
                            "name": "capacity",
                            "comment_text": "the capacity of this queue",
                            "type": "int"
                        },
                        {
                            "name": "fair",
                            "comment_text": "if {@code true} then queue accesses for threads blocked\n        on insertion or removal, are processed in FIFO order;\n        if {@code false} the access order is unspecified.",
                            "type": "boolean"
                        },
                        {
                            "name": "c",
                            "comment_text": "the collection of elements to initially contain",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "add",
                    "comment_text": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning {@code true} upon success and throwing an\n {@code IllegalStateException} if this queue is full.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "the element to add",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning {@code true} upon success and {@code false} if this queue\n is full.  This method is generally preferable to method {@link #add},\n which can fail to insert an element only by throwing an exception.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "put",
                    "comment_text": "Inserts the specified element at the tail of this queue, waiting\n for space to become available if the queue is full.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "offer",
                    "comment_text": "Inserts the specified element at the tail of this queue, waiting\n up to the specified wait time for space to become available if\n the queue is full.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "e",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "{@inheritDoc}"
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "take",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "poll",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "peek",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "size",
                    "comment_text": "Returns the number of elements in this queue.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remainingCapacity",
                    "comment_text": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current {@code size} of this queue.\n\n <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting {@code remainingCapacity}\n because it may be the case that another thread is about to\n insert or remove an element.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "remove",
                    "comment_text": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n <p>Removal of interior elements in circular array based queues\n is an intrinsically slow and disruptive operation, so should\n be undertaken only in exceptional circumstances, ideally\n only when the queue is known not to be accessible by other\n threads.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "element to be removed from this queue, if present",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "contains",
                    "comment_text": "Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "o",
                            "comment_text": "object to be checked for containment in this queue",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n <p>The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n <p>This method acts as bridge between array-based and collection-based\n APIs.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toArray",
                    "comment_text": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.\n\n <p>Like the {@link #toArray()} method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:\n\n <pre>\n     String[] y = x.toArray(new String[0]);</pre>\n\n Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "a",
                            "comment_text": "the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "clear",
                    "comment_text": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "drainTo",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "c",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "maxElements",
                            "comment_text": "",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "iterator",
                    "comment_text": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n <p>The returned {@code Iterator} is a \"weakly consistent\" iterator that\n will never throw {@link java.util.ConcurrentModificationException\n ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.",
                    "return_type": "java.util.Iterator",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.AbstractExecutorService",
            "interfaces": [
                "java.util.concurrent.ExecutorService"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "Provides default implementations of {@link ExecutorService}\n execution methods. This class implements the <tt>submit</tt>,\n <tt>invokeAny</tt> and <tt>invokeAll</tt> methods using a\n {@link RunnableFuture} returned by <tt>newTaskFor</tt>, which defaults\n to the {@link FutureTask} class provided in this package.  For example,\n the implementation of <tt>submit(Runnable)</tt> creates an\n associated <tt>RunnableFuture</tt> that is executed and\n returned. Subclasses may override the <tt>newTaskFor</tt> methods\n to return <tt>RunnableFuture</tt> implementations other than\n <tt>FutureTask</tt>.\n\n <p> <b>Extension example</b>. Here is a sketch of a class\n that customizes {@link ThreadPoolExecutor} to use\n a <tt>CustomTask</tt> class instead of the default <tt>FutureTask</tt>:\n  <pre> {@code\n public class CustomThreadPoolExecutor extends ThreadPoolExecutor {\n\n   static class CustomTask<V> implements RunnableFuture<V> {...}\n\n   protected <V> RunnableFuture<V> newTaskFor(Callable<V> c) {\n       return new CustomTask<V>(c);\n   }\n   protected <V> RunnableFuture<V> newTaskFor(Runnable r, V v) {\n       return new CustomTask<V>(r, v);\n   }\n   // ... add constructors, etc.\n }}</pre>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractExecutorService",
                    "comment_text": "",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newTaskFor",
                    "comment_text": "Returns a <tt>RunnableFuture</tt> for the given runnable and default\n value.",
                    "return_type": "java.util.concurrent.RunnableFuture",
                    "parameters": [
                        {
                            "name": "runnable",
                            "comment_text": "the runnable task being wrapped",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "value",
                            "comment_text": "the default value for the returned future",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newTaskFor",
                    "comment_text": "Returns a <tt>RunnableFuture</tt> for the given callable task.",
                    "return_type": "java.util.concurrent.RunnableFuture",
                    "parameters": [
                        {
                            "name": "callable",
                            "comment_text": "the callable task being wrapped",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.lang.Runnable"
                        },
                        {
                            "name": "result",
                            "comment_text": "",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "submit",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.Future",
                    "parameters": [
                        {
                            "name": "task",
                            "comment_text": "",
                            "type": "java.util.concurrent.Callable"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "invokeAny",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "invokeAny",
                    "comment_text": "",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        },
                        {
                            "name": "java.util.concurrent.ExecutionException",
                            "comment_text": ""
                        },
                        {
                            "name": "java.util.concurrent.TimeoutException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "invokeAll",
                    "comment_text": "",
                    "return_type": "java.util.List",
                    "parameters": [
                        {
                            "name": "tasks",
                            "comment_text": "",
                            "type": "java.util.Collection"
                        },
                        {
                            "name": "timeout",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicStampedReference",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "An {@code AtomicStampedReference} maintains an object reference\n along with an integer \"stamp\", that can be updated atomically.\n\n <p>Implementation note: This implementation maintains stamped\n references by creating internal objects representing \"boxed\"\n [reference, integer] pairs.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicStampedReference",
                    "comment_text": "Creates a new {@code AtomicStampedReference} with the given\n initial values.",
                    "parameters": [
                        {
                            "name": "initialRef",
                            "comment_text": "the initial reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "initialStamp",
                            "comment_text": "the initial stamp",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getReference",
                    "comment_text": "Returns the current value of the reference.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getStamp",
                    "comment_text": "Returns the current value of the stamp.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the current values of both the reference and the stamp.\n Typical usage is {@code int[1] holder; ref = v.get(holder); }.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "stampHolder",
                            "comment_text": "an array of size of at least one.  On return,\n {@code stampholder[0]} will hold the value of the stamp.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current stamp is equal to the expected stamp.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expectedReference",
                            "comment_text": "the expected value of the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newReference",
                            "comment_text": "the new value for the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expectedStamp",
                            "comment_text": "the expected value of the stamp",
                            "type": "int"
                        },
                        {
                            "name": "newStamp",
                            "comment_text": "the new value for the stamp",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current stamp is equal to the expected stamp.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expectedReference",
                            "comment_text": "the expected value of the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newReference",
                            "comment_text": "the new value for the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expectedStamp",
                            "comment_text": "the expected value of the stamp",
                            "type": "int"
                        },
                        {
                            "name": "newStamp",
                            "comment_text": "the new value for the stamp",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Unconditionally sets the value of both the reference and stamp.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newReference",
                            "comment_text": "the new value for the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newStamp",
                            "comment_text": "the new value for the stamp",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "attemptStamp",
                    "comment_text": "Atomically sets the value of the stamp to the given update value\n if the current reference is {@code ==} to the expected\n reference.  Any given invocation of this operation may fail\n (return {@code false}) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expectedReference",
                            "comment_text": "the expected value of the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newStamp",
                            "comment_text": "the new value for the stamp",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A reflection-based utility that enables atomic updates to\n designated {@code volatile} reference fields of designated\n classes.  This class is designed for use in atomic data structures\n in which several reference fields of the same node are\n independently subject to atomic updates. For example, a tree node\n might be declared as\n\n  <pre> {@code\n class Node {\n   private volatile Node left, right;\n\n   private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");\n   private static AtomicReferenceFieldUpdater<Node, Node> rightUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");\n\n   Node getLeft() { return left;  }\n   boolean compareAndSetLeft(Node expect, Node update) {\n     return leftUpdater.compareAndSet(this, expect, update);\n   }\n   // ... and so on\n }}</pre>\n\n <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicReferenceFieldUpdater",
                    "comment_text": "Protected do-nothing constructor for use by subclasses.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newUpdater",
                    "comment_text": "Creates and returns an updater for objects with the given field.\n The Class arguments are needed to check that reflective types and\n generic types match.",
                    "return_type": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
                    "parameters": [
                        {
                            "name": "tclass",
                            "comment_text": "the class of the objects holding the field.",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "vclass",
                            "comment_text": "the class of the field",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "fieldName",
                            "comment_text": "the name of the field to be updated.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to conditionally set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to conditionally set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets the field of the given object managed by this\n updater to the given updated value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Gets the current value held in the field of the given object managed\n by this updater.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicReferenceArray",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An array of object references in which elements may be updated\n atomically.  See the {@link java.util.concurrent.atomic} package\n specification for description of the properties of atomic\n variables.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicReferenceArray",
                    "comment_text": "Creates a new AtomicReferenceArray of the given length, with all\n elements initially null.",
                    "parameters": [
                        {
                            "name": "length",
                            "comment_text": "the length of the array",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicReferenceArray",
                    "comment_text": "Creates a new AtomicReferenceArray with the same length as, and\n all elements copied from, the given array.",
                    "parameters": [
                        {
                            "name": "array",
                            "comment_text": "the array to copy elements from",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "length",
                    "comment_text": "Returns the length of the array.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Gets the current value at position {@code i}.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the element at position {@code i} to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets the element at position {@code i} to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n value and returns the old value.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current values of array.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicReference",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An object reference that may be updated atomically. See the {@link\n java.util.concurrent.atomic} package specification for description\n of the properties of atomic variables.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicReference",
                    "comment_text": "Creates a new AtomicReference with the given initial value.",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "comment_text": "the initial value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicReference",
                    "comment_text": "Creates a new AtomicReference with null initial value.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "get",
                    "comment_text": "Gets the current value.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets to the given value and returns the old value.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicMarkableReference",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "An {@code AtomicMarkableReference} maintains an object reference\n along with a mark bit, that can be updated atomically.\n\n <p>Implementation note: This implementation maintains markable\n references by creating internal objects representing \"boxed\"\n [reference, boolean] pairs.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicMarkableReference",
                    "comment_text": "Creates a new {@code AtomicMarkableReference} with the given\n initial values.",
                    "parameters": [
                        {
                            "name": "initialRef",
                            "comment_text": "the initial reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "initialMark",
                            "comment_text": "the initial mark",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getReference",
                    "comment_text": "Returns the current value of the reference.",
                    "return_type": "java.lang.Object",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isMarked",
                    "comment_text": "Returns the current value of the mark.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Returns the current values of both the reference and the mark.\n Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "markHolder",
                            "comment_text": "an array of size of at least one. On return,\n {@code markholder[0]} will hold the value of the mark.",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current mark is equal to the expected mark.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expectedReference",
                            "comment_text": "the expected value of the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newReference",
                            "comment_text": "the new value for the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expectedMark",
                            "comment_text": "the expected value of the mark",
                            "type": "boolean"
                        },
                        {
                            "name": "newMark",
                            "comment_text": "the new value for the mark",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current mark is equal to the expected mark.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expectedReference",
                            "comment_text": "the expected value of the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newReference",
                            "comment_text": "the new value for the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expectedMark",
                            "comment_text": "the expected value of the mark",
                            "type": "boolean"
                        },
                        {
                            "name": "newMark",
                            "comment_text": "the new value for the mark",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Unconditionally sets the value of both the reference and mark.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newReference",
                            "comment_text": "the new value for the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newMark",
                            "comment_text": "the new value for the mark",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "attemptMark",
                    "comment_text": "Atomically sets the value of the mark to the given update value\n if the current reference is {@code ==} to the expected\n reference.  Any given invocation of this operation may fail\n (return {@code false}) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expectedReference",
                            "comment_text": "the expected value of the reference",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newMark",
                            "comment_text": "the new value for the mark",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicLongFieldUpdater",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A reflection-based utility that enables atomic updates to\n designated {@code volatile long} fields of designated classes.\n This class is designed for use in atomic data structures in which\n several fields of the same node are independently subject to atomic\n updates.\n\n <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicLongFieldUpdater",
                    "comment_text": "Protected do-nothing constructor for use by subclasses.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newUpdater",
                    "comment_text": "Creates and returns an updater for objects with the given field.\n The Class argument is needed to check that reflective types and\n generic types match.",
                    "return_type": "java.util.concurrent.atomic.AtomicLongFieldUpdater",
                    "parameters": [
                        {
                            "name": "tclass",
                            "comment_text": "the class of the objects holding the field",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "fieldName",
                            "comment_text": "the name of the field to be updated.",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to conditionally set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to conditionally set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets the field of the given object managed by this\n updater to the given updated value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Gets the current value held in the field of the given object managed\n by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndIncrement",
                    "comment_text": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndDecrement",
                    "comment_text": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndAdd",
                    "comment_text": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "incrementAndGet",
                    "comment_text": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decrementAndGet",
                    "comment_text": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAndGet",
                    "comment_text": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicLongArray",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A {@code long} array in which elements may be updated atomically.\n See the {@link java.util.concurrent.atomic} package specification\n for description of the properties of atomic variables.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicLongArray",
                    "comment_text": "Creates a new AtomicLongArray of the given length, with all\n elements initially zero.",
                    "parameters": [
                        {
                            "name": "length",
                            "comment_text": "the length of the array",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicLongArray",
                    "comment_text": "Creates a new AtomicLongArray with the same length as, and\n all elements copied from, the given array.",
                    "parameters": [
                        {
                            "name": "array",
                            "comment_text": "the array to copy elements from",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "length",
                    "comment_text": "Returns the length of the array.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Gets the current value at position {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the element at position {@code i} to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets the element at position {@code i} to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given value\n and returns the old value.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndIncrement",
                    "comment_text": "Atomically increments by one the element at index {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndDecrement",
                    "comment_text": "Atomically decrements by one the element at index {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndAdd",
                    "comment_text": "Atomically adds the given value to the element at index {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "incrementAndGet",
                    "comment_text": "Atomically increments by one the element at index {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decrementAndGet",
                    "comment_text": "Atomically decrements by one the element at index {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAndGet",
                    "comment_text": "Atomically adds the given value to the element at index {@code i}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current values of array.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicLong",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Number",
            "comment_text": "A {@code long} value that may be updated atomically.  See the\n {@link java.util.concurrent.atomic} package specification for\n description of the properties of atomic variables. An\n {@code AtomicLong} is used in applications such as atomically\n incremented sequence numbers, and cannot be used as a replacement\n for a {@link java.lang.Long}. However, this class does extend\n {@code Number} to allow uniform access by tools and utilities that\n deal with numerically-based classes.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicLong",
                    "comment_text": "Creates a new AtomicLong with the given initial value.",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "comment_text": "the initial value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicLong",
                    "comment_text": "Creates a new AtomicLong with initial value {@code 0}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "get",
                    "comment_text": "Gets the current value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets to the given value and returns the old value.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndIncrement",
                    "comment_text": "Atomically increments by one the current value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndDecrement",
                    "comment_text": "Atomically decrements by one the current value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndAdd",
                    "comment_text": "Atomically adds the given value to the current value.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "incrementAndGet",
                    "comment_text": "Atomically increments by one the current value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decrementAndGet",
                    "comment_text": "Atomically decrements by one the current value.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAndGet",
                    "comment_text": "Atomically adds the given value to the current value.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "intValue",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "longValue",
                    "comment_text": "",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floatValue",
                    "comment_text": "",
                    "return_type": "float",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "doubleValue",
                    "comment_text": "",
                    "return_type": "double",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicIntegerFieldUpdater",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "A reflection-based utility that enables atomic updates to\n designated {@code volatile int} fields of designated classes.\n This class is designed for use in atomic data structures in which\n several fields of the same node are independently subject to atomic\n updates.\n\n <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicIntegerFieldUpdater",
                    "comment_text": "Protected do-nothing constructor for use by subclasses.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "newUpdater",
                    "comment_text": "Creates and returns an updater for objects with the given field.\n The Class argument is needed to check that reflective types and\n generic types match.",
                    "return_type": "java.util.concurrent.atomic.AtomicIntegerFieldUpdater",
                    "parameters": [
                        {
                            "name": "tclass",
                            "comment_text": "the class of the objects holding the field",
                            "type": "java.lang.Class"
                        },
                        {
                            "name": "fieldName",
                            "comment_text": "the name of the field to be updated",
                            "type": "java.lang.String"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to conditionally set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to conditionally set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets the field of the given object managed by this\n updater to the given updated value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Gets the current value held in the field of the given object managed\n by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndIncrement",
                    "comment_text": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndDecrement",
                    "comment_text": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndAdd",
                    "comment_text": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "incrementAndGet",
                    "comment_text": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decrementAndGet",
                    "comment_text": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAndGet",
                    "comment_text": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "obj",
                            "comment_text": "An object whose field to get and set",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicIntegerArray",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An {@code int} array in which elements may be updated atomically.\n See the {@link java.util.concurrent.atomic} package\n specification for description of the properties of atomic\n variables.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicIntegerArray",
                    "comment_text": "Creates a new AtomicIntegerArray of the given length, with all\n elements initially zero.",
                    "parameters": [
                        {
                            "name": "length",
                            "comment_text": "the length of the array",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicIntegerArray",
                    "comment_text": "Creates a new AtomicIntegerArray with the same length as, and\n all elements copied from, the given array.",
                    "parameters": [
                        {
                            "name": "array",
                            "comment_text": "the array to copy elements from",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "length",
                    "comment_text": "Returns the length of the array.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "get",
                    "comment_text": "Gets the current value at position {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets the element at position {@code i} to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets the element at position {@code i} to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n value and returns the old value.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndIncrement",
                    "comment_text": "Atomically increments by one the element at index {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndDecrement",
                    "comment_text": "Atomically decrements by one the element at index {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndAdd",
                    "comment_text": "Atomically adds the given value to the element at index {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "incrementAndGet",
                    "comment_text": "Atomically increments by one the element at index {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decrementAndGet",
                    "comment_text": "Atomically decrements by one the element at index {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAndGet",
                    "comment_text": "Atomically adds the given value to the element at index {@code i}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "i",
                            "comment_text": "the index",
                            "type": "int"
                        },
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current values of array.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicInteger",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Number",
            "comment_text": "An {@code int} value that may be updated atomically.  See the\n {@link java.util.concurrent.atomic} package specification for\n description of the properties of atomic variables. An\n {@code AtomicInteger} is used in applications such as atomically\n incremented counters, and cannot be used as a replacement for an\n {@link java.lang.Integer}. However, this class does extend\n {@code Number} to allow uniform access by tools and utilities that\n deal with numerically-based classes.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicInteger",
                    "comment_text": "Creates a new AtomicInteger with the given initial value.",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "comment_text": "the initial value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicInteger",
                    "comment_text": "Creates a new AtomicInteger with initial value {@code 0}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "get",
                    "comment_text": "Gets the current value.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets to the given value and returns the old value.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndIncrement",
                    "comment_text": "Atomically increments by one the current value.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndDecrement",
                    "comment_text": "Atomically decrements by one the current value.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndAdd",
                    "comment_text": "Atomically adds the given value to the current value.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "incrementAndGet",
                    "comment_text": "Atomically increments by one the current value.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "decrementAndGet",
                    "comment_text": "Atomically decrements by one the current value.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "addAndGet",
                    "comment_text": "Atomically adds the given value to the current value.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "delta",
                            "comment_text": "the value to add",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "intValue",
                    "comment_text": "",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "longValue",
                    "comment_text": "",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "floatValue",
                    "comment_text": "",
                    "return_type": "float",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "doubleValue",
                    "comment_text": "",
                    "return_type": "double",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.atomic.AtomicBoolean",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A {@code boolean} value that may be updated atomically. See the\n {@link java.util.concurrent.atomic} package specification for\n description of the properties of atomic variables. An\n {@code AtomicBoolean} is used in applications such as atomically\n updated flags, and cannot be used as a replacement for a\n {@link java.lang.Boolean}.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AtomicBoolean",
                    "comment_text": "Creates a new {@code AtomicBoolean} with the given initial value.",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "comment_text": "the initial value",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "AtomicBoolean",
                    "comment_text": "Creates a new {@code AtomicBoolean} with initial value {@code false}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "get",
                    "comment_text": "Returns the current value.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "boolean"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "weakCompareAndSet",
                    "comment_text": "Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.\n\n <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>\n and does not provide ordering guarantees, so is only rarely an\n appropriate alternative to {@code compareAndSet}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "boolean"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "set",
                    "comment_text": "Unconditionally sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lazySet",
                    "comment_text": "Eventually sets to the given value.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getAndSet",
                    "comment_text": "Atomically sets to the given value and returns the previous value.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "newValue",
                            "comment_text": "the new value",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns the String representation of the current value.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.ReentrantReadWriteLock",
            "interfaces": [
                "java.util.concurrent.locks.ReadWriteLock",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "An implementation of {@link ReadWriteLock} supporting similar\n semantics to {@link ReentrantLock}.\n <p>This class has the following properties:\n\n <ul>\n <li><b>Acquisition order</b>\n\n <p> This class does not impose a reader or writer preference\n ordering for lock access.  However, it does support an optional\n <em>fairness</em> policy.\n\n <dl>\n <dt><b><i>Non-fair mode (default)</i></b>\n <dd>When constructed as non-fair (the default), the order of entry\n to the read and write lock is unspecified, subject to reentrancy\n constraints.  A nonfair lock that is continuously contended may\n indefinitely postpone one or more reader or writer threads, but\n will normally have higher throughput than a fair lock.\n <p>\n\n <dt><b><i>Fair mode</i></b>\n <dd> When constructed as fair, threads contend for entry using an\n approximately arrival-order policy. When the currently held lock\n is released either the longest-waiting single writer thread will\n be assigned the write lock, or if there is a group of reader threads\n waiting longer than all waiting writer threads, that group will be\n assigned the read lock.\n\n <p>A thread that tries to acquire a fair read lock (non-reentrantly)\n will block if either the write lock is held, or there is a waiting\n writer thread. The thread will not acquire the read lock until\n after the oldest currently waiting writer thread has acquired and\n released the write lock. Of course, if a waiting writer abandons\n its wait, leaving one or more reader threads as the longest waiters\n in the queue with the write lock free, then those readers will be\n assigned the read lock.\n\n <p>A thread that tries to acquire a fair write lock (non-reentrantly)\n will block unless both the read lock and write lock are free (which\n implies there are no waiting threads).  (Note that the non-blocking\n {@link ReadLock#tryLock()} and {@link WriteLock#tryLock()} methods\n do not honor this fair setting and will acquire the lock if it is\n possible, regardless of waiting threads.)\n <p>\n </dl>\n\n <li><b>Reentrancy</b>\n\n <p>This lock allows both readers and writers to reacquire read or\n write locks in the style of a {@link ReentrantLock}. Non-reentrant\n readers are not allowed until all write locks held by the writing\n thread have been released.\n\n <p>Additionally, a writer can acquire the read lock, but not\n vice-versa.  Among other applications, reentrancy can be useful\n when write locks are held during calls or callbacks to methods that\n perform reads under read locks.  If a reader tries to acquire the\n write lock it will never succeed.\n\n <li><b>Lock downgrading</b>\n <p>Reentrancy also allows downgrading from the write lock to a read lock,\n by acquiring the write lock, then the read lock and then releasing the\n write lock. However, upgrading from a read lock to the write lock is\n <b>not</b> possible.\n\n <li><b>Interruption of lock acquisition</b>\n <p>The read lock and write lock both support interruption during lock\n acquisition.\n\n <li><b>{@link Condition} support</b>\n <p>The write lock provides a {@link Condition} implementation that\n behaves in the same way, with respect to the write lock, as the\n {@link Condition} implementation provided by\n {@link ReentrantLock#newCondition} does for {@link ReentrantLock}.\n This {@link Condition} can, of course, only be used with the write lock.\n\n <p>The read lock does not support a {@link Condition} and\n {@code readLock().newCondition()} throws\n {@code UnsupportedOperationException}.\n\n <li><b>Instrumentation</b>\n <p>This class supports methods to determine whether locks\n are held or contended. These methods are designed for monitoring\n system state, not for synchronization control.\n </ul>\n\n <p>Serialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized.\n\n <p><b>Sample usages</b>. Here is a code sketch showing how to perform\n lock downgrading after updating a cache (exception handling is\n particularly tricky when handling multiple locks in a non-nested\n fashion):\n\n <pre> {@code\n class CachedData {\n   Object data;\n   volatile boolean cacheValid;\n   final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n\n   void processCachedData() {\n     rwl.readLock().lock();\n     if (!cacheValid) {\n        // Must release read lock before acquiring write lock\n        rwl.readLock().unlock();\n        rwl.writeLock().lock();\n        try {\n          // Recheck state because another thread might have\n          // acquired write lock and changed state before we did.\n          if (!cacheValid) {\n            data = ...\n            cacheValid = true;\n          }\n          // Downgrade by acquiring read lock before releasing write lock\n          rwl.readLock().lock();\n        } finally {\n          rwl.writeLock().unlock(); // Unlock write, still hold read\n        }\n     }\n\n     try {\n       use(data);\n     } finally {\n       rwl.readLock().unlock();\n     }\n   }\n }}</pre>\n\n ReentrantReadWriteLocks can be used to improve concurrency in some\n uses of some kinds of Collections. This is typically worthwhile\n only when the collections are expected to be large, accessed by\n more reader threads than writer threads, and entail operations with\n overhead that outweighs synchronization overhead. For example, here\n is a class using a TreeMap that is expected to be large and\n concurrently accessed.\n\n <pre>{@code\n class RWDictionary {\n    private final Map<String, Data> m = new TreeMap<String, Data>();\n    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n    private final Lock r = rwl.readLock();\n    private final Lock w = rwl.writeLock();\n\n    public Data get(String key) {\n        r.lock();\n        try { return m.get(key); }\n        finally { r.unlock(); }\n    }\n    public String[] allKeys() {\n        r.lock();\n        try { return m.keySet().toArray(); }\n        finally { r.unlock(); }\n    }\n    public Data put(String key, Data value) {\n        w.lock();\n        try { return m.put(key, value); }\n        finally { w.unlock(); }\n    }\n    public void clear() {\n        w.lock();\n        try { m.clear(); }\n        finally { w.unlock(); }\n    }\n }}</pre>\n\n <h3>Implementation Notes</h3>\n\n <p>This lock supports a maximum of 65535 recursive write locks\n and 65535 read locks. Attempts to exceed these limits result in\n {@link Error} throws from locking methods.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ReentrantReadWriteLock",
                    "comment_text": "Creates a new {@code ReentrantReadWriteLock} with\n default (nonfair) ordering properties.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ReentrantReadWriteLock",
                    "comment_text": "Creates a new {@code ReentrantReadWriteLock} with\n the given fairness policy.",
                    "parameters": [
                        {
                            "name": "fair",
                            "comment_text": "{@code true} if this lock should use a fair ordering policy",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "writeLock",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "readLock",
                    "comment_text": "",
                    "return_type": "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isFair",
                    "comment_text": "Returns {@code true} if this lock has fairness set true.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getOwner",
                    "comment_text": "Returns the thread that currently owns the write lock, or\n {@code null} if not owned. When this method is called by a\n thread that is not the owner, the return value reflects a\n best-effort approximation of current lock status. For example,\n the owner may be momentarily {@code null} even if there are\n threads trying to acquire the lock but have not yet done so.\n This method is designed to facilitate construction of\n subclasses that provide more extensive lock monitoring\n facilities.",
                    "return_type": "java.lang.Thread",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getReadLockCount",
                    "comment_text": "Queries the number of read locks held for this lock. This\n method is designed for use in monitoring system state, not for\n synchronization control.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isWriteLocked",
                    "comment_text": "Queries if the write lock is held by any thread. This method is\n designed for use in monitoring system state, not for\n synchronization control.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isWriteLockedByCurrentThread",
                    "comment_text": "Queries if the write lock is held by the current thread.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWriteHoldCount",
                    "comment_text": "Queries the number of reentrant write holds on this lock by the\n current thread.  A writer thread has a hold on a lock for\n each lock action that is not matched by an unlock action.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getReadHoldCount",
                    "comment_text": "Queries the number of reentrant read holds on this lock by the\n current thread.  A reader thread has a hold on a lock for\n each lock action that is not matched by an unlock action.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedWriterThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire the write lock.  Because the actual set of threads may\n change dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive lock monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedReaderThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire the read lock.  Because the actual set of threads may\n change dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive lock monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThreads",
                    "comment_text": "Queries whether any threads are waiting to acquire the read or\n write lock. Note that because cancellations may occur at any\n time, a {@code true} return does not guarantee that any other\n thread will ever acquire a lock.  This method is designed\n primarily for use in monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThread",
                    "comment_text": "Queries whether the given thread is waiting to acquire either\n the read or write lock. Note that because cancellations may\n occur at any time, a {@code true} return does not guarantee\n that this thread will ever acquire a lock.  This method is\n designed primarily for use in monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "thread",
                            "comment_text": "the thread",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting to acquire\n either the read or write lock.  The value is only an estimate\n because the number of threads may change dynamically while this\n method traverses internal data structures.  This method is\n designed for use in monitoring of the system state, not for\n synchronization control.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire either the read or write lock.  Because the actual set\n of threads may change dynamically while constructing this\n result, the returned collection is only a best-effort estimate.\n The elements of the returned collection are in no particular\n order.  This method is designed to facilitate construction of\n subclasses that provide more extensive monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasWaiters",
                    "comment_text": "Queries whether any threads are waiting on the given condition\n associated with the write lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.Condition"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting on the\n given condition associated with the write lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.Condition"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingThreads",
                    "comment_text": "Returns a collection containing those threads that may be\n waiting on the given condition associated with the write lock.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a\n best-effort estimate. The elements of the returned collection\n are in no particular order.  This method is designed to\n facilitate construction of subclasses that provide more\n extensive condition monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.Condition"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code \"Write locks =\"}\n followed by the number of reentrantly held write locks, and the\n String {@code \"Read locks =\"} followed by the number of held\n read locks.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock",
            "interfaces": [
                "java.util.concurrent.locks.Lock",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The lock returned by method {@link ReentrantReadWriteLock#readLock}.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ReentrantReadWriteLock.ReadLock",
                    "comment_text": "Constructor for use by subclasses",
                    "parameters": [
                        {
                            "name": "lock",
                            "comment_text": "the outer lock object",
                            "type": "java.util.concurrent.locks.ReentrantReadWriteLock"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "lock",
                    "comment_text": "Acquires the read lock.\n\n <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately.\n\n <p>If the write lock is held by another thread then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until the read lock has been acquired.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lockInterruptibly",
                    "comment_text": "Acquires the read lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the read lock if the write lock is not held\n by another thread and returns immediately.\n\n <p>If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n <ul>\n\n <li>The read lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n\n </ul>\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current\n thread's interrupted status is cleared.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the read lock only if the write lock is not held by\n another thread at the time of invocation.\n\n <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. Even when this lock has been set to use a\n fair ordering policy, a call to {@code tryLock()}\n <em>will</em> immediately acquire the read lock if it is\n available, whether or not other threads are currently\n waiting for the read lock.  This &quot;barging&quot; behavior\n can be useful in certain circumstances, even though it\n breaks fairness. If you want to honor the fairness setting\n for this lock, then use {@link #tryLock(long, TimeUnit)\n tryLock(0, TimeUnit.SECONDS) } which is almost equivalent\n (it also detects interruption).\n\n <p>If the write lock is held by another thread then\n this method will return immediately with the value\n {@code false}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the read lock if the write lock is not held by\n another thread within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt\n interrupted}.\n\n <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. If this lock has been set to use a fair\n ordering policy then an available lock <em>will not</em> be\n acquired if any other threads are waiting for the\n lock. This is in contrast to the {@link #tryLock()}\n method. If you want a timed {@code tryLock} that does\n permit barging on a fair lock then combine the timed and\n un-timed forms together:\n\n <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }\n </pre>\n\n <p>If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n <ul>\n\n <li>The read lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses.\n\n </ul>\n\n <p>If the read lock is acquired then the value {@code true} is\n returned.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,\n\n </ul> then {@link InterruptedException} is thrown and the\n current thread's interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the time to wait for the read lock",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "unlock",
                    "comment_text": "Attempts to release this lock.\n\n <p> If the number of readers is now zero then the lock\n is made available for write lock attempts.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newCondition",
                    "comment_text": "Throws {@code UnsupportedOperationException} because\n {@code ReadLocks} do not support conditions.",
                    "return_type": "java.util.concurrent.locks.Condition",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code \"Read locks =\"}\n followed by the number of held read locks.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock",
            "interfaces": [
                "java.util.concurrent.locks.Lock",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "The lock returned by method {@link ReentrantReadWriteLock#writeLock}.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ReentrantReadWriteLock.WriteLock",
                    "comment_text": "Constructor for use by subclasses",
                    "parameters": [
                        {
                            "name": "lock",
                            "comment_text": "the outer lock object",
                            "type": "java.util.concurrent.locks.ReentrantReadWriteLock"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "lock",
                    "comment_text": "Acquires the write lock.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.\n\n <p>If the current thread already holds the write lock then the\n hold count is incremented by one and the method returns\n immediately.\n\n <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until the write lock has been acquired, at which\n time the write lock hold count is set to one.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lockInterruptibly",
                    "comment_text": "Acquires the write lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.\n\n <p>If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n immediately.\n\n <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of two things happens:\n\n <ul>\n\n <li>The write lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n\n </ul>\n\n <p>If the write lock is acquired by the current thread then the\n lock hold count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method;\n or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current\n thread's interrupted status is cleared.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the write lock only if it is not held by another thread\n at the time of invocation.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. Even when this lock has\n been set to use a fair ordering policy, a call to\n {@code tryLock()} <em>will</em> immediately acquire the\n lock if it is available, whether or not other threads are\n currently waiting for the write lock.  This &quot;barging&quot;\n behavior can be useful in certain circumstances, even\n though it breaks fairness. If you want to honor the\n fairness setting for this lock, then use {@link\n #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n <p> If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.\n\n <p>If the lock is held by another thread then this method\n will return immediately with the value {@code false}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the write lock if it is not held by another thread\n within the given waiting time and the current thread has\n not been {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. If this lock has been\n set to use a fair ordering policy then an available lock\n <em>will not</em> be acquired if any other threads are\n waiting for the write lock. This is in contrast to the {@link\n #tryLock()} method. If you want a timed {@code tryLock}\n that does permit barging on a fair lock then combine the\n timed and un-timed forms together:\n\n <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }\n </pre>\n\n <p>If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.\n\n <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of three things happens:\n\n <ul>\n\n <li>The write lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses\n\n </ul>\n\n <p>If the write lock is acquired then the value {@code true} is\n returned and the write lock hold count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method;\n or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current\n thread's interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the time to wait for the write lock",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "unlock",
                    "comment_text": "Attempts to release this lock.\n\n <p>If the current thread is the holder of this lock then\n the hold count is decremented. If the hold count is now\n zero then the lock is released.  If the current thread is\n not the holder of this lock then {@link\n IllegalMonitorStateException} is thrown.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newCondition",
                    "comment_text": "Returns a {@link Condition} instance for use with this\n {@link Lock} instance.\n <p>The returned {@link Condition} instance supports the same\n usages as do the {@link Object} monitor methods ({@link\n Object#wait() wait}, {@link Object#notify notify}, and {@link\n Object#notifyAll notifyAll}) when used with the built-in\n monitor lock.\n\n <ul>\n\n <li>If this write lock is not held when any {@link\n Condition} method is called then an {@link\n IllegalMonitorStateException} is thrown.  (Read locks are\n held independently of write locks, so are not checked or\n affected. However it is essentially always an error to\n invoke a condition waiting method when the current thread\n has also acquired read locks, since other threads that\n could unblock it will not be able to acquire the write\n lock.)\n\n <li>When the condition {@linkplain Condition#await() waiting}\n methods are called the write lock is released and, before\n they return, the write lock is reacquired and the lock hold\n count restored to what it was when the method was called.\n\n <li>If a thread is {@linkplain Thread#interrupt interrupted} while\n waiting then the wait will terminate, an {@link\n InterruptedException} will be thrown, and the thread's\n interrupted status will be cleared.\n\n <li> Waiting threads are signalled in FIFO order.\n\n <li>The ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for <em>fair</em> locks favors those threads that have been\n waiting the longest.\n\n </ul>",
                    "return_type": "java.util.concurrent.locks.Condition",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets includes either the String\n {@code \"Unlocked\"} or the String {@code \"Locked by\"}\n followed by the {@linkplain Thread#getName name} of the owning thread.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isHeldByCurrentThread",
                    "comment_text": "Queries if this write lock is held by the current thread.\n Identical in effect to {@link\n ReentrantReadWriteLock#isWriteLockedByCurrentThread}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getHoldCount",
                    "comment_text": "Queries the number of holds on this write lock by the current\n thread.  A thread has a hold on a lock for each lock action\n that is not matched by an unlock action.  Identical in effect\n to {@link ReentrantReadWriteLock#getWriteHoldCount}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.ReentrantLock",
            "interfaces": [
                "java.util.concurrent.locks.Lock",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A reentrant mutual exclusion {@link Lock} with the same basic\n behavior and semantics as the implicit monitor lock accessed using\n {@code synchronized} methods and statements, but with extended\n capabilities.\n\n <p>A {@code ReentrantLock} is <em>owned</em> by the thread last\n successfully locking, but not yet unlocking it. A thread invoking\n {@code lock} will return, successfully acquiring the lock, when\n the lock is not owned by another thread. The method will return\n immediately if the current thread already owns the lock. This can\n be checked using methods {@link #isHeldByCurrentThread}, and {@link\n #getHoldCount}.\n\n <p>The constructor for this class accepts an optional\n <em>fairness</em> parameter.  When set {@code true}, under\n contention, locks favor granting access to the longest-waiting\n thread.  Otherwise this lock does not guarantee any particular\n access order.  Programs using fair locks accessed by many threads\n may display lower overall throughput (i.e., are slower; often much\n slower) than those using the default setting, but have smaller\n variances in times to obtain locks and guarantee lack of\n starvation. Note however, that fairness of locks does not guarantee\n fairness of thread scheduling. Thus, one of many threads using a\n fair lock may obtain it multiple times in succession while other\n active threads are not progressing and not currently holding the\n lock.\n Also note that the untimed {@link #tryLock() tryLock} method does not\n honor the fairness setting. It will succeed if the lock\n is available even if other threads are waiting.\n\n <p>It is recommended practice to <em>always</em> immediately\n follow a call to {@code lock} with a {@code try} block, most\n typically in a before/after construction such as:\n\n <pre>\n class X {\n   private final ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() {\n     lock.lock();  // block until condition holds\n     try {\n       // ... method body\n     } finally {\n       lock.unlock()\n     }\n   }\n }\n </pre>\n\n <p>In addition to implementing the {@link Lock} interface, this\n class defines methods {@code isLocked} and\n {@code getLockQueueLength}, as well as some associated\n {@code protected} access methods that may be useful for\n instrumentation and monitoring.\n\n <p>Serialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized.\n\n <p>This lock supports a maximum of 2147483647 recursive locks by\n the same thread. Attempts to exceed this limit result in\n {@link Error} throws from locking methods.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "ReentrantLock",
                    "comment_text": "Creates an instance of {@code ReentrantLock}.\n This is equivalent to using {@code ReentrantLock(false)}.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "ReentrantLock",
                    "comment_text": "Creates an instance of {@code ReentrantLock} with the\n given fairness policy.",
                    "parameters": [
                        {
                            "name": "fair",
                            "comment_text": "{@code true} if this lock should use a fair ordering policy",
                            "type": "boolean"
                        }
                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "lock",
                    "comment_text": "Acquires the lock.\n\n <p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n <p>If the current thread already holds the lock then the hold\n count is incremented by one and the method returns immediately.\n\n <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until the lock has been acquired,\n at which time the lock hold count is set to one.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lockInterruptibly",
                    "comment_text": "Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n <p>If the current thread already holds this lock then the hold count\n is incremented by one and the method returns immediately.\n\n <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n <ul>\n\n <li>The lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread.\n\n </ul>\n\n <p>If the lock is acquired by the current thread then the lock hold\n count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while acquiring\n the lock,\n\n </ul>\n\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the lock only if it is not held by another thread at the time\n of invocation.\n\n <p>Acquires the lock if it is not held by another thread and\n returns immediately with the value {@code true}, setting the\n lock hold count to one. Even when this lock has been set to use a\n fair ordering policy, a call to {@code tryLock()} <em>will</em>\n immediately acquire the lock if it is available, whether or not\n other threads are currently waiting for the lock.\n This &quot;barging&quot; behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting for this lock, then use\n {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS) }\n which is almost equivalent (it also detects interruption).\n\n <p> If the current thread already holds this lock then the hold\n count is incremented by one and the method returns {@code true}.\n\n <p>If the lock is held by another thread then this method will return\n immediately with the value {@code false}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the lock if it is not held by another thread within the given\n waiting time and the current thread has not been\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the lock if it is not held by another thread and returns\n immediately with the value {@code true}, setting the lock hold count\n to one. If this lock has been set to use a fair ordering policy then\n an available lock <em>will not</em> be acquired if any other threads\n are waiting for the lock. This is in contrast to the {@link #tryLock()}\n method. If you want a timed {@code tryLock} that does permit barging on\n a fair lock then combine the timed and un-timed forms together:\n\n <pre>if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... }\n </pre>\n\n <p>If the current thread\n already holds this lock then the hold count is incremented by one and\n the method returns {@code true}.\n\n <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n <ul>\n\n <li>The lock is acquired by the current thread; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses\n\n </ul>\n\n <p>If the lock is acquired then the value {@code true} is returned and\n the lock hold count is set to one.\n\n <p>If the current thread:\n\n <ul>\n\n <li>has its interrupted status set on entry to this method; or\n\n <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the lock,\n\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.\n\n <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock, and\n over reporting the elapse of the waiting time.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "timeout",
                            "comment_text": "the time to wait for the lock",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the timeout argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "unlock",
                    "comment_text": "Attempts to release this lock.\n\n <p>If the current thread is the holder of this lock then the hold\n count is decremented.  If the hold count is now zero then the lock\n is released.  If the current thread is not the holder of this\n lock then {@link IllegalMonitorStateException} is thrown.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newCondition",
                    "comment_text": "Returns a {@link Condition} instance for use with this\n {@link Lock} instance.\n\n <p>The returned {@link Condition} instance supports the same\n usages as do the {@link Object} monitor methods ({@link\n Object#wait() wait}, {@link Object#notify notify}, and {@link\n Object#notifyAll notifyAll}) when used with the built-in\n monitor lock.\n\n <ul>\n\n <li>If this lock is not held when any of the {@link Condition}\n {@linkplain Condition#await() waiting} or {@linkplain\n Condition#signal signalling} methods are called, then an {@link\n IllegalMonitorStateException} is thrown.\n\n <li>When the condition {@linkplain Condition#await() waiting}\n methods are called the lock is released and, before they\n return, the lock is reacquired and the lock hold count restored\n to what it was when the method was called.\n\n <li>If a thread is {@linkplain Thread#interrupt interrupted}\n while waiting then the wait will terminate, an {@link\n InterruptedException} will be thrown, and the thread's\n interrupted status will be cleared.\n\n <li> Waiting threads are signalled in FIFO order.\n\n <li>The ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for <em>fair</em> locks favors those threads that have been\n waiting the longest.\n\n </ul>",
                    "return_type": "java.util.concurrent.locks.Condition",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getHoldCount",
                    "comment_text": "Queries the number of holds on this lock by the current thread.\n\n <p>A thread has a hold on a lock for each lock action that is not\n matched by an unlock action.\n\n <p>The hold count information is typically only used for testing and\n debugging purposes. For example, if a certain section of code should\n not be entered with the lock already held then we can assert that\n fact:\n\n <pre>\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n   public void m() {\n     assert lock.getHoldCount() == 0;\n     lock.lock();\n     try {\n       // ... method body\n     } finally {\n       lock.unlock();\n     }\n   }\n }\n </pre>",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isHeldByCurrentThread",
                    "comment_text": "Queries if this lock is held by the current thread.\n\n <p>Analogous to the {@link Thread#holdsLock} method for built-in\n monitor locks, this method is typically used for debugging and\n testing. For example, a method that should only be called while\n a lock is held can assert that this is the case:\n\n <pre>\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() {\n       assert lock.isHeldByCurrentThread();\n       // ... method body\n   }\n }\n </pre>\n\n <p>It can also be used to ensure that a reentrant lock is used\n in a non-reentrant manner, for example:\n\n <pre>\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() {\n       assert !lock.isHeldByCurrentThread();\n       lock.lock();\n       try {\n           // ... method body\n       } finally {\n           lock.unlock();\n       }\n   }\n }\n </pre>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isLocked",
                    "comment_text": "Queries if this lock is held by any thread. This method is\n designed for use in monitoring of the system state,\n not for synchronization control.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isFair",
                    "comment_text": "Returns {@code true} if this lock has fairness set true.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getOwner",
                    "comment_text": "Returns the thread that currently owns this lock, or\n {@code null} if not owned. When this method is called by a\n thread that is not the owner, the return value reflects a\n best-effort approximation of current lock status. For example,\n the owner may be momentarily {@code null} even if there are\n threads trying to acquire the lock but have not yet done so.\n This method is designed to facilitate construction of\n subclasses that provide more extensive lock monitoring\n facilities.",
                    "return_type": "java.lang.Thread",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThreads",
                    "comment_text": "Queries whether any threads are waiting to acquire this lock. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire this lock.  This method is designed primarily for use in\n monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThread",
                    "comment_text": "Queries whether the given thread is waiting to acquire this\n lock. Note that because cancellations may occur at any time, a\n {@code true} return does not guarantee that this thread\n will ever acquire this lock.  This method is designed primarily for use\n in monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "thread",
                            "comment_text": "the thread",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting to\n acquire this lock.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring of the system state, not for synchronization\n control.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire this lock.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasWaiters",
                    "comment_text": "Queries whether any threads are waiting on the given condition\n associated with this lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.Condition"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting on the\n given condition associated with this lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.Condition"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingThreads",
                    "comment_text": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this lock.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a\n best-effort estimate. The elements of the returned collection\n are in no particular order.  This method is designed to\n facilitate construction of subclasses that provide more\n extensive condition monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.Condition"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes either the String {@code \"Unlocked\"}\n or the String {@code \"Locked by\"} followed by the\n {@linkplain Thread#getName name} of the owning thread.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.ReadWriteLock",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "A <tt>ReadWriteLock</tt> maintains a pair of associated {@link\n Lock locks}, one for read-only operations and one for writing.\n The {@link #readLock read lock} may be held simultaneously by\n multiple reader threads, so long as there are no writers.  The\n {@link #writeLock write lock} is exclusive.\n\n <p>All <tt>ReadWriteLock</tt> implementations must guarantee that\n the memory synchronization effects of <tt>writeLock</tt> operations\n (as specified in the {@link Lock} interface) also hold with respect\n to the associated <tt>readLock</tt>. That is, a thread successfully\n acquiring the read lock will see all updates made upon previous\n release of the write lock.\n\n <p>A read-write lock allows for a greater level of concurrency in\n accessing shared data than that permitted by a mutual exclusion lock.\n It exploits the fact that while only a single thread at a time (a\n <em>writer</em> thread) can modify the shared data, in many cases any\n number of threads can concurrently read the data (hence <em>reader</em>\n threads).\n In theory, the increase in concurrency permitted by the use of a read-write\n lock will lead to performance improvements over the use of a mutual\n exclusion lock. In practice this increase in concurrency will only be fully\n realized on a multi-processor, and then only if the access patterns for\n the shared data are suitable.\n\n <p>Whether or not a read-write lock will improve performance over the use\n of a mutual exclusion lock depends on the frequency that the data is\n read compared to being modified, the duration of the read and write\n operations, and the contention for the data - that is, the number of\n threads that will try to read or write the data at the same time.\n For example, a collection that is initially populated with data and\n thereafter infrequently modified, while being frequently searched\n (such as a directory of some kind) is an ideal candidate for the use of\n a read-write lock. However, if updates become frequent then the data\n spends most of its time being exclusively locked and there is little, if any\n increase in concurrency. Further, if the read operations are too short\n the overhead of the read-write lock implementation (which is inherently\n more complex than a mutual exclusion lock) can dominate the execution\n cost, particularly as many read-write lock implementations still serialize\n all threads through a small section of code. Ultimately, only profiling\n and measurement will establish whether the use of a read-write lock is\n suitable for your application.\n\n\n <p>Although the basic operation of a read-write lock is straight-forward,\n there are many policy decisions that an implementation must make, which\n may affect the effectiveness of the read-write lock in a given application.\n Examples of these policies include:\n <ul>\n <li>Determining whether to grant the read lock or the write lock, when\n both readers and writers are waiting, at the time that a writer releases\n the write lock. Writer preference is common, as writes are expected to be\n short and infrequent. Reader preference is less common as it can lead to\n lengthy delays for a write if the readers are frequent and long-lived as\n expected. Fair, or &quot;in-order&quot; implementations are also possible.\n\n <li>Determining whether readers that request the read lock while a\n reader is active and a writer is waiting, are granted the read lock.\n Preference to the reader can delay the writer indefinitely, while\n preference to the writer can reduce the potential for concurrency.\n\n <li>Determining whether the locks are reentrant: can a thread with the\n write lock reacquire it? Can it acquire a read lock while holding the\n write lock? Is the read lock itself reentrant?\n\n <li>Can the write lock be downgraded to a read lock without allowing\n an intervening writer? Can a read lock be upgraded to a write lock,\n in preference to other waiting readers or writers?\n\n </ul>\n You should consider all of these things when evaluating the suitability\n of a given implementation for your application.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.locks.ReentrantReadWriteLock",
                "java.util.concurrent.locks.Lock",
                "java.util.concurrent.locks.ReentrantLock"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "readLock",
                    "comment_text": "Returns the lock used for reading.",
                    "return_type": "java.util.concurrent.locks.Lock",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "writeLock",
                    "comment_text": "Returns the lock used for writing.",
                    "return_type": "java.util.concurrent.locks.Lock",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.LockSupport",
            "interfaces": [

            ],
            "superclass": "java.lang.Object",
            "comment_text": "Basic thread blocking primitives for creating locks and other\n synchronization classes.\n\n <p>This class associates, with each thread that uses it, a permit\n (in the sense of the {@link java.util.concurrent.Semaphore\n Semaphore} class). A call to {@code park} will return immediately\n if the permit is available, consuming it in the process; otherwise\n it <em>may</em> block.  A call to {@code unpark} makes the permit\n available, if it was not already available. (Unlike with Semaphores\n though, permits do not accumulate. There is at most one.)\n\n <p>Methods {@code park} and {@code unpark} provide efficient\n means of blocking and unblocking threads that do not encounter the\n problems that cause the deprecated methods {@code Thread.suspend}\n and {@code Thread.resume} to be unusable for such purposes: Races\n between one thread invoking {@code park} and another thread trying\n to {@code unpark} it will preserve liveness, due to the\n permit. Additionally, {@code park} will return if the caller's\n thread was interrupted, and timeout versions are supported. The\n {@code park} method may also return at any other time, for \"no\n reason\", so in general must be invoked within a loop that rechecks\n conditions upon return. In this sense {@code park} serves as an\n optimization of a \"busy wait\" that does not waste as much time\n spinning, but must be paired with an {@code unpark} to be\n effective.\n\n <p>The three forms of {@code park} each also support a\n {@code blocker} object parameter. This object is recorded while\n the thread is blocked to permit monitoring and diagnostic tools to\n identify the reasons that threads are blocked. (Such tools may\n access blockers using method {@link #getBlocker}.) The use of these\n forms rather than the original forms without this parameter is\n strongly encouraged. The normal argument to supply as a\n {@code blocker} within a lock implementation is {@code this}.\n\n <p>These methods are designed to be used as tools for creating\n higher-level synchronization utilities, and are not in themselves\n useful for most concurrency control applications.  The {@code park}\n method is designed for use only in constructions of the form:\n <pre>while (!canProceed()) { ... LockSupport.park(this); }</pre>\n where neither {@code canProceed} nor any other actions prior to the\n call to {@code park} entail locking or blocking.  Because only one\n permit is associated with each thread, any intermediary uses of\n {@code park} could interfere with its intended effects.\n\n <p><b>Sample Usage.</b> Here is a sketch of a first-in-first-out\n non-reentrant lock class:\n <pre>{@code\n class FIFOMutex {\n   private final AtomicBoolean locked = new AtomicBoolean(false);\n   private final Queue<Thread> waiters\n     = new ConcurrentLinkedQueue<Thread>();\n\n   public void lock() {\n     boolean wasInterrupted = false;\n     Thread current = Thread.currentThread();\n     waiters.add(current);\n\n     // Block while not first in queue or cannot acquire lock\n     while (waiters.peek() != current ||\n            !locked.compareAndSet(false, true)) {\n        LockSupport.park(this);\n        if (Thread.interrupted()) // ignore interrupts while waiting\n          wasInterrupted = true;\n     }\n\n     waiters.remove();\n     if (wasInterrupted)          // reassert interrupt status on exit\n        current.interrupt();\n   }\n\n   public void unlock() {\n     locked.set(false);\n     LockSupport.unpark(waiters.peek());\n   }\n }}</pre>",
            "since": "",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "unpark",
                    "comment_text": "Makes available the permit for the given thread, if it\n was not already available.  If the thread was blocked on\n {@code park} then it will unblock.  Otherwise, its next call\n to {@code park} is guaranteed not to block. This operation\n is not guaranteed to have any effect at all if the given\n thread has not been started.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "thread",
                            "comment_text": "the thread to unpark, or {@code null}, in which case\n        this operation has no effect",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "park",
                    "comment_text": "Disables the current thread for thread scheduling purposes unless the\n permit is available.\n\n <p>If the permit is available then it is consumed and the call returns\n immediately; otherwise\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n <ul>\n <li>Some other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The call spuriously (that is, for no reason) returns.\n </ul>\n\n <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread upon return.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "blocker",
                            "comment_text": "the synchronization object responsible for this\n        thread parking",
                            "type": "java.lang.Object"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parkNanos",
                    "comment_text": "Disables the current thread for thread scheduling purposes, for up to\n the specified waiting time, unless the permit is available.\n\n <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n <ul>\n <li>Some other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses; or\n\n <li>The call spuriously (that is, for no reason) returns.\n </ul>\n\n <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the elapsed time\n upon return.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "blocker",
                            "comment_text": "the synchronization object responsible for this\n        thread parking",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "nanos",
                            "comment_text": "the maximum number of nanoseconds to wait",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parkUntil",
                    "comment_text": "Disables the current thread for thread scheduling purposes, until\n the specified deadline, unless the permit is available.\n\n <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n <ul>\n <li>Some other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread; or\n\n <li>The specified deadline passes; or\n\n <li>The call spuriously (that is, for no reason) returns.\n </ul>\n\n <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the current time\n upon return.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "blocker",
                            "comment_text": "the synchronization object responsible for this\n        thread parking",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "deadline",
                            "comment_text": "the absolute time, in milliseconds from the Epoch,\n        to wait until",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getBlocker",
                    "comment_text": "Returns the blocker object supplied to the most recent\n invocation of a park method that has not yet unblocked, or null\n if not blocked.  The value returned is just a momentary\n snapshot -- the thread may have since unblocked or blocked on a\n different blocker object.",
                    "return_type": "java.lang.Object",
                    "parameters": [
                        {
                            "name": "t",
                            "comment_text": "the thread",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "park",
                    "comment_text": "Disables the current thread for thread scheduling purposes unless the\n permit is available.\n\n <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of three\n things happens:\n\n <ul>\n\n <li>Some other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The call spuriously (that is, for no reason) returns.\n </ul>\n\n <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread upon return.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parkNanos",
                    "comment_text": "Disables the current thread for thread scheduling purposes, for up to\n the specified waiting time, unless the permit is available.\n\n <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n <ul>\n <li>Some other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified waiting time elapses; or\n\n <li>The call spuriously (that is, for no reason) returns.\n </ul>\n\n <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the elapsed time\n upon return.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "nanos",
                            "comment_text": "the maximum number of nanoseconds to wait",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "parkUntil",
                    "comment_text": "Disables the current thread for thread scheduling purposes, until\n the specified deadline, unless the permit is available.\n\n <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:\n\n <ul>\n <li>Some other thread invokes {@link #unpark unpark} with the\n current thread as the target; or\n\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n\n <li>The specified deadline passes; or\n\n <li>The call spuriously (that is, for no reason) returns.\n </ul>\n\n <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the current time\n upon return.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "deadline",
                            "comment_text": "the absolute time, in milliseconds from the Epoch,\n        to wait until",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.Lock",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "{@code Lock} implementations provide more extensive locking\n operations than can be obtained using {@code synchronized} methods\n and statements.  They allow more flexible structuring, may have\n quite different properties, and may support multiple associated\n {@link Condition} objects.\n\n <p>A lock is a tool for controlling access to a shared resource by\n multiple threads. Commonly, a lock provides exclusive access to a\n shared resource: only one thread at a time can acquire the lock and\n all access to the shared resource requires that the lock be\n acquired first. However, some locks may allow concurrent access to\n a shared resource, such as the read lock of a {@link ReadWriteLock}.\n\n <p>The use of {@code synchronized} methods or statements provides\n access to the implicit monitor lock associated with every object, but\n forces all lock acquisition and release to occur in a block-structured way:\n when multiple locks are acquired they must be released in the opposite\n order, and all locks must be released in the same lexical scope in which\n they were acquired.\n\n <p>While the scoping mechanism for {@code synchronized} methods\n and statements makes it much easier to program with monitor locks,\n and helps avoid many common programming errors involving locks,\n there are occasions where you need to work with locks in a more\n flexible way. For example, some algorithms for traversing\n concurrently accessed data structures require the use of\n &quot;hand-over-hand&quot; or &quot;chain locking&quot;: you\n acquire the lock of node A, then node B, then release A and acquire\n C, then release B and acquire D and so on.  Implementations of the\n {@code Lock} interface enable the use of such techniques by\n allowing a lock to be acquired and released in different scopes,\n and allowing multiple locks to be acquired and released in any\n order.\n\n <p>With this increased flexibility comes additional\n responsibility. The absence of block-structured locking removes the\n automatic release of locks that occurs with {@code synchronized}\n methods and statements. In most cases, the following idiom\n should be used:\n\n <pre><tt>     Lock l = ...;\n     l.lock();\n     try {\n         // access the resource protected by this lock\n     } finally {\n         l.unlock();\n     }\n </tt></pre>\n\n When locking and unlocking occur in different scopes, care must be\n taken to ensure that all code that is executed while the lock is\n held is protected by try-finally or try-catch to ensure that the\n lock is released when necessary.\n\n <p>{@code Lock} implementations provide additional functionality\n over the use of {@code synchronized} methods and statements by\n providing a non-blocking attempt to acquire a lock ({@link\n #tryLock()}), an attempt to acquire the lock that can be\n interrupted ({@link #lockInterruptibly}, and an attempt to acquire\n the lock that can timeout ({@link #tryLock(long, TimeUnit)}).\n\n <p>A {@code Lock} class can also provide behavior and semantics\n that is quite different from that of the implicit monitor lock,\n such as guaranteed ordering, non-reentrant usage, or deadlock\n detection. If an implementation provides such specialized semantics\n then the implementation must document those semantics.\n\n <p>Note that {@code Lock} instances are just normal objects and can\n themselves be used as the target in a {@code synchronized} statement.\n Acquiring the\n monitor lock of a {@code Lock} instance has no specified relationship\n with invoking any of the {@link #lock} methods of that instance.\n It is recommended that to avoid confusion you never use {@code Lock}\n instances in this way, except within their own implementation.\n\n <p>Except where noted, passing a {@code null} value for any\n parameter will result in a {@link NullPointerException} being\n thrown.\n\n <h3>Memory Synchronization</h3>\n\n <p>All {@code Lock} implementations <em>must</em> enforce the same\n memory synchronization semantics as provided by the built-in monitor\n lock, as described in section 17.4 of\n <cite>The Java&trade; Language Specification</cite>:\n <ul>\n <li>A successful {@code lock} operation has the same memory\n synchronization effects as a successful <em>Lock</em> action.\n <li>A successful {@code unlock} operation has the same\n memory synchronization effects as a successful <em>Unlock</em> action.\n </ul>\n\n Unsuccessful locking and unlocking operations, and reentrant\n locking/unlocking operations, do not require any memory\n synchronization effects.\n\n <h3>Implementation Considerations</h3>\n\n <p> The three forms of lock acquisition (interruptible,\n non-interruptible, and timed) may differ in their performance\n characteristics, ordering guarantees, or other implementation\n qualities.  Further, the ability to interrupt the <em>ongoing</em>\n acquisition of a lock may not be available in a given {@code Lock}\n class.  Consequently, an implementation is not required to define\n exactly the same guarantees or semantics for all three forms of\n lock acquisition, nor is it required to support interruption of an\n ongoing lock acquisition.  An implementation is required to clearly\n document the semantics and guarantees provided by each of the\n locking methods. It must also obey the interruption semantics as\n defined in this interface, to the extent that interruption of lock\n acquisition is supported: which is either totally, or only on\n method entry.\n\n <p>As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action may have unblocked\n the thread. An implementation should document this behavior.",
            "since": "1.5",
            "see": [
                "java.util.concurrent.locks.ReentrantLock",
                "java.util.concurrent.locks.Condition",
                "java.util.concurrent.locks.ReadWriteLock"
            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "lock",
                    "comment_text": "Acquires the lock.\n\n <p>If the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until the\n lock has been acquired.\n\n <p><b>Implementation Considerations</b>\n\n <p>A {@code Lock} implementation may be able to detect erroneous use\n of the lock, such as an invocation that would cause deadlock, and\n may throw an (unchecked) exception in such circumstances.  The\n circumstances and the exception type must be documented by that\n {@code Lock} implementation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "lockInterruptibly",
                    "comment_text": "Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.\n\n <p>Acquires the lock if it is available and returns immediately.\n\n <p>If the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n\n <ul>\n <li>The lock is acquired by the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of lock acquisition is supported.\n </ul>\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while acquiring the\n lock, and interruption of lock acquisition is supported,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p><b>Implementation Considerations</b>\n\n <p>The ability to interrupt a lock acquisition in some\n implementations may not be possible, and if possible may be an\n expensive operation.  The programmer should be aware that this\n may be the case. An implementation should document when this is\n the case.\n\n <p>An implementation can favor responding to an interrupt over\n normal method return.\n\n <p>A {@code Lock} implementation may be able to detect\n erroneous use of the lock, such as an invocation that would\n cause deadlock, and may throw an (unchecked) exception in such\n circumstances.  The circumstances and the exception type must\n be documented by that {@code Lock} implementation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is\n         interrupted while acquiring the lock (and interruption\n         of lock acquisition is supported)."
                        }
                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the lock only if it is free at the time of invocation.\n\n <p>Acquires the lock if it is available and returns immediately\n with the value {@code true}.\n If the lock is not available then this method will return\n immediately with the value {@code false}.\n\n <p>A typical usage idiom for this method would be:\n <pre>\n      Lock lock = ...;\n      if (lock.tryLock()) {\n          try {\n              // manipulate protected state\n          } finally {\n              lock.unlock();\n          }\n      } else {\n          // perform alternative actions\n      }\n </pre>\n This usage ensures that the lock is unlocked if it was acquired, and\n doesn't try to unlock if the lock was not acquired.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryLock",
                    "comment_text": "Acquires the lock if it is free within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt interrupted}.\n\n <p>If the lock is available this method returns immediately\n with the value {@code true}.\n If the lock is not available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n <ul>\n <li>The lock is acquired by the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of lock acquisition is supported; or\n <li>The specified waiting time elapses\n </ul>\n\n <p>If the lock is acquired then the value {@code true} is returned.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while acquiring\n the lock, and interruption of lock acquisition is supported,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n <p>If the specified waiting time elapses then the value {@code false}\n is returned.\n If the time is\n less than or equal to zero, the method will not wait at all.\n\n <p><b>Implementation Considerations</b>\n\n <p>The ability to interrupt a lock acquisition in some implementations\n may not be possible, and if possible may\n be an expensive operation.\n The programmer should be aware that this may be the case. An\n implementation should document when this is the case.\n\n <p>An implementation can favor responding to an interrupt over normal\n method return, or reporting a timeout.\n\n <p>A {@code Lock} implementation may be able to detect\n erroneous use of the lock, such as an invocation that would cause\n deadlock, and may throw an (unchecked) exception in such circumstances.\n The circumstances and the exception type must be documented by that\n {@code Lock} implementation.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "the maximum time to wait for the lock",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the {@code time} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         while acquiring the lock (and interruption of lock\n         acquisition is supported)"
                        }
                    ]
                },
                {
                    "name": "unlock",
                    "comment_text": "Releases the lock.\n\n <p><b>Implementation Considerations</b>\n\n <p>A {@code Lock} implementation will usually impose\n restrictions on which thread can release a lock (typically only the\n holder of the lock can release it) and may throw\n an (unchecked) exception if the restriction is violated.\n Any restrictions and the exception\n type must be documented by that {@code Lock} implementation.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "newCondition",
                    "comment_text": "Returns a new {@link Condition} instance that is bound to this\n {@code Lock} instance.\n\n <p>Before waiting on the condition the lock must be held by the\n current thread.\n A call to {@link Condition#await()} will atomically release the lock\n before waiting and re-acquire the lock before the wait returns.\n\n <p><b>Implementation Considerations</b>\n\n <p>The exact operation of the {@link Condition} instance depends on\n the {@code Lock} implementation and must be documented by that\n implementation.",
                    "return_type": "java.util.concurrent.locks.Condition",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.Condition",
            "interfaces": [

            ],
            "superclass": "",
            "comment_text": "{@code Condition} factors out the {@code Object} monitor\n methods ({@link Object#wait() wait}, {@link Object#notify notify}\n and {@link Object#notifyAll notifyAll}) into distinct objects to\n give the effect of having multiple wait-sets per object, by\n combining them with the use of arbitrary {@link Lock} implementations.\n Where a {@code Lock} replaces the use of {@code synchronized} methods\n and statements, a {@code Condition} replaces the use of the Object\n monitor methods.\n\n <p>Conditions (also known as <em>condition queues</em> or\n <em>condition variables</em>) provide a means for one thread to\n suspend execution (to &quot;wait&quot;) until notified by another\n thread that some state condition may now be true.  Because access\n to this shared state information occurs in different threads, it\n must be protected, so a lock of some form is associated with the\n condition. The key property that waiting for a condition provides\n is that it <em>atomically</em> releases the associated lock and\n suspends the current thread, just like {@code Object.wait}.\n\n <p>A {@code Condition} instance is intrinsically bound to a lock.\n To obtain a {@code Condition} instance for a particular {@link Lock}\n instance use its {@link Lock#newCondition newCondition()} method.\n\n <p>As an example, suppose we have a bounded buffer which supports\n {@code put} and {@code take} methods.  If a\n {@code take} is attempted on an empty buffer, then the thread will block\n until an item becomes available; if a {@code put} is attempted on a\n full buffer, then the thread will block until a space becomes available.\n We would like to keep waiting {@code put} threads and {@code take}\n threads in separate wait-sets so that we can use the optimization of\n only notifying a single thread at a time when items or spaces become\n available in the buffer. This can be achieved using two\n {@link Condition} instances.\n <pre>\n class BoundedBuffer {\n   <b>final Lock lock = new ReentrantLock();</b>\n   final Condition notFull  = <b>lock.newCondition(); </b>\n   final Condition notEmpty = <b>lock.newCondition(); </b>\n\n   final Object[] items = new Object[100];\n   int putptr, takeptr, count;\n\n   public void put(Object x) throws InterruptedException {\n     <b>lock.lock();\n     try {</b>\n       while (count == items.length)\n         <b>notFull.await();</b>\n       items[putptr] = x;\n       if (++putptr == items.length) putptr = 0;\n       ++count;\n       <b>notEmpty.signal();</b>\n     <b>} finally {\n       lock.unlock();\n     }</b>\n   }\n\n   public Object take() throws InterruptedException {\n     <b>lock.lock();\n     try {</b>\n       while (count == 0)\n         <b>notEmpty.await();</b>\n       Object x = items[takeptr];\n       if (++takeptr == items.length) takeptr = 0;\n       --count;\n       <b>notFull.signal();</b>\n       return x;\n     <b>} finally {\n       lock.unlock();\n     }</b>\n   }\n }\n </pre>\n\n (The {@link java.util.concurrent.ArrayBlockingQueue} class provides\n this functionality, so there is no reason to implement this\n sample usage class.)\n\n <p>A {@code Condition} implementation can provide behavior and semantics\n that is\n different from that of the {@code Object} monitor methods, such as\n guaranteed ordering for notifications, or not requiring a lock to be held\n when performing notifications.\n If an implementation provides such specialized semantics then the\n implementation must document those semantics.\n\n <p>Note that {@code Condition} instances are just normal objects and can\n themselves be used as the target in a {@code synchronized} statement,\n and can have their own monitor {@link Object#wait wait} and\n {@link Object#notify notification} methods invoked.\n Acquiring the monitor lock of a {@code Condition} instance, or using its\n monitor methods, has no specified relationship with acquiring the\n {@link Lock} associated with that {@code Condition} or the use of its\n {@linkplain #await waiting} and {@linkplain #signal signalling} methods.\n It is recommended that to avoid confusion you never use {@code Condition}\n instances in this way, except perhaps within their own implementation.\n\n <p>Except where noted, passing a {@code null} value for any parameter\n will result in a {@link NullPointerException} being thrown.\n\n <h3>Implementation Considerations</h3>\n\n <p>When waiting upon a {@code Condition}, a &quot;<em>spurious\n wakeup</em>&quot; is permitted to occur, in\n general, as a concession to the underlying platform semantics.\n This has little practical impact on most application programs as a\n {@code Condition} should always be waited upon in a loop, testing\n the state predicate that is being waited for.  An implementation is\n free to remove the possibility of spurious wakeups but it is\n recommended that applications programmers always assume that they can\n occur and so always wait in a loop.\n\n <p>The three forms of condition waiting\n (interruptible, non-interruptible, and timed) may differ in their ease of\n implementation on some platforms and in their performance characteristics.\n In particular, it may be difficult to provide these features and maintain\n specific semantics such as ordering guarantees.\n Further, the ability to interrupt the actual suspension of the thread may\n not always be feasible to implement on all platforms.\n\n <p>Consequently, an implementation is not required to define exactly the\n same guarantees or semantics for all three forms of waiting, nor is it\n required to support interruption of the actual suspension of the thread.\n\n <p>An implementation is required to\n clearly document the semantics and guarantees provided by each of the\n waiting methods, and when an implementation does support interruption of\n thread suspension then it must obey the interruption semantics as defined\n in this interface.\n\n <p>As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action that may have\n unblocked the thread. An implementation should document this behavior.",
            "since": "1.5",
            "see": [

            ],
            "constructors": [

            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "await",
                    "comment_text": "Causes the current thread to wait until it is signalled or\n {@linkplain Thread#interrupt interrupted}.\n\n <p>The lock associated with this {@code Condition} is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of four things happens:\n <ul>\n <li>Some other thread invokes the {@link #signal} method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the {@link #signalAll} method for this\n {@code Condition}; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of thread suspension is supported; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </ul>\n\n <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n and interruption of thread suspension is supported,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared. It is not specified, in the first\n case, whether or not the test for interruption occurs before the lock\n is released.\n\n <p><b>Implementation Considerations</b>\n\n <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as {@link IllegalMonitorStateException}) and the\n implementation must document that fact.\n\n <p>An implementation can favor responding to an interrupt over normal\n method return in response to a signal. In that case the implementation\n must ensure that the signal is redirected to another waiting thread, if\n there is one.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         (and interruption of thread suspension is supported)"
                        }
                    ]
                },
                {
                    "name": "awaitUninterruptibly",
                    "comment_text": "Causes the current thread to wait until it is signalled.\n\n <p>The lock associated with this condition is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of three things happens:\n <ul>\n <li>Some other thread invokes the {@link #signal} method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the {@link #signalAll} method for this\n {@code Condition}; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </ul>\n\n <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.\n\n <p>If the current thread's interrupted status is set when it enters\n this method, or it is {@linkplain Thread#interrupt interrupted}\n while waiting, it will continue to wait until signalled. When it finally\n returns from this method its interrupted status will still\n be set.\n\n <p><b>Implementation Considerations</b>\n\n <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as {@link IllegalMonitorStateException}) and the\n implementation must document that fact.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitNanos",
                    "comment_text": "Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses.\n\n <p>The lock associated with this condition is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of five things happens:\n <ul>\n <li>Some other thread invokes the {@link #signal} method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the {@link #signalAll} method for this\n {@code Condition}; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of thread suspension is supported; or\n <li>The specified waiting time elapses; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </ul>\n\n <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n and interruption of thread suspension is supported,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared. It is not specified, in the first\n case, whether or not the test for interruption occurs before the lock\n is released.\n\n <p>The method returns an estimate of the number of nanoseconds\n remaining to wait given the supplied {@code nanosTimeout}\n value upon return, or a value less than or equal to zero if it\n timed out. This value can be used to determine whether and how\n long to re-wait in cases where the wait returns but an awaited\n condition still does not hold. Typical uses of this method take\n the following form:\n\n  <pre> {@code\n boolean aMethod(long timeout, TimeUnit unit) {\n   long nanos = unit.toNanos(timeout);\n   lock.lock();\n   try {\n     while (!conditionBeingWaitedFor()) {\n       if (nanos <= 0L)\n         return false;\n       nanos = theCondition.awaitNanos(nanos);\n     }\n     // ...\n   } finally {\n     lock.unlock();\n   }\n }}</pre>\n\n <p> Design note: This method requires a nanosecond argument so\n as to avoid truncation errors in reporting remaining times.\n Such precision loss would make it difficult for programmers to\n ensure that total waiting times are not systematically shorter\n than specified when re-waits occur.\n\n <p><b>Implementation Considerations</b>\n\n <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as {@link IllegalMonitorStateException}) and the\n implementation must document that fact.\n\n <p>An implementation can favor responding to an interrupt over normal\n method return in response to a signal, or over indicating the elapse\n of the specified waiting time. In either case the implementation\n must ensure that the signal is redirected to another waiting thread, if\n there is one.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "nanosTimeout",
                            "comment_text": "the maximum time to wait, in nanoseconds",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         (and interruption of thread suspension is supported)"
                        }
                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses. This method is behaviorally\n equivalent to:<br>\n <pre>\n   awaitNanos(unit.toNanos(time)) &gt; 0\n </pre>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "the maximum time to wait",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "the time unit of the {@code time} argument",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         (and interruption of thread suspension is supported)"
                        }
                    ]
                },
                {
                    "name": "awaitUntil",
                    "comment_text": "Causes the current thread to wait until it is signalled or interrupted,\n or the specified deadline elapses.\n\n <p>The lock associated with this condition is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of five things happens:\n <ul>\n <li>Some other thread invokes the {@link #signal} method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the {@link #signalAll} method for this\n {@code Condition}; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of thread suspension is supported; or\n <li>The specified deadline elapses; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </ul>\n\n <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.\n\n\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n and interruption of thread suspension is supported,\n </ul>\n then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared. It is not specified, in the first\n case, whether or not the test for interruption occurs before the lock\n is released.\n\n\n <p>The return value indicates whether the deadline has elapsed,\n which can be used as follows:\n  <pre> {@code\n boolean aMethod(Date deadline) {\n   boolean stillWaiting = true;\n   lock.lock();\n   try {\n     while (!conditionBeingWaitedFor()) {\n       if (!stillWaiting)\n         return false;\n       stillWaiting = theCondition.awaitUntil(deadline);\n     }\n     // ...\n   } finally {\n     lock.unlock();\n   }\n }}</pre>\n\n <p><b>Implementation Considerations</b>\n\n <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as {@link IllegalMonitorStateException}) and the\n implementation must document that fact.\n\n <p>An implementation can favor responding to an interrupt over normal\n method return in response to a signal, or over indicating the passing\n of the specified deadline. In either case the implementation\n must ensure that the signal is redirected to another waiting thread, if\n there is one.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "deadline",
                            "comment_text": "the absolute time to wait until",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted\n         (and interruption of thread suspension is supported)"
                        }
                    ]
                },
                {
                    "name": "signal",
                    "comment_text": "Wakes up one waiting thread.\n\n <p>If any threads are waiting on this condition then one\n is selected for waking up. That thread must then re-acquire the\n lock before returning from {@code await}.\n\n <p><b>Implementation Considerations</b>\n\n <p>An implementation may (and typically does) require that the\n current thread hold the lock associated with this {@code\n Condition} when this method is called. Implementations must\n document this precondition and any actions taken if the lock is\n not held. Typically, an exception such as {@link\n IllegalMonitorStateException} will be thrown.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "signalAll",
                    "comment_text": "Wakes up all waiting threads.\n\n <p>If any threads are waiting on this condition then they are\n all woken up. Each thread must re-acquire the lock before it can\n return from {@code await}.\n\n <p><b>Implementation Considerations</b>\n\n <p>An implementation may (and typically does) require that the\n current thread hold the lock associated with this {@code\n Condition} when this method is called. Implementations must\n document this precondition and any actions taken if the lock is\n not held. Typically, an exception such as {@link\n IllegalMonitorStateException} will be thrown.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
            "comment_text": "Provides a framework for implementing blocking locks and related\n synchronizers (semaphores, events, etc) that rely on\n first-in-first-out (FIFO) wait queues.  This class is designed to\n be a useful basis for most kinds of synchronizers that rely on a\n single atomic <tt>int</tt> value to represent state. Subclasses\n must define the protected methods that change this state, and which\n define what that state means in terms of this object being acquired\n or released.  Given these, the other methods in this class carry\n out all queuing and blocking mechanics. Subclasses can maintain\n other state fields, but only the atomically updated <tt>int</tt>\n value manipulated using methods {@link #getState}, {@link\n #setState} and {@link #compareAndSetState} is tracked with respect\n to synchronization.\n\n <p>Subclasses should be defined as non-public internal helper\n classes that are used to implement the synchronization properties\n of their enclosing class.  Class\n <tt>AbstractQueuedSynchronizer</tt> does not implement any\n synchronization interface.  Instead it defines methods such as\n {@link #acquireInterruptibly} that can be invoked as\n appropriate by concrete locks and related synchronizers to\n implement their public methods.\n\n <p>This class supports either or both a default <em>exclusive</em>\n mode and a <em>shared</em> mode. When acquired in exclusive mode,\n attempted acquires by other threads cannot succeed. Shared mode\n acquires by multiple threads may (but need not) succeed. This class\n does not &quot;understand&quot; these differences except in the\n mechanical sense that when a shared mode acquire succeeds, the next\n waiting thread (if one exists) must also determine whether it can\n acquire as well. Threads waiting in the different modes share the\n same FIFO queue. Usually, implementation subclasses support only\n one of these modes, but both can come into play for example in a\n {@link ReadWriteLock}. Subclasses that support only exclusive or\n only shared modes need not define the methods supporting the unused mode.\n\n <p>This class defines a nested {@link ConditionObject} class that\n can be used as a {@link Condition} implementation by subclasses\n supporting exclusive mode for which method {@link\n #isHeldExclusively} reports whether synchronization is exclusively\n held with respect to the current thread, method {@link #release}\n invoked with the current {@link #getState} value fully releases\n this object, and {@link #acquire}, given this saved state value,\n eventually restores this object to its previous acquired state.  No\n <tt>AbstractQueuedSynchronizer</tt> method otherwise creates such a\n condition, so if this constraint cannot be met, do not use it.  The\n behavior of {@link ConditionObject} depends of course on the\n semantics of its synchronizer implementation.\n\n <p>This class provides inspection, instrumentation, and monitoring\n methods for the internal queue, as well as similar methods for\n condition objects. These can be exported as desired into classes\n using an <tt>AbstractQueuedSynchronizer</tt> for their\n synchronization mechanics.\n\n <p>Serialization of this class stores only the underlying atomic\n integer maintaining state, so deserialized objects have empty\n thread queues. Typical subclasses requiring serializability will\n define a <tt>readObject</tt> method that restores this to a known\n initial state upon deserialization.\n\n <h3>Usage</h3>\n\n <p>To use this class as the basis of a synchronizer, redefine the\n following methods, as applicable, by inspecting and/or modifying\n the synchronization state using {@link #getState}, {@link\n #setState} and/or {@link #compareAndSetState}:\n\n <ul>\n <li> {@link #tryAcquire}\n <li> {@link #tryRelease}\n <li> {@link #tryAcquireShared}\n <li> {@link #tryReleaseShared}\n <li> {@link #isHeldExclusively}\n</ul>\n\n Each of these methods by default throws {@link\n UnsupportedOperationException}.  Implementations of these methods\n must be internally thread-safe, and should in general be short and\n not block. Defining these methods is the <em>only</em> supported\n means of using this class. All other methods are declared\n <tt>final</tt> because they cannot be independently varied.\n\n <p>You may also find the inherited methods from {@link\n AbstractOwnableSynchronizer} useful to keep track of the thread\n owning an exclusive synchronizer.  You are encouraged to use them\n -- this enables monitoring and diagnostic tools to assist users in\n determining which threads hold locks.\n\n <p>Even though this class is based on an internal FIFO queue, it\n does not automatically enforce FIFO acquisition policies.  The core\n of exclusive synchronization takes the form:\n\n <pre>\n Acquire:\n     while (!tryAcquire(arg)) {\n        <em>enqueue thread if it is not already queued</em>;\n        <em>possibly block current thread</em>;\n     }\n\n Release:\n     if (tryRelease(arg))\n        <em>unblock the first queued thread</em>;\n </pre>\n\n (Shared mode is similar but may involve cascading signals.)\n\n <p><a name=\"barging\">Because checks in acquire are invoked before\n enqueuing, a newly acquiring thread may <em>barge</em> ahead of\n others that are blocked and queued.  However, you can, if desired,\n define <tt>tryAcquire</tt> and/or <tt>tryAcquireShared</tt> to\n disable barging by internally invoking one or more of the inspection\n methods, thereby providing a <em>fair</em> FIFO acquisition order.\n In particular, most fair synchronizers can define <tt>tryAcquire</tt>\n to return <tt>false</tt> if {@link #hasQueuedPredecessors} (a method\n specifically designed to be used by fair synchronizers) returns\n <tt>true</tt>.  Other variations are possible.\n\n <p>Throughput and scalability are generally highest for the\n default barging (also known as <em>greedy</em>,\n <em>renouncement</em>, and <em>convoy-avoidance</em>) strategy.\n While this is not guaranteed to be fair or starvation-free, earlier\n queued threads are allowed to recontend before later queued\n threads, and each recontention has an unbiased chance to succeed\n against incoming threads.  Also, while acquires do not\n &quot;spin&quot; in the usual sense, they may perform multiple\n invocations of <tt>tryAcquire</tt> interspersed with other\n computations before blocking.  This gives most of the benefits of\n spins when exclusive synchronization is only briefly held, without\n most of the liabilities when it isn't. If so desired, you can\n augment this by preceding calls to acquire methods with\n \"fast-path\" checks, possibly prechecking {@link #hasContended}\n and/or {@link #hasQueuedThreads} to only do so if the synchronizer\n is likely not to be contended.\n\n <p>This class provides an efficient and scalable basis for\n synchronization in part by specializing its range of use to\n synchronizers that can rely on <tt>int</tt> state, acquire, and\n release parameters, and an internal FIFO wait queue. When this does\n not suffice, you can build synchronizers from a lower level using\n {@link java.util.concurrent.atomic atomic} classes, your own custom\n {@link java.util.Queue} classes, and {@link LockSupport} blocking\n support.\n\n <h3>Usage Examples</h3>\n\n <p>Here is a non-reentrant mutual exclusion lock class that uses\n the value zero to represent the unlocked state, and one to\n represent the locked state. While a non-reentrant lock\n does not strictly require recording of the current owner\n thread, this class does so anyway to make usage easier to monitor.\n It also supports conditions and exposes\n one of the instrumentation methods:\n\n <pre>\n class Mutex implements Lock, java.io.Serializable {\n\n   // Our internal helper class\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // Report whether in locked state\n     protected boolean isHeldExclusively() {\n       return getState() == 1;\n     }\n\n     // Acquire the lock if state is zero\n     public boolean tryAcquire(int acquires) {\n       assert acquires == 1; // Otherwise unused\n       if (compareAndSetState(0, 1)) {\n         setExclusiveOwnerThread(Thread.currentThread());\n         return true;\n       }\n       return false;\n     }\n\n     // Release the lock by setting state to zero\n     protected boolean tryRelease(int releases) {\n       assert releases == 1; // Otherwise unused\n       if (getState() == 0) throw new IllegalMonitorStateException();\n       setExclusiveOwnerThread(null);\n       setState(0);\n       return true;\n     }\n\n     // Provide a Condition\n     Condition newCondition() { return new ConditionObject(); }\n\n     // Deserialize properly\n     private void readObject(ObjectInputStream s)\n         throws IOException, ClassNotFoundException {\n       s.defaultReadObject();\n       setState(0); // reset to unlocked state\n     }\n   }\n\n   // The sync object does all the hard work. We just forward to it.\n   private final Sync sync = new Sync();\n\n   public void lock()                { sync.acquire(1); }\n   public boolean tryLock()          { return sync.tryAcquire(1); }\n   public void unlock()              { sync.release(1); }\n   public Condition newCondition()   { return sync.newCondition(); }\n   public boolean isLocked()         { return sync.isHeldExclusively(); }\n   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }\n </pre>\n\n <p>Here is a latch class that is like a {@link CountDownLatch}\n except that it only requires a single <tt>signal</tt> to\n fire. Because a latch is non-exclusive, it uses the <tt>shared</tt>\n acquire and release methods.\n\n <pre>\n class BooleanLatch {\n\n   private static class Sync extends AbstractQueuedSynchronizer {\n     boolean isSignalled() { return getState() != 0; }\n\n     protected int tryAcquireShared(int ignore) {\n       return isSignalled() ? 1 : -1;\n     }\n\n     protected boolean tryReleaseShared(int ignore) {\n       setState(1);\n       return true;\n     }\n   }\n\n   private final Sync sync = new Sync();\n   public boolean isSignalled() { return sync.isSignalled(); }\n   public void signal()         { sync.releaseShared(1); }\n   public void await() throws InterruptedException {\n     sync.acquireSharedInterruptibly(1);\n   }\n }\n </pre>",
            "since": "1.5",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractQueuedSynchronizer",
                    "comment_text": "Creates a new <tt>AbstractQueuedSynchronizer</tt> instance\n with initial synchronization state of zero.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getState",
                    "comment_text": "Returns the current value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> read.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setState",
                    "comment_text": "Sets the value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> write.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newState",
                            "comment_text": "the new state value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSetState",
                    "comment_text": "Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.\n This operation has memory semantics of a <tt>volatile</tt> read\n and write.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "int"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquire",
                    "comment_text": "Attempts to acquire in exclusive mode. This method should query\n if the state of the object permits it to be acquired in the\n exclusive mode, and if so to acquire it.\n\n <p>This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread. This can be used\n to implement method {@link Lock#tryLock()}.\n\n <p>The default\n implementation throws {@link UnsupportedOperationException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument. This value is always the one\n        passed to an acquire method, or is the value saved on entry\n        to a condition wait.  The value is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryRelease",
                    "comment_text": "Attempts to set the state to reflect a release in exclusive\n mode.\n\n <p>This method is always invoked by the thread performing release.\n\n <p>The default implementation throws\n {@link UnsupportedOperationException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument. This value is always the one\n        passed to a release method, or the current state value upon\n        entry to a condition wait.  The value is otherwise\n        uninterpreted and can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquireShared",
                    "comment_text": "Attempts to acquire in shared mode. This method should query if\n the state of the object permits it to be acquired in the shared\n mode, and if so to acquire it.\n\n <p>This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread.\n\n <p>The default implementation throws {@link\n UnsupportedOperationException}.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument. This value is always the one\n        passed to an acquire method, or is the value saved on entry\n        to a condition wait.  The value is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryReleaseShared",
                    "comment_text": "Attempts to set the state to reflect a release in shared mode.\n\n <p>This method is always invoked by the thread performing release.\n\n <p>The default implementation throws\n {@link UnsupportedOperationException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument. This value is always the one\n        passed to a release method, or the current state value upon\n        entry to a condition wait.  The value is otherwise\n        uninterpreted and can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isHeldExclusively",
                    "comment_text": "Returns {@code true} if synchronization is held exclusively with\n respect to the current (calling) thread.  This method is invoked\n upon each call to a non-waiting {@link ConditionObject} method.\n (Waiting methods instead invoke {@link #release}.)\n\n <p>The default implementation throws {@link\n UnsupportedOperationException}. This method is invoked\n internally only within {@link ConditionObject} methods, so need\n not be defined if conditions are not used.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquire",
                    "comment_text": "Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once {@link #tryAcquire},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquire} until success.  This method can be used\n to implement method {@link Lock#lock}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquireInterruptibly",
                    "comment_text": "Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once {@link #tryAcquire}, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking {@link #tryAcquire}\n until success or the thread is interrupted.  This method can be\n used to implement method {@link Lock#lockInterruptibly}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryAcquireNanos",
                    "comment_text": "Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquire}, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n {@link #tryAcquire} until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method {@link Lock#tryLock(long, TimeUnit)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "int"
                        },
                        {
                            "name": "nanosTimeout",
                            "comment_text": "the maximum number of nanoseconds to wait",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "release",
                    "comment_text": "Releases in exclusive mode.  Implemented by unblocking one or\n more threads if {@link #tryRelease} returns true.\n This method can be used to implement method {@link Lock#unlock}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument.  This value is conveyed to\n        {@link #tryRelease} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquireShared",
                    "comment_text": "Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once {@link #tryAcquireShared},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquireShared} until success.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquireSharedInterruptibly",
                    "comment_text": "Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n {@link #tryAcquireShared}, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument\n This value is conveyed to {@link #tryAcquireShared} but is\n otherwise uninterpreted and can represent anything\n you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryAcquireSharedNanos",
                    "comment_text": "Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquireShared}, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted or the timeout elapses.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "int"
                        },
                        {
                            "name": "nanosTimeout",
                            "comment_text": "the maximum number of nanoseconds to wait",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "releaseShared",
                    "comment_text": "Releases in shared mode.  Implemented by unblocking one or more\n threads if {@link #tryReleaseShared} returns true.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument.  This value is conveyed to\n        {@link #tryReleaseShared} but is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "int"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThreads",
                    "comment_text": "Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n <p>In this implementation, this operation returns in\n constant time.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasContended",
                    "comment_text": "Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.\n\n <p>In this implementation, this operation returns in\n constant time.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFirstQueuedThread",
                    "comment_text": "Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.\n\n <p>In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.",
                    "return_type": "java.lang.Thread",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isQueued",
                    "comment_text": "Returns true if the given thread is currently queued.\n\n <p>This implementation traverses the queue to determine\n presence of the given thread.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "thread",
                            "comment_text": "the thread",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedPredecessors",
                    "comment_text": "Queries whether any threads have been waiting to acquire longer\n than the current thread.\n\n <p>An invocation of this method is equivalent to (but may be\n more efficient than):\n  <pre> {@code\n getFirstQueuedThread() != Thread.currentThread() &&\n hasQueuedThreads()}</pre>\n\n <p>Note that because cancellations due to interrupts and\n timeouts may occur at any time, a {@code true} return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned {@code false},\n due to the queue being empty.\n\n <p>This method is designed to be used by a fair synchronizer to\n avoid <a href=\"AbstractQueuedSynchronizer#barging\">barging</a>.\n Such a synchronizer's {@link #tryAcquire} method should return\n {@code false}, and its {@link #tryAcquireShared} method should\n return a negative value, if this method returns {@code true}\n (unless this is a reentrant acquire).  For example, the {@code\n tryAcquire} method for a fair, reentrant, exclusive mode\n synchronizer might look like this:\n\n  <pre> {@code\n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }}</pre>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization\n control.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExclusiveQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to an exclusive acquire.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSharedQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to a shared acquire.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code \"State =\"}\n followed by the current value of {@link #getState}, and either\n {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n queue is empty.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "owns",
                    "comment_text": "Queries whether the given ConditionObject\n uses this synchronizer as its lock.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasWaiters",
                    "comment_text": "Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a <tt>true</tt> return\n does not guarantee that a future <tt>signal</tt> will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring of the\n system state, not for synchronization control.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingThreads",
                    "comment_text": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject",
            "interfaces": [
                "java.util.concurrent.locks.Condition",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "Condition implementation for a {@link\n AbstractQueuedSynchronizer} serving as the basis of a {@link\n Lock} implementation.\n\n <p>Method documentation for this class describes mechanics,\n not behavioral specifications from the point of view of Lock\n and Condition users. Exported versions of this class will in\n general need to be accompanied by documentation describing\n condition semantics that rely on those of the associated\n <tt>AbstractQueuedSynchronizer</tt>.\n\n <p>This class is Serializable, but all fields are transient,\n so deserialized conditions have no waiters.",
            "since": "",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractQueuedSynchronizer.ConditionObject",
                    "comment_text": "Creates a new <tt>ConditionObject</tt> instance.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "signal",
                    "comment_text": "Moves the longest-waiting thread, if one exists, from the\n wait queue for this condition to the wait queue for the\n owning lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "signalAll",
                    "comment_text": "Moves all threads from the wait queue for this condition to\n the wait queue for the owning lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitUninterruptibly",
                    "comment_text": "Implements uninterruptible condition wait.\n <ol>\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n </ol>",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Implements interruptible condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled or interrupted.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n </ol>",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "awaitNanos",
                    "comment_text": "Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled, interrupted, or timed out.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n </ol>",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "nanosTimeout",
                            "comment_text": "",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "awaitUntil",
                    "comment_text": "Implements absolute timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled, interrupted, or timed out.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n <li> If timed out while blocked in step 4, return false, else true.\n </ol>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "deadline",
                            "comment_text": "",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled, interrupted, or timed out.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n <li> If timed out while blocked in step 4, return false, else true.\n </ol>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "hasWaiters",
                    "comment_text": "Queries whether any threads are waiting on this condition.\n Implements {@link AbstractQueuedSynchronizer#hasWaiters}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting on\n this condition.\n Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingThreads",
                    "comment_text": "Returns a collection containing those threads that may be\n waiting on this Condition.\n Implements {@link AbstractQueuedSynchronizer#getWaitingThreads}.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
            "comment_text": "A version of {@link AbstractQueuedSynchronizer} in\n which synchronization state is maintained as a <tt>long</tt>.\n This class has exactly the same structure, properties, and methods\n as <tt>AbstractQueuedSynchronizer</tt> with the exception\n that all state-related parameters and results are defined\n as <tt>long</tt> rather than <tt>int</tt>. This class\n may be useful when creating synchronizers such as\n multilevel locks and barriers that require\n 64 bits of state.\n\n <p>See {@link AbstractQueuedSynchronizer} for usage\n notes and examples.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractQueuedLongSynchronizer",
                    "comment_text": "Creates a new <tt>AbstractQueuedLongSynchronizer</tt> instance\n with initial synchronization state of zero.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "getState",
                    "comment_text": "Returns the current value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> read.",
                    "return_type": "long",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "setState",
                    "comment_text": "Sets the value of synchronization state.\n This operation has memory semantics of a <tt>volatile</tt> write.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "newState",
                            "comment_text": "the new state value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "compareAndSetState",
                    "comment_text": "Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.\n This operation has memory semantics of a <tt>volatile</tt> read\n and write.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "expect",
                            "comment_text": "the expected value",
                            "type": "long"
                        },
                        {
                            "name": "update",
                            "comment_text": "the new value",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquire",
                    "comment_text": "Attempts to acquire in exclusive mode. This method should query\n if the state of the object permits it to be acquired in the\n exclusive mode, and if so to acquire it.\n\n <p>This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread. This can be used\n to implement method {@link Lock#tryLock()}.\n\n <p>The default\n implementation throws {@link UnsupportedOperationException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument. This value is always the one\n        passed to an acquire method, or is the value saved on entry\n        to a condition wait.  The value is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryRelease",
                    "comment_text": "Attempts to set the state to reflect a release in exclusive\n mode.\n\n <p>This method is always invoked by the thread performing release.\n\n <p>The default implementation throws\n {@link UnsupportedOperationException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument. This value is always the one\n        passed to a release method, or the current state value upon\n        entry to a condition wait.  The value is otherwise\n        uninterpreted and can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryAcquireShared",
                    "comment_text": "Attempts to acquire in shared mode. This method should query if\n the state of the object permits it to be acquired in the shared\n mode, and if so to acquire it.\n\n <p>This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread.\n\n <p>The default implementation throws {@link\n UnsupportedOperationException}.",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument. This value is always the one\n        passed to an acquire method, or is the value saved on entry\n        to a condition wait.  The value is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "tryReleaseShared",
                    "comment_text": "Attempts to set the state to reflect a release in shared mode.\n\n <p>This method is always invoked by the thread performing release.\n\n <p>The default implementation throws\n {@link UnsupportedOperationException}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument. This value is always the one\n        passed to a release method, or the current state value upon\n        entry to a condition wait.  The value is otherwise\n        uninterpreted and can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isHeldExclusively",
                    "comment_text": "Returns {@code true} if synchronization is held exclusively with\n respect to the current (calling) thread.  This method is invoked\n upon each call to a non-waiting {@link ConditionObject} method.\n (Waiting methods instead invoke {@link #release}.)\n\n <p>The default implementation throws {@link\n UnsupportedOperationException}. This method is invoked\n internally only within {@link ConditionObject} methods, so need\n not be defined if conditions are not used.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquire",
                    "comment_text": "Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once {@link #tryAcquire},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquire} until success.  This method can be used\n to implement method {@link Lock#lock}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquireInterruptibly",
                    "comment_text": "Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once {@link #tryAcquire}, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking {@link #tryAcquire}\n until success or the thread is interrupted.  This method can be\n used to implement method {@link Lock#lockInterruptibly}.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryAcquireNanos",
                    "comment_text": "Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquire}, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n {@link #tryAcquire} until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method {@link Lock#tryLock(long, TimeUnit)}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquire} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "long"
                        },
                        {
                            "name": "nanosTimeout",
                            "comment_text": "the maximum number of nanoseconds to wait",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "release",
                    "comment_text": "Releases in exclusive mode.  Implemented by unblocking one or\n more threads if {@link #tryRelease} returns true.\n This method can be used to implement method {@link Lock#unlock}.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument.  This value is conveyed to\n        {@link #tryRelease} but is otherwise uninterpreted and\n        can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquireShared",
                    "comment_text": "Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once {@link #tryAcquireShared},\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking {@link\n #tryAcquireShared} until success.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "acquireSharedInterruptibly",
                    "comment_text": "Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n {@link #tryAcquireShared}, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument\n This value is conveyed to {@link #tryAcquireShared} but is\n otherwise uninterpreted and can represent anything\n you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "tryAcquireSharedNanos",
                    "comment_text": "Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once {@link\n #tryAcquireShared}, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking {@link #tryAcquireShared} until success or the thread\n is interrupted or the timeout elapses.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the acquire argument.  This value is conveyed to\n        {@link #tryAcquireShared} but is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "long"
                        },
                        {
                            "name": "nanosTimeout",
                            "comment_text": "the maximum number of nanoseconds to wait",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": "if the current thread is interrupted"
                        }
                    ]
                },
                {
                    "name": "releaseShared",
                    "comment_text": "Releases in shared mode.  Implemented by unblocking one or more\n threads if {@link #tryReleaseShared} returns true.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "arg",
                            "comment_text": "the release argument.  This value is conveyed to\n        {@link #tryReleaseShared} but is otherwise uninterpreted\n        and can represent anything you like.",
                            "type": "long"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedThreads",
                    "comment_text": "Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n <p>In this implementation, this operation returns in\n constant time.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasContended",
                    "comment_text": "Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.\n\n <p>In this implementation, this operation returns in\n constant time.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getFirstQueuedThread",
                    "comment_text": "Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.\n\n <p>In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.",
                    "return_type": "java.lang.Thread",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "isQueued",
                    "comment_text": "Returns true if the given thread is currently queued.\n\n <p>This implementation traverses the queue to determine\n presence of the given thread.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "thread",
                            "comment_text": "the thread",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasQueuedPredecessors",
                    "comment_text": "Queries whether any threads have been waiting to acquire longer\n than the current thread.\n\n <p>An invocation of this method is equivalent to (but may be\n more efficient than):\n  <pre> {@code\n getFirstQueuedThread() != Thread.currentThread() &&\n hasQueuedThreads()}</pre>\n\n <p>Note that because cancellations due to interrupts and\n timeouts may occur at any time, a {@code true} return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned {@code false},\n due to the queue being empty.\n\n <p>This method is designed to be used by a fair synchronizer to\n avoid <a href=\"AbstractQueuedSynchronizer#barging\">barging</a>.\n Such a synchronizer's {@link #tryAcquire} method should return\n {@code false}, and its {@link #tryAcquireShared} method should\n return a negative value, if this method returns {@code true}\n (unless this is a reentrant acquire).  For example, the {@code\n tryAcquire} method for a fair, reentrant, exclusive mode\n synchronizer might look like this:\n\n  <pre> {@code\n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }}</pre>",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization\n control.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExclusiveQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to an exclusive acquire.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getSharedQueuedThreads",
                    "comment_text": "Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as {@link #getQueuedThreads} except that it only returns\n those threads waiting due to a shared acquire.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "toString",
                    "comment_text": "Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code \"State =\"}\n followed by the current value of {@link #getState}, and either\n {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n queue is empty.",
                    "return_type": "java.lang.String",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "owns",
                    "comment_text": "Queries whether the given ConditionObject\n uses this synchronizer as its lock.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "hasWaiters",
                    "comment_text": "Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a <tt>true</tt> return\n does not guarantee that a future <tt>signal</tt> will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring of the\n system state, not for synchronization control.",
                    "return_type": "int",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingThreads",
                    "comment_text": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.",
                    "return_type": "java.util.Collection",
                    "parameters": [
                        {
                            "name": "condition",
                            "comment_text": "the condition",
                            "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
                        }
                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject",
            "interfaces": [
                "java.util.concurrent.locks.Condition",
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "Condition implementation for a {@link\n AbstractQueuedLongSynchronizer} serving as the basis of a {@link\n Lock} implementation.\n\n <p>Method documentation for this class describes mechanics,\n not behavioral specifications from the point of view of Lock\n and Condition users. Exported versions of this class will in\n general need to be accompanied by documentation describing\n condition semantics that rely on those of the associated\n <tt>AbstractQueuedLongSynchronizer</tt>.\n\n <p>This class is Serializable, but all fields are transient,\n so deserialized conditions have no waiters.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractQueuedLongSynchronizer.ConditionObject",
                    "comment_text": "Creates a new <tt>ConditionObject</tt> instance.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "signal",
                    "comment_text": "Moves the longest-waiting thread, if one exists, from the\n wait queue for this condition to the wait queue for the\n owning lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "signalAll",
                    "comment_text": "Moves all threads from the wait queue for this condition to\n the wait queue for the owning lock.",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "awaitUninterruptibly",
                    "comment_text": "Implements uninterruptible condition wait.\n <ol>\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n </ol>",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Implements interruptible condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled or interrupted.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n </ol>",
                    "return_type": "void",
                    "parameters": [

                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "awaitNanos",
                    "comment_text": "Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled, interrupted, or timed out.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n </ol>",
                    "return_type": "long",
                    "parameters": [
                        {
                            "name": "nanosTimeout",
                            "comment_text": "",
                            "type": "long"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "awaitUntil",
                    "comment_text": "Implements absolute timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled, interrupted, or timed out.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n <li> If timed out while blocked in step 4, return false, else true.\n </ol>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "deadline",
                            "comment_text": "",
                            "type": "java.util.Date"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "await",
                    "comment_text": "Implements timed condition wait.\n <ol>\n <li> If current thread is interrupted, throw InterruptedException.\n <li> Save lock state returned by {@link #getState}.\n <li> Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException if it fails.\n <li> Block until signalled, interrupted, or timed out.\n <li> Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n <li> If interrupted while blocked in step 4, throw InterruptedException.\n <li> If timed out while blocked in step 4, return false, else true.\n </ol>",
                    "return_type": "boolean",
                    "parameters": [
                        {
                            "name": "time",
                            "comment_text": "",
                            "type": "long"
                        },
                        {
                            "name": "unit",
                            "comment_text": "",
                            "type": "java.util.concurrent.TimeUnit"
                        }
                    ],
                    "throws": [
                        {
                            "name": "java.lang.InterruptedException",
                            "comment_text": ""
                        }
                    ]
                },
                {
                    "name": "hasWaiters",
                    "comment_text": "Queries whether any threads are waiting on this condition.\n Implements {@link AbstractQueuedLongSynchronizer#hasWaiters}.",
                    "return_type": "boolean",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitQueueLength",
                    "comment_text": "Returns an estimate of the number of threads waiting on\n this condition.\n Implements {@link AbstractQueuedLongSynchronizer#getWaitQueueLength}.",
                    "return_type": "int",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getWaitingThreads",
                    "comment_text": "Returns a collection containing those threads that may be\n waiting on this Condition.\n Implements {@link AbstractQueuedLongSynchronizer#getWaitingThreads}.",
                    "return_type": "java.util.Collection",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        },
        {
            "name": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
            "interfaces": [
                "java.io.Serializable"
            ],
            "superclass": "java.lang.Object",
            "comment_text": "A synchronizer that may be exclusively owned by a thread.  This\n class provides a basis for creating locks and related synchronizers\n that may entail a notion of ownership.  The\n <tt>AbstractOwnableSynchronizer</tt> class itself does not manage or\n use this information. However, subclasses and tools may use\n appropriately maintained values to help control and monitor access\n and provide diagnostics.",
            "since": "1.6",
            "see": [

            ],
            "constructors": [
                {
                    "name": "AbstractOwnableSynchronizer",
                    "comment_text": "Empty constructor for use by subclasses.",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ],
            "fields": [

            ],
            "methods": [
                {
                    "name": "setExclusiveOwnerThread",
                    "comment_text": "Sets the thread that currently owns exclusive access. A\n <tt>null</tt> argument indicates that no thread owns access.\n This method does not otherwise impose any synchronization or\n <tt>volatile</tt> field accesses.",
                    "return_type": "void",
                    "parameters": [
                        {
                            "name": "t",
                            "comment_text": "",
                            "type": "java.lang.Thread"
                        }
                    ],
                    "throws": [

                    ]
                },
                {
                    "name": "getExclusiveOwnerThread",
                    "comment_text": "Returns the thread last set by\n <tt>setExclusiveOwnerThread</tt>, or <tt>null</tt> if never\n set.  This method does not otherwise impose any synchronization\n or <tt>volatile</tt> field accesses.",
                    "return_type": "java.lang.Thread",
                    "parameters": [

                    ],
                    "throws": [

                    ]
                }
            ]
        }
    ]
}
